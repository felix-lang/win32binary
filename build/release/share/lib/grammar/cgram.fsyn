#line 687 "C:/projects/felix/src/packages/grammar.fdoc"
//$ Embed C into Felix using extern "C" { } style.
//$ Direct name binding.
//$ WORK IN PROGRESS, NOT OPERATIONAL!
syntax cgram {
  stmt := "extern" '"C"' cstatement =># '`(ast_comment ,_sr "C code ..")';
  stmt := "extern" '"C"' "{" cstatement+ "}" =># '`(ast_comment ,_sr "C code ..")';
  cstatement := external_declaration;
  // this only for testing
  satom := "extern" '"C"' "(" expression ")" =># "_4";


TYPE_NAME := sname ; // special, needs to lookup typedef names

primary_expression
	:= sname             =># "_1"
	| sliteral           =># "_1"
	| '(' expression ')' =># "_2"
	;

postfix_expression
	:= primary_expression =># "_1"
	| postfix_expression '[' expression ']' =># "`(subscript ,_sr ,_1 ,_3)"
	| postfix_expression '(' ')'            =># "`(apply ,_sr ,_1 ())"
	| postfix_expression '(' argument_expression_list ')' =># "`(ast_apply ,_sr ,(_1 (reverse _3)))"
	| postfix_expression '.' sname                        =># "`(ast_apply ,_sr (,_3 ,_1))"
	| postfix_expression '->' sname                       =># "`(ast_arrow ,_sr (,_1 ,_3))"
	| postfix_expression '++'                             =># "`(uop ,_sr 'postincr' ,_1)"
	| postfix_expression '--'                             =># "`(uop ,_sr 'postdecr' ,_1)"
	;

argument_expression_list
	:= assignment_expression =># "`(,_1)"
	| argument_expression_list ',' assignment_expression =># "(cons _3 _1)"
	;

unary_expression
	:= postfix_expression =># "_1"
	| unary_operator cast_expression =># "(prefix _2)"
	| 'sizeof' '(' type_name ')' =># "`(sizeoftype ,_sr ,_3)" // FIXME, WRONG!
	;

unary_operator
	:= '&' =># "'addressof"
	| '*'  =># "'deref"
	| '+'  =># "'pos"
	| '-'  =># "'neg"
	| '~'  =># "'compl"
	| '!'  =># "'excl"
  | '++' =># "'preincr"
  | '--' =># "'postincr"
  | 'sizeof' =># "'sizeof"
	;

cast_expression
	:= unary_expression =># "_1"
	| '(' type_name ')' cast_expression =># "`(ast_coercion ,_sr (,_3 ,_2))" // FIXME, WRONG!
	;

multiplicative_expression
	:= cast_expression =># "_1"
	| multiplicative_expression '*' cast_expression =># "(infix 'mul)"
	| multiplicative_expression '/' cast_expression =># "(infix 'div)"
	| multiplicative_expression '%' cast_expression =># "(infix 'mod)"
	;

additive_expression
	:= multiplicative_expression =># "_1"
	| additive_expression '+' multiplicative_expression =># "(infix 'add)"
	| additive_expression '-' multiplicative_expression =># "(infix 'sub)"
	;

shift_expression
	:= additive_expression =># "_1"
	| shift_expression '<<' additive_expression =># "(infix 'shl)"
	| shift_expression '>>' additive_expression =># "(infix 'shr)"
	;

relational_expression
	:= shift_expression =># "_1"
	| relational_expression '<' shift_expression =># "(infix 'lt)"
	| relational_expression '>' shift_expression =># "(infix 'gt)"
	| relational_expression '<=' shift_expression =># "(infix 'le)"
	| relational_expression '>=' shift_expression =># "(infix 'ge)"
	;

equality_expression
	:= relational_expression =># "_1"
	| equality_expression '==' relational_expression =># "(infix 'eq)"
	| equality_expression '!=' relational_expression =># "(infix 'ne)"
	;

and_expression
	:= equality_expression =># "_1"
	| and_expression '&' equality_expression =># "(infix 'band)"
	;

exclusive_or_expression
	:= and_expression =># "_1"
	| exclusive_or_expression '^' and_expression =># "(infix 'bxor)"
	;

inclusive_or_expression
	:= exclusive_or_expression =># "_1"
	| inclusive_or_expression '|' exclusive_or_expression =># "(infix 'bor)"
	;

logical_and_expression
	:= inclusive_or_expression =># "_1"
	| logical_and_expression '&&' inclusive_or_expression =># "(infix 'land)"
	;

logical_or_expression
	:= logical_and_expression =># "_1"
	| logical_or_expression '||' logical_and_expression =># "(infix 'lor))"
	;

conditional_expression
	:= logical_or_expression =># "_1"
	| logical_or_expression '?' expression ':' conditional_expression =># "`(ast_cond ,_sr (,_1 ,_3 ,_5))"
	;

assignment_expression
	:= conditional_expression =># "_1"
	| unary_expression assignment_operator assignment_expression =># "(infix _2)"
	;

assignment_operator
	:= '=' =># "'_set"
	| '*=' =># "'muleq"
	| '/=' =># "'diveq"
	| '%=' =># "'modeq"
	| '+=' =># "'addeq"
	| '-=' =># "'subeq"
	| '<<=' =># "'lsheq"
	| '>>=' =># "'rsheq"
	| '&=' =># "'bandeq"
	| '^=' =># "'bxoreq"
	| '|=' =># "'boreq"
	;

expression
	:= assignment_expression =># "_1"
	| expression ',' assignment_expression =># "(infix 'comma)"
	;

declaration
	:= declaration_specifiers ';'
	| declaration_specifiers init_declarator_list ';'
  | 'typedef' type_specifier declarator ';'
	;

declaration_specifiers
	:= storage_class_specifier
	| storage_class_specifier declaration_specifiers
	| type_specifier
	| type_specifier declaration_specifiers
	| type_qualifier
	| type_qualifier declaration_specifiers
	;

init_declarator_list
	:= init_declarator
	| init_declarator_list ',' init_declarator
	;

init_declarator
	:= declarator
	| declarator '=' initializer
	;

storage_class_specifier
	:=
	| 'extern'
	| 'static'
	| 'auto'
	| 'register'
	;

type_specifier
	:= 'void'
	| 'char'
	| 'short'
	| 'int'
	| 'long'
	| 'float'
	| 'double'
	| 'signed'
	| 'unsigned'
	| struct_or_union_specifier
	| enum_specifier
//	| TYPE_NAME
	;

struct_or_union_specifier
	:= struct_or_union sname '{' struct_declaration_list '}'
	| struct_or_union '{' struct_declaration_list '}'
	| struct_or_union sname
	;

struct_or_union
	:= 'struct'
	| 'union'
	;

struct_declaration_list
	:= struct_declaration
	| struct_declaration_list struct_declaration
	;

struct_declaration
	:= specifier_qualifier_list struct_declarator_list ';'
	;

specifier_qualifier_list
	:= type_specifier specifier_qualifier_list
	| type_specifier
	| type_qualifier specifier_qualifier_list
	| type_qualifier
	;

struct_declarator_list
	:= struct_declarator
	| struct_declarator_list ',' struct_declarator
	;

struct_declarator
	:= declarator
	| ':' constant_expression
	| declarator ':' constant_expression
	;

enum_specifier
	:= 'enum' '{' enumerator_list '}'
	| 'enum' sname '{' enumerator_list '}'
	| 'enum' sname
	;

enumerator_list
	:= enumerator
	| enumerator_list ',' enumerator
	;

enumerator
	:= sname
	| sname '=' constant_expression
	;

// Felix doesn't support const or volatile
type_qualifier
	:= 'const'
	| 'volatile'
	;

type_qualifier_list
	:= type_qualifier
	| type_qualifier_list type_qualifier
	;

declarator
	:= pointer direct_declarator =># "`(ast_ref ,_sr ,_2)"
	| direct_declarator =># "_1"
	;

direct_declarator
	:= sname                        =># "_1"
	| '(' declarator ')'            =># "_2"
	| direct_declarator '[' constant_expression ']' =># "`(array ,_sr ,_1 ,_3)"
	| direct_declarator '[' ']'                     =># "`(array ,_sr ,_1 ())"
	| direct_declarator '(' parameter_type_list ')' =># "`(fun ,_sr ,_1 ,(reverse _3))"
	| direct_declarator '(' ')'                     =># "`(fun ,_sr ,_1 ())"
	;

pointer
	:= '*'                                          =># "`(ptr)"
	| '*' type_qualifier_list                       =># "`(ptr)"
	| '*' pointer                                   =># "(cons 'ptr ,_2)"
	| '*' type_qualifier_list pointer               =># "(cons 'ptr ,_3)"
	;

parameter_type_list
	:= parameter_list              =># "_1"
	| parameter_list ',' '...'     =># "(cons 'ellipsis _1)"
	;

parameter_list
	:= parameter_declaration                   =># "`(,_1)"
	| parameter_list ',' parameter_declaration =># "(cons _3 _1)"
	;

parameter_declaration
	:= declaration_specifiers declarator         =># "`(,_1 ,_2)"
	| declaration_specifiers abstract_declarator =># "`(,_1 ,_2)"
	| declaration_specifiers                     =># "`(,_1 ())"
	;

identifier_list
	:= sname                                =># "`(,_1)"
	| identifier_list ',' sname             =># "(cons _3 _1)"
	;

type_name
	:= specifier_qualifier_list                    =># "`(,_1 ())"
	| specifier_qualifier_list abstract_declarator =># "`(,_1 ,_2)"
	;

abstract_declarator
	:= pointer
	| direct_abstract_declarator
	| pointer direct_abstract_declarator
	;

direct_abstract_declarator
	:= '(' abstract_declarator ')'
	| '[' ']'
	| '[' constant_expression ']'
	| direct_abstract_declarator '[' ']'
	| direct_abstract_declarator '[' constant_expression ']'
	| '(' ')'
	| '(' parameter_type_list ')'
	| direct_abstract_declarator '(' ')'
	| direct_abstract_declarator '(' parameter_type_list ')'
	;

initializer
	:= assignment_expression
	| '{' initializer_list '}'
	| '{' initializer_list ',' '}'
	;

initializer_list
	:= initializer
	| initializer_list ',' initializer
	;

statement
	:= labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

labeled_statement
	:= sname ':' statement
	| 'case' constant_expression ':' statement
	| 'default' ':' statement
	;

compound_statement
	:= '{' '}'
	| '{' statement_list '}'
	| '{' declaration_list '}'
	| '{' declaration_list statement_list '}'
	;

declaration_list
	:= declaration
	| declaration_list declaration
	;

statement_list
	:= statement
	| statement_list statement
	;

expression_statement
	:= ';'
	| expression ';'
	;

selection_statement
	:= 'if' '(' expression ')' statement
	| 'if' '(' expression ')' statement 'else' statement
	| 'switch' '(' expression ')' statement
	;

iteration_statement
	:= 'while' '(' expression ')' statement
	| 'do' statement 'while' '(' expression ')' ';'
	| 'for' '(' expression_statement expression_statement ')' statement
	| 'for' '(' expression_statement expression_statement expression ')' statement
	;

jump_statement
	:= 'goto' sname ';'
	| 'continue' ';'
	| 'break' ';'
	| 'return' ';'
	| 'return' expression ';'
	;

external_declaration
	:= function_definition
	| declaration
	;

function_definition
	:= declaration_specifiers declarator declaration_list compound_statement
	| declaration_specifiers declarator compound_statement
	| declarator declaration_list compound_statement
	| declarator compound_statement
	;
}
