#line 261 "C:/projects/felix/src/packages/stl.fdoc"

include "stl/stl";
class Stl_MultiSet[t]
  {
    requires Cxx_headers::set;
    type stl_multiset = "::std::multiset<?1>";
    type stl_multiset_iterator = "::std::multiset<?1>::iterator";
    type stl_multiset_reverse_iterator = "::std::multiset<?1>::reverse_iterator";
    fun create : unit -> stl_multiset = "(FLX_GXX_PARSER_HACK std::multiset<?1>())";
    proc insert : stl_multiset * t = "$1.insert($2);";
    fun find : stl_multiset * t ->  stl_multiset_iterator = "$1.find($2)";
    fun mem : stl_multiset * t -> bool = "$1.find($2) != $1.end()";
// Stl_MultiSet
  instance Eq[stl_multiset] {
    fun == : stl_multiset * stl_multiset -> bool = "$1==$2";
  }
  instance Container[stl_multiset,t] {
    fun len: stl_multiset -> size = "$1.size()";
    fun empty: stl_multiset -> bool = "$1.empty()";
  }
  instance Sequence[stl_multiset,stl_multiset_iterator,t] {
    fun begin : stl_multiset-> stl_multiset_iterator= "$1.begin()";
    fun end : stl_multiset-> stl_multiset_iterator= "$1.end()";
    proc erase : stl_multiset * stl_multiset_iterator = "$1.erase($1);";
    proc erase_between : stl_multiset * stl_multiset_iterator * stl_multiset_iterator = "$1.erase($1,$2);";
    proc clear : stl_multiset = "$1.clear();";
  }
  instance Reversible_Sequence[stl_multiset,stl_multiset_iterator,stl_multiset_reverse_iterator,t] {
    fun rbegin : stl_multiset-> stl_multiset_reverse_iterator= "$1.rbegin()";
    fun rend : stl_multiset-> stl_multiset_reverse_iterator= "$1.rend()";
  }

// Stl_MultiSet iterator
  instance Eq[stl_multiset_iterator] {
    fun == : stl_multiset_iterator * stl_multiset_iterator -> bool = "$1==$2";
  }
  instance Tord[stl_multiset_iterator] {
    fun < : stl_multiset_iterator * stl_multiset_iterator -> bool = "$1<$2";
  }
  instance Iterator[stl_multiset_iterator,t] {
    fun deref : stl_multiset_iterator ->  t  = "*(#0*)(void*)&*$1";
  }
  instance Forward[stl_multiset_iterator] {
    fun succ: stl_multiset_iterator -> stl_multiset_iterator = "$1+1";
    proc pre_incr : &stl_multiset_iterator = "++*$1;";
    proc post_incr : &stl_multiset_iterator = "++*$1;";
  }
  instance Forward_iterator[stl_multiset_iterator,t] {}
  instance Bidirectional[stl_multiset_iterator] {
    fun pred: stl_multiset_iterator -> stl_multiset_iterator = "$1-1;";
    proc pre_decr : &stl_multiset_iterator = "--*$1;";
    proc post_decr : &stl_multiset_iterator = "--*$1;";
  }
  instance Bidirectional_iterator[stl_multiset_iterator,t] {}

// Stl_MultiSet reverse iterator
  instance Eq[stl_multiset_reverse_iterator] {
    fun == : stl_multiset_reverse_iterator * stl_multiset_reverse_iterator -> bool = "$1==$2";
  }
  instance Tord[stl_multiset_reverse_iterator] {
    fun < : stl_multiset_reverse_iterator * stl_multiset_reverse_iterator -> bool = "$1<$2";
  }
  instance Iterator[stl_multiset_reverse_iterator,t] {
    fun deref : stl_multiset_reverse_iterator ->  t  = "*(#0*)(void*)&*$1";
  }
  instance Forward[stl_multiset_reverse_iterator] {
    fun succ: stl_multiset_reverse_iterator -> stl_multiset_reverse_iterator = "$1+1";
    proc pre_incr : &stl_multiset_reverse_iterator = "++*$1;";
    proc post_incr : &stl_multiset_reverse_iterator = "++*$1;";
  }
  instance Forward_iterator[stl_multiset_reverse_iterator,t] {}
  instance Bidirectional[stl_multiset_reverse_iterator] {
    fun pred: stl_multiset_reverse_iterator -> stl_multiset_reverse_iterator = "$1-1;";
    proc pre_decr : &stl_multiset_reverse_iterator = "--*$1;";
    proc post_decr : &stl_multiset_reverse_iterator = "--*$1;";
  }
  instance Bidirectional_iterator[stl_multiset_reverse_iterator,t] {}

}

open Stl_MultiSet;
open[t] Reversible_Sequence[
  Stl_MultiSet::stl_multiset[t],
  Stl_MultiSet::stl_multiset_iterator[t],
  Stl_MultiSet::stl_multiset_reverse_iterator[t],t];
open[t] Bidirectional_iterator[Stl_MultiSet::stl_multiset_iterator[t],t];
open[t] Bidirectional_iterator[Stl_MultiSet::stl_multiset_reverse_iterator[t],t];


