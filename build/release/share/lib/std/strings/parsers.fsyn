#line 72 "C:/projects/felix/src/packages/parsers.fdoc"

syntax parsers {
  priority
    palt_pri <
    pseq_pri <
    ppostfix_pri <
    patom_pri
  ;

  //$ Define a non-terminal
  stmt := "parser" sdeclname "=" sparser[palt_pri] ";" =>#
    """
    `(ast_var_decl ,_sr ,(first _2) ,(second _2) none (some ,_4))
    """;

  //$ Define a non-terminal
  stmt := "parser" sdeclname ":" stypeexpr "=" sparser[palt_pri] ";" =>#
    """
    `(ast_var_decl ,_sr ,(first _2) ,(second _2) (some ,_4) (some ,_6))
    """;


  //$ Inline regular expression.
  //$ Can be used anywhere in Felix code.
  //$ Returns a a value of type Regdef::regex.
  x[sapplication_pri] := "parse" "(" sparser[palt_pri] ")" =># "_3";

  //$ Alternatives.
  sparser[palt_pri] := sparser[>palt_pri] ("|" sparser[>palt_pri])+ =>#
    """`(ast_apply ,_sr ( ,(qnoi 'BaseChips 'tryall_list)
      (ast_apply ,_sr (,(noi 'list) ,(cons _1 (map second _2))))))"""
  ;

  //$ Sequential concatenation.
  sparser[pseq_pri] := sparser[>pseq_pri] (sparser[>pseq_pri])+ =>#
    """`(ast_apply ,_sr ( ,(qnoi 'BaseChips 'pipeline_list)
      (ast_apply ,_sr (,(noi 'list) ,(cons _1 _2)))))"""
  ;

/////////
// THESE COMBINATORS SEEM USELESS BECAUSE THERE IS NO WELL DEFINED
// RESULT.
//
// That is, when parsing, they're not defined to say, push a list
// onto the parser stack.
//
// They can be used by pushing a mark before and popping to the mark
// to do a reduce. Works fine. But depends on being able to put
// a mark on the stack, which means the type of terms on the stack
// has to include a mark term.

  //$ Postfix star (*).
  //$ Kleene closure: zero or more repetitions.
  sparser[ppostfix_pri] := sparser[ppostfix_pri] "*" =>#
    """`(ast_apply ,_sr ( ,(qnoi 'BaseChips 'zeroormore_matcher) ,_1 ))"""
  ;

  //$ Postfix plus (+).
  //$ One or more repetitions.
  sparser[ppostfix_pri] := sparser[ppostfix_pri] "+" =>#
    """`(ast_apply ,_sr ( ,(qnoi 'BaseChips 'oneormore_matcher) ,_1 ))"""
  ;

  //$ Postfix question mark (?).
  //$ Optional. Zero or one repetitions.
  sparser[ppostfix_pri] := sparser[ppostfix_pri] "?" =>#
    """`(ast_apply ,_sr (,(qnoi 'BaseChips 'optional) ,_1 ))"""
  ;
// end suspect combinators
/////////

  //$ Group psuedo function.
  sparser[patom_pri] := "(" sparser[palt_pri] ")" =># '_2';

  sparser[patom_pri] :=  "{" sexpr "}" =># "_2";

  //$ Identifier.
  sparser[patom_pri] := sname=># "`(ast_name ,_sr ,_1 ())";

  //$ Indirection
  //$ For example, the LHS of a regdef binder.
  sparser[patom_pri] := "&" sname=># """
    `(ast_apply ,_sr
      (
        ,(qnoi 'BaseChips 'deref_first_read)
        (ast_ref ,_sr ,(nos _2))
      )
    )
  """;

}

syntax Combw {
  x[ssetintersection_pri] := x[ssetintersection_pri] "#>" x[>ssetintersection_pri] =># "(infix 'combw)";
  x[ssetunion_pri] := x[ssetunion_pri] "#|" x[>ssetunion_pri] =># "(infix 'alts)";
}
