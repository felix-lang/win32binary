#line 218 "C:/cygwin64/home/skaller/felix/src/packages/core_type_constructors.fdoc"

union slice[T] =
  | Slice_all
  | Slice_from of T
  | Slice_from_counted of T * T /* second arg is count */
  | Slice_to_incl of T
  | Slice_to_excl of T
  | Slice_range_incl of T * T
  | Slice_range_excl of T * T
  | Slice_one of T
;

fun \in[T with Integer[T]] (x:T, s:slice[T]) =>
  match s with
  | #Slice_all => true
  | Slice_from i => x >= i
  | Slice_from_counted (i,n) => x >= i and x < i+n
  | Slice_to_incl j => x <= j
  | Slice_to_excl j => x < j
  | Slice_range_incl (i,j) => x >= i and x <= j
  | Slice_range_excl (i,j) => x >= i and x < j
  | Slice_one i => i == x
;


gen iterator[T with Integer[T]] (s:slice[T]) =>
  match s with
  | Slice_one x => { yield Some x; return None[T]; }
  | Slice_range_incl (first, last) => slice_range_incl first last
  | Slice_range_excl (first, last) => slice_range_excl first last
  | Slice_to_incl (last) => slice_range_incl #zero[T] last
  | Slice_to_excl (last) => slice_range_excl #zero[T] last
  | Slice_from (first) => slice_from first
  | Slice_from_counted (first, count) => slice_from_counted first count
  | #Slice_all => slice_from #zero[T]
  endmatch
;

// Note: guarrantees no overflow
// handles all cases for all integers correctly
// produces nothing if first > last
gen slice_range_incl[T with Integer[T]] (first:T) (last:T) () = {
  var i = first;
  while i < last do
    yield Some i;
    i = i + #one[T];
  done
  if i == last do yield Some i; done
  return None[T];
}

gen slice_range_excl[T with Integer[T]] (first:T) (limit:T) () = {
  var i = first;
  while i < limit do
    yield Some i;
    i = i + #one[T];
  done
  return None[T];
}


// Note: guarrantees no overflow if first + count - 1
// is in range of the type
// Terminates after count values emitted
// provided overflow doesn't throw.
// Well defined on unsigned types (just wraps around)
// NOTE: result may not be monotonic increasing because of wrap around
gen slice_from_counted[T with Integer[T]] (first:T) (count:T) () = {
  var k = count;
  while k > #zero[T] do
    yield Some (first + (count - k));
    k = k - #one[T];
  done
  return None[T];
}

// Ensures monotonic increasing by terminating on wrap around
gen slice_from[T with Integer[T]] (var first:T) () = {
  var last = first;
  lab: while true do
    yield Some first;
    last = first;
    first = first + #one[T];
    if first < last break lab;
  done
  return None[T];
}



// hack so for in f do .. done will work too
gen iterator[t] (f:1->opt[t]) => f;

// slice index calculator

// Given length n, begin b and end e indicies
// normalise so either 0 <= b <= e <= n or m = 0
//
// if m = 0 ignore b,e and use empty slice
// otherwise return a slice starting at b inclusive
// and ending at e exclusive, length m > 0

// Normalised form allows negative indices.
// However out of range indices are trimmed back:
// the calculation is NOT modular.

fun cal_slice (n:int, var b:int, var e:int) = {
  if b<0 do b = b + n; done
  if b<0 do b = 0; done
  if b>=n do b = n; done
  // assert 0 <= b <= n (valid index or one past end)
  if e<0 do  e = e + n; done
  if e<0 do  e = 0; done
  if e>=n do e = n; done
  // assert 0 <= e <= n (valid index or one pas end)
  var m = e - b;
  if m<0 do m = 0; done
  // assert 0 <= m <= n (if m > 0 then b < e else m = 0)
  return b,e,m;
  // assert m = 0 or  0 <= b <= e <= n and 0 < m < n
}

union gslice[T] =
  | GSlice of slice[T]
  | GSSList of list[gslice[T]]
  | GSIList of list[T]
  | GSIter of 1 -> opt[T]
  | GSMap of (T -> T) * gslice[T]
;

gen gslist_iterator[T with Integer[T]] (ls: list[gslice[T]]) () : opt[T] =
{
  var current = ls;
next:>
  match current with
  | #Empty => return None[T];
  | Cons (gs, tail) =>
    for v in gs do yield Some v; done
    current = tail;
    goto next;
  endmatch;
}

gen gsmap_iterator[T] (f:T->T) (var gs:gslice[T]) () : opt[T] =
{
  for v in gs do yield v.f.Some; done
  return None[T];
}

gen iterator[T with Integer[T]] (gs:gslice[T]) =>
  match gs with
  | GSlice s => iterator s
  | GSSList ls => gslist_iterator ls
  | GSIList ls => iterator ls
  | GSIter it => it
  | GSMap (f,gs) => gsmap_iterator f gs
;

fun +[T with Integer[T]] (x:gslice[T], y:gslice[T]) =>
  GSSList (list (x,y))
;

fun +[T with Integer[T]] (x:gslice[T], y:slice[T]) =>
 x + GSlice y
;

fun +[T with Integer[T]] (x:slice[T], y:gslice[T]) =>
 GSlice x + y
;

fun +[T with Integer[T]] (x:slice[T], y:slice[T]) =>
 GSlice x + GSlice y
;

fun map[T with Integer[T]] (f:T->T) (gs:gslice[T]) =>
  GSMap (f,gs)
;

