#line 2964 "C:/cygwin64/home/skaller/felix/src/packages/flx.fdoc"
include "std/felix/config";

include "std/felix/flx_cache";
include "std/felix/flx_pkg";
include "std/felix/flx_flxg";
include "std/felix/flx_cxx";

include "std/felix/flx/flx_control";
include "std/felix/flx/flx_cmdopt";
include "std/felix/flx/flx_depvars";
include "std/felix/flx/flx_run";
include "std/felix/toolchain_clang_config";
include "std/felix/toolchain_interface";

open FlxCache;

fun startlib (x:string) =
{
   return x in RE2(" *(fun|proc|var|val|gen|union|struct|typedef).*\n");
}

// MOVE LATER!
proc repl()
{

nextline:>
  print "> "; fflush stdout;
  var text = readln stdin;
  if feof(stdin) return;

  if startlib(text) goto morelibrary;
  goto executable;

morelibrary:>
  print ".. "; fflush stdout;
  var more = readln stdin;
  if feof(stdin) return;

  if more == "\n" goto saveit;
  text += more;
  goto morelibrary;

saveit:>
  var dlibrary = load("library.flx");
  dlibrary += text;
  save("library.flx",dlibrary);
  goto nextline;

executable:>
   var session = load("session.flx");
   session += text;
   save ("session.flx", session);
   dlibrary = load("library.flx");
   var torun = dlibrary + text;
   save ("cmd.flx", torun);
}


// Felix version of THIS program (NOT the one being installed
// if you're using flx to install Felix)


class Flx
{
  gen flx_processing
  (
    config:&Config::config_type,
    control:&FlxControl::control_type,
    loopctl:&FlxControl::loopctl_type,
    args:list[string]
  ) : int =
  {
    var result = 0;
    fun / (a:string, b:string) => Filename::join (a,b);
    FlxCmdOpt::processing_stage1 (config,control,loopctl,varray[string] args);
    if control*.VALIDATE_CACHE == 1 do
      check_cache(config, control);
    done
    if
      loopctl*.base == "" and
      control*.INREGEX == ""
      and not control*.CMDLINE_INPUT
    do
      if control*.CLEAR_CACHE != 1 do
        println "usage: flx [options] filename";
        // TOP LEVEL FLX, OK
        System::exit(1);
      done
      // TOP LEVEL FLX, OK
      System::exit(0);
    done

    var pkgconfig = FlxPkgConfig::FlxPkgConfigQuery$ config*.FLX_CONFIG_DIRS;
    proc ehandler () {
      eprintln$ "Flx: default ehandler: temporary ehandler invoked";
      System::exit 1;
    }

    var toolchain_name =
      if control*.FLX_TOOLCHAIN == "" then pkgconfig.getpkgfield1 ehandler ("toolchain", "toolchain")
      else control*.FLX_TOOLCHAIN
    ;

    var toolchain =
       match toolchain_name with
       | x =>
         Dynlink::load-plugin-func1 [toolchain_t,clang_config_t] ( dll-name=x, setup-str="")
       endmatch
    ;
    if control*.INREGEX != "" do

      begin
        //control.USER_ARGS <- Shell::quote_arg(loopctl*.progname) + ' ' + control*.USER_ARGS;
        // this is a hack because -- argument translates to empty program name ..
        // and also if there is no name in that slot ..
        if loopctl*.progname != "" do
          control.USER_ARGS <- loopctl*.progname ! control*.USER_ARGS;
        done
        if control*.INDIR == "" do control.INDIR <- "."; done
        var regex = RE2 control*.INREGEX;
        if not regex.ok do
          eprintln$ "Malformed regex " + control*.INREGEX;
          result = 1;
          goto endoff;
        done
        var files = FileSystem::regfilesin (control*.INDIR, regex);
        var n = files.len.int;
        println$ "Processing " + files.len.str + " files";
        var i = 1;
        var pass = 0;
        var fail = 0;
        files = sort files;
        for file in files do
          var arg = Filename::join (control*.INDIR, file);
          loopctl*.path,loopctl*.ext = Filename::split_extension(arg);
          loopctl*.dir,loopctl*.base = Filename::split1(loopctl*.path);
          // temporary hack, to force reset of the linker filename, stdout, and expect
          // file names in cal_depvars so they depend on the current file.
          control.LINKER_OUTPUT_FILENAME <- "";
          control.STDOUT <- "";
          control.EXPECT <- "";
          control.STDIN <- "";
          var dvars = FlxDepvars::cal_depvars(toolchain,*config,control,*loopctl);
          println$ f"Processing [%02d/%02d]: %S" (i, n, file);
          var pe = processing_env(toolchain,*config,*control,dvars);
          call_with_trap {
            proc ehandler() {
              eprintln("BATCH MODE ERROR HANDLER");
              result = 1;
              goto err;
             }
             result = pe.runit(ehandler);
           err:>
          };
          if result == 0 do ++pass; else ++fail; done
          if control*.NONSTOP==0 and  result != 0 goto endoff;
          ++i;
          collect();
        done
        println$ f"Batch result (%02d OK + %02d FAIL)/%2d" (pass, fail,n);
      end
    elif control*.REPL_MODE do
      begin
        again:>
        repl();
        if not feof (stdin) do
          var dvars = FlxDepvars::cal_depvars(toolchain,*config,control, *loopctl);
          var pe = processing_env(toolchain,*config,*control,dvars);
          result = pe.runit(ehandler);
          goto again;
        else
          println$ "Bye!";
          // TOP LEVEL REPL, OK
          System::exit 0;
        done
      end
    else
      begin
        if control*.SHOWCODE == 1 do
            var prg =
              (if dvars.use_ext == "" then "// No file "+dvars.filebase+".(flx|fdoc) found"
              else load(dvars.filebase+"."+dvars.use_ext)
            );
            print prg;
        done
        var dvars = FlxDepvars::cal_depvars(toolchain,*config,control, *loopctl);
        var pe = processing_env(toolchain,*config,*control,dvars);
        result = pe.runit(ehandler);
      end
    done
endoff:>
    return result;
  }

  gen runflx(args:list[string]) : int =
  {
    var config = #Config::std_config;
    var control = #FlxControl::dflt_control;
    var loopctl = #FlxControl::init_loopctl;
    return flx_processing(&config, &control, &loopctl, args);
  }
}

