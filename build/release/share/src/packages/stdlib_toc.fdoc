@title The Felix Library
@h1 Felix Run Time Library
<dl>
<dt><a href=exceptions.fdoc>Exceptions</a></dt>
<dd>Error Exits</dd>

<dt><a href=gc.fdoc>Garbage Collector</a></dt>
<dd>Memory Management Core</dd>

<dt><a href=embed.fdoc>Embedding: System Construction</a></dt>
<dd>Core routines for embedding</dd>

<dt><a href=driver.fdoc>Dynamic Linkage and Driver</a></dt>
<dd>The top level driver program and dynamic linkage library</dd>

<dt><a href=demux.fdoc>Event Notification</a></dt>
<dd>Bootstrap Build Code</dd>

<dt><a href=faio.fdoc>Felix Asynchronous I/O Support</a></dt>
<dd>Code C++ implementation of Asynchronous I/O RTL</dd>


<dt><a href=rtl-threads.fdoc>Pre-emptive Threading Core</a></dt>
<dd>Core C++ Pre-emptive threading support</dd>

<dt><a href=serialisation.fdoc>Serialisation Support</a></dt>
<dd>Core C++ supporting automatic data serialisation</dd>

<dt><a href=rtl.fdoc>Run Time Library Core</a></dt>
<dd>Core C++ Core RTL facilities</dd>

<dt><a href=linux.fdoc>Special Linux Support</a></dt>
<dd>Low Level code providing access to unique Linux features</dd>

</dl>


@h1 Felix Standard Library
<dl>
<dt><a href=libstruct.fdoc>Library Structure Map</a></dt>
<dd>Directory Layout of the extracted Standard library.
With some uncategorise files thrown in.</dd>

<dt><a href=grammar.fdoc>Base Grammar</a></dt>
<dd>Basic Grammar core. Specialised Subgrammars added in appropriate modules.</dd>


<dt><a href=algebra.fdoc>Basic Algebraic Structure</a></dt>
<dd>Now we have to define some basic algebraic structures...</dd>

<dt><a href=logic.fdoc>Logic</a></dt>
<dd>Boolean Logic</dd>

<dt><a href=cheaders.fdoc>C Headers</a></dt>
<dd>First we require basic C interfaces...</dd>

<dt><a href=core_scalar_types.fdoc>Core Scalar Types</a></dt>
<dd>So we lift some basic types from C.<dd>

<dt><a href=core_type_constructors.fdoc>Core Type Constructors</a></dt>
<dd>Some core data types and library support for compiler instrinsics.<dd>

<dt><a href=pointers.fdoc>Pointers</a></dt>
<dd>Basic pointers.<dd>

<dt><a href=control.fdoc>Control Flow primitives</a></dt>
<dd>Interface to some RTL control features</dd>

<dt><a href=char.fdoc>Characters</a></dt>
<dd>Basic character type char.</dd>


<dt><a href=numbers.fdoc>Numbers</a></dt>
<dd>So we can conveniently define functions on numbers...</dd>

<dt><a href=strings.fdoc>Strings</a></dt>
<dd>and functions of strings</dd>

<dt><a href=arrays.fdoc>Arrays</a></dt>
<dd>Array algebra, arrays, variable length arrays, dynamic length arrays, sparse arrays</dd>


<dt><a href=lists.fdoc>Lists</a></dt>
<dd>Functional lists, association lists, random access lists, doubly linked lists, an S-expressions</dd>

<dt><a href=streams.fdoc>Streams and Iterators</a></dt>
<dd>Streamable data structures and iterators.</dd>


<dt><a href=fibres.fdoc>Cooperative threading</a></dt>
<dd>Support for fibres, synchronous channels, pipelines.</dd>

<dt><a href=pthreads.fdoc>Preemptive Threading</a></dt>
<dd>Support for shared memory concurrency by pre-emptive threads and various 
synchronisation devices. 
See also <a href=rtl-thread.fdoc</a>Core C++ Threading</a> for implementation details</dd>

<dt><a href=program.fdoc>Programs and Processes</a></dt>
<dd>Programs, ennvironment variables, command line options, shells, processes and dynamic linkage.</dd>

<dt><a href=filesystem.fdoc>File System/Output</a></dt>
<dd>File Name, Directories, File status, Base operations.</dd>

<dt><a href=io.fdoc>Input/Output</a></dt>
<dd>File I/O, Mice, Sockets, Timers, Events</dd>

<dt><a href=time.fdoc>Time of Day</a></dt>
<dd>Access to system real time clock.</dd>

<dt><a href=db.fdoc>Database</a></dt>
<dd>Basic Sqlite3 binding.</dd>
</dl>

<hr>

<dl>
<dt><a href=debug.fdoc>Debugging.</a></dt>
<dd>Some debugging aids.</dd>

<hr>

<dt><a href=stl.fdoc>C++ Standard Template Library</a></dt>
<dd>C++98 STL: iterators, vector, set, map, list, multiset, multimap, deque</dd>


<dt>
<dt><a href=sdl.fdoc>Simple Direct Media Layer</a></dt>
<dd>Binding for SDL2 including SDL_image and SDL_ttf</dd>
</dl>


