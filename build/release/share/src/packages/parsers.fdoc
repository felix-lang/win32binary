@tangler parsers.flx = share/lib/std/strings/parsers.flx
@tangler parsers.fsyn = share/lib/std/strings/parsers.fsyn

@h1 Parsing
Chips to providing parsing functions.

@tangle parsers.flx

@h1 Capturing wrappers
Given a Buffer->Buffer scanner chip 'scan',
and a state updater 'newstate' which takes the
old state and the end position of the scanned lexeme
and produces a new state, run the scan chip
to match a lexeme and output the updated state.

The design of this chip is a bit weird and requires
explanation!

The captured device is expected to have signature (read+ write)+,
and so must the capturing device. So we cannot just read then
write and loop, because the captured scanner may fail, and this
would block the capturer. Instead, we have to spawn a fibre
that does a write and read on the captured device for every
input, which will fail if the scanner fails.

We have to make sure the handler parameter is bound to the
correct x, because it may be suspended when another input
comes in! So the closure y is formed to ensure capture.

NOTE: the code is is completely generic. There's nothing
specific to parsers here.

@tangle parsers.flx

chip gmonad[B,C,T,U] 
  (
    scan: BaseChips::iochip_t[B,C],
    newstate: (B * T) * C -> U
  )
  connector io
    pin inp: %<(B * T)
    pin out: %>(C * U)
{
while true do
  var x = read io.inp;
  noinline proc handler (var x: B * T) () {
    var b,pd = x;
    var rin,win= mk_ioschannel_pair[B]();
    var rout,wout= mk_ioschannel_pair[C]();
    spawn_fthread (scan (inp=rin,out=wout));
    write(win,b);
    var c : C = read rout; // this can block forever if scan fails
    var s : U = newstate((b,pd),c);
    write (io.out,(c,s));
  }
  var y = handler x;
  spawn_fthread y;
done
}

fun monad[B,C,T] 
  (
    scan: BaseChips::iochip_t[B,C],
    newstate: (B * T) * C -> T
  )
=> 
  gmonad [B,C,T,T] (scan,newstate)
;

@h1 Syntax
@tangle parsers.fsyn

syntax parsers {
  priority 
    palt_pri <
    pseq_pri <
    ppostfix_pri <
    patom_pri
  ;
 
  //$ Define a non-terminal
  stmt := "parser" sdeclname "=" sparser[palt_pri] ";" =># 
    """
    `(ast_var_decl ,_sr ,(first _2) ,(second _2) none (some ,_4))
    """;

  //$ Define a non-terminal
  stmt := "parser" sdeclname ":" stypeexpr "=" sparser[palt_pri] ";" =># 
    """
    `(ast_var_decl ,_sr ,(first _2) ,(second _2) (some ,_4) (some ,_6))
    """;


  //$ Inline regular expression.
  //$ Can be used anywhere in Felix code.
  //$ Returns a a value of type Regdef::regex.
  x[sapplication_pri] := "parse" "(" sparser[palt_pri] ")" =># "_3";

  //$ Alternatives.
  sparser[palt_pri] := sparser[>palt_pri] ("|" sparser[>palt_pri])+ =># 
    """`(ast_apply ,_sr ( ,(qnoi 'BaseChips 'tryall_list) 
      (ast_apply ,_sr (,(noi 'list) ,(cons _1 (map second _2))))))"""
  ;

  //$ Sequential concatenation.
  sparser[pseq_pri] := sparser[>pseq_pri] (sparser[>pseq_pri])+ =># 
    """`(ast_apply ,_sr ( ,(qnoi 'BaseChips 'pipeline_list)
      (ast_apply ,_sr (,(noi 'list) ,(cons _1 _2)))))"""
  ;

/////////
// THESE COMBINATORS SEEM USELESS BECAUSE THERE IS NO WELL DEFINED
// RESULT. 
//
// That is, when parsing, they're not defined to say, push a list
// onto the parser stack.
//
// They can be used by pushing a mark before and popping to the mark
// to do a reduce. Works fine. But depends on being able to put
// a mark on the stack, which means the type of terms on the stack
// has to include a mark term.

  //$ Postfix star (*).
  //$ Kleene closure: zero or more repetitions.
  sparser[ppostfix_pri] := sparser[ppostfix_pri] "*" =># 
    """`(ast_apply ,_sr ( ,(qnoi 'BaseChips 'zeroormore_matcher) ,_1 ))"""
  ;

  //$ Postfix plus (+).
  //$ One or more repetitions.
  sparser[ppostfix_pri] := sparser[ppostfix_pri] "+" =>#
    """`(ast_apply ,_sr ( ,(qnoi 'BaseChips 'oneormore_matcher) ,_1 ))"""
  ;

  //$ Postfix question mark (?).
  //$ Optional. Zero or one repetitions.
  sparser[ppostfix_pri] := sparser[ppostfix_pri] "?" =>#
    """`(ast_apply ,_sr (,(qnoi 'BaseChips 'optional) ,_1 ))"""
  ;
// end suspect combinators
/////////

  //$ Group psuedo function.
  sparser[patom_pri] := "(" sparser[palt_pri] ")" =># '_2'; 

  sparser[patom_pri] :=  "{" sexpr "}" =># "_2";

  //$ Identifier.
  sparser[patom_pri] := sname=># "`(ast_name ,_sr ,_1 ())";

  //$ Indirection
  //$ For example, the LHS of a regdef binder.
  sparser[patom_pri] := "&" sname=># """
    `(ast_apply ,_sr 
      (
        ,(qnoi 'BaseChips 'deref_first_read)
        (ast_ref ,_sr ,(nos _2))
      )
    )
  """;
 
}


