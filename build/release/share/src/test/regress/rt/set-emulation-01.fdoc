
@h1 set-emulation-01.flx
@felix
include "std/datatype/sexpr";
open class Example1
{
  union SetKind[T] = 
    | Varray of varray[T]
    | Darray of darray[T]
    | List of list[T]
    | Sexpr of S_expr::sexpr[T]
    | LSK1 of LazySet[T]
    | LSK2 of Example2::LazySet[T]
  ;

  fun \in[T] (elt:T, container:SetKind[T]):bool  => match container with
    | Varray a => elt \in a
    | Darray a => elt \in a
    | List   a => elt \in a
    | Sexpr  a => elt \in a
    | LSK1   a => elt \in a
    | LSK2   a => elt \in a
    endmatch
  ;

  typedef LazySet[T] = list[SetKind[T]];
  fun \in[T] (elt:T, ss: LazySet[T]) =>
    fold_left 
    (fun (acc:bool) (container:SetKind[T]) => acc or elt \in container) 
    false 
    ss
  ;
}
open class Example2 
{
  fun has[T] (c:varray[T]) (elt:T) : bool => elt \in c;
  fun has[T] (c:darray[T]) (elt:T) : bool => elt \in c;
  fun has[T] (c:list[T]) (elt:T) : bool => elt \in c;
  fun has[T] (c:S_expr::sexpr[T]) (elt:T) : bool => elt \in c;
  fun has[T] (c:LazySet[T]) (elt:T) : bool => elt \in c;
  fun has[T] (c:Example1::LazySet[T]) (elt:T) : bool => elt \in c;

  typedef SetKind[T] = T -> bool;
  typedef LazySet[T] = list[SetKind[T]];

  fun \in[T] (elt:T, ss: LazySet[T]) =>
    fold_left 
    (fun (acc:bool) (container:SetKind[T]) => acc or container elt) 
    false 
    ss
  ;
}

val a1 = list(Example1::Varray (varray("1","2")), Example1::List (list("3","4")));
println$ "1" \in a1, "3" \in a1, "9" \in a1;

val a2 = list(has(varray("11","22")), has(list("33","44")));
println$ "11" \in a2, "33" \in a2, "99" \in a2;

val a3 = list(LSK1 a1, LSK2 a2);
val a4 = list(has(varray("55","66")), has(a3));

println$ "1" \in a4, "3" \in a4, "5" \in a4;
println$ "11" \in a4, "33" \in a4, "55" \in a4;


@expect
(true, true, false)
(true, true, false)
(true, true, false)
(true, true, true)
@
