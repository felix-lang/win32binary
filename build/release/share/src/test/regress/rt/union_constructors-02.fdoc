
@h1 union_constructors-02.flx
@felix
// named variant type constructor with one element as function
union U = | A | B of int * int * int;
proc print (u:U) {
  print "union U ";
  print$
    match u with
    | #A => "A"
    | B (b, c, d) => f"B %d %d %d" (b, c, d)
    endmatch;
}
fun exec (p:int * int * int -> U, x:int, y:int, z:int) => p (x, y, z);

val u1 = B (1, 2, 3); print u1; endl;

val u2 = exec (B of (int * int * int), 4, 5, 6); print u2; endl;
val u3 = exec (B,                      7, 8, 9); print u3; endl;

val u4 = (B of (int * int * int)) (10, 11, 12); print u4; endl;
val u5 = (B)                      (13, 14, 15); print u5; endl;

val f1 = B of (int * int * int); val u6 = f1 (16, 17, 18); print u6; endl;
val f2 = B;                      val u7 = f2 (19, 20, 21); print u7; endl;

print (exec (B of (int * int * int), 22, 23, 24)); endl;
print (exec (B,                      25, 26, 27)); endl;

@expect
union U B 1 2 3
union U B 4 5 6
union U B 7 8 9
union U B 10 11 12
union U B 13 14 15
union U B 16 17 18
union U B 19 20 21
union U B 22 23 24
union U B 25 26 27
@
