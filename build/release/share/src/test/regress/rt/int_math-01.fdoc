
@h1 int_math-01.flx
@felix
//noinline is needed to stop gcc dropping dead
fun int_of[T]: T -> int = "int($1)";

noinline proc tst_240 () {
  assert(int_of(2 + 40)==42);
  assert(int_of(2t + 40t)==42);
  assert(int_of(2T + 40T)==42);
  assert(int_of(2s + 40s)==42);
  assert(int_of(2S + 40S)==42);
  assert(int_of(2i + 40i)==42);

  assert(int_of(2I + 40I)==42);

  assert(int_of(2l + 40l)==42);

  assert(int_of(2L + 40L)==42);

  assert(int_of(2v + 40v)==42);

  assert(int_of(2V + 40V)==42);

  assert(int_of(2ll + 40ll)==42);

  assert(int_of(2LL + 40LL)==42);

  assert(int_of(2u + 40u)==42);

  assert(int_of(2ut + 40ut)==42);

  assert(int_of(2uT + 40uT)==42);

  assert(int_of(2us + 40us)==42);

  assert(int_of(2uS + 40uS)==42);

  assert(int_of(2ui + 40ui)==42);

  assert(int_of(2uI + 40uI)==42);

  assert(int_of(2ul + 40ul)==42);

  assert(int_of(2uL + 40uL)==42);

  assert(int_of(2uv + 40uv)==42);

  assert(int_of(2uV + 40uV)==42);

  assert(int_of(2ull + 40ull)==42);

  assert(int_of(2uLL + 40uLL)==42);

  assert(int_of(2Ut + 40Ut)==42);

  assert(int_of(2UT + 40UT)==42);

  assert(int_of(2Us + 40Us)==42);

  assert(int_of(2US + 40US)==42);

  assert(int_of(2Ui + 40Ui)==42);

  assert(int_of(2UI + 40UI)==42);

  assert(int_of(2Ul + 40Ul)==42);

  assert(int_of(2UL + 40UL)==42);

  assert(int_of(2Uv + 40Uv)==42);

  assert(int_of(2UV + 40UV)==42);

  assert(int_of(2Ull + 40Ull)==42);

  assert(int_of(2ULL + 40ULL)==42);

  assert(int_of(2U + 40U)==42);

  assert(int_of(2tu + 40tu)==42);

  assert(int_of(2Tu + 40Tu)==42);

  assert(int_of(2su + 40su)==42);

  assert(int_of(2Su + 40Su)==42);

  assert(int_of(2iu + 40iu)==42);

  assert(int_of(2Iu + 40Iu)==42);

  assert(int_of(2lu + 40lu)==42);

  assert(int_of(2Lu + 40Lu)==42);

  assert(int_of(2vu + 40vu)==42);

  assert(int_of(2Vu + 40Vu)==42);

  assert(int_of(2llu + 40llu)==42);

  assert(int_of(2LLu + 40LLu)==42);

  assert(int_of(2tU + 40tU)==42);

  assert(int_of(2TU + 40TU)==42);

  assert(int_of(2sU + 40sU)==42);

  assert(int_of(2SU + 40SU)==42);

  assert(int_of(2iU + 40iU)==42);

  assert(int_of(2IU + 40IU)==42);

  assert(int_of(2lU + 40lU)==42);

  assert(int_of(2LU + 40LU)==42);

  assert(int_of(2vU + 40vU)==42);

  assert(int_of(2VU + 40VU)==42);

  assert(int_of(2llU + 40llU)==42);

  assert(int_of(2LLU + 40LLU)==42);

  assert(int_of(2i8 + 40i8)==42);

  assert(int_of(2i16 + 40i16)==42);

  assert(int_of(2i32 + 40i32)==42);

  assert(int_of(2i64 + 40i64)==42);

  assert(int_of(2u8 + 40u8)==42);

  assert(int_of(2u16 + 40u16)==42);

  assert(int_of(2u32 + 40u32)==42);

  assert(int_of(2u64 + 40u64)==42);

}

tst_240;

//noinline is needed to stop gcc dropping dead

noinline proc tst_20b0010_1000 () {

  assert(int_of(2 + 0b0010_1000)==42);

  assert(int_of(2t + 0b0010_1000t)==42);

  assert(int_of(2T + 0b0010_1000T)==42);

  assert(int_of(2s + 0b0010_1000s)==42);

  assert(int_of(2S + 0b0010_1000S)==42);

  assert(int_of(2i + 0b0010_1000i)==42);

  assert(int_of(2I + 0b0010_1000I)==42);

  assert(int_of(2l + 0b0010_1000l)==42);

  assert(int_of(2L + 0b0010_1000L)==42);

  assert(int_of(2v + 0b0010_1000v)==42);

  assert(int_of(2V + 0b0010_1000V)==42);

  assert(int_of(2ll + 0b0010_1000ll)==42);

  assert(int_of(2LL + 0b0010_1000LL)==42);

  assert(int_of(2u + 0b0010_1000u)==42);

  assert(int_of(2ut + 0b0010_1000ut)==42);

  assert(int_of(2uT + 0b0010_1000uT)==42);

  assert(int_of(2us + 0b0010_1000us)==42);

  assert(int_of(2uS + 0b0010_1000uS)==42);

  assert(int_of(2ui + 0b0010_1000ui)==42);

  assert(int_of(2uI + 0b0010_1000uI)==42);

  assert(int_of(2ul + 0b0010_1000ul)==42);

  assert(int_of(2uL + 0b0010_1000uL)==42);

  assert(int_of(2uv + 0b0010_1000uv)==42);

  assert(int_of(2uV + 0b0010_1000uV)==42);

  assert(int_of(2ull + 0b0010_1000ull)==42);

  assert(int_of(2uLL + 0b0010_1000uLL)==42);

  assert(int_of(2Ut + 0b0010_1000Ut)==42);

  assert(int_of(2UT + 0b0010_1000UT)==42);

  assert(int_of(2Us + 0b0010_1000Us)==42);

  assert(int_of(2US + 0b0010_1000US)==42);

  assert(int_of(2Ui + 0b0010_1000Ui)==42);

  assert(int_of(2UI + 0b0010_1000UI)==42);

  assert(int_of(2Ul + 0b0010_1000Ul)==42);

  assert(int_of(2UL + 0b0010_1000UL)==42);

  assert(int_of(2Uv + 0b0010_1000Uv)==42);

  assert(int_of(2UV + 0b0010_1000UV)==42);

  assert(int_of(2Ull + 0b0010_1000Ull)==42);

  assert(int_of(2ULL + 0b0010_1000ULL)==42);

  assert(int_of(2U + 0b0010_1000U)==42);

  assert(int_of(2tu + 0b0010_1000tu)==42);

  assert(int_of(2Tu + 0b0010_1000Tu)==42);

  assert(int_of(2su + 0b0010_1000su)==42);

  assert(int_of(2Su + 0b0010_1000Su)==42);

  assert(int_of(2iu + 0b0010_1000iu)==42);

  assert(int_of(2Iu + 0b0010_1000Iu)==42);

  assert(int_of(2lu + 0b0010_1000lu)==42);

  assert(int_of(2Lu + 0b0010_1000Lu)==42);

  assert(int_of(2vu + 0b0010_1000vu)==42);

  assert(int_of(2Vu + 0b0010_1000Vu)==42);

  assert(int_of(2llu + 0b0010_1000llu)==42);

  assert(int_of(2LLu + 0b0010_1000LLu)==42);

  assert(int_of(2tU + 0b0010_1000tU)==42);

  assert(int_of(2TU + 0b0010_1000TU)==42);

  assert(int_of(2sU + 0b0010_1000sU)==42);

  assert(int_of(2SU + 0b0010_1000SU)==42);

  assert(int_of(2iU + 0b0010_1000iU)==42);

  assert(int_of(2IU + 0b0010_1000IU)==42);

  assert(int_of(2lU + 0b0010_1000lU)==42);

  assert(int_of(2LU + 0b0010_1000LU)==42);

  assert(int_of(2vU + 0b0010_1000vU)==42);

  assert(int_of(2VU + 0b0010_1000VU)==42);

  assert(int_of(2llU + 0b0010_1000llU)==42);

  assert(int_of(2LLU + 0b0010_1000LLU)==42);

  assert(int_of(2i8 + 0b0010_1000i8)==42);

  assert(int_of(2i16 + 0b0010_1000i16)==42);

  assert(int_of(2i32 + 0b0010_1000i32)==42);

  assert(int_of(2i64 + 0b0010_1000i64)==42);

  assert(int_of(2u8 + 0b0010_1000u8)==42);

  assert(int_of(2u16 + 0b0010_1000u16)==42);

  assert(int_of(2u32 + 0b0010_1000u32)==42);

  assert(int_of(2u64 + 0b0010_1000u64)==42);

}

tst_20b0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_20B_0010_1000 () {

  assert(int_of(2 + 0B_0010_1000)==42);

  assert(int_of(2t + 0B_0010_1000t)==42);

  assert(int_of(2T + 0B_0010_1000T)==42);

  assert(int_of(2s + 0B_0010_1000s)==42);

  assert(int_of(2S + 0B_0010_1000S)==42);

  assert(int_of(2i + 0B_0010_1000i)==42);

  assert(int_of(2I + 0B_0010_1000I)==42);

  assert(int_of(2l + 0B_0010_1000l)==42);

  assert(int_of(2L + 0B_0010_1000L)==42);

  assert(int_of(2v + 0B_0010_1000v)==42);

  assert(int_of(2V + 0B_0010_1000V)==42);

  assert(int_of(2ll + 0B_0010_1000ll)==42);

  assert(int_of(2LL + 0B_0010_1000LL)==42);

  assert(int_of(2u + 0B_0010_1000u)==42);

  assert(int_of(2ut + 0B_0010_1000ut)==42);

  assert(int_of(2uT + 0B_0010_1000uT)==42);

  assert(int_of(2us + 0B_0010_1000us)==42);

  assert(int_of(2uS + 0B_0010_1000uS)==42);

  assert(int_of(2ui + 0B_0010_1000ui)==42);

  assert(int_of(2uI + 0B_0010_1000uI)==42);

  assert(int_of(2ul + 0B_0010_1000ul)==42);

  assert(int_of(2uL + 0B_0010_1000uL)==42);

  assert(int_of(2uv + 0B_0010_1000uv)==42);

  assert(int_of(2uV + 0B_0010_1000uV)==42);

  assert(int_of(2ull + 0B_0010_1000ull)==42);

  assert(int_of(2uLL + 0B_0010_1000uLL)==42);

  assert(int_of(2Ut + 0B_0010_1000Ut)==42);

  assert(int_of(2UT + 0B_0010_1000UT)==42);

  assert(int_of(2Us + 0B_0010_1000Us)==42);

  assert(int_of(2US + 0B_0010_1000US)==42);

  assert(int_of(2Ui + 0B_0010_1000Ui)==42);

  assert(int_of(2UI + 0B_0010_1000UI)==42);

  assert(int_of(2Ul + 0B_0010_1000Ul)==42);

  assert(int_of(2UL + 0B_0010_1000UL)==42);

  assert(int_of(2Uv + 0B_0010_1000Uv)==42);

  assert(int_of(2UV + 0B_0010_1000UV)==42);

  assert(int_of(2Ull + 0B_0010_1000Ull)==42);

  assert(int_of(2ULL + 0B_0010_1000ULL)==42);

  assert(int_of(2U + 0B_0010_1000U)==42);

  assert(int_of(2tu + 0B_0010_1000tu)==42);

  assert(int_of(2Tu + 0B_0010_1000Tu)==42);

  assert(int_of(2su + 0B_0010_1000su)==42);

  assert(int_of(2Su + 0B_0010_1000Su)==42);

  assert(int_of(2iu + 0B_0010_1000iu)==42);

  assert(int_of(2Iu + 0B_0010_1000Iu)==42);

  assert(int_of(2lu + 0B_0010_1000lu)==42);

  assert(int_of(2Lu + 0B_0010_1000Lu)==42);

  assert(int_of(2vu + 0B_0010_1000vu)==42);

  assert(int_of(2Vu + 0B_0010_1000Vu)==42);

  assert(int_of(2llu + 0B_0010_1000llu)==42);

  assert(int_of(2LLu + 0B_0010_1000LLu)==42);

  assert(int_of(2tU + 0B_0010_1000tU)==42);

  assert(int_of(2TU + 0B_0010_1000TU)==42);

  assert(int_of(2sU + 0B_0010_1000sU)==42);

  assert(int_of(2SU + 0B_0010_1000SU)==42);

  assert(int_of(2iU + 0B_0010_1000iU)==42);

  assert(int_of(2IU + 0B_0010_1000IU)==42);

  assert(int_of(2lU + 0B_0010_1000lU)==42);

  assert(int_of(2LU + 0B_0010_1000LU)==42);

  assert(int_of(2vU + 0B_0010_1000vU)==42);

  assert(int_of(2VU + 0B_0010_1000VU)==42);

  assert(int_of(2llU + 0B_0010_1000llU)==42);

  assert(int_of(2LLU + 0B_0010_1000LLU)==42);

  assert(int_of(2i8 + 0B_0010_1000i8)==42);

  assert(int_of(2i16 + 0B_0010_1000i16)==42);

  assert(int_of(2i32 + 0B_0010_1000i32)==42);

  assert(int_of(2i64 + 0B_0010_1000i64)==42);

  assert(int_of(2u8 + 0B_0010_1000u8)==42);

  assert(int_of(2u16 + 0B_0010_1000u16)==42);

  assert(int_of(2u32 + 0B_0010_1000u32)==42);

  assert(int_of(2u64 + 0B_0010_1000u64)==42);

}

tst_20B_0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_20o50 () {

  assert(int_of(2 + 0o50)==42);

  assert(int_of(2t + 0o50t)==42);

  assert(int_of(2T + 0o50T)==42);

  assert(int_of(2s + 0o50s)==42);

  assert(int_of(2S + 0o50S)==42);

  assert(int_of(2i + 0o50i)==42);

  assert(int_of(2I + 0o50I)==42);

  assert(int_of(2l + 0o50l)==42);

  assert(int_of(2L + 0o50L)==42);

  assert(int_of(2v + 0o50v)==42);

  assert(int_of(2V + 0o50V)==42);

  assert(int_of(2ll + 0o50ll)==42);

  assert(int_of(2LL + 0o50LL)==42);

  assert(int_of(2u + 0o50u)==42);

  assert(int_of(2ut + 0o50ut)==42);

  assert(int_of(2uT + 0o50uT)==42);

  assert(int_of(2us + 0o50us)==42);

  assert(int_of(2uS + 0o50uS)==42);

  assert(int_of(2ui + 0o50ui)==42);

  assert(int_of(2uI + 0o50uI)==42);

  assert(int_of(2ul + 0o50ul)==42);

  assert(int_of(2uL + 0o50uL)==42);

  assert(int_of(2uv + 0o50uv)==42);

  assert(int_of(2uV + 0o50uV)==42);

  assert(int_of(2ull + 0o50ull)==42);

  assert(int_of(2uLL + 0o50uLL)==42);

  assert(int_of(2Ut + 0o50Ut)==42);

  assert(int_of(2UT + 0o50UT)==42);

  assert(int_of(2Us + 0o50Us)==42);

  assert(int_of(2US + 0o50US)==42);

  assert(int_of(2Ui + 0o50Ui)==42);

  assert(int_of(2UI + 0o50UI)==42);

  assert(int_of(2Ul + 0o50Ul)==42);

  assert(int_of(2UL + 0o50UL)==42);

  assert(int_of(2Uv + 0o50Uv)==42);

  assert(int_of(2UV + 0o50UV)==42);

  assert(int_of(2Ull + 0o50Ull)==42);

  assert(int_of(2ULL + 0o50ULL)==42);

  assert(int_of(2U + 0o50U)==42);

  assert(int_of(2tu + 0o50tu)==42);

  assert(int_of(2Tu + 0o50Tu)==42);

  assert(int_of(2su + 0o50su)==42);

  assert(int_of(2Su + 0o50Su)==42);

  assert(int_of(2iu + 0o50iu)==42);

  assert(int_of(2Iu + 0o50Iu)==42);

  assert(int_of(2lu + 0o50lu)==42);

  assert(int_of(2Lu + 0o50Lu)==42);

  assert(int_of(2vu + 0o50vu)==42);

  assert(int_of(2Vu + 0o50Vu)==42);

  assert(int_of(2llu + 0o50llu)==42);

  assert(int_of(2LLu + 0o50LLu)==42);

  assert(int_of(2tU + 0o50tU)==42);

  assert(int_of(2TU + 0o50TU)==42);

  assert(int_of(2sU + 0o50sU)==42);

  assert(int_of(2SU + 0o50SU)==42);

  assert(int_of(2iU + 0o50iU)==42);

  assert(int_of(2IU + 0o50IU)==42);

  assert(int_of(2lU + 0o50lU)==42);

  assert(int_of(2LU + 0o50LU)==42);

  assert(int_of(2vU + 0o50vU)==42);

  assert(int_of(2VU + 0o50VU)==42);

  assert(int_of(2llU + 0o50llU)==42);

  assert(int_of(2LLU + 0o50LLU)==42);

  assert(int_of(2i8 + 0o50i8)==42);

  assert(int_of(2i16 + 0o50i16)==42);

  assert(int_of(2i32 + 0o50i32)==42);

  assert(int_of(2i64 + 0o50i64)==42);

  assert(int_of(2u8 + 0o50u8)==42);

  assert(int_of(2u16 + 0o50u16)==42);

  assert(int_of(2u32 + 0o50u32)==42);

  assert(int_of(2u64 + 0o50u64)==42);

}

tst_20o50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_20O50 () {

  assert(int_of(2 + 0O50)==42);

  assert(int_of(2t + 0O50t)==42);

  assert(int_of(2T + 0O50T)==42);

  assert(int_of(2s + 0O50s)==42);

  assert(int_of(2S + 0O50S)==42);

  assert(int_of(2i + 0O50i)==42);

  assert(int_of(2I + 0O50I)==42);

  assert(int_of(2l + 0O50l)==42);

  assert(int_of(2L + 0O50L)==42);

  assert(int_of(2v + 0O50v)==42);

  assert(int_of(2V + 0O50V)==42);

  assert(int_of(2ll + 0O50ll)==42);

  assert(int_of(2LL + 0O50LL)==42);

  assert(int_of(2u + 0O50u)==42);

  assert(int_of(2ut + 0O50ut)==42);

  assert(int_of(2uT + 0O50uT)==42);

  assert(int_of(2us + 0O50us)==42);

  assert(int_of(2uS + 0O50uS)==42);

  assert(int_of(2ui + 0O50ui)==42);

  assert(int_of(2uI + 0O50uI)==42);

  assert(int_of(2ul + 0O50ul)==42);

  assert(int_of(2uL + 0O50uL)==42);

  assert(int_of(2uv + 0O50uv)==42);

  assert(int_of(2uV + 0O50uV)==42);

  assert(int_of(2ull + 0O50ull)==42);

  assert(int_of(2uLL + 0O50uLL)==42);

  assert(int_of(2Ut + 0O50Ut)==42);

  assert(int_of(2UT + 0O50UT)==42);

  assert(int_of(2Us + 0O50Us)==42);

  assert(int_of(2US + 0O50US)==42);

  assert(int_of(2Ui + 0O50Ui)==42);

  assert(int_of(2UI + 0O50UI)==42);

  assert(int_of(2Ul + 0O50Ul)==42);

  assert(int_of(2UL + 0O50UL)==42);

  assert(int_of(2Uv + 0O50Uv)==42);

  assert(int_of(2UV + 0O50UV)==42);

  assert(int_of(2Ull + 0O50Ull)==42);

  assert(int_of(2ULL + 0O50ULL)==42);

  assert(int_of(2U + 0O50U)==42);

  assert(int_of(2tu + 0O50tu)==42);

  assert(int_of(2Tu + 0O50Tu)==42);

  assert(int_of(2su + 0O50su)==42);

  assert(int_of(2Su + 0O50Su)==42);

  assert(int_of(2iu + 0O50iu)==42);

  assert(int_of(2Iu + 0O50Iu)==42);

  assert(int_of(2lu + 0O50lu)==42);

  assert(int_of(2Lu + 0O50Lu)==42);

  assert(int_of(2vu + 0O50vu)==42);

  assert(int_of(2Vu + 0O50Vu)==42);

  assert(int_of(2llu + 0O50llu)==42);

  assert(int_of(2LLu + 0O50LLu)==42);

  assert(int_of(2tU + 0O50tU)==42);

  assert(int_of(2TU + 0O50TU)==42);

  assert(int_of(2sU + 0O50sU)==42);

  assert(int_of(2SU + 0O50SU)==42);

  assert(int_of(2iU + 0O50iU)==42);

  assert(int_of(2IU + 0O50IU)==42);

  assert(int_of(2lU + 0O50lU)==42);

  assert(int_of(2LU + 0O50LU)==42);

  assert(int_of(2vU + 0O50vU)==42);

  assert(int_of(2VU + 0O50VU)==42);

  assert(int_of(2llU + 0O50llU)==42);

  assert(int_of(2LLU + 0O50LLU)==42);

  assert(int_of(2i8 + 0O50i8)==42);

  assert(int_of(2i16 + 0O50i16)==42);

  assert(int_of(2i32 + 0O50i32)==42);

  assert(int_of(2i64 + 0O50i64)==42);

  assert(int_of(2u8 + 0O50u8)==42);

  assert(int_of(2u16 + 0O50u16)==42);

  assert(int_of(2u32 + 0O50u32)==42);

  assert(int_of(2u64 + 0O50u64)==42);

}

tst_20O50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_20d40 () {

  assert(int_of(2 + 0d40)==42);

  assert(int_of(2t + 0d40t)==42);

  assert(int_of(2T + 0d40T)==42);

  assert(int_of(2s + 0d40s)==42);

  assert(int_of(2S + 0d40S)==42);

  assert(int_of(2i + 0d40i)==42);

  assert(int_of(2I + 0d40I)==42);

  assert(int_of(2l + 0d40l)==42);

  assert(int_of(2L + 0d40L)==42);

  assert(int_of(2v + 0d40v)==42);

  assert(int_of(2V + 0d40V)==42);

  assert(int_of(2ll + 0d40ll)==42);

  assert(int_of(2LL + 0d40LL)==42);

  assert(int_of(2u + 0d40u)==42);

  assert(int_of(2ut + 0d40ut)==42);

  assert(int_of(2uT + 0d40uT)==42);

  assert(int_of(2us + 0d40us)==42);

  assert(int_of(2uS + 0d40uS)==42);

  assert(int_of(2ui + 0d40ui)==42);

  assert(int_of(2uI + 0d40uI)==42);

  assert(int_of(2ul + 0d40ul)==42);

  assert(int_of(2uL + 0d40uL)==42);

  assert(int_of(2uv + 0d40uv)==42);

  assert(int_of(2uV + 0d40uV)==42);

  assert(int_of(2ull + 0d40ull)==42);

  assert(int_of(2uLL + 0d40uLL)==42);

  assert(int_of(2Ut + 0d40Ut)==42);

  assert(int_of(2UT + 0d40UT)==42);

  assert(int_of(2Us + 0d40Us)==42);

  assert(int_of(2US + 0d40US)==42);

  assert(int_of(2Ui + 0d40Ui)==42);

  assert(int_of(2UI + 0d40UI)==42);

  assert(int_of(2Ul + 0d40Ul)==42);

  assert(int_of(2UL + 0d40UL)==42);

  assert(int_of(2Uv + 0d40Uv)==42);

  assert(int_of(2UV + 0d40UV)==42);

  assert(int_of(2Ull + 0d40Ull)==42);

  assert(int_of(2ULL + 0d40ULL)==42);

  assert(int_of(2U + 0d40U)==42);

  assert(int_of(2tu + 0d40tu)==42);

  assert(int_of(2Tu + 0d40Tu)==42);

  assert(int_of(2su + 0d40su)==42);

  assert(int_of(2Su + 0d40Su)==42);

  assert(int_of(2iu + 0d40iu)==42);

  assert(int_of(2Iu + 0d40Iu)==42);

  assert(int_of(2lu + 0d40lu)==42);

  assert(int_of(2Lu + 0d40Lu)==42);

  assert(int_of(2vu + 0d40vu)==42);

  assert(int_of(2Vu + 0d40Vu)==42);

  assert(int_of(2llu + 0d40llu)==42);

  assert(int_of(2LLu + 0d40LLu)==42);

  assert(int_of(2tU + 0d40tU)==42);

  assert(int_of(2TU + 0d40TU)==42);

  assert(int_of(2sU + 0d40sU)==42);

  assert(int_of(2SU + 0d40SU)==42);

  assert(int_of(2iU + 0d40iU)==42);

  assert(int_of(2IU + 0d40IU)==42);

  assert(int_of(2lU + 0d40lU)==42);

  assert(int_of(2LU + 0d40LU)==42);

  assert(int_of(2vU + 0d40vU)==42);

  assert(int_of(2VU + 0d40VU)==42);

  assert(int_of(2llU + 0d40llU)==42);

  assert(int_of(2LLU + 0d40LLU)==42);

  assert(int_of(2i8 + 0d40i8)==42);

  assert(int_of(2i16 + 0d40i16)==42);

  assert(int_of(2i32 + 0d40i32)==42);

  assert(int_of(2i64 + 0d40i64)==42);

  assert(int_of(2u8 + 0d40u8)==42);

  assert(int_of(2u16 + 0d40u16)==42);

  assert(int_of(2u32 + 0d40u32)==42);

  assert(int_of(2u64 + 0d40u64)==42);

}

tst_20d40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_20D40 () {

  assert(int_of(2 + 0D40)==42);

  assert(int_of(2t + 0D40t)==42);

  assert(int_of(2T + 0D40T)==42);

  assert(int_of(2s + 0D40s)==42);

  assert(int_of(2S + 0D40S)==42);

  assert(int_of(2i + 0D40i)==42);

  assert(int_of(2I + 0D40I)==42);

  assert(int_of(2l + 0D40l)==42);

  assert(int_of(2L + 0D40L)==42);

  assert(int_of(2v + 0D40v)==42);

  assert(int_of(2V + 0D40V)==42);

  assert(int_of(2ll + 0D40ll)==42);

  assert(int_of(2LL + 0D40LL)==42);

  assert(int_of(2u + 0D40u)==42);

  assert(int_of(2ut + 0D40ut)==42);

  assert(int_of(2uT + 0D40uT)==42);

  assert(int_of(2us + 0D40us)==42);

  assert(int_of(2uS + 0D40uS)==42);

  assert(int_of(2ui + 0D40ui)==42);

  assert(int_of(2uI + 0D40uI)==42);

  assert(int_of(2ul + 0D40ul)==42);

  assert(int_of(2uL + 0D40uL)==42);

  assert(int_of(2uv + 0D40uv)==42);

  assert(int_of(2uV + 0D40uV)==42);

  assert(int_of(2ull + 0D40ull)==42);

  assert(int_of(2uLL + 0D40uLL)==42);

  assert(int_of(2Ut + 0D40Ut)==42);

  assert(int_of(2UT + 0D40UT)==42);

  assert(int_of(2Us + 0D40Us)==42);

  assert(int_of(2US + 0D40US)==42);

  assert(int_of(2Ui + 0D40Ui)==42);

  assert(int_of(2UI + 0D40UI)==42);

  assert(int_of(2Ul + 0D40Ul)==42);

  assert(int_of(2UL + 0D40UL)==42);

  assert(int_of(2Uv + 0D40Uv)==42);

  assert(int_of(2UV + 0D40UV)==42);

  assert(int_of(2Ull + 0D40Ull)==42);

  assert(int_of(2ULL + 0D40ULL)==42);

  assert(int_of(2U + 0D40U)==42);

  assert(int_of(2tu + 0D40tu)==42);

  assert(int_of(2Tu + 0D40Tu)==42);

  assert(int_of(2su + 0D40su)==42);

  assert(int_of(2Su + 0D40Su)==42);

  assert(int_of(2iu + 0D40iu)==42);

  assert(int_of(2Iu + 0D40Iu)==42);

  assert(int_of(2lu + 0D40lu)==42);

  assert(int_of(2Lu + 0D40Lu)==42);

  assert(int_of(2vu + 0D40vu)==42);

  assert(int_of(2Vu + 0D40Vu)==42);

  assert(int_of(2llu + 0D40llu)==42);

  assert(int_of(2LLu + 0D40LLu)==42);

  assert(int_of(2tU + 0D40tU)==42);

  assert(int_of(2TU + 0D40TU)==42);

  assert(int_of(2sU + 0D40sU)==42);

  assert(int_of(2SU + 0D40SU)==42);

  assert(int_of(2iU + 0D40iU)==42);

  assert(int_of(2IU + 0D40IU)==42);

  assert(int_of(2lU + 0D40lU)==42);

  assert(int_of(2LU + 0D40LU)==42);

  assert(int_of(2vU + 0D40vU)==42);

  assert(int_of(2VU + 0D40VU)==42);

  assert(int_of(2llU + 0D40llU)==42);

  assert(int_of(2LLU + 0D40LLU)==42);

  assert(int_of(2i8 + 0D40i8)==42);

  assert(int_of(2i16 + 0D40i16)==42);

  assert(int_of(2i32 + 0D40i32)==42);

  assert(int_of(2i64 + 0D40i64)==42);

  assert(int_of(2u8 + 0D40u8)==42);

  assert(int_of(2u16 + 0D40u16)==42);

  assert(int_of(2u32 + 0D40u32)==42);

  assert(int_of(2u64 + 0D40u64)==42);

}

tst_20D40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_20x28 () {

  assert(int_of(2 + 0x28)==42);

  assert(int_of(2t + 0x28t)==42);

  assert(int_of(2T + 0x28T)==42);

  assert(int_of(2s + 0x28s)==42);

  assert(int_of(2S + 0x28S)==42);

  assert(int_of(2i + 0x28i)==42);

  assert(int_of(2I + 0x28I)==42);

  assert(int_of(2l + 0x28l)==42);

  assert(int_of(2L + 0x28L)==42);

  assert(int_of(2v + 0x28v)==42);

  assert(int_of(2V + 0x28V)==42);

  assert(int_of(2ll + 0x28ll)==42);

  assert(int_of(2LL + 0x28LL)==42);

  assert(int_of(2u + 0x28u)==42);

  assert(int_of(2ut + 0x28ut)==42);

  assert(int_of(2uT + 0x28uT)==42);

  assert(int_of(2us + 0x28us)==42);

  assert(int_of(2uS + 0x28uS)==42);

  assert(int_of(2ui + 0x28ui)==42);

  assert(int_of(2uI + 0x28uI)==42);

  assert(int_of(2ul + 0x28ul)==42);

  assert(int_of(2uL + 0x28uL)==42);

  assert(int_of(2uv + 0x28uv)==42);

  assert(int_of(2uV + 0x28uV)==42);

  assert(int_of(2ull + 0x28ull)==42);

  assert(int_of(2uLL + 0x28uLL)==42);

  assert(int_of(2Ut + 0x28Ut)==42);

  assert(int_of(2UT + 0x28UT)==42);

  assert(int_of(2Us + 0x28Us)==42);

  assert(int_of(2US + 0x28US)==42);

  assert(int_of(2Ui + 0x28Ui)==42);

  assert(int_of(2UI + 0x28UI)==42);

  assert(int_of(2Ul + 0x28Ul)==42);

  assert(int_of(2UL + 0x28UL)==42);

  assert(int_of(2Uv + 0x28Uv)==42);

  assert(int_of(2UV + 0x28UV)==42);

  assert(int_of(2Ull + 0x28Ull)==42);

  assert(int_of(2ULL + 0x28ULL)==42);

  assert(int_of(2U + 0x28U)==42);

  assert(int_of(2tu + 0x28tu)==42);

  assert(int_of(2Tu + 0x28Tu)==42);

  assert(int_of(2su + 0x28su)==42);

  assert(int_of(2Su + 0x28Su)==42);

  assert(int_of(2iu + 0x28iu)==42);

  assert(int_of(2Iu + 0x28Iu)==42);

  assert(int_of(2lu + 0x28lu)==42);

  assert(int_of(2Lu + 0x28Lu)==42);

  assert(int_of(2vu + 0x28vu)==42);

  assert(int_of(2Vu + 0x28Vu)==42);

  assert(int_of(2llu + 0x28llu)==42);

  assert(int_of(2LLu + 0x28LLu)==42);

  assert(int_of(2tU + 0x28tU)==42);

  assert(int_of(2TU + 0x28TU)==42);

  assert(int_of(2sU + 0x28sU)==42);

  assert(int_of(2SU + 0x28SU)==42);

  assert(int_of(2iU + 0x28iU)==42);

  assert(int_of(2IU + 0x28IU)==42);

  assert(int_of(2lU + 0x28lU)==42);

  assert(int_of(2LU + 0x28LU)==42);

  assert(int_of(2vU + 0x28vU)==42);

  assert(int_of(2VU + 0x28VU)==42);

  assert(int_of(2llU + 0x28llU)==42);

  assert(int_of(2LLU + 0x28LLU)==42);

  assert(int_of(2i8 + 0x28i8)==42);

  assert(int_of(2i16 + 0x28i16)==42);

  assert(int_of(2i32 + 0x28i32)==42);

  assert(int_of(2i64 + 0x28i64)==42);

  assert(int_of(2u8 + 0x28u8)==42);

  assert(int_of(2u16 + 0x28u16)==42);

  assert(int_of(2u32 + 0x28u32)==42);

  assert(int_of(2u64 + 0x28u64)==42);

}

tst_20x28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_20X28 () {

  assert(int_of(2 + 0X28)==42);

  assert(int_of(2t + 0X28t)==42);

  assert(int_of(2T + 0X28T)==42);

  assert(int_of(2s + 0X28s)==42);

  assert(int_of(2S + 0X28S)==42);

  assert(int_of(2i + 0X28i)==42);

  assert(int_of(2I + 0X28I)==42);

  assert(int_of(2l + 0X28l)==42);

  assert(int_of(2L + 0X28L)==42);

  assert(int_of(2v + 0X28v)==42);

  assert(int_of(2V + 0X28V)==42);

  assert(int_of(2ll + 0X28ll)==42);

  assert(int_of(2LL + 0X28LL)==42);

  assert(int_of(2u + 0X28u)==42);

  assert(int_of(2ut + 0X28ut)==42);

  assert(int_of(2uT + 0X28uT)==42);

  assert(int_of(2us + 0X28us)==42);

  assert(int_of(2uS + 0X28uS)==42);

  assert(int_of(2ui + 0X28ui)==42);

  assert(int_of(2uI + 0X28uI)==42);

  assert(int_of(2ul + 0X28ul)==42);

  assert(int_of(2uL + 0X28uL)==42);

  assert(int_of(2uv + 0X28uv)==42);

  assert(int_of(2uV + 0X28uV)==42);

  assert(int_of(2ull + 0X28ull)==42);

  assert(int_of(2uLL + 0X28uLL)==42);

  assert(int_of(2Ut + 0X28Ut)==42);

  assert(int_of(2UT + 0X28UT)==42);

  assert(int_of(2Us + 0X28Us)==42);

  assert(int_of(2US + 0X28US)==42);

  assert(int_of(2Ui + 0X28Ui)==42);

  assert(int_of(2UI + 0X28UI)==42);

  assert(int_of(2Ul + 0X28Ul)==42);

  assert(int_of(2UL + 0X28UL)==42);

  assert(int_of(2Uv + 0X28Uv)==42);

  assert(int_of(2UV + 0X28UV)==42);

  assert(int_of(2Ull + 0X28Ull)==42);

  assert(int_of(2ULL + 0X28ULL)==42);

  assert(int_of(2U + 0X28U)==42);

  assert(int_of(2tu + 0X28tu)==42);

  assert(int_of(2Tu + 0X28Tu)==42);

  assert(int_of(2su + 0X28su)==42);

  assert(int_of(2Su + 0X28Su)==42);

  assert(int_of(2iu + 0X28iu)==42);

  assert(int_of(2Iu + 0X28Iu)==42);

  assert(int_of(2lu + 0X28lu)==42);

  assert(int_of(2Lu + 0X28Lu)==42);

  assert(int_of(2vu + 0X28vu)==42);

  assert(int_of(2Vu + 0X28Vu)==42);

  assert(int_of(2llu + 0X28llu)==42);

  assert(int_of(2LLu + 0X28LLu)==42);

  assert(int_of(2tU + 0X28tU)==42);

  assert(int_of(2TU + 0X28TU)==42);

  assert(int_of(2sU + 0X28sU)==42);

  assert(int_of(2SU + 0X28SU)==42);

  assert(int_of(2iU + 0X28iU)==42);

  assert(int_of(2IU + 0X28IU)==42);

  assert(int_of(2lU + 0X28lU)==42);

  assert(int_of(2LU + 0X28LU)==42);

  assert(int_of(2vU + 0X28vU)==42);

  assert(int_of(2VU + 0X28VU)==42);

  assert(int_of(2llU + 0X28llU)==42);

  assert(int_of(2LLU + 0X28LLU)==42);

  assert(int_of(2i8 + 0X28i8)==42);

  assert(int_of(2i16 + 0X28i16)==42);

  assert(int_of(2i32 + 0X28i32)==42);

  assert(int_of(2i64 + 0X28i64)==42);

  assert(int_of(2u8 + 0X28u8)==42);

  assert(int_of(2u16 + 0X28u16)==42);

  assert(int_of(2u32 + 0X28u32)==42);

  assert(int_of(2u64 + 0X28u64)==42);

}

tst_20X28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0b1040 () {

  assert(int_of(0b10 + 40)==42);

  assert(int_of(0b10t + 40t)==42);

  assert(int_of(0b10T + 40T)==42);

  assert(int_of(0b10s + 40s)==42);

  assert(int_of(0b10S + 40S)==42);

  assert(int_of(0b10i + 40i)==42);

  assert(int_of(0b10I + 40I)==42);

  assert(int_of(0b10l + 40l)==42);

  assert(int_of(0b10L + 40L)==42);

  assert(int_of(0b10v + 40v)==42);

  assert(int_of(0b10V + 40V)==42);

  assert(int_of(0b10ll + 40ll)==42);

  assert(int_of(0b10LL + 40LL)==42);

  assert(int_of(0b10u + 40u)==42);

  assert(int_of(0b10ut + 40ut)==42);

  assert(int_of(0b10uT + 40uT)==42);

  assert(int_of(0b10us + 40us)==42);

  assert(int_of(0b10uS + 40uS)==42);

  assert(int_of(0b10ui + 40ui)==42);

  assert(int_of(0b10uI + 40uI)==42);

  assert(int_of(0b10ul + 40ul)==42);

  assert(int_of(0b10uL + 40uL)==42);

  assert(int_of(0b10uv + 40uv)==42);

  assert(int_of(0b10uV + 40uV)==42);

  assert(int_of(0b10ull + 40ull)==42);

  assert(int_of(0b10uLL + 40uLL)==42);

  assert(int_of(0b10Ut + 40Ut)==42);

  assert(int_of(0b10UT + 40UT)==42);

  assert(int_of(0b10Us + 40Us)==42);

  assert(int_of(0b10US + 40US)==42);

  assert(int_of(0b10Ui + 40Ui)==42);

  assert(int_of(0b10UI + 40UI)==42);

  assert(int_of(0b10Ul + 40Ul)==42);

  assert(int_of(0b10UL + 40UL)==42);

  assert(int_of(0b10Uv + 40Uv)==42);

  assert(int_of(0b10UV + 40UV)==42);

  assert(int_of(0b10Ull + 40Ull)==42);

  assert(int_of(0b10ULL + 40ULL)==42);

  assert(int_of(0b10U + 40U)==42);

  assert(int_of(0b10tu + 40tu)==42);

  assert(int_of(0b10Tu + 40Tu)==42);

  assert(int_of(0b10su + 40su)==42);

  assert(int_of(0b10Su + 40Su)==42);

  assert(int_of(0b10iu + 40iu)==42);

  assert(int_of(0b10Iu + 40Iu)==42);

  assert(int_of(0b10lu + 40lu)==42);

  assert(int_of(0b10Lu + 40Lu)==42);

  assert(int_of(0b10vu + 40vu)==42);

  assert(int_of(0b10Vu + 40Vu)==42);

  assert(int_of(0b10llu + 40llu)==42);

  assert(int_of(0b10LLu + 40LLu)==42);

  assert(int_of(0b10tU + 40tU)==42);

  assert(int_of(0b10TU + 40TU)==42);

  assert(int_of(0b10sU + 40sU)==42);

  assert(int_of(0b10SU + 40SU)==42);

  assert(int_of(0b10iU + 40iU)==42);

  assert(int_of(0b10IU + 40IU)==42);

  assert(int_of(0b10lU + 40lU)==42);

  assert(int_of(0b10LU + 40LU)==42);

  assert(int_of(0b10vU + 40vU)==42);

  assert(int_of(0b10VU + 40VU)==42);

  assert(int_of(0b10llU + 40llU)==42);

  assert(int_of(0b10LLU + 40LLU)==42);

  assert(int_of(0b10i8 + 40i8)==42);

  assert(int_of(0b10i16 + 40i16)==42);

  assert(int_of(0b10i32 + 40i32)==42);

  assert(int_of(0b10i64 + 40i64)==42);

  assert(int_of(0b10u8 + 40u8)==42);

  assert(int_of(0b10u16 + 40u16)==42);

  assert(int_of(0b10u32 + 40u32)==42);

  assert(int_of(0b10u64 + 40u64)==42);

}

tst_0b1040;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0b100b0010_1000 () {

  assert(int_of(0b10 + 0b0010_1000)==42);

  assert(int_of(0b10t + 0b0010_1000t)==42);

  assert(int_of(0b10T + 0b0010_1000T)==42);

  assert(int_of(0b10s + 0b0010_1000s)==42);

  assert(int_of(0b10S + 0b0010_1000S)==42);

  assert(int_of(0b10i + 0b0010_1000i)==42);

  assert(int_of(0b10I + 0b0010_1000I)==42);

  assert(int_of(0b10l + 0b0010_1000l)==42);

  assert(int_of(0b10L + 0b0010_1000L)==42);

  assert(int_of(0b10v + 0b0010_1000v)==42);

  assert(int_of(0b10V + 0b0010_1000V)==42);

  assert(int_of(0b10ll + 0b0010_1000ll)==42);

  assert(int_of(0b10LL + 0b0010_1000LL)==42);

  assert(int_of(0b10u + 0b0010_1000u)==42);

  assert(int_of(0b10ut + 0b0010_1000ut)==42);

  assert(int_of(0b10uT + 0b0010_1000uT)==42);

  assert(int_of(0b10us + 0b0010_1000us)==42);

  assert(int_of(0b10uS + 0b0010_1000uS)==42);

  assert(int_of(0b10ui + 0b0010_1000ui)==42);

  assert(int_of(0b10uI + 0b0010_1000uI)==42);

  assert(int_of(0b10ul + 0b0010_1000ul)==42);

  assert(int_of(0b10uL + 0b0010_1000uL)==42);

  assert(int_of(0b10uv + 0b0010_1000uv)==42);

  assert(int_of(0b10uV + 0b0010_1000uV)==42);

  assert(int_of(0b10ull + 0b0010_1000ull)==42);

  assert(int_of(0b10uLL + 0b0010_1000uLL)==42);

  assert(int_of(0b10Ut + 0b0010_1000Ut)==42);

  assert(int_of(0b10UT + 0b0010_1000UT)==42);

  assert(int_of(0b10Us + 0b0010_1000Us)==42);

  assert(int_of(0b10US + 0b0010_1000US)==42);

  assert(int_of(0b10Ui + 0b0010_1000Ui)==42);

  assert(int_of(0b10UI + 0b0010_1000UI)==42);

  assert(int_of(0b10Ul + 0b0010_1000Ul)==42);

  assert(int_of(0b10UL + 0b0010_1000UL)==42);

  assert(int_of(0b10Uv + 0b0010_1000Uv)==42);

  assert(int_of(0b10UV + 0b0010_1000UV)==42);

  assert(int_of(0b10Ull + 0b0010_1000Ull)==42);

  assert(int_of(0b10ULL + 0b0010_1000ULL)==42);

  assert(int_of(0b10U + 0b0010_1000U)==42);

  assert(int_of(0b10tu + 0b0010_1000tu)==42);

  assert(int_of(0b10Tu + 0b0010_1000Tu)==42);

  assert(int_of(0b10su + 0b0010_1000su)==42);

  assert(int_of(0b10Su + 0b0010_1000Su)==42);

  assert(int_of(0b10iu + 0b0010_1000iu)==42);

  assert(int_of(0b10Iu + 0b0010_1000Iu)==42);

  assert(int_of(0b10lu + 0b0010_1000lu)==42);

  assert(int_of(0b10Lu + 0b0010_1000Lu)==42);

  assert(int_of(0b10vu + 0b0010_1000vu)==42);

  assert(int_of(0b10Vu + 0b0010_1000Vu)==42);

  assert(int_of(0b10llu + 0b0010_1000llu)==42);

  assert(int_of(0b10LLu + 0b0010_1000LLu)==42);

  assert(int_of(0b10tU + 0b0010_1000tU)==42);

  assert(int_of(0b10TU + 0b0010_1000TU)==42);

  assert(int_of(0b10sU + 0b0010_1000sU)==42);

  assert(int_of(0b10SU + 0b0010_1000SU)==42);

  assert(int_of(0b10iU + 0b0010_1000iU)==42);

  assert(int_of(0b10IU + 0b0010_1000IU)==42);

  assert(int_of(0b10lU + 0b0010_1000lU)==42);

  assert(int_of(0b10LU + 0b0010_1000LU)==42);

  assert(int_of(0b10vU + 0b0010_1000vU)==42);

  assert(int_of(0b10VU + 0b0010_1000VU)==42);

  assert(int_of(0b10llU + 0b0010_1000llU)==42);

  assert(int_of(0b10LLU + 0b0010_1000LLU)==42);

  assert(int_of(0b10i8 + 0b0010_1000i8)==42);

  assert(int_of(0b10i16 + 0b0010_1000i16)==42);

  assert(int_of(0b10i32 + 0b0010_1000i32)==42);

  assert(int_of(0b10i64 + 0b0010_1000i64)==42);

  assert(int_of(0b10u8 + 0b0010_1000u8)==42);

  assert(int_of(0b10u16 + 0b0010_1000u16)==42);

  assert(int_of(0b10u32 + 0b0010_1000u32)==42);

  assert(int_of(0b10u64 + 0b0010_1000u64)==42);

}

tst_0b100b0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0b100B_0010_1000 () {

  assert(int_of(0b10 + 0B_0010_1000)==42);

  assert(int_of(0b10t + 0B_0010_1000t)==42);

  assert(int_of(0b10T + 0B_0010_1000T)==42);

  assert(int_of(0b10s + 0B_0010_1000s)==42);

  assert(int_of(0b10S + 0B_0010_1000S)==42);

  assert(int_of(0b10i + 0B_0010_1000i)==42);

  assert(int_of(0b10I + 0B_0010_1000I)==42);

  assert(int_of(0b10l + 0B_0010_1000l)==42);

  assert(int_of(0b10L + 0B_0010_1000L)==42);

  assert(int_of(0b10v + 0B_0010_1000v)==42);

  assert(int_of(0b10V + 0B_0010_1000V)==42);

  assert(int_of(0b10ll + 0B_0010_1000ll)==42);

  assert(int_of(0b10LL + 0B_0010_1000LL)==42);

  assert(int_of(0b10u + 0B_0010_1000u)==42);

  assert(int_of(0b10ut + 0B_0010_1000ut)==42);

  assert(int_of(0b10uT + 0B_0010_1000uT)==42);

  assert(int_of(0b10us + 0B_0010_1000us)==42);

  assert(int_of(0b10uS + 0B_0010_1000uS)==42);

  assert(int_of(0b10ui + 0B_0010_1000ui)==42);

  assert(int_of(0b10uI + 0B_0010_1000uI)==42);

  assert(int_of(0b10ul + 0B_0010_1000ul)==42);

  assert(int_of(0b10uL + 0B_0010_1000uL)==42);

  assert(int_of(0b10uv + 0B_0010_1000uv)==42);

  assert(int_of(0b10uV + 0B_0010_1000uV)==42);

  assert(int_of(0b10ull + 0B_0010_1000ull)==42);

  assert(int_of(0b10uLL + 0B_0010_1000uLL)==42);

  assert(int_of(0b10Ut + 0B_0010_1000Ut)==42);

  assert(int_of(0b10UT + 0B_0010_1000UT)==42);

  assert(int_of(0b10Us + 0B_0010_1000Us)==42);

  assert(int_of(0b10US + 0B_0010_1000US)==42);

  assert(int_of(0b10Ui + 0B_0010_1000Ui)==42);

  assert(int_of(0b10UI + 0B_0010_1000UI)==42);

  assert(int_of(0b10Ul + 0B_0010_1000Ul)==42);

  assert(int_of(0b10UL + 0B_0010_1000UL)==42);

  assert(int_of(0b10Uv + 0B_0010_1000Uv)==42);

  assert(int_of(0b10UV + 0B_0010_1000UV)==42);

  assert(int_of(0b10Ull + 0B_0010_1000Ull)==42);

  assert(int_of(0b10ULL + 0B_0010_1000ULL)==42);

  assert(int_of(0b10U + 0B_0010_1000U)==42);

  assert(int_of(0b10tu + 0B_0010_1000tu)==42);

  assert(int_of(0b10Tu + 0B_0010_1000Tu)==42);

  assert(int_of(0b10su + 0B_0010_1000su)==42);

  assert(int_of(0b10Su + 0B_0010_1000Su)==42);

  assert(int_of(0b10iu + 0B_0010_1000iu)==42);

  assert(int_of(0b10Iu + 0B_0010_1000Iu)==42);

  assert(int_of(0b10lu + 0B_0010_1000lu)==42);

  assert(int_of(0b10Lu + 0B_0010_1000Lu)==42);

  assert(int_of(0b10vu + 0B_0010_1000vu)==42);

  assert(int_of(0b10Vu + 0B_0010_1000Vu)==42);

  assert(int_of(0b10llu + 0B_0010_1000llu)==42);

  assert(int_of(0b10LLu + 0B_0010_1000LLu)==42);

  assert(int_of(0b10tU + 0B_0010_1000tU)==42);

  assert(int_of(0b10TU + 0B_0010_1000TU)==42);

  assert(int_of(0b10sU + 0B_0010_1000sU)==42);

  assert(int_of(0b10SU + 0B_0010_1000SU)==42);

  assert(int_of(0b10iU + 0B_0010_1000iU)==42);

  assert(int_of(0b10IU + 0B_0010_1000IU)==42);

  assert(int_of(0b10lU + 0B_0010_1000lU)==42);

  assert(int_of(0b10LU + 0B_0010_1000LU)==42);

  assert(int_of(0b10vU + 0B_0010_1000vU)==42);

  assert(int_of(0b10VU + 0B_0010_1000VU)==42);

  assert(int_of(0b10llU + 0B_0010_1000llU)==42);

  assert(int_of(0b10LLU + 0B_0010_1000LLU)==42);

  assert(int_of(0b10i8 + 0B_0010_1000i8)==42);

  assert(int_of(0b10i16 + 0B_0010_1000i16)==42);

  assert(int_of(0b10i32 + 0B_0010_1000i32)==42);

  assert(int_of(0b10i64 + 0B_0010_1000i64)==42);

  assert(int_of(0b10u8 + 0B_0010_1000u8)==42);

  assert(int_of(0b10u16 + 0B_0010_1000u16)==42);

  assert(int_of(0b10u32 + 0B_0010_1000u32)==42);

  assert(int_of(0b10u64 + 0B_0010_1000u64)==42);

}

tst_0b100B_0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0b100o50 () {

  assert(int_of(0b10 + 0o50)==42);

  assert(int_of(0b10t + 0o50t)==42);

  assert(int_of(0b10T + 0o50T)==42);

  assert(int_of(0b10s + 0o50s)==42);

  assert(int_of(0b10S + 0o50S)==42);

  assert(int_of(0b10i + 0o50i)==42);

  assert(int_of(0b10I + 0o50I)==42);

  assert(int_of(0b10l + 0o50l)==42);

  assert(int_of(0b10L + 0o50L)==42);

  assert(int_of(0b10v + 0o50v)==42);

  assert(int_of(0b10V + 0o50V)==42);

  assert(int_of(0b10ll + 0o50ll)==42);

  assert(int_of(0b10LL + 0o50LL)==42);

  assert(int_of(0b10u + 0o50u)==42);

  assert(int_of(0b10ut + 0o50ut)==42);

  assert(int_of(0b10uT + 0o50uT)==42);

  assert(int_of(0b10us + 0o50us)==42);

  assert(int_of(0b10uS + 0o50uS)==42);

  assert(int_of(0b10ui + 0o50ui)==42);

  assert(int_of(0b10uI + 0o50uI)==42);

  assert(int_of(0b10ul + 0o50ul)==42);

  assert(int_of(0b10uL + 0o50uL)==42);

  assert(int_of(0b10uv + 0o50uv)==42);

  assert(int_of(0b10uV + 0o50uV)==42);

  assert(int_of(0b10ull + 0o50ull)==42);

  assert(int_of(0b10uLL + 0o50uLL)==42);

  assert(int_of(0b10Ut + 0o50Ut)==42);

  assert(int_of(0b10UT + 0o50UT)==42);

  assert(int_of(0b10Us + 0o50Us)==42);

  assert(int_of(0b10US + 0o50US)==42);

  assert(int_of(0b10Ui + 0o50Ui)==42);

  assert(int_of(0b10UI + 0o50UI)==42);

  assert(int_of(0b10Ul + 0o50Ul)==42);

  assert(int_of(0b10UL + 0o50UL)==42);

  assert(int_of(0b10Uv + 0o50Uv)==42);

  assert(int_of(0b10UV + 0o50UV)==42);

  assert(int_of(0b10Ull + 0o50Ull)==42);

  assert(int_of(0b10ULL + 0o50ULL)==42);

  assert(int_of(0b10U + 0o50U)==42);

  assert(int_of(0b10tu + 0o50tu)==42);

  assert(int_of(0b10Tu + 0o50Tu)==42);

  assert(int_of(0b10su + 0o50su)==42);

  assert(int_of(0b10Su + 0o50Su)==42);

  assert(int_of(0b10iu + 0o50iu)==42);

  assert(int_of(0b10Iu + 0o50Iu)==42);

  assert(int_of(0b10lu + 0o50lu)==42);

  assert(int_of(0b10Lu + 0o50Lu)==42);

  assert(int_of(0b10vu + 0o50vu)==42);

  assert(int_of(0b10Vu + 0o50Vu)==42);

  assert(int_of(0b10llu + 0o50llu)==42);

  assert(int_of(0b10LLu + 0o50LLu)==42);

  assert(int_of(0b10tU + 0o50tU)==42);

  assert(int_of(0b10TU + 0o50TU)==42);

  assert(int_of(0b10sU + 0o50sU)==42);

  assert(int_of(0b10SU + 0o50SU)==42);

  assert(int_of(0b10iU + 0o50iU)==42);

  assert(int_of(0b10IU + 0o50IU)==42);

  assert(int_of(0b10lU + 0o50lU)==42);

  assert(int_of(0b10LU + 0o50LU)==42);

  assert(int_of(0b10vU + 0o50vU)==42);

  assert(int_of(0b10VU + 0o50VU)==42);

  assert(int_of(0b10llU + 0o50llU)==42);

  assert(int_of(0b10LLU + 0o50LLU)==42);

  assert(int_of(0b10i8 + 0o50i8)==42);

  assert(int_of(0b10i16 + 0o50i16)==42);

  assert(int_of(0b10i32 + 0o50i32)==42);

  assert(int_of(0b10i64 + 0o50i64)==42);

  assert(int_of(0b10u8 + 0o50u8)==42);

  assert(int_of(0b10u16 + 0o50u16)==42);

  assert(int_of(0b10u32 + 0o50u32)==42);

  assert(int_of(0b10u64 + 0o50u64)==42);

}

tst_0b100o50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0b100O50 () {

  assert(int_of(0b10 + 0O50)==42);

  assert(int_of(0b10t + 0O50t)==42);

  assert(int_of(0b10T + 0O50T)==42);

  assert(int_of(0b10s + 0O50s)==42);

  assert(int_of(0b10S + 0O50S)==42);

  assert(int_of(0b10i + 0O50i)==42);

  assert(int_of(0b10I + 0O50I)==42);

  assert(int_of(0b10l + 0O50l)==42);

  assert(int_of(0b10L + 0O50L)==42);

  assert(int_of(0b10v + 0O50v)==42);

  assert(int_of(0b10V + 0O50V)==42);

  assert(int_of(0b10ll + 0O50ll)==42);

  assert(int_of(0b10LL + 0O50LL)==42);

  assert(int_of(0b10u + 0O50u)==42);

  assert(int_of(0b10ut + 0O50ut)==42);

  assert(int_of(0b10uT + 0O50uT)==42);

  assert(int_of(0b10us + 0O50us)==42);

  assert(int_of(0b10uS + 0O50uS)==42);

  assert(int_of(0b10ui + 0O50ui)==42);

  assert(int_of(0b10uI + 0O50uI)==42);

  assert(int_of(0b10ul + 0O50ul)==42);

  assert(int_of(0b10uL + 0O50uL)==42);

  assert(int_of(0b10uv + 0O50uv)==42);

  assert(int_of(0b10uV + 0O50uV)==42);

  assert(int_of(0b10ull + 0O50ull)==42);

  assert(int_of(0b10uLL + 0O50uLL)==42);

  assert(int_of(0b10Ut + 0O50Ut)==42);

  assert(int_of(0b10UT + 0O50UT)==42);

  assert(int_of(0b10Us + 0O50Us)==42);

  assert(int_of(0b10US + 0O50US)==42);

  assert(int_of(0b10Ui + 0O50Ui)==42);

  assert(int_of(0b10UI + 0O50UI)==42);

  assert(int_of(0b10Ul + 0O50Ul)==42);

  assert(int_of(0b10UL + 0O50UL)==42);

  assert(int_of(0b10Uv + 0O50Uv)==42);

  assert(int_of(0b10UV + 0O50UV)==42);

  assert(int_of(0b10Ull + 0O50Ull)==42);

  assert(int_of(0b10ULL + 0O50ULL)==42);

  assert(int_of(0b10U + 0O50U)==42);

  assert(int_of(0b10tu + 0O50tu)==42);

  assert(int_of(0b10Tu + 0O50Tu)==42);

  assert(int_of(0b10su + 0O50su)==42);

  assert(int_of(0b10Su + 0O50Su)==42);

  assert(int_of(0b10iu + 0O50iu)==42);

  assert(int_of(0b10Iu + 0O50Iu)==42);

  assert(int_of(0b10lu + 0O50lu)==42);

  assert(int_of(0b10Lu + 0O50Lu)==42);

  assert(int_of(0b10vu + 0O50vu)==42);

  assert(int_of(0b10Vu + 0O50Vu)==42);

  assert(int_of(0b10llu + 0O50llu)==42);

  assert(int_of(0b10LLu + 0O50LLu)==42);

  assert(int_of(0b10tU + 0O50tU)==42);

  assert(int_of(0b10TU + 0O50TU)==42);

  assert(int_of(0b10sU + 0O50sU)==42);

  assert(int_of(0b10SU + 0O50SU)==42);

  assert(int_of(0b10iU + 0O50iU)==42);

  assert(int_of(0b10IU + 0O50IU)==42);

  assert(int_of(0b10lU + 0O50lU)==42);

  assert(int_of(0b10LU + 0O50LU)==42);

  assert(int_of(0b10vU + 0O50vU)==42);

  assert(int_of(0b10VU + 0O50VU)==42);

  assert(int_of(0b10llU + 0O50llU)==42);

  assert(int_of(0b10LLU + 0O50LLU)==42);

  assert(int_of(0b10i8 + 0O50i8)==42);

  assert(int_of(0b10i16 + 0O50i16)==42);

  assert(int_of(0b10i32 + 0O50i32)==42);

  assert(int_of(0b10i64 + 0O50i64)==42);

  assert(int_of(0b10u8 + 0O50u8)==42);

  assert(int_of(0b10u16 + 0O50u16)==42);

  assert(int_of(0b10u32 + 0O50u32)==42);

  assert(int_of(0b10u64 + 0O50u64)==42);

}

tst_0b100O50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0b100d40 () {

  assert(int_of(0b10 + 0d40)==42);

  assert(int_of(0b10t + 0d40t)==42);

  assert(int_of(0b10T + 0d40T)==42);

  assert(int_of(0b10s + 0d40s)==42);

  assert(int_of(0b10S + 0d40S)==42);

  assert(int_of(0b10i + 0d40i)==42);

  assert(int_of(0b10I + 0d40I)==42);

  assert(int_of(0b10l + 0d40l)==42);

  assert(int_of(0b10L + 0d40L)==42);

  assert(int_of(0b10v + 0d40v)==42);

  assert(int_of(0b10V + 0d40V)==42);

  assert(int_of(0b10ll + 0d40ll)==42);

  assert(int_of(0b10LL + 0d40LL)==42);

  assert(int_of(0b10u + 0d40u)==42);

  assert(int_of(0b10ut + 0d40ut)==42);

  assert(int_of(0b10uT + 0d40uT)==42);

  assert(int_of(0b10us + 0d40us)==42);

  assert(int_of(0b10uS + 0d40uS)==42);

  assert(int_of(0b10ui + 0d40ui)==42);

  assert(int_of(0b10uI + 0d40uI)==42);

  assert(int_of(0b10ul + 0d40ul)==42);

  assert(int_of(0b10uL + 0d40uL)==42);

  assert(int_of(0b10uv + 0d40uv)==42);

  assert(int_of(0b10uV + 0d40uV)==42);

  assert(int_of(0b10ull + 0d40ull)==42);

  assert(int_of(0b10uLL + 0d40uLL)==42);

  assert(int_of(0b10Ut + 0d40Ut)==42);

  assert(int_of(0b10UT + 0d40UT)==42);

  assert(int_of(0b10Us + 0d40Us)==42);

  assert(int_of(0b10US + 0d40US)==42);

  assert(int_of(0b10Ui + 0d40Ui)==42);

  assert(int_of(0b10UI + 0d40UI)==42);

  assert(int_of(0b10Ul + 0d40Ul)==42);

  assert(int_of(0b10UL + 0d40UL)==42);

  assert(int_of(0b10Uv + 0d40Uv)==42);

  assert(int_of(0b10UV + 0d40UV)==42);

  assert(int_of(0b10Ull + 0d40Ull)==42);

  assert(int_of(0b10ULL + 0d40ULL)==42);

  assert(int_of(0b10U + 0d40U)==42);

  assert(int_of(0b10tu + 0d40tu)==42);

  assert(int_of(0b10Tu + 0d40Tu)==42);

  assert(int_of(0b10su + 0d40su)==42);

  assert(int_of(0b10Su + 0d40Su)==42);

  assert(int_of(0b10iu + 0d40iu)==42);

  assert(int_of(0b10Iu + 0d40Iu)==42);

  assert(int_of(0b10lu + 0d40lu)==42);

  assert(int_of(0b10Lu + 0d40Lu)==42);

  assert(int_of(0b10vu + 0d40vu)==42);

  assert(int_of(0b10Vu + 0d40Vu)==42);

  assert(int_of(0b10llu + 0d40llu)==42);

  assert(int_of(0b10LLu + 0d40LLu)==42);

  assert(int_of(0b10tU + 0d40tU)==42);

  assert(int_of(0b10TU + 0d40TU)==42);

  assert(int_of(0b10sU + 0d40sU)==42);

  assert(int_of(0b10SU + 0d40SU)==42);

  assert(int_of(0b10iU + 0d40iU)==42);

  assert(int_of(0b10IU + 0d40IU)==42);

  assert(int_of(0b10lU + 0d40lU)==42);

  assert(int_of(0b10LU + 0d40LU)==42);

  assert(int_of(0b10vU + 0d40vU)==42);

  assert(int_of(0b10VU + 0d40VU)==42);

  assert(int_of(0b10llU + 0d40llU)==42);

  assert(int_of(0b10LLU + 0d40LLU)==42);

  assert(int_of(0b10i8 + 0d40i8)==42);

  assert(int_of(0b10i16 + 0d40i16)==42);

  assert(int_of(0b10i32 + 0d40i32)==42);

  assert(int_of(0b10i64 + 0d40i64)==42);

  assert(int_of(0b10u8 + 0d40u8)==42);

  assert(int_of(0b10u16 + 0d40u16)==42);

  assert(int_of(0b10u32 + 0d40u32)==42);

  assert(int_of(0b10u64 + 0d40u64)==42);

}

tst_0b100d40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0b100D40 () {

  assert(int_of(0b10 + 0D40)==42);

  assert(int_of(0b10t + 0D40t)==42);

  assert(int_of(0b10T + 0D40T)==42);

  assert(int_of(0b10s + 0D40s)==42);

  assert(int_of(0b10S + 0D40S)==42);

  assert(int_of(0b10i + 0D40i)==42);

  assert(int_of(0b10I + 0D40I)==42);

  assert(int_of(0b10l + 0D40l)==42);

  assert(int_of(0b10L + 0D40L)==42);

  assert(int_of(0b10v + 0D40v)==42);

  assert(int_of(0b10V + 0D40V)==42);

  assert(int_of(0b10ll + 0D40ll)==42);

  assert(int_of(0b10LL + 0D40LL)==42);

  assert(int_of(0b10u + 0D40u)==42);

  assert(int_of(0b10ut + 0D40ut)==42);

  assert(int_of(0b10uT + 0D40uT)==42);

  assert(int_of(0b10us + 0D40us)==42);

  assert(int_of(0b10uS + 0D40uS)==42);

  assert(int_of(0b10ui + 0D40ui)==42);

  assert(int_of(0b10uI + 0D40uI)==42);

  assert(int_of(0b10ul + 0D40ul)==42);

  assert(int_of(0b10uL + 0D40uL)==42);

  assert(int_of(0b10uv + 0D40uv)==42);

  assert(int_of(0b10uV + 0D40uV)==42);

  assert(int_of(0b10ull + 0D40ull)==42);

  assert(int_of(0b10uLL + 0D40uLL)==42);

  assert(int_of(0b10Ut + 0D40Ut)==42);

  assert(int_of(0b10UT + 0D40UT)==42);

  assert(int_of(0b10Us + 0D40Us)==42);

  assert(int_of(0b10US + 0D40US)==42);

  assert(int_of(0b10Ui + 0D40Ui)==42);

  assert(int_of(0b10UI + 0D40UI)==42);

  assert(int_of(0b10Ul + 0D40Ul)==42);

  assert(int_of(0b10UL + 0D40UL)==42);

  assert(int_of(0b10Uv + 0D40Uv)==42);

  assert(int_of(0b10UV + 0D40UV)==42);

  assert(int_of(0b10Ull + 0D40Ull)==42);

  assert(int_of(0b10ULL + 0D40ULL)==42);

  assert(int_of(0b10U + 0D40U)==42);

  assert(int_of(0b10tu + 0D40tu)==42);

  assert(int_of(0b10Tu + 0D40Tu)==42);

  assert(int_of(0b10su + 0D40su)==42);

  assert(int_of(0b10Su + 0D40Su)==42);

  assert(int_of(0b10iu + 0D40iu)==42);

  assert(int_of(0b10Iu + 0D40Iu)==42);

  assert(int_of(0b10lu + 0D40lu)==42);

  assert(int_of(0b10Lu + 0D40Lu)==42);

  assert(int_of(0b10vu + 0D40vu)==42);

  assert(int_of(0b10Vu + 0D40Vu)==42);

  assert(int_of(0b10llu + 0D40llu)==42);

  assert(int_of(0b10LLu + 0D40LLu)==42);

  assert(int_of(0b10tU + 0D40tU)==42);

  assert(int_of(0b10TU + 0D40TU)==42);

  assert(int_of(0b10sU + 0D40sU)==42);

  assert(int_of(0b10SU + 0D40SU)==42);

  assert(int_of(0b10iU + 0D40iU)==42);

  assert(int_of(0b10IU + 0D40IU)==42);

  assert(int_of(0b10lU + 0D40lU)==42);

  assert(int_of(0b10LU + 0D40LU)==42);

  assert(int_of(0b10vU + 0D40vU)==42);

  assert(int_of(0b10VU + 0D40VU)==42);

  assert(int_of(0b10llU + 0D40llU)==42);

  assert(int_of(0b10LLU + 0D40LLU)==42);

  assert(int_of(0b10i8 + 0D40i8)==42);

  assert(int_of(0b10i16 + 0D40i16)==42);

  assert(int_of(0b10i32 + 0D40i32)==42);

  assert(int_of(0b10i64 + 0D40i64)==42);

  assert(int_of(0b10u8 + 0D40u8)==42);

  assert(int_of(0b10u16 + 0D40u16)==42);

  assert(int_of(0b10u32 + 0D40u32)==42);

  assert(int_of(0b10u64 + 0D40u64)==42);

}

tst_0b100D40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0b100x28 () {

  assert(int_of(0b10 + 0x28)==42);

  assert(int_of(0b10t + 0x28t)==42);

  assert(int_of(0b10T + 0x28T)==42);

  assert(int_of(0b10s + 0x28s)==42);

  assert(int_of(0b10S + 0x28S)==42);

  assert(int_of(0b10i + 0x28i)==42);

  assert(int_of(0b10I + 0x28I)==42);

  assert(int_of(0b10l + 0x28l)==42);

  assert(int_of(0b10L + 0x28L)==42);

  assert(int_of(0b10v + 0x28v)==42);

  assert(int_of(0b10V + 0x28V)==42);

  assert(int_of(0b10ll + 0x28ll)==42);

  assert(int_of(0b10LL + 0x28LL)==42);

  assert(int_of(0b10u + 0x28u)==42);

  assert(int_of(0b10ut + 0x28ut)==42);

  assert(int_of(0b10uT + 0x28uT)==42);

  assert(int_of(0b10us + 0x28us)==42);

  assert(int_of(0b10uS + 0x28uS)==42);

  assert(int_of(0b10ui + 0x28ui)==42);

  assert(int_of(0b10uI + 0x28uI)==42);

  assert(int_of(0b10ul + 0x28ul)==42);

  assert(int_of(0b10uL + 0x28uL)==42);

  assert(int_of(0b10uv + 0x28uv)==42);

  assert(int_of(0b10uV + 0x28uV)==42);

  assert(int_of(0b10ull + 0x28ull)==42);

  assert(int_of(0b10uLL + 0x28uLL)==42);

  assert(int_of(0b10Ut + 0x28Ut)==42);

  assert(int_of(0b10UT + 0x28UT)==42);

  assert(int_of(0b10Us + 0x28Us)==42);

  assert(int_of(0b10US + 0x28US)==42);

  assert(int_of(0b10Ui + 0x28Ui)==42);

  assert(int_of(0b10UI + 0x28UI)==42);

  assert(int_of(0b10Ul + 0x28Ul)==42);

  assert(int_of(0b10UL + 0x28UL)==42);

  assert(int_of(0b10Uv + 0x28Uv)==42);

  assert(int_of(0b10UV + 0x28UV)==42);

  assert(int_of(0b10Ull + 0x28Ull)==42);

  assert(int_of(0b10ULL + 0x28ULL)==42);

  assert(int_of(0b10U + 0x28U)==42);

  assert(int_of(0b10tu + 0x28tu)==42);

  assert(int_of(0b10Tu + 0x28Tu)==42);

  assert(int_of(0b10su + 0x28su)==42);

  assert(int_of(0b10Su + 0x28Su)==42);

  assert(int_of(0b10iu + 0x28iu)==42);

  assert(int_of(0b10Iu + 0x28Iu)==42);

  assert(int_of(0b10lu + 0x28lu)==42);

  assert(int_of(0b10Lu + 0x28Lu)==42);

  assert(int_of(0b10vu + 0x28vu)==42);

  assert(int_of(0b10Vu + 0x28Vu)==42);

  assert(int_of(0b10llu + 0x28llu)==42);

  assert(int_of(0b10LLu + 0x28LLu)==42);

  assert(int_of(0b10tU + 0x28tU)==42);

  assert(int_of(0b10TU + 0x28TU)==42);

  assert(int_of(0b10sU + 0x28sU)==42);

  assert(int_of(0b10SU + 0x28SU)==42);

  assert(int_of(0b10iU + 0x28iU)==42);

  assert(int_of(0b10IU + 0x28IU)==42);

  assert(int_of(0b10lU + 0x28lU)==42);

  assert(int_of(0b10LU + 0x28LU)==42);

  assert(int_of(0b10vU + 0x28vU)==42);

  assert(int_of(0b10VU + 0x28VU)==42);

  assert(int_of(0b10llU + 0x28llU)==42);

  assert(int_of(0b10LLU + 0x28LLU)==42);

  assert(int_of(0b10i8 + 0x28i8)==42);

  assert(int_of(0b10i16 + 0x28i16)==42);

  assert(int_of(0b10i32 + 0x28i32)==42);

  assert(int_of(0b10i64 + 0x28i64)==42);

  assert(int_of(0b10u8 + 0x28u8)==42);

  assert(int_of(0b10u16 + 0x28u16)==42);

  assert(int_of(0b10u32 + 0x28u32)==42);

  assert(int_of(0b10u64 + 0x28u64)==42);

}

tst_0b100x28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0b100X28 () {

  assert(int_of(0b10 + 0X28)==42);

  assert(int_of(0b10t + 0X28t)==42);

  assert(int_of(0b10T + 0X28T)==42);

  assert(int_of(0b10s + 0X28s)==42);

  assert(int_of(0b10S + 0X28S)==42);

  assert(int_of(0b10i + 0X28i)==42);

  assert(int_of(0b10I + 0X28I)==42);

  assert(int_of(0b10l + 0X28l)==42);

  assert(int_of(0b10L + 0X28L)==42);

  assert(int_of(0b10v + 0X28v)==42);

  assert(int_of(0b10V + 0X28V)==42);

  assert(int_of(0b10ll + 0X28ll)==42);

  assert(int_of(0b10LL + 0X28LL)==42);

  assert(int_of(0b10u + 0X28u)==42);

  assert(int_of(0b10ut + 0X28ut)==42);

  assert(int_of(0b10uT + 0X28uT)==42);

  assert(int_of(0b10us + 0X28us)==42);

  assert(int_of(0b10uS + 0X28uS)==42);

  assert(int_of(0b10ui + 0X28ui)==42);

  assert(int_of(0b10uI + 0X28uI)==42);

  assert(int_of(0b10ul + 0X28ul)==42);

  assert(int_of(0b10uL + 0X28uL)==42);

  assert(int_of(0b10uv + 0X28uv)==42);

  assert(int_of(0b10uV + 0X28uV)==42);

  assert(int_of(0b10ull + 0X28ull)==42);

  assert(int_of(0b10uLL + 0X28uLL)==42);

  assert(int_of(0b10Ut + 0X28Ut)==42);

  assert(int_of(0b10UT + 0X28UT)==42);

  assert(int_of(0b10Us + 0X28Us)==42);

  assert(int_of(0b10US + 0X28US)==42);

  assert(int_of(0b10Ui + 0X28Ui)==42);

  assert(int_of(0b10UI + 0X28UI)==42);

  assert(int_of(0b10Ul + 0X28Ul)==42);

  assert(int_of(0b10UL + 0X28UL)==42);

  assert(int_of(0b10Uv + 0X28Uv)==42);

  assert(int_of(0b10UV + 0X28UV)==42);

  assert(int_of(0b10Ull + 0X28Ull)==42);

  assert(int_of(0b10ULL + 0X28ULL)==42);

  assert(int_of(0b10U + 0X28U)==42);

  assert(int_of(0b10tu + 0X28tu)==42);

  assert(int_of(0b10Tu + 0X28Tu)==42);

  assert(int_of(0b10su + 0X28su)==42);

  assert(int_of(0b10Su + 0X28Su)==42);

  assert(int_of(0b10iu + 0X28iu)==42);

  assert(int_of(0b10Iu + 0X28Iu)==42);

  assert(int_of(0b10lu + 0X28lu)==42);

  assert(int_of(0b10Lu + 0X28Lu)==42);

  assert(int_of(0b10vu + 0X28vu)==42);

  assert(int_of(0b10Vu + 0X28Vu)==42);

  assert(int_of(0b10llu + 0X28llu)==42);

  assert(int_of(0b10LLu + 0X28LLu)==42);

  assert(int_of(0b10tU + 0X28tU)==42);

  assert(int_of(0b10TU + 0X28TU)==42);

  assert(int_of(0b10sU + 0X28sU)==42);

  assert(int_of(0b10SU + 0X28SU)==42);

  assert(int_of(0b10iU + 0X28iU)==42);

  assert(int_of(0b10IU + 0X28IU)==42);

  assert(int_of(0b10lU + 0X28lU)==42);

  assert(int_of(0b10LU + 0X28LU)==42);

  assert(int_of(0b10vU + 0X28vU)==42);

  assert(int_of(0b10VU + 0X28VU)==42);

  assert(int_of(0b10llU + 0X28llU)==42);

  assert(int_of(0b10LLU + 0X28LLU)==42);

  assert(int_of(0b10i8 + 0X28i8)==42);

  assert(int_of(0b10i16 + 0X28i16)==42);

  assert(int_of(0b10i32 + 0X28i32)==42);

  assert(int_of(0b10i64 + 0X28i64)==42);

  assert(int_of(0b10u8 + 0X28u8)==42);

  assert(int_of(0b10u16 + 0X28u16)==42);

  assert(int_of(0b10u32 + 0X28u32)==42);

  assert(int_of(0b10u64 + 0X28u64)==42);

}

tst_0b100X28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0B1040 () {

  assert(int_of(0B10 + 40)==42);

  assert(int_of(0B10t + 40t)==42);

  assert(int_of(0B10T + 40T)==42);

  assert(int_of(0B10s + 40s)==42);

  assert(int_of(0B10S + 40S)==42);

  assert(int_of(0B10i + 40i)==42);

  assert(int_of(0B10I + 40I)==42);

  assert(int_of(0B10l + 40l)==42);

  assert(int_of(0B10L + 40L)==42);

  assert(int_of(0B10v + 40v)==42);

  assert(int_of(0B10V + 40V)==42);

  assert(int_of(0B10ll + 40ll)==42);

  assert(int_of(0B10LL + 40LL)==42);

  assert(int_of(0B10u + 40u)==42);

  assert(int_of(0B10ut + 40ut)==42);

  assert(int_of(0B10uT + 40uT)==42);

  assert(int_of(0B10us + 40us)==42);

  assert(int_of(0B10uS + 40uS)==42);

  assert(int_of(0B10ui + 40ui)==42);

  assert(int_of(0B10uI + 40uI)==42);

  assert(int_of(0B10ul + 40ul)==42);

  assert(int_of(0B10uL + 40uL)==42);

  assert(int_of(0B10uv + 40uv)==42);

  assert(int_of(0B10uV + 40uV)==42);

  assert(int_of(0B10ull + 40ull)==42);

  assert(int_of(0B10uLL + 40uLL)==42);

  assert(int_of(0B10Ut + 40Ut)==42);

  assert(int_of(0B10UT + 40UT)==42);

  assert(int_of(0B10Us + 40Us)==42);

  assert(int_of(0B10US + 40US)==42);

  assert(int_of(0B10Ui + 40Ui)==42);

  assert(int_of(0B10UI + 40UI)==42);

  assert(int_of(0B10Ul + 40Ul)==42);

  assert(int_of(0B10UL + 40UL)==42);

  assert(int_of(0B10Uv + 40Uv)==42);

  assert(int_of(0B10UV + 40UV)==42);

  assert(int_of(0B10Ull + 40Ull)==42);

  assert(int_of(0B10ULL + 40ULL)==42);

  assert(int_of(0B10U + 40U)==42);

  assert(int_of(0B10tu + 40tu)==42);

  assert(int_of(0B10Tu + 40Tu)==42);

  assert(int_of(0B10su + 40su)==42);

  assert(int_of(0B10Su + 40Su)==42);

  assert(int_of(0B10iu + 40iu)==42);

  assert(int_of(0B10Iu + 40Iu)==42);

  assert(int_of(0B10lu + 40lu)==42);

  assert(int_of(0B10Lu + 40Lu)==42);

  assert(int_of(0B10vu + 40vu)==42);

  assert(int_of(0B10Vu + 40Vu)==42);

  assert(int_of(0B10llu + 40llu)==42);

  assert(int_of(0B10LLu + 40LLu)==42);

  assert(int_of(0B10tU + 40tU)==42);

  assert(int_of(0B10TU + 40TU)==42);

  assert(int_of(0B10sU + 40sU)==42);

  assert(int_of(0B10SU + 40SU)==42);

  assert(int_of(0B10iU + 40iU)==42);

  assert(int_of(0B10IU + 40IU)==42);

  assert(int_of(0B10lU + 40lU)==42);

  assert(int_of(0B10LU + 40LU)==42);

  assert(int_of(0B10vU + 40vU)==42);

  assert(int_of(0B10VU + 40VU)==42);

  assert(int_of(0B10llU + 40llU)==42);

  assert(int_of(0B10LLU + 40LLU)==42);

  assert(int_of(0B10i8 + 40i8)==42);

  assert(int_of(0B10i16 + 40i16)==42);

  assert(int_of(0B10i32 + 40i32)==42);

  assert(int_of(0B10i64 + 40i64)==42);

  assert(int_of(0B10u8 + 40u8)==42);

  assert(int_of(0B10u16 + 40u16)==42);

  assert(int_of(0B10u32 + 40u32)==42);

  assert(int_of(0B10u64 + 40u64)==42);

}

tst_0B1040;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0B100b0010_1000 () {

  assert(int_of(0B10 + 0b0010_1000)==42);

  assert(int_of(0B10t + 0b0010_1000t)==42);

  assert(int_of(0B10T + 0b0010_1000T)==42);

  assert(int_of(0B10s + 0b0010_1000s)==42);

  assert(int_of(0B10S + 0b0010_1000S)==42);

  assert(int_of(0B10i + 0b0010_1000i)==42);

  assert(int_of(0B10I + 0b0010_1000I)==42);

  assert(int_of(0B10l + 0b0010_1000l)==42);

  assert(int_of(0B10L + 0b0010_1000L)==42);

  assert(int_of(0B10v + 0b0010_1000v)==42);

  assert(int_of(0B10V + 0b0010_1000V)==42);

  assert(int_of(0B10ll + 0b0010_1000ll)==42);

  assert(int_of(0B10LL + 0b0010_1000LL)==42);

  assert(int_of(0B10u + 0b0010_1000u)==42);

  assert(int_of(0B10ut + 0b0010_1000ut)==42);

  assert(int_of(0B10uT + 0b0010_1000uT)==42);

  assert(int_of(0B10us + 0b0010_1000us)==42);

  assert(int_of(0B10uS + 0b0010_1000uS)==42);

  assert(int_of(0B10ui + 0b0010_1000ui)==42);

  assert(int_of(0B10uI + 0b0010_1000uI)==42);

  assert(int_of(0B10ul + 0b0010_1000ul)==42);

  assert(int_of(0B10uL + 0b0010_1000uL)==42);

  assert(int_of(0B10uv + 0b0010_1000uv)==42);

  assert(int_of(0B10uV + 0b0010_1000uV)==42);

  assert(int_of(0B10ull + 0b0010_1000ull)==42);

  assert(int_of(0B10uLL + 0b0010_1000uLL)==42);

  assert(int_of(0B10Ut + 0b0010_1000Ut)==42);

  assert(int_of(0B10UT + 0b0010_1000UT)==42);

  assert(int_of(0B10Us + 0b0010_1000Us)==42);

  assert(int_of(0B10US + 0b0010_1000US)==42);

  assert(int_of(0B10Ui + 0b0010_1000Ui)==42);

  assert(int_of(0B10UI + 0b0010_1000UI)==42);

  assert(int_of(0B10Ul + 0b0010_1000Ul)==42);

  assert(int_of(0B10UL + 0b0010_1000UL)==42);

  assert(int_of(0B10Uv + 0b0010_1000Uv)==42);

  assert(int_of(0B10UV + 0b0010_1000UV)==42);

  assert(int_of(0B10Ull + 0b0010_1000Ull)==42);

  assert(int_of(0B10ULL + 0b0010_1000ULL)==42);

  assert(int_of(0B10U + 0b0010_1000U)==42);

  assert(int_of(0B10tu + 0b0010_1000tu)==42);

  assert(int_of(0B10Tu + 0b0010_1000Tu)==42);

  assert(int_of(0B10su + 0b0010_1000su)==42);

  assert(int_of(0B10Su + 0b0010_1000Su)==42);

  assert(int_of(0B10iu + 0b0010_1000iu)==42);

  assert(int_of(0B10Iu + 0b0010_1000Iu)==42);

  assert(int_of(0B10lu + 0b0010_1000lu)==42);

  assert(int_of(0B10Lu + 0b0010_1000Lu)==42);

  assert(int_of(0B10vu + 0b0010_1000vu)==42);

  assert(int_of(0B10Vu + 0b0010_1000Vu)==42);

  assert(int_of(0B10llu + 0b0010_1000llu)==42);

  assert(int_of(0B10LLu + 0b0010_1000LLu)==42);

  assert(int_of(0B10tU + 0b0010_1000tU)==42);

  assert(int_of(0B10TU + 0b0010_1000TU)==42);

  assert(int_of(0B10sU + 0b0010_1000sU)==42);

  assert(int_of(0B10SU + 0b0010_1000SU)==42);

  assert(int_of(0B10iU + 0b0010_1000iU)==42);

  assert(int_of(0B10IU + 0b0010_1000IU)==42);

  assert(int_of(0B10lU + 0b0010_1000lU)==42);

  assert(int_of(0B10LU + 0b0010_1000LU)==42);

  assert(int_of(0B10vU + 0b0010_1000vU)==42);

  assert(int_of(0B10VU + 0b0010_1000VU)==42);

  assert(int_of(0B10llU + 0b0010_1000llU)==42);

  assert(int_of(0B10LLU + 0b0010_1000LLU)==42);

  assert(int_of(0B10i8 + 0b0010_1000i8)==42);

  assert(int_of(0B10i16 + 0b0010_1000i16)==42);

  assert(int_of(0B10i32 + 0b0010_1000i32)==42);

  assert(int_of(0B10i64 + 0b0010_1000i64)==42);

  assert(int_of(0B10u8 + 0b0010_1000u8)==42);

  assert(int_of(0B10u16 + 0b0010_1000u16)==42);

  assert(int_of(0B10u32 + 0b0010_1000u32)==42);

  assert(int_of(0B10u64 + 0b0010_1000u64)==42);

}

tst_0B100b0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0B100B_0010_1000 () {

  assert(int_of(0B10 + 0B_0010_1000)==42);

  assert(int_of(0B10t + 0B_0010_1000t)==42);

  assert(int_of(0B10T + 0B_0010_1000T)==42);

  assert(int_of(0B10s + 0B_0010_1000s)==42);

  assert(int_of(0B10S + 0B_0010_1000S)==42);

  assert(int_of(0B10i + 0B_0010_1000i)==42);

  assert(int_of(0B10I + 0B_0010_1000I)==42);

  assert(int_of(0B10l + 0B_0010_1000l)==42);

  assert(int_of(0B10L + 0B_0010_1000L)==42);

  assert(int_of(0B10v + 0B_0010_1000v)==42);

  assert(int_of(0B10V + 0B_0010_1000V)==42);

  assert(int_of(0B10ll + 0B_0010_1000ll)==42);

  assert(int_of(0B10LL + 0B_0010_1000LL)==42);

  assert(int_of(0B10u + 0B_0010_1000u)==42);

  assert(int_of(0B10ut + 0B_0010_1000ut)==42);

  assert(int_of(0B10uT + 0B_0010_1000uT)==42);

  assert(int_of(0B10us + 0B_0010_1000us)==42);

  assert(int_of(0B10uS + 0B_0010_1000uS)==42);

  assert(int_of(0B10ui + 0B_0010_1000ui)==42);

  assert(int_of(0B10uI + 0B_0010_1000uI)==42);

  assert(int_of(0B10ul + 0B_0010_1000ul)==42);

  assert(int_of(0B10uL + 0B_0010_1000uL)==42);

  assert(int_of(0B10uv + 0B_0010_1000uv)==42);

  assert(int_of(0B10uV + 0B_0010_1000uV)==42);

  assert(int_of(0B10ull + 0B_0010_1000ull)==42);

  assert(int_of(0B10uLL + 0B_0010_1000uLL)==42);

  assert(int_of(0B10Ut + 0B_0010_1000Ut)==42);

  assert(int_of(0B10UT + 0B_0010_1000UT)==42);

  assert(int_of(0B10Us + 0B_0010_1000Us)==42);

  assert(int_of(0B10US + 0B_0010_1000US)==42);

  assert(int_of(0B10Ui + 0B_0010_1000Ui)==42);

  assert(int_of(0B10UI + 0B_0010_1000UI)==42);

  assert(int_of(0B10Ul + 0B_0010_1000Ul)==42);

  assert(int_of(0B10UL + 0B_0010_1000UL)==42);

  assert(int_of(0B10Uv + 0B_0010_1000Uv)==42);

  assert(int_of(0B10UV + 0B_0010_1000UV)==42);

  assert(int_of(0B10Ull + 0B_0010_1000Ull)==42);

  assert(int_of(0B10ULL + 0B_0010_1000ULL)==42);

  assert(int_of(0B10U + 0B_0010_1000U)==42);

  assert(int_of(0B10tu + 0B_0010_1000tu)==42);

  assert(int_of(0B10Tu + 0B_0010_1000Tu)==42);

  assert(int_of(0B10su + 0B_0010_1000su)==42);

  assert(int_of(0B10Su + 0B_0010_1000Su)==42);

  assert(int_of(0B10iu + 0B_0010_1000iu)==42);

  assert(int_of(0B10Iu + 0B_0010_1000Iu)==42);

  assert(int_of(0B10lu + 0B_0010_1000lu)==42);

  assert(int_of(0B10Lu + 0B_0010_1000Lu)==42);

  assert(int_of(0B10vu + 0B_0010_1000vu)==42);

  assert(int_of(0B10Vu + 0B_0010_1000Vu)==42);

  assert(int_of(0B10llu + 0B_0010_1000llu)==42);

  assert(int_of(0B10LLu + 0B_0010_1000LLu)==42);

  assert(int_of(0B10tU + 0B_0010_1000tU)==42);

  assert(int_of(0B10TU + 0B_0010_1000TU)==42);

  assert(int_of(0B10sU + 0B_0010_1000sU)==42);

  assert(int_of(0B10SU + 0B_0010_1000SU)==42);

  assert(int_of(0B10iU + 0B_0010_1000iU)==42);

  assert(int_of(0B10IU + 0B_0010_1000IU)==42);

  assert(int_of(0B10lU + 0B_0010_1000lU)==42);

  assert(int_of(0B10LU + 0B_0010_1000LU)==42);

  assert(int_of(0B10vU + 0B_0010_1000vU)==42);

  assert(int_of(0B10VU + 0B_0010_1000VU)==42);

  assert(int_of(0B10llU + 0B_0010_1000llU)==42);

  assert(int_of(0B10LLU + 0B_0010_1000LLU)==42);

  assert(int_of(0B10i8 + 0B_0010_1000i8)==42);

  assert(int_of(0B10i16 + 0B_0010_1000i16)==42);

  assert(int_of(0B10i32 + 0B_0010_1000i32)==42);

  assert(int_of(0B10i64 + 0B_0010_1000i64)==42);

  assert(int_of(0B10u8 + 0B_0010_1000u8)==42);

  assert(int_of(0B10u16 + 0B_0010_1000u16)==42);

  assert(int_of(0B10u32 + 0B_0010_1000u32)==42);

  assert(int_of(0B10u64 + 0B_0010_1000u64)==42);

}

tst_0B100B_0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0B100o50 () {

  assert(int_of(0B10 + 0o50)==42);

  assert(int_of(0B10t + 0o50t)==42);

  assert(int_of(0B10T + 0o50T)==42);

  assert(int_of(0B10s + 0o50s)==42);

  assert(int_of(0B10S + 0o50S)==42);

  assert(int_of(0B10i + 0o50i)==42);

  assert(int_of(0B10I + 0o50I)==42);

  assert(int_of(0B10l + 0o50l)==42);

  assert(int_of(0B10L + 0o50L)==42);

  assert(int_of(0B10v + 0o50v)==42);

  assert(int_of(0B10V + 0o50V)==42);

  assert(int_of(0B10ll + 0o50ll)==42);

  assert(int_of(0B10LL + 0o50LL)==42);

  assert(int_of(0B10u + 0o50u)==42);

  assert(int_of(0B10ut + 0o50ut)==42);

  assert(int_of(0B10uT + 0o50uT)==42);

  assert(int_of(0B10us + 0o50us)==42);

  assert(int_of(0B10uS + 0o50uS)==42);

  assert(int_of(0B10ui + 0o50ui)==42);

  assert(int_of(0B10uI + 0o50uI)==42);

  assert(int_of(0B10ul + 0o50ul)==42);

  assert(int_of(0B10uL + 0o50uL)==42);

  assert(int_of(0B10uv + 0o50uv)==42);

  assert(int_of(0B10uV + 0o50uV)==42);

  assert(int_of(0B10ull + 0o50ull)==42);

  assert(int_of(0B10uLL + 0o50uLL)==42);

  assert(int_of(0B10Ut + 0o50Ut)==42);

  assert(int_of(0B10UT + 0o50UT)==42);

  assert(int_of(0B10Us + 0o50Us)==42);

  assert(int_of(0B10US + 0o50US)==42);

  assert(int_of(0B10Ui + 0o50Ui)==42);

  assert(int_of(0B10UI + 0o50UI)==42);

  assert(int_of(0B10Ul + 0o50Ul)==42);

  assert(int_of(0B10UL + 0o50UL)==42);

  assert(int_of(0B10Uv + 0o50Uv)==42);

  assert(int_of(0B10UV + 0o50UV)==42);

  assert(int_of(0B10Ull + 0o50Ull)==42);

  assert(int_of(0B10ULL + 0o50ULL)==42);

  assert(int_of(0B10U + 0o50U)==42);

  assert(int_of(0B10tu + 0o50tu)==42);

  assert(int_of(0B10Tu + 0o50Tu)==42);

  assert(int_of(0B10su + 0o50su)==42);

  assert(int_of(0B10Su + 0o50Su)==42);

  assert(int_of(0B10iu + 0o50iu)==42);

  assert(int_of(0B10Iu + 0o50Iu)==42);

  assert(int_of(0B10lu + 0o50lu)==42);

  assert(int_of(0B10Lu + 0o50Lu)==42);

  assert(int_of(0B10vu + 0o50vu)==42);

  assert(int_of(0B10Vu + 0o50Vu)==42);

  assert(int_of(0B10llu + 0o50llu)==42);

  assert(int_of(0B10LLu + 0o50LLu)==42);

  assert(int_of(0B10tU + 0o50tU)==42);

  assert(int_of(0B10TU + 0o50TU)==42);

  assert(int_of(0B10sU + 0o50sU)==42);

  assert(int_of(0B10SU + 0o50SU)==42);

  assert(int_of(0B10iU + 0o50iU)==42);

  assert(int_of(0B10IU + 0o50IU)==42);

  assert(int_of(0B10lU + 0o50lU)==42);

  assert(int_of(0B10LU + 0o50LU)==42);

  assert(int_of(0B10vU + 0o50vU)==42);

  assert(int_of(0B10VU + 0o50VU)==42);

  assert(int_of(0B10llU + 0o50llU)==42);

  assert(int_of(0B10LLU + 0o50LLU)==42);

  assert(int_of(0B10i8 + 0o50i8)==42);

  assert(int_of(0B10i16 + 0o50i16)==42);

  assert(int_of(0B10i32 + 0o50i32)==42);

  assert(int_of(0B10i64 + 0o50i64)==42);

  assert(int_of(0B10u8 + 0o50u8)==42);

  assert(int_of(0B10u16 + 0o50u16)==42);

  assert(int_of(0B10u32 + 0o50u32)==42);

  assert(int_of(0B10u64 + 0o50u64)==42);

}

tst_0B100o50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0B100O50 () {

  assert(int_of(0B10 + 0O50)==42);

  assert(int_of(0B10t + 0O50t)==42);

  assert(int_of(0B10T + 0O50T)==42);

  assert(int_of(0B10s + 0O50s)==42);

  assert(int_of(0B10S + 0O50S)==42);

  assert(int_of(0B10i + 0O50i)==42);

  assert(int_of(0B10I + 0O50I)==42);

  assert(int_of(0B10l + 0O50l)==42);

  assert(int_of(0B10L + 0O50L)==42);

  assert(int_of(0B10v + 0O50v)==42);

  assert(int_of(0B10V + 0O50V)==42);

  assert(int_of(0B10ll + 0O50ll)==42);

  assert(int_of(0B10LL + 0O50LL)==42);

  assert(int_of(0B10u + 0O50u)==42);

  assert(int_of(0B10ut + 0O50ut)==42);

  assert(int_of(0B10uT + 0O50uT)==42);

  assert(int_of(0B10us + 0O50us)==42);

  assert(int_of(0B10uS + 0O50uS)==42);

  assert(int_of(0B10ui + 0O50ui)==42);

  assert(int_of(0B10uI + 0O50uI)==42);

  assert(int_of(0B10ul + 0O50ul)==42);

  assert(int_of(0B10uL + 0O50uL)==42);

  assert(int_of(0B10uv + 0O50uv)==42);

  assert(int_of(0B10uV + 0O50uV)==42);

  assert(int_of(0B10ull + 0O50ull)==42);

  assert(int_of(0B10uLL + 0O50uLL)==42);

  assert(int_of(0B10Ut + 0O50Ut)==42);

  assert(int_of(0B10UT + 0O50UT)==42);

  assert(int_of(0B10Us + 0O50Us)==42);

  assert(int_of(0B10US + 0O50US)==42);

  assert(int_of(0B10Ui + 0O50Ui)==42);

  assert(int_of(0B10UI + 0O50UI)==42);

  assert(int_of(0B10Ul + 0O50Ul)==42);

  assert(int_of(0B10UL + 0O50UL)==42);

  assert(int_of(0B10Uv + 0O50Uv)==42);

  assert(int_of(0B10UV + 0O50UV)==42);

  assert(int_of(0B10Ull + 0O50Ull)==42);

  assert(int_of(0B10ULL + 0O50ULL)==42);

  assert(int_of(0B10U + 0O50U)==42);

  assert(int_of(0B10tu + 0O50tu)==42);

  assert(int_of(0B10Tu + 0O50Tu)==42);

  assert(int_of(0B10su + 0O50su)==42);

  assert(int_of(0B10Su + 0O50Su)==42);

  assert(int_of(0B10iu + 0O50iu)==42);

  assert(int_of(0B10Iu + 0O50Iu)==42);

  assert(int_of(0B10lu + 0O50lu)==42);

  assert(int_of(0B10Lu + 0O50Lu)==42);

  assert(int_of(0B10vu + 0O50vu)==42);

  assert(int_of(0B10Vu + 0O50Vu)==42);

  assert(int_of(0B10llu + 0O50llu)==42);

  assert(int_of(0B10LLu + 0O50LLu)==42);

  assert(int_of(0B10tU + 0O50tU)==42);

  assert(int_of(0B10TU + 0O50TU)==42);

  assert(int_of(0B10sU + 0O50sU)==42);

  assert(int_of(0B10SU + 0O50SU)==42);

  assert(int_of(0B10iU + 0O50iU)==42);

  assert(int_of(0B10IU + 0O50IU)==42);

  assert(int_of(0B10lU + 0O50lU)==42);

  assert(int_of(0B10LU + 0O50LU)==42);

  assert(int_of(0B10vU + 0O50vU)==42);

  assert(int_of(0B10VU + 0O50VU)==42);

  assert(int_of(0B10llU + 0O50llU)==42);

  assert(int_of(0B10LLU + 0O50LLU)==42);

  assert(int_of(0B10i8 + 0O50i8)==42);

  assert(int_of(0B10i16 + 0O50i16)==42);

  assert(int_of(0B10i32 + 0O50i32)==42);

  assert(int_of(0B10i64 + 0O50i64)==42);

  assert(int_of(0B10u8 + 0O50u8)==42);

  assert(int_of(0B10u16 + 0O50u16)==42);

  assert(int_of(0B10u32 + 0O50u32)==42);

  assert(int_of(0B10u64 + 0O50u64)==42);

}

tst_0B100O50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0B100d40 () {

  assert(int_of(0B10 + 0d40)==42);

  assert(int_of(0B10t + 0d40t)==42);

  assert(int_of(0B10T + 0d40T)==42);

  assert(int_of(0B10s + 0d40s)==42);

  assert(int_of(0B10S + 0d40S)==42);

  assert(int_of(0B10i + 0d40i)==42);

  assert(int_of(0B10I + 0d40I)==42);

  assert(int_of(0B10l + 0d40l)==42);

  assert(int_of(0B10L + 0d40L)==42);

  assert(int_of(0B10v + 0d40v)==42);

  assert(int_of(0B10V + 0d40V)==42);

  assert(int_of(0B10ll + 0d40ll)==42);

  assert(int_of(0B10LL + 0d40LL)==42);

  assert(int_of(0B10u + 0d40u)==42);

  assert(int_of(0B10ut + 0d40ut)==42);

  assert(int_of(0B10uT + 0d40uT)==42);

  assert(int_of(0B10us + 0d40us)==42);

  assert(int_of(0B10uS + 0d40uS)==42);

  assert(int_of(0B10ui + 0d40ui)==42);

  assert(int_of(0B10uI + 0d40uI)==42);

  assert(int_of(0B10ul + 0d40ul)==42);

  assert(int_of(0B10uL + 0d40uL)==42);

  assert(int_of(0B10uv + 0d40uv)==42);

  assert(int_of(0B10uV + 0d40uV)==42);

  assert(int_of(0B10ull + 0d40ull)==42);

  assert(int_of(0B10uLL + 0d40uLL)==42);

  assert(int_of(0B10Ut + 0d40Ut)==42);

  assert(int_of(0B10UT + 0d40UT)==42);

  assert(int_of(0B10Us + 0d40Us)==42);

  assert(int_of(0B10US + 0d40US)==42);

  assert(int_of(0B10Ui + 0d40Ui)==42);

  assert(int_of(0B10UI + 0d40UI)==42);

  assert(int_of(0B10Ul + 0d40Ul)==42);

  assert(int_of(0B10UL + 0d40UL)==42);

  assert(int_of(0B10Uv + 0d40Uv)==42);

  assert(int_of(0B10UV + 0d40UV)==42);

  assert(int_of(0B10Ull + 0d40Ull)==42);

  assert(int_of(0B10ULL + 0d40ULL)==42);

  assert(int_of(0B10U + 0d40U)==42);

  assert(int_of(0B10tu + 0d40tu)==42);

  assert(int_of(0B10Tu + 0d40Tu)==42);

  assert(int_of(0B10su + 0d40su)==42);

  assert(int_of(0B10Su + 0d40Su)==42);

  assert(int_of(0B10iu + 0d40iu)==42);

  assert(int_of(0B10Iu + 0d40Iu)==42);

  assert(int_of(0B10lu + 0d40lu)==42);

  assert(int_of(0B10Lu + 0d40Lu)==42);

  assert(int_of(0B10vu + 0d40vu)==42);

  assert(int_of(0B10Vu + 0d40Vu)==42);

  assert(int_of(0B10llu + 0d40llu)==42);

  assert(int_of(0B10LLu + 0d40LLu)==42);

  assert(int_of(0B10tU + 0d40tU)==42);

  assert(int_of(0B10TU + 0d40TU)==42);

  assert(int_of(0B10sU + 0d40sU)==42);

  assert(int_of(0B10SU + 0d40SU)==42);

  assert(int_of(0B10iU + 0d40iU)==42);

  assert(int_of(0B10IU + 0d40IU)==42);

  assert(int_of(0B10lU + 0d40lU)==42);

  assert(int_of(0B10LU + 0d40LU)==42);

  assert(int_of(0B10vU + 0d40vU)==42);

  assert(int_of(0B10VU + 0d40VU)==42);

  assert(int_of(0B10llU + 0d40llU)==42);

  assert(int_of(0B10LLU + 0d40LLU)==42);

  assert(int_of(0B10i8 + 0d40i8)==42);

  assert(int_of(0B10i16 + 0d40i16)==42);

  assert(int_of(0B10i32 + 0d40i32)==42);

  assert(int_of(0B10i64 + 0d40i64)==42);

  assert(int_of(0B10u8 + 0d40u8)==42);

  assert(int_of(0B10u16 + 0d40u16)==42);

  assert(int_of(0B10u32 + 0d40u32)==42);

  assert(int_of(0B10u64 + 0d40u64)==42);

}

tst_0B100d40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0B100D40 () {

  assert(int_of(0B10 + 0D40)==42);

  assert(int_of(0B10t + 0D40t)==42);

  assert(int_of(0B10T + 0D40T)==42);

  assert(int_of(0B10s + 0D40s)==42);

  assert(int_of(0B10S + 0D40S)==42);

  assert(int_of(0B10i + 0D40i)==42);

  assert(int_of(0B10I + 0D40I)==42);

  assert(int_of(0B10l + 0D40l)==42);

  assert(int_of(0B10L + 0D40L)==42);

  assert(int_of(0B10v + 0D40v)==42);

  assert(int_of(0B10V + 0D40V)==42);

  assert(int_of(0B10ll + 0D40ll)==42);

  assert(int_of(0B10LL + 0D40LL)==42);

  assert(int_of(0B10u + 0D40u)==42);

  assert(int_of(0B10ut + 0D40ut)==42);

  assert(int_of(0B10uT + 0D40uT)==42);

  assert(int_of(0B10us + 0D40us)==42);

  assert(int_of(0B10uS + 0D40uS)==42);

  assert(int_of(0B10ui + 0D40ui)==42);

  assert(int_of(0B10uI + 0D40uI)==42);

  assert(int_of(0B10ul + 0D40ul)==42);

  assert(int_of(0B10uL + 0D40uL)==42);

  assert(int_of(0B10uv + 0D40uv)==42);

  assert(int_of(0B10uV + 0D40uV)==42);

  assert(int_of(0B10ull + 0D40ull)==42);

  assert(int_of(0B10uLL + 0D40uLL)==42);

  assert(int_of(0B10Ut + 0D40Ut)==42);

  assert(int_of(0B10UT + 0D40UT)==42);

  assert(int_of(0B10Us + 0D40Us)==42);

  assert(int_of(0B10US + 0D40US)==42);

  assert(int_of(0B10Ui + 0D40Ui)==42);

  assert(int_of(0B10UI + 0D40UI)==42);

  assert(int_of(0B10Ul + 0D40Ul)==42);

  assert(int_of(0B10UL + 0D40UL)==42);

  assert(int_of(0B10Uv + 0D40Uv)==42);

  assert(int_of(0B10UV + 0D40UV)==42);

  assert(int_of(0B10Ull + 0D40Ull)==42);

  assert(int_of(0B10ULL + 0D40ULL)==42);

  assert(int_of(0B10U + 0D40U)==42);

  assert(int_of(0B10tu + 0D40tu)==42);

  assert(int_of(0B10Tu + 0D40Tu)==42);

  assert(int_of(0B10su + 0D40su)==42);

  assert(int_of(0B10Su + 0D40Su)==42);

  assert(int_of(0B10iu + 0D40iu)==42);

  assert(int_of(0B10Iu + 0D40Iu)==42);

  assert(int_of(0B10lu + 0D40lu)==42);

  assert(int_of(0B10Lu + 0D40Lu)==42);

  assert(int_of(0B10vu + 0D40vu)==42);

  assert(int_of(0B10Vu + 0D40Vu)==42);

  assert(int_of(0B10llu + 0D40llu)==42);

  assert(int_of(0B10LLu + 0D40LLu)==42);

  assert(int_of(0B10tU + 0D40tU)==42);

  assert(int_of(0B10TU + 0D40TU)==42);

  assert(int_of(0B10sU + 0D40sU)==42);

  assert(int_of(0B10SU + 0D40SU)==42);

  assert(int_of(0B10iU + 0D40iU)==42);

  assert(int_of(0B10IU + 0D40IU)==42);

  assert(int_of(0B10lU + 0D40lU)==42);

  assert(int_of(0B10LU + 0D40LU)==42);

  assert(int_of(0B10vU + 0D40vU)==42);

  assert(int_of(0B10VU + 0D40VU)==42);

  assert(int_of(0B10llU + 0D40llU)==42);

  assert(int_of(0B10LLU + 0D40LLU)==42);

  assert(int_of(0B10i8 + 0D40i8)==42);

  assert(int_of(0B10i16 + 0D40i16)==42);

  assert(int_of(0B10i32 + 0D40i32)==42);

  assert(int_of(0B10i64 + 0D40i64)==42);

  assert(int_of(0B10u8 + 0D40u8)==42);

  assert(int_of(0B10u16 + 0D40u16)==42);

  assert(int_of(0B10u32 + 0D40u32)==42);

  assert(int_of(0B10u64 + 0D40u64)==42);

}

tst_0B100D40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0B100x28 () {

  assert(int_of(0B10 + 0x28)==42);

  assert(int_of(0B10t + 0x28t)==42);

  assert(int_of(0B10T + 0x28T)==42);

  assert(int_of(0B10s + 0x28s)==42);

  assert(int_of(0B10S + 0x28S)==42);

  assert(int_of(0B10i + 0x28i)==42);

  assert(int_of(0B10I + 0x28I)==42);

  assert(int_of(0B10l + 0x28l)==42);

  assert(int_of(0B10L + 0x28L)==42);

  assert(int_of(0B10v + 0x28v)==42);

  assert(int_of(0B10V + 0x28V)==42);

  assert(int_of(0B10ll + 0x28ll)==42);

  assert(int_of(0B10LL + 0x28LL)==42);

  assert(int_of(0B10u + 0x28u)==42);

  assert(int_of(0B10ut + 0x28ut)==42);

  assert(int_of(0B10uT + 0x28uT)==42);

  assert(int_of(0B10us + 0x28us)==42);

  assert(int_of(0B10uS + 0x28uS)==42);

  assert(int_of(0B10ui + 0x28ui)==42);

  assert(int_of(0B10uI + 0x28uI)==42);

  assert(int_of(0B10ul + 0x28ul)==42);

  assert(int_of(0B10uL + 0x28uL)==42);

  assert(int_of(0B10uv + 0x28uv)==42);

  assert(int_of(0B10uV + 0x28uV)==42);

  assert(int_of(0B10ull + 0x28ull)==42);

  assert(int_of(0B10uLL + 0x28uLL)==42);

  assert(int_of(0B10Ut + 0x28Ut)==42);

  assert(int_of(0B10UT + 0x28UT)==42);

  assert(int_of(0B10Us + 0x28Us)==42);

  assert(int_of(0B10US + 0x28US)==42);

  assert(int_of(0B10Ui + 0x28Ui)==42);

  assert(int_of(0B10UI + 0x28UI)==42);

  assert(int_of(0B10Ul + 0x28Ul)==42);

  assert(int_of(0B10UL + 0x28UL)==42);

  assert(int_of(0B10Uv + 0x28Uv)==42);

  assert(int_of(0B10UV + 0x28UV)==42);

  assert(int_of(0B10Ull + 0x28Ull)==42);

  assert(int_of(0B10ULL + 0x28ULL)==42);

  assert(int_of(0B10U + 0x28U)==42);

  assert(int_of(0B10tu + 0x28tu)==42);

  assert(int_of(0B10Tu + 0x28Tu)==42);

  assert(int_of(0B10su + 0x28su)==42);

  assert(int_of(0B10Su + 0x28Su)==42);

  assert(int_of(0B10iu + 0x28iu)==42);

  assert(int_of(0B10Iu + 0x28Iu)==42);

  assert(int_of(0B10lu + 0x28lu)==42);

  assert(int_of(0B10Lu + 0x28Lu)==42);

  assert(int_of(0B10vu + 0x28vu)==42);

  assert(int_of(0B10Vu + 0x28Vu)==42);

  assert(int_of(0B10llu + 0x28llu)==42);

  assert(int_of(0B10LLu + 0x28LLu)==42);

  assert(int_of(0B10tU + 0x28tU)==42);

  assert(int_of(0B10TU + 0x28TU)==42);

  assert(int_of(0B10sU + 0x28sU)==42);

  assert(int_of(0B10SU + 0x28SU)==42);

  assert(int_of(0B10iU + 0x28iU)==42);

  assert(int_of(0B10IU + 0x28IU)==42);

  assert(int_of(0B10lU + 0x28lU)==42);

  assert(int_of(0B10LU + 0x28LU)==42);

  assert(int_of(0B10vU + 0x28vU)==42);

  assert(int_of(0B10VU + 0x28VU)==42);

  assert(int_of(0B10llU + 0x28llU)==42);

  assert(int_of(0B10LLU + 0x28LLU)==42);

  assert(int_of(0B10i8 + 0x28i8)==42);

  assert(int_of(0B10i16 + 0x28i16)==42);

  assert(int_of(0B10i32 + 0x28i32)==42);

  assert(int_of(0B10i64 + 0x28i64)==42);

  assert(int_of(0B10u8 + 0x28u8)==42);

  assert(int_of(0B10u16 + 0x28u16)==42);

  assert(int_of(0B10u32 + 0x28u32)==42);

  assert(int_of(0B10u64 + 0x28u64)==42);

}

tst_0B100x28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0B100X28 () {

  assert(int_of(0B10 + 0X28)==42);

  assert(int_of(0B10t + 0X28t)==42);

  assert(int_of(0B10T + 0X28T)==42);

  assert(int_of(0B10s + 0X28s)==42);

  assert(int_of(0B10S + 0X28S)==42);

  assert(int_of(0B10i + 0X28i)==42);

  assert(int_of(0B10I + 0X28I)==42);

  assert(int_of(0B10l + 0X28l)==42);

  assert(int_of(0B10L + 0X28L)==42);

  assert(int_of(0B10v + 0X28v)==42);

  assert(int_of(0B10V + 0X28V)==42);

  assert(int_of(0B10ll + 0X28ll)==42);

  assert(int_of(0B10LL + 0X28LL)==42);

  assert(int_of(0B10u + 0X28u)==42);

  assert(int_of(0B10ut + 0X28ut)==42);

  assert(int_of(0B10uT + 0X28uT)==42);

  assert(int_of(0B10us + 0X28us)==42);

  assert(int_of(0B10uS + 0X28uS)==42);

  assert(int_of(0B10ui + 0X28ui)==42);

  assert(int_of(0B10uI + 0X28uI)==42);

  assert(int_of(0B10ul + 0X28ul)==42);

  assert(int_of(0B10uL + 0X28uL)==42);

  assert(int_of(0B10uv + 0X28uv)==42);

  assert(int_of(0B10uV + 0X28uV)==42);

  assert(int_of(0B10ull + 0X28ull)==42);

  assert(int_of(0B10uLL + 0X28uLL)==42);

  assert(int_of(0B10Ut + 0X28Ut)==42);

  assert(int_of(0B10UT + 0X28UT)==42);

  assert(int_of(0B10Us + 0X28Us)==42);

  assert(int_of(0B10US + 0X28US)==42);

  assert(int_of(0B10Ui + 0X28Ui)==42);

  assert(int_of(0B10UI + 0X28UI)==42);

  assert(int_of(0B10Ul + 0X28Ul)==42);

  assert(int_of(0B10UL + 0X28UL)==42);

  assert(int_of(0B10Uv + 0X28Uv)==42);

  assert(int_of(0B10UV + 0X28UV)==42);

  assert(int_of(0B10Ull + 0X28Ull)==42);

  assert(int_of(0B10ULL + 0X28ULL)==42);

  assert(int_of(0B10U + 0X28U)==42);

  assert(int_of(0B10tu + 0X28tu)==42);

  assert(int_of(0B10Tu + 0X28Tu)==42);

  assert(int_of(0B10su + 0X28su)==42);

  assert(int_of(0B10Su + 0X28Su)==42);

  assert(int_of(0B10iu + 0X28iu)==42);

  assert(int_of(0B10Iu + 0X28Iu)==42);

  assert(int_of(0B10lu + 0X28lu)==42);

  assert(int_of(0B10Lu + 0X28Lu)==42);

  assert(int_of(0B10vu + 0X28vu)==42);

  assert(int_of(0B10Vu + 0X28Vu)==42);

  assert(int_of(0B10llu + 0X28llu)==42);

  assert(int_of(0B10LLu + 0X28LLu)==42);

  assert(int_of(0B10tU + 0X28tU)==42);

  assert(int_of(0B10TU + 0X28TU)==42);

  assert(int_of(0B10sU + 0X28sU)==42);

  assert(int_of(0B10SU + 0X28SU)==42);

  assert(int_of(0B10iU + 0X28iU)==42);

  assert(int_of(0B10IU + 0X28IU)==42);

  assert(int_of(0B10lU + 0X28lU)==42);

  assert(int_of(0B10LU + 0X28LU)==42);

  assert(int_of(0B10vU + 0X28vU)==42);

  assert(int_of(0B10VU + 0X28VU)==42);

  assert(int_of(0B10llU + 0X28llU)==42);

  assert(int_of(0B10LLU + 0X28LLU)==42);

  assert(int_of(0B10i8 + 0X28i8)==42);

  assert(int_of(0B10i16 + 0X28i16)==42);

  assert(int_of(0B10i32 + 0X28i32)==42);

  assert(int_of(0B10i64 + 0X28i64)==42);

  assert(int_of(0B10u8 + 0X28u8)==42);

  assert(int_of(0B10u16 + 0X28u16)==42);

  assert(int_of(0B10u32 + 0X28u32)==42);

  assert(int_of(0B10u64 + 0X28u64)==42);

}

tst_0B100X28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0o240 () {

  assert(int_of(0o2 + 40)==42);

  assert(int_of(0o2t + 40t)==42);

  assert(int_of(0o2T + 40T)==42);

  assert(int_of(0o2s + 40s)==42);

  assert(int_of(0o2S + 40S)==42);

  assert(int_of(0o2i + 40i)==42);

  assert(int_of(0o2I + 40I)==42);

  assert(int_of(0o2l + 40l)==42);

  assert(int_of(0o2L + 40L)==42);

  assert(int_of(0o2v + 40v)==42);

  assert(int_of(0o2V + 40V)==42);

  assert(int_of(0o2ll + 40ll)==42);

  assert(int_of(0o2LL + 40LL)==42);

  assert(int_of(0o2u + 40u)==42);

  assert(int_of(0o2ut + 40ut)==42);

  assert(int_of(0o2uT + 40uT)==42);

  assert(int_of(0o2us + 40us)==42);

  assert(int_of(0o2uS + 40uS)==42);

  assert(int_of(0o2ui + 40ui)==42);

  assert(int_of(0o2uI + 40uI)==42);

  assert(int_of(0o2ul + 40ul)==42);

  assert(int_of(0o2uL + 40uL)==42);

  assert(int_of(0o2uv + 40uv)==42);

  assert(int_of(0o2uV + 40uV)==42);

  assert(int_of(0o2ull + 40ull)==42);

  assert(int_of(0o2uLL + 40uLL)==42);

  assert(int_of(0o2Ut + 40Ut)==42);

  assert(int_of(0o2UT + 40UT)==42);

  assert(int_of(0o2Us + 40Us)==42);

  assert(int_of(0o2US + 40US)==42);

  assert(int_of(0o2Ui + 40Ui)==42);

  assert(int_of(0o2UI + 40UI)==42);

  assert(int_of(0o2Ul + 40Ul)==42);

  assert(int_of(0o2UL + 40UL)==42);

  assert(int_of(0o2Uv + 40Uv)==42);

  assert(int_of(0o2UV + 40UV)==42);

  assert(int_of(0o2Ull + 40Ull)==42);

  assert(int_of(0o2ULL + 40ULL)==42);

  assert(int_of(0o2U + 40U)==42);

  assert(int_of(0o2tu + 40tu)==42);

  assert(int_of(0o2Tu + 40Tu)==42);

  assert(int_of(0o2su + 40su)==42);

  assert(int_of(0o2Su + 40Su)==42);

  assert(int_of(0o2iu + 40iu)==42);

  assert(int_of(0o2Iu + 40Iu)==42);

  assert(int_of(0o2lu + 40lu)==42);

  assert(int_of(0o2Lu + 40Lu)==42);

  assert(int_of(0o2vu + 40vu)==42);

  assert(int_of(0o2Vu + 40Vu)==42);

  assert(int_of(0o2llu + 40llu)==42);

  assert(int_of(0o2LLu + 40LLu)==42);

  assert(int_of(0o2tU + 40tU)==42);

  assert(int_of(0o2TU + 40TU)==42);

  assert(int_of(0o2sU + 40sU)==42);

  assert(int_of(0o2SU + 40SU)==42);

  assert(int_of(0o2iU + 40iU)==42);

  assert(int_of(0o2IU + 40IU)==42);

  assert(int_of(0o2lU + 40lU)==42);

  assert(int_of(0o2LU + 40LU)==42);

  assert(int_of(0o2vU + 40vU)==42);

  assert(int_of(0o2VU + 40VU)==42);

  assert(int_of(0o2llU + 40llU)==42);

  assert(int_of(0o2LLU + 40LLU)==42);

  assert(int_of(0o2i8 + 40i8)==42);

  assert(int_of(0o2i16 + 40i16)==42);

  assert(int_of(0o2i32 + 40i32)==42);

  assert(int_of(0o2i64 + 40i64)==42);

  assert(int_of(0o2u8 + 40u8)==42);

  assert(int_of(0o2u16 + 40u16)==42);

  assert(int_of(0o2u32 + 40u32)==42);

  assert(int_of(0o2u64 + 40u64)==42);

}

tst_0o240;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0o20b0010_1000 () {

  assert(int_of(0o2 + 0b0010_1000)==42);

  assert(int_of(0o2t + 0b0010_1000t)==42);

  assert(int_of(0o2T + 0b0010_1000T)==42);

  assert(int_of(0o2s + 0b0010_1000s)==42);

  assert(int_of(0o2S + 0b0010_1000S)==42);

  assert(int_of(0o2i + 0b0010_1000i)==42);

  assert(int_of(0o2I + 0b0010_1000I)==42);

  assert(int_of(0o2l + 0b0010_1000l)==42);

  assert(int_of(0o2L + 0b0010_1000L)==42);

  assert(int_of(0o2v + 0b0010_1000v)==42);

  assert(int_of(0o2V + 0b0010_1000V)==42);

  assert(int_of(0o2ll + 0b0010_1000ll)==42);

  assert(int_of(0o2LL + 0b0010_1000LL)==42);

  assert(int_of(0o2u + 0b0010_1000u)==42);

  assert(int_of(0o2ut + 0b0010_1000ut)==42);

  assert(int_of(0o2uT + 0b0010_1000uT)==42);

  assert(int_of(0o2us + 0b0010_1000us)==42);

  assert(int_of(0o2uS + 0b0010_1000uS)==42);

  assert(int_of(0o2ui + 0b0010_1000ui)==42);

  assert(int_of(0o2uI + 0b0010_1000uI)==42);

  assert(int_of(0o2ul + 0b0010_1000ul)==42);

  assert(int_of(0o2uL + 0b0010_1000uL)==42);

  assert(int_of(0o2uv + 0b0010_1000uv)==42);

  assert(int_of(0o2uV + 0b0010_1000uV)==42);

  assert(int_of(0o2ull + 0b0010_1000ull)==42);

  assert(int_of(0o2uLL + 0b0010_1000uLL)==42);

  assert(int_of(0o2Ut + 0b0010_1000Ut)==42);

  assert(int_of(0o2UT + 0b0010_1000UT)==42);

  assert(int_of(0o2Us + 0b0010_1000Us)==42);

  assert(int_of(0o2US + 0b0010_1000US)==42);

  assert(int_of(0o2Ui + 0b0010_1000Ui)==42);

  assert(int_of(0o2UI + 0b0010_1000UI)==42);

  assert(int_of(0o2Ul + 0b0010_1000Ul)==42);

  assert(int_of(0o2UL + 0b0010_1000UL)==42);

  assert(int_of(0o2Uv + 0b0010_1000Uv)==42);

  assert(int_of(0o2UV + 0b0010_1000UV)==42);

  assert(int_of(0o2Ull + 0b0010_1000Ull)==42);

  assert(int_of(0o2ULL + 0b0010_1000ULL)==42);

  assert(int_of(0o2U + 0b0010_1000U)==42);

  assert(int_of(0o2tu + 0b0010_1000tu)==42);

  assert(int_of(0o2Tu + 0b0010_1000Tu)==42);

  assert(int_of(0o2su + 0b0010_1000su)==42);

  assert(int_of(0o2Su + 0b0010_1000Su)==42);

  assert(int_of(0o2iu + 0b0010_1000iu)==42);

  assert(int_of(0o2Iu + 0b0010_1000Iu)==42);

  assert(int_of(0o2lu + 0b0010_1000lu)==42);

  assert(int_of(0o2Lu + 0b0010_1000Lu)==42);

  assert(int_of(0o2vu + 0b0010_1000vu)==42);

  assert(int_of(0o2Vu + 0b0010_1000Vu)==42);

  assert(int_of(0o2llu + 0b0010_1000llu)==42);

  assert(int_of(0o2LLu + 0b0010_1000LLu)==42);

  assert(int_of(0o2tU + 0b0010_1000tU)==42);

  assert(int_of(0o2TU + 0b0010_1000TU)==42);

  assert(int_of(0o2sU + 0b0010_1000sU)==42);

  assert(int_of(0o2SU + 0b0010_1000SU)==42);

  assert(int_of(0o2iU + 0b0010_1000iU)==42);

  assert(int_of(0o2IU + 0b0010_1000IU)==42);

  assert(int_of(0o2lU + 0b0010_1000lU)==42);

  assert(int_of(0o2LU + 0b0010_1000LU)==42);

  assert(int_of(0o2vU + 0b0010_1000vU)==42);

  assert(int_of(0o2VU + 0b0010_1000VU)==42);

  assert(int_of(0o2llU + 0b0010_1000llU)==42);

  assert(int_of(0o2LLU + 0b0010_1000LLU)==42);

  assert(int_of(0o2i8 + 0b0010_1000i8)==42);

  assert(int_of(0o2i16 + 0b0010_1000i16)==42);

  assert(int_of(0o2i32 + 0b0010_1000i32)==42);

  assert(int_of(0o2i64 + 0b0010_1000i64)==42);

  assert(int_of(0o2u8 + 0b0010_1000u8)==42);

  assert(int_of(0o2u16 + 0b0010_1000u16)==42);

  assert(int_of(0o2u32 + 0b0010_1000u32)==42);

  assert(int_of(0o2u64 + 0b0010_1000u64)==42);

}

tst_0o20b0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0o20B_0010_1000 () {

  assert(int_of(0o2 + 0B_0010_1000)==42);

  assert(int_of(0o2t + 0B_0010_1000t)==42);

  assert(int_of(0o2T + 0B_0010_1000T)==42);

  assert(int_of(0o2s + 0B_0010_1000s)==42);

  assert(int_of(0o2S + 0B_0010_1000S)==42);

  assert(int_of(0o2i + 0B_0010_1000i)==42);

  assert(int_of(0o2I + 0B_0010_1000I)==42);

  assert(int_of(0o2l + 0B_0010_1000l)==42);

  assert(int_of(0o2L + 0B_0010_1000L)==42);

  assert(int_of(0o2v + 0B_0010_1000v)==42);

  assert(int_of(0o2V + 0B_0010_1000V)==42);

  assert(int_of(0o2ll + 0B_0010_1000ll)==42);

  assert(int_of(0o2LL + 0B_0010_1000LL)==42);

  assert(int_of(0o2u + 0B_0010_1000u)==42);

  assert(int_of(0o2ut + 0B_0010_1000ut)==42);

  assert(int_of(0o2uT + 0B_0010_1000uT)==42);

  assert(int_of(0o2us + 0B_0010_1000us)==42);

  assert(int_of(0o2uS + 0B_0010_1000uS)==42);

  assert(int_of(0o2ui + 0B_0010_1000ui)==42);

  assert(int_of(0o2uI + 0B_0010_1000uI)==42);

  assert(int_of(0o2ul + 0B_0010_1000ul)==42);

  assert(int_of(0o2uL + 0B_0010_1000uL)==42);

  assert(int_of(0o2uv + 0B_0010_1000uv)==42);

  assert(int_of(0o2uV + 0B_0010_1000uV)==42);

  assert(int_of(0o2ull + 0B_0010_1000ull)==42);

  assert(int_of(0o2uLL + 0B_0010_1000uLL)==42);

  assert(int_of(0o2Ut + 0B_0010_1000Ut)==42);

  assert(int_of(0o2UT + 0B_0010_1000UT)==42);

  assert(int_of(0o2Us + 0B_0010_1000Us)==42);

  assert(int_of(0o2US + 0B_0010_1000US)==42);

  assert(int_of(0o2Ui + 0B_0010_1000Ui)==42);

  assert(int_of(0o2UI + 0B_0010_1000UI)==42);

  assert(int_of(0o2Ul + 0B_0010_1000Ul)==42);

  assert(int_of(0o2UL + 0B_0010_1000UL)==42);

  assert(int_of(0o2Uv + 0B_0010_1000Uv)==42);

  assert(int_of(0o2UV + 0B_0010_1000UV)==42);

  assert(int_of(0o2Ull + 0B_0010_1000Ull)==42);

  assert(int_of(0o2ULL + 0B_0010_1000ULL)==42);

  assert(int_of(0o2U + 0B_0010_1000U)==42);

  assert(int_of(0o2tu + 0B_0010_1000tu)==42);

  assert(int_of(0o2Tu + 0B_0010_1000Tu)==42);

  assert(int_of(0o2su + 0B_0010_1000su)==42);

  assert(int_of(0o2Su + 0B_0010_1000Su)==42);

  assert(int_of(0o2iu + 0B_0010_1000iu)==42);

  assert(int_of(0o2Iu + 0B_0010_1000Iu)==42);

  assert(int_of(0o2lu + 0B_0010_1000lu)==42);

  assert(int_of(0o2Lu + 0B_0010_1000Lu)==42);

  assert(int_of(0o2vu + 0B_0010_1000vu)==42);

  assert(int_of(0o2Vu + 0B_0010_1000Vu)==42);

  assert(int_of(0o2llu + 0B_0010_1000llu)==42);

  assert(int_of(0o2LLu + 0B_0010_1000LLu)==42);

  assert(int_of(0o2tU + 0B_0010_1000tU)==42);

  assert(int_of(0o2TU + 0B_0010_1000TU)==42);

  assert(int_of(0o2sU + 0B_0010_1000sU)==42);

  assert(int_of(0o2SU + 0B_0010_1000SU)==42);

  assert(int_of(0o2iU + 0B_0010_1000iU)==42);

  assert(int_of(0o2IU + 0B_0010_1000IU)==42);

  assert(int_of(0o2lU + 0B_0010_1000lU)==42);

  assert(int_of(0o2LU + 0B_0010_1000LU)==42);

  assert(int_of(0o2vU + 0B_0010_1000vU)==42);

  assert(int_of(0o2VU + 0B_0010_1000VU)==42);

  assert(int_of(0o2llU + 0B_0010_1000llU)==42);

  assert(int_of(0o2LLU + 0B_0010_1000LLU)==42);

  assert(int_of(0o2i8 + 0B_0010_1000i8)==42);

  assert(int_of(0o2i16 + 0B_0010_1000i16)==42);

  assert(int_of(0o2i32 + 0B_0010_1000i32)==42);

  assert(int_of(0o2i64 + 0B_0010_1000i64)==42);

  assert(int_of(0o2u8 + 0B_0010_1000u8)==42);

  assert(int_of(0o2u16 + 0B_0010_1000u16)==42);

  assert(int_of(0o2u32 + 0B_0010_1000u32)==42);

  assert(int_of(0o2u64 + 0B_0010_1000u64)==42);

}

tst_0o20B_0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0o20o50 () {

  assert(int_of(0o2 + 0o50)==42);

  assert(int_of(0o2t + 0o50t)==42);

  assert(int_of(0o2T + 0o50T)==42);

  assert(int_of(0o2s + 0o50s)==42);

  assert(int_of(0o2S + 0o50S)==42);

  assert(int_of(0o2i + 0o50i)==42);

  assert(int_of(0o2I + 0o50I)==42);

  assert(int_of(0o2l + 0o50l)==42);

  assert(int_of(0o2L + 0o50L)==42);

  assert(int_of(0o2v + 0o50v)==42);

  assert(int_of(0o2V + 0o50V)==42);

  assert(int_of(0o2ll + 0o50ll)==42);

  assert(int_of(0o2LL + 0o50LL)==42);

  assert(int_of(0o2u + 0o50u)==42);

  assert(int_of(0o2ut + 0o50ut)==42);

  assert(int_of(0o2uT + 0o50uT)==42);

  assert(int_of(0o2us + 0o50us)==42);

  assert(int_of(0o2uS + 0o50uS)==42);

  assert(int_of(0o2ui + 0o50ui)==42);

  assert(int_of(0o2uI + 0o50uI)==42);

  assert(int_of(0o2ul + 0o50ul)==42);

  assert(int_of(0o2uL + 0o50uL)==42);

  assert(int_of(0o2uv + 0o50uv)==42);

  assert(int_of(0o2uV + 0o50uV)==42);

  assert(int_of(0o2ull + 0o50ull)==42);

  assert(int_of(0o2uLL + 0o50uLL)==42);

  assert(int_of(0o2Ut + 0o50Ut)==42);

  assert(int_of(0o2UT + 0o50UT)==42);

  assert(int_of(0o2Us + 0o50Us)==42);

  assert(int_of(0o2US + 0o50US)==42);

  assert(int_of(0o2Ui + 0o50Ui)==42);

  assert(int_of(0o2UI + 0o50UI)==42);

  assert(int_of(0o2Ul + 0o50Ul)==42);

  assert(int_of(0o2UL + 0o50UL)==42);

  assert(int_of(0o2Uv + 0o50Uv)==42);

  assert(int_of(0o2UV + 0o50UV)==42);

  assert(int_of(0o2Ull + 0o50Ull)==42);

  assert(int_of(0o2ULL + 0o50ULL)==42);

  assert(int_of(0o2U + 0o50U)==42);

  assert(int_of(0o2tu + 0o50tu)==42);

  assert(int_of(0o2Tu + 0o50Tu)==42);

  assert(int_of(0o2su + 0o50su)==42);

  assert(int_of(0o2Su + 0o50Su)==42);

  assert(int_of(0o2iu + 0o50iu)==42);

  assert(int_of(0o2Iu + 0o50Iu)==42);

  assert(int_of(0o2lu + 0o50lu)==42);

  assert(int_of(0o2Lu + 0o50Lu)==42);

  assert(int_of(0o2vu + 0o50vu)==42);

  assert(int_of(0o2Vu + 0o50Vu)==42);

  assert(int_of(0o2llu + 0o50llu)==42);

  assert(int_of(0o2LLu + 0o50LLu)==42);

  assert(int_of(0o2tU + 0o50tU)==42);

  assert(int_of(0o2TU + 0o50TU)==42);

  assert(int_of(0o2sU + 0o50sU)==42);

  assert(int_of(0o2SU + 0o50SU)==42);

  assert(int_of(0o2iU + 0o50iU)==42);

  assert(int_of(0o2IU + 0o50IU)==42);

  assert(int_of(0o2lU + 0o50lU)==42);

  assert(int_of(0o2LU + 0o50LU)==42);

  assert(int_of(0o2vU + 0o50vU)==42);

  assert(int_of(0o2VU + 0o50VU)==42);

  assert(int_of(0o2llU + 0o50llU)==42);

  assert(int_of(0o2LLU + 0o50LLU)==42);

  assert(int_of(0o2i8 + 0o50i8)==42);

  assert(int_of(0o2i16 + 0o50i16)==42);

  assert(int_of(0o2i32 + 0o50i32)==42);

  assert(int_of(0o2i64 + 0o50i64)==42);

  assert(int_of(0o2u8 + 0o50u8)==42);

  assert(int_of(0o2u16 + 0o50u16)==42);

  assert(int_of(0o2u32 + 0o50u32)==42);

  assert(int_of(0o2u64 + 0o50u64)==42);

}

tst_0o20o50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0o20O50 () {

  assert(int_of(0o2 + 0O50)==42);

  assert(int_of(0o2t + 0O50t)==42);

  assert(int_of(0o2T + 0O50T)==42);

  assert(int_of(0o2s + 0O50s)==42);

  assert(int_of(0o2S + 0O50S)==42);

  assert(int_of(0o2i + 0O50i)==42);

  assert(int_of(0o2I + 0O50I)==42);

  assert(int_of(0o2l + 0O50l)==42);

  assert(int_of(0o2L + 0O50L)==42);

  assert(int_of(0o2v + 0O50v)==42);

  assert(int_of(0o2V + 0O50V)==42);

  assert(int_of(0o2ll + 0O50ll)==42);

  assert(int_of(0o2LL + 0O50LL)==42);

  assert(int_of(0o2u + 0O50u)==42);

  assert(int_of(0o2ut + 0O50ut)==42);

  assert(int_of(0o2uT + 0O50uT)==42);

  assert(int_of(0o2us + 0O50us)==42);

  assert(int_of(0o2uS + 0O50uS)==42);

  assert(int_of(0o2ui + 0O50ui)==42);

  assert(int_of(0o2uI + 0O50uI)==42);

  assert(int_of(0o2ul + 0O50ul)==42);

  assert(int_of(0o2uL + 0O50uL)==42);

  assert(int_of(0o2uv + 0O50uv)==42);

  assert(int_of(0o2uV + 0O50uV)==42);

  assert(int_of(0o2ull + 0O50ull)==42);

  assert(int_of(0o2uLL + 0O50uLL)==42);

  assert(int_of(0o2Ut + 0O50Ut)==42);

  assert(int_of(0o2UT + 0O50UT)==42);

  assert(int_of(0o2Us + 0O50Us)==42);

  assert(int_of(0o2US + 0O50US)==42);

  assert(int_of(0o2Ui + 0O50Ui)==42);

  assert(int_of(0o2UI + 0O50UI)==42);

  assert(int_of(0o2Ul + 0O50Ul)==42);

  assert(int_of(0o2UL + 0O50UL)==42);

  assert(int_of(0o2Uv + 0O50Uv)==42);

  assert(int_of(0o2UV + 0O50UV)==42);

  assert(int_of(0o2Ull + 0O50Ull)==42);

  assert(int_of(0o2ULL + 0O50ULL)==42);

  assert(int_of(0o2U + 0O50U)==42);

  assert(int_of(0o2tu + 0O50tu)==42);

  assert(int_of(0o2Tu + 0O50Tu)==42);

  assert(int_of(0o2su + 0O50su)==42);

  assert(int_of(0o2Su + 0O50Su)==42);

  assert(int_of(0o2iu + 0O50iu)==42);

  assert(int_of(0o2Iu + 0O50Iu)==42);

  assert(int_of(0o2lu + 0O50lu)==42);

  assert(int_of(0o2Lu + 0O50Lu)==42);

  assert(int_of(0o2vu + 0O50vu)==42);

  assert(int_of(0o2Vu + 0O50Vu)==42);

  assert(int_of(0o2llu + 0O50llu)==42);

  assert(int_of(0o2LLu + 0O50LLu)==42);

  assert(int_of(0o2tU + 0O50tU)==42);

  assert(int_of(0o2TU + 0O50TU)==42);

  assert(int_of(0o2sU + 0O50sU)==42);

  assert(int_of(0o2SU + 0O50SU)==42);

  assert(int_of(0o2iU + 0O50iU)==42);

  assert(int_of(0o2IU + 0O50IU)==42);

  assert(int_of(0o2lU + 0O50lU)==42);

  assert(int_of(0o2LU + 0O50LU)==42);

  assert(int_of(0o2vU + 0O50vU)==42);

  assert(int_of(0o2VU + 0O50VU)==42);

  assert(int_of(0o2llU + 0O50llU)==42);

  assert(int_of(0o2LLU + 0O50LLU)==42);

  assert(int_of(0o2i8 + 0O50i8)==42);

  assert(int_of(0o2i16 + 0O50i16)==42);

  assert(int_of(0o2i32 + 0O50i32)==42);

  assert(int_of(0o2i64 + 0O50i64)==42);

  assert(int_of(0o2u8 + 0O50u8)==42);

  assert(int_of(0o2u16 + 0O50u16)==42);

  assert(int_of(0o2u32 + 0O50u32)==42);

  assert(int_of(0o2u64 + 0O50u64)==42);

}

tst_0o20O50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0o20d40 () {

  assert(int_of(0o2 + 0d40)==42);

  assert(int_of(0o2t + 0d40t)==42);

  assert(int_of(0o2T + 0d40T)==42);

  assert(int_of(0o2s + 0d40s)==42);

  assert(int_of(0o2S + 0d40S)==42);

  assert(int_of(0o2i + 0d40i)==42);

  assert(int_of(0o2I + 0d40I)==42);

  assert(int_of(0o2l + 0d40l)==42);

  assert(int_of(0o2L + 0d40L)==42);

  assert(int_of(0o2v + 0d40v)==42);

  assert(int_of(0o2V + 0d40V)==42);

  assert(int_of(0o2ll + 0d40ll)==42);

  assert(int_of(0o2LL + 0d40LL)==42);

  assert(int_of(0o2u + 0d40u)==42);

  assert(int_of(0o2ut + 0d40ut)==42);

  assert(int_of(0o2uT + 0d40uT)==42);

  assert(int_of(0o2us + 0d40us)==42);

  assert(int_of(0o2uS + 0d40uS)==42);

  assert(int_of(0o2ui + 0d40ui)==42);

  assert(int_of(0o2uI + 0d40uI)==42);

  assert(int_of(0o2ul + 0d40ul)==42);

  assert(int_of(0o2uL + 0d40uL)==42);

  assert(int_of(0o2uv + 0d40uv)==42);

  assert(int_of(0o2uV + 0d40uV)==42);

  assert(int_of(0o2ull + 0d40ull)==42);

  assert(int_of(0o2uLL + 0d40uLL)==42);

  assert(int_of(0o2Ut + 0d40Ut)==42);

  assert(int_of(0o2UT + 0d40UT)==42);

  assert(int_of(0o2Us + 0d40Us)==42);

  assert(int_of(0o2US + 0d40US)==42);

  assert(int_of(0o2Ui + 0d40Ui)==42);

  assert(int_of(0o2UI + 0d40UI)==42);

  assert(int_of(0o2Ul + 0d40Ul)==42);

  assert(int_of(0o2UL + 0d40UL)==42);

  assert(int_of(0o2Uv + 0d40Uv)==42);

  assert(int_of(0o2UV + 0d40UV)==42);

  assert(int_of(0o2Ull + 0d40Ull)==42);

  assert(int_of(0o2ULL + 0d40ULL)==42);

  assert(int_of(0o2U + 0d40U)==42);

  assert(int_of(0o2tu + 0d40tu)==42);

  assert(int_of(0o2Tu + 0d40Tu)==42);

  assert(int_of(0o2su + 0d40su)==42);

  assert(int_of(0o2Su + 0d40Su)==42);

  assert(int_of(0o2iu + 0d40iu)==42);

  assert(int_of(0o2Iu + 0d40Iu)==42);

  assert(int_of(0o2lu + 0d40lu)==42);

  assert(int_of(0o2Lu + 0d40Lu)==42);

  assert(int_of(0o2vu + 0d40vu)==42);

  assert(int_of(0o2Vu + 0d40Vu)==42);

  assert(int_of(0o2llu + 0d40llu)==42);

  assert(int_of(0o2LLu + 0d40LLu)==42);

  assert(int_of(0o2tU + 0d40tU)==42);

  assert(int_of(0o2TU + 0d40TU)==42);

  assert(int_of(0o2sU + 0d40sU)==42);

  assert(int_of(0o2SU + 0d40SU)==42);

  assert(int_of(0o2iU + 0d40iU)==42);

  assert(int_of(0o2IU + 0d40IU)==42);

  assert(int_of(0o2lU + 0d40lU)==42);

  assert(int_of(0o2LU + 0d40LU)==42);

  assert(int_of(0o2vU + 0d40vU)==42);

  assert(int_of(0o2VU + 0d40VU)==42);

  assert(int_of(0o2llU + 0d40llU)==42);

  assert(int_of(0o2LLU + 0d40LLU)==42);

  assert(int_of(0o2i8 + 0d40i8)==42);

  assert(int_of(0o2i16 + 0d40i16)==42);

  assert(int_of(0o2i32 + 0d40i32)==42);

  assert(int_of(0o2i64 + 0d40i64)==42);

  assert(int_of(0o2u8 + 0d40u8)==42);

  assert(int_of(0o2u16 + 0d40u16)==42);

  assert(int_of(0o2u32 + 0d40u32)==42);

  assert(int_of(0o2u64 + 0d40u64)==42);

}

tst_0o20d40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0o20D40 () {

  assert(int_of(0o2 + 0D40)==42);

  assert(int_of(0o2t + 0D40t)==42);

  assert(int_of(0o2T + 0D40T)==42);

  assert(int_of(0o2s + 0D40s)==42);

  assert(int_of(0o2S + 0D40S)==42);

  assert(int_of(0o2i + 0D40i)==42);

  assert(int_of(0o2I + 0D40I)==42);

  assert(int_of(0o2l + 0D40l)==42);

  assert(int_of(0o2L + 0D40L)==42);

  assert(int_of(0o2v + 0D40v)==42);

  assert(int_of(0o2V + 0D40V)==42);

  assert(int_of(0o2ll + 0D40ll)==42);

  assert(int_of(0o2LL + 0D40LL)==42);

  assert(int_of(0o2u + 0D40u)==42);

  assert(int_of(0o2ut + 0D40ut)==42);

  assert(int_of(0o2uT + 0D40uT)==42);

  assert(int_of(0o2us + 0D40us)==42);

  assert(int_of(0o2uS + 0D40uS)==42);

  assert(int_of(0o2ui + 0D40ui)==42);

  assert(int_of(0o2uI + 0D40uI)==42);

  assert(int_of(0o2ul + 0D40ul)==42);

  assert(int_of(0o2uL + 0D40uL)==42);

  assert(int_of(0o2uv + 0D40uv)==42);

  assert(int_of(0o2uV + 0D40uV)==42);

  assert(int_of(0o2ull + 0D40ull)==42);

  assert(int_of(0o2uLL + 0D40uLL)==42);

  assert(int_of(0o2Ut + 0D40Ut)==42);

  assert(int_of(0o2UT + 0D40UT)==42);

  assert(int_of(0o2Us + 0D40Us)==42);

  assert(int_of(0o2US + 0D40US)==42);

  assert(int_of(0o2Ui + 0D40Ui)==42);

  assert(int_of(0o2UI + 0D40UI)==42);

  assert(int_of(0o2Ul + 0D40Ul)==42);

  assert(int_of(0o2UL + 0D40UL)==42);

  assert(int_of(0o2Uv + 0D40Uv)==42);

  assert(int_of(0o2UV + 0D40UV)==42);

  assert(int_of(0o2Ull + 0D40Ull)==42);

  assert(int_of(0o2ULL + 0D40ULL)==42);

  assert(int_of(0o2U + 0D40U)==42);

  assert(int_of(0o2tu + 0D40tu)==42);

  assert(int_of(0o2Tu + 0D40Tu)==42);

  assert(int_of(0o2su + 0D40su)==42);

  assert(int_of(0o2Su + 0D40Su)==42);

  assert(int_of(0o2iu + 0D40iu)==42);

  assert(int_of(0o2Iu + 0D40Iu)==42);

  assert(int_of(0o2lu + 0D40lu)==42);

  assert(int_of(0o2Lu + 0D40Lu)==42);

  assert(int_of(0o2vu + 0D40vu)==42);

  assert(int_of(0o2Vu + 0D40Vu)==42);

  assert(int_of(0o2llu + 0D40llu)==42);

  assert(int_of(0o2LLu + 0D40LLu)==42);

  assert(int_of(0o2tU + 0D40tU)==42);

  assert(int_of(0o2TU + 0D40TU)==42);

  assert(int_of(0o2sU + 0D40sU)==42);

  assert(int_of(0o2SU + 0D40SU)==42);

  assert(int_of(0o2iU + 0D40iU)==42);

  assert(int_of(0o2IU + 0D40IU)==42);

  assert(int_of(0o2lU + 0D40lU)==42);

  assert(int_of(0o2LU + 0D40LU)==42);

  assert(int_of(0o2vU + 0D40vU)==42);

  assert(int_of(0o2VU + 0D40VU)==42);

  assert(int_of(0o2llU + 0D40llU)==42);

  assert(int_of(0o2LLU + 0D40LLU)==42);

  assert(int_of(0o2i8 + 0D40i8)==42);

  assert(int_of(0o2i16 + 0D40i16)==42);

  assert(int_of(0o2i32 + 0D40i32)==42);

  assert(int_of(0o2i64 + 0D40i64)==42);

  assert(int_of(0o2u8 + 0D40u8)==42);

  assert(int_of(0o2u16 + 0D40u16)==42);

  assert(int_of(0o2u32 + 0D40u32)==42);

  assert(int_of(0o2u64 + 0D40u64)==42);

}

tst_0o20D40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0o20x28 () {

  assert(int_of(0o2 + 0x28)==42);

  assert(int_of(0o2t + 0x28t)==42);

  assert(int_of(0o2T + 0x28T)==42);

  assert(int_of(0o2s + 0x28s)==42);

  assert(int_of(0o2S + 0x28S)==42);

  assert(int_of(0o2i + 0x28i)==42);

  assert(int_of(0o2I + 0x28I)==42);

  assert(int_of(0o2l + 0x28l)==42);

  assert(int_of(0o2L + 0x28L)==42);

  assert(int_of(0o2v + 0x28v)==42);

  assert(int_of(0o2V + 0x28V)==42);

  assert(int_of(0o2ll + 0x28ll)==42);

  assert(int_of(0o2LL + 0x28LL)==42);

  assert(int_of(0o2u + 0x28u)==42);

  assert(int_of(0o2ut + 0x28ut)==42);

  assert(int_of(0o2uT + 0x28uT)==42);

  assert(int_of(0o2us + 0x28us)==42);

  assert(int_of(0o2uS + 0x28uS)==42);

  assert(int_of(0o2ui + 0x28ui)==42);

  assert(int_of(0o2uI + 0x28uI)==42);

  assert(int_of(0o2ul + 0x28ul)==42);

  assert(int_of(0o2uL + 0x28uL)==42);

  assert(int_of(0o2uv + 0x28uv)==42);

  assert(int_of(0o2uV + 0x28uV)==42);

  assert(int_of(0o2ull + 0x28ull)==42);

  assert(int_of(0o2uLL + 0x28uLL)==42);

  assert(int_of(0o2Ut + 0x28Ut)==42);

  assert(int_of(0o2UT + 0x28UT)==42);

  assert(int_of(0o2Us + 0x28Us)==42);

  assert(int_of(0o2US + 0x28US)==42);

  assert(int_of(0o2Ui + 0x28Ui)==42);

  assert(int_of(0o2UI + 0x28UI)==42);

  assert(int_of(0o2Ul + 0x28Ul)==42);

  assert(int_of(0o2UL + 0x28UL)==42);

  assert(int_of(0o2Uv + 0x28Uv)==42);

  assert(int_of(0o2UV + 0x28UV)==42);

  assert(int_of(0o2Ull + 0x28Ull)==42);

  assert(int_of(0o2ULL + 0x28ULL)==42);

  assert(int_of(0o2U + 0x28U)==42);

  assert(int_of(0o2tu + 0x28tu)==42);

  assert(int_of(0o2Tu + 0x28Tu)==42);

  assert(int_of(0o2su + 0x28su)==42);

  assert(int_of(0o2Su + 0x28Su)==42);

  assert(int_of(0o2iu + 0x28iu)==42);

  assert(int_of(0o2Iu + 0x28Iu)==42);

  assert(int_of(0o2lu + 0x28lu)==42);

  assert(int_of(0o2Lu + 0x28Lu)==42);

  assert(int_of(0o2vu + 0x28vu)==42);

  assert(int_of(0o2Vu + 0x28Vu)==42);

  assert(int_of(0o2llu + 0x28llu)==42);

  assert(int_of(0o2LLu + 0x28LLu)==42);

  assert(int_of(0o2tU + 0x28tU)==42);

  assert(int_of(0o2TU + 0x28TU)==42);

  assert(int_of(0o2sU + 0x28sU)==42);

  assert(int_of(0o2SU + 0x28SU)==42);

  assert(int_of(0o2iU + 0x28iU)==42);

  assert(int_of(0o2IU + 0x28IU)==42);

  assert(int_of(0o2lU + 0x28lU)==42);

  assert(int_of(0o2LU + 0x28LU)==42);

  assert(int_of(0o2vU + 0x28vU)==42);

  assert(int_of(0o2VU + 0x28VU)==42);

  assert(int_of(0o2llU + 0x28llU)==42);

  assert(int_of(0o2LLU + 0x28LLU)==42);

  assert(int_of(0o2i8 + 0x28i8)==42);

  assert(int_of(0o2i16 + 0x28i16)==42);

  assert(int_of(0o2i32 + 0x28i32)==42);

  assert(int_of(0o2i64 + 0x28i64)==42);

  assert(int_of(0o2u8 + 0x28u8)==42);

  assert(int_of(0o2u16 + 0x28u16)==42);

  assert(int_of(0o2u32 + 0x28u32)==42);

  assert(int_of(0o2u64 + 0x28u64)==42);

}

tst_0o20x28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0o20X28 () {

  assert(int_of(0o2 + 0X28)==42);

  assert(int_of(0o2t + 0X28t)==42);

  assert(int_of(0o2T + 0X28T)==42);

  assert(int_of(0o2s + 0X28s)==42);

  assert(int_of(0o2S + 0X28S)==42);

  assert(int_of(0o2i + 0X28i)==42);

  assert(int_of(0o2I + 0X28I)==42);

  assert(int_of(0o2l + 0X28l)==42);

  assert(int_of(0o2L + 0X28L)==42);

  assert(int_of(0o2v + 0X28v)==42);

  assert(int_of(0o2V + 0X28V)==42);

  assert(int_of(0o2ll + 0X28ll)==42);

  assert(int_of(0o2LL + 0X28LL)==42);

  assert(int_of(0o2u + 0X28u)==42);

  assert(int_of(0o2ut + 0X28ut)==42);

  assert(int_of(0o2uT + 0X28uT)==42);

  assert(int_of(0o2us + 0X28us)==42);

  assert(int_of(0o2uS + 0X28uS)==42);

  assert(int_of(0o2ui + 0X28ui)==42);

  assert(int_of(0o2uI + 0X28uI)==42);

  assert(int_of(0o2ul + 0X28ul)==42);

  assert(int_of(0o2uL + 0X28uL)==42);

  assert(int_of(0o2uv + 0X28uv)==42);

  assert(int_of(0o2uV + 0X28uV)==42);

  assert(int_of(0o2ull + 0X28ull)==42);

  assert(int_of(0o2uLL + 0X28uLL)==42);

  assert(int_of(0o2Ut + 0X28Ut)==42);

  assert(int_of(0o2UT + 0X28UT)==42);

  assert(int_of(0o2Us + 0X28Us)==42);

  assert(int_of(0o2US + 0X28US)==42);

  assert(int_of(0o2Ui + 0X28Ui)==42);

  assert(int_of(0o2UI + 0X28UI)==42);

  assert(int_of(0o2Ul + 0X28Ul)==42);

  assert(int_of(0o2UL + 0X28UL)==42);

  assert(int_of(0o2Uv + 0X28Uv)==42);

  assert(int_of(0o2UV + 0X28UV)==42);

  assert(int_of(0o2Ull + 0X28Ull)==42);

  assert(int_of(0o2ULL + 0X28ULL)==42);

  assert(int_of(0o2U + 0X28U)==42);

  assert(int_of(0o2tu + 0X28tu)==42);

  assert(int_of(0o2Tu + 0X28Tu)==42);

  assert(int_of(0o2su + 0X28su)==42);

  assert(int_of(0o2Su + 0X28Su)==42);

  assert(int_of(0o2iu + 0X28iu)==42);

  assert(int_of(0o2Iu + 0X28Iu)==42);

  assert(int_of(0o2lu + 0X28lu)==42);

  assert(int_of(0o2Lu + 0X28Lu)==42);

  assert(int_of(0o2vu + 0X28vu)==42);

  assert(int_of(0o2Vu + 0X28Vu)==42);

  assert(int_of(0o2llu + 0X28llu)==42);

  assert(int_of(0o2LLu + 0X28LLu)==42);

  assert(int_of(0o2tU + 0X28tU)==42);

  assert(int_of(0o2TU + 0X28TU)==42);

  assert(int_of(0o2sU + 0X28sU)==42);

  assert(int_of(0o2SU + 0X28SU)==42);

  assert(int_of(0o2iU + 0X28iU)==42);

  assert(int_of(0o2IU + 0X28IU)==42);

  assert(int_of(0o2lU + 0X28lU)==42);

  assert(int_of(0o2LU + 0X28LU)==42);

  assert(int_of(0o2vU + 0X28vU)==42);

  assert(int_of(0o2VU + 0X28VU)==42);

  assert(int_of(0o2llU + 0X28llU)==42);

  assert(int_of(0o2LLU + 0X28LLU)==42);

  assert(int_of(0o2i8 + 0X28i8)==42);

  assert(int_of(0o2i16 + 0X28i16)==42);

  assert(int_of(0o2i32 + 0X28i32)==42);

  assert(int_of(0o2i64 + 0X28i64)==42);

  assert(int_of(0o2u8 + 0X28u8)==42);

  assert(int_of(0o2u16 + 0X28u16)==42);

  assert(int_of(0o2u32 + 0X28u32)==42);

  assert(int_of(0o2u64 + 0X28u64)==42);

}

tst_0o20X28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0O240 () {

  assert(int_of(0O2 + 40)==42);

  assert(int_of(0O2t + 40t)==42);

  assert(int_of(0O2T + 40T)==42);

  assert(int_of(0O2s + 40s)==42);

  assert(int_of(0O2S + 40S)==42);

  assert(int_of(0O2i + 40i)==42);

  assert(int_of(0O2I + 40I)==42);

  assert(int_of(0O2l + 40l)==42);

  assert(int_of(0O2L + 40L)==42);

  assert(int_of(0O2v + 40v)==42);

  assert(int_of(0O2V + 40V)==42);

  assert(int_of(0O2ll + 40ll)==42);

  assert(int_of(0O2LL + 40LL)==42);

  assert(int_of(0O2u + 40u)==42);

  assert(int_of(0O2ut + 40ut)==42);

  assert(int_of(0O2uT + 40uT)==42);

  assert(int_of(0O2us + 40us)==42);

  assert(int_of(0O2uS + 40uS)==42);

  assert(int_of(0O2ui + 40ui)==42);

  assert(int_of(0O2uI + 40uI)==42);

  assert(int_of(0O2ul + 40ul)==42);

  assert(int_of(0O2uL + 40uL)==42);

  assert(int_of(0O2uv + 40uv)==42);

  assert(int_of(0O2uV + 40uV)==42);

  assert(int_of(0O2ull + 40ull)==42);

  assert(int_of(0O2uLL + 40uLL)==42);

  assert(int_of(0O2Ut + 40Ut)==42);

  assert(int_of(0O2UT + 40UT)==42);

  assert(int_of(0O2Us + 40Us)==42);

  assert(int_of(0O2US + 40US)==42);

  assert(int_of(0O2Ui + 40Ui)==42);

  assert(int_of(0O2UI + 40UI)==42);

  assert(int_of(0O2Ul + 40Ul)==42);

  assert(int_of(0O2UL + 40UL)==42);

  assert(int_of(0O2Uv + 40Uv)==42);

  assert(int_of(0O2UV + 40UV)==42);

  assert(int_of(0O2Ull + 40Ull)==42);

  assert(int_of(0O2ULL + 40ULL)==42);

  assert(int_of(0O2U + 40U)==42);

  assert(int_of(0O2tu + 40tu)==42);

  assert(int_of(0O2Tu + 40Tu)==42);

  assert(int_of(0O2su + 40su)==42);

  assert(int_of(0O2Su + 40Su)==42);

  assert(int_of(0O2iu + 40iu)==42);

  assert(int_of(0O2Iu + 40Iu)==42);

  assert(int_of(0O2lu + 40lu)==42);

  assert(int_of(0O2Lu + 40Lu)==42);

  assert(int_of(0O2vu + 40vu)==42);

  assert(int_of(0O2Vu + 40Vu)==42);

  assert(int_of(0O2llu + 40llu)==42);

  assert(int_of(0O2LLu + 40LLu)==42);

  assert(int_of(0O2tU + 40tU)==42);

  assert(int_of(0O2TU + 40TU)==42);

  assert(int_of(0O2sU + 40sU)==42);

  assert(int_of(0O2SU + 40SU)==42);

  assert(int_of(0O2iU + 40iU)==42);

  assert(int_of(0O2IU + 40IU)==42);

  assert(int_of(0O2lU + 40lU)==42);

  assert(int_of(0O2LU + 40LU)==42);

  assert(int_of(0O2vU + 40vU)==42);

  assert(int_of(0O2VU + 40VU)==42);

  assert(int_of(0O2llU + 40llU)==42);

  assert(int_of(0O2LLU + 40LLU)==42);

  assert(int_of(0O2i8 + 40i8)==42);

  assert(int_of(0O2i16 + 40i16)==42);

  assert(int_of(0O2i32 + 40i32)==42);

  assert(int_of(0O2i64 + 40i64)==42);

  assert(int_of(0O2u8 + 40u8)==42);

  assert(int_of(0O2u16 + 40u16)==42);

  assert(int_of(0O2u32 + 40u32)==42);

  assert(int_of(0O2u64 + 40u64)==42);

}

tst_0O240;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0O20b0010_1000 () {

  assert(int_of(0O2 + 0b0010_1000)==42);

  assert(int_of(0O2t + 0b0010_1000t)==42);

  assert(int_of(0O2T + 0b0010_1000T)==42);

  assert(int_of(0O2s + 0b0010_1000s)==42);

  assert(int_of(0O2S + 0b0010_1000S)==42);

  assert(int_of(0O2i + 0b0010_1000i)==42);

  assert(int_of(0O2I + 0b0010_1000I)==42);

  assert(int_of(0O2l + 0b0010_1000l)==42);

  assert(int_of(0O2L + 0b0010_1000L)==42);

  assert(int_of(0O2v + 0b0010_1000v)==42);

  assert(int_of(0O2V + 0b0010_1000V)==42);

  assert(int_of(0O2ll + 0b0010_1000ll)==42);

  assert(int_of(0O2LL + 0b0010_1000LL)==42);

  assert(int_of(0O2u + 0b0010_1000u)==42);

  assert(int_of(0O2ut + 0b0010_1000ut)==42);

  assert(int_of(0O2uT + 0b0010_1000uT)==42);

  assert(int_of(0O2us + 0b0010_1000us)==42);

  assert(int_of(0O2uS + 0b0010_1000uS)==42);

  assert(int_of(0O2ui + 0b0010_1000ui)==42);

  assert(int_of(0O2uI + 0b0010_1000uI)==42);

  assert(int_of(0O2ul + 0b0010_1000ul)==42);

  assert(int_of(0O2uL + 0b0010_1000uL)==42);

  assert(int_of(0O2uv + 0b0010_1000uv)==42);

  assert(int_of(0O2uV + 0b0010_1000uV)==42);

  assert(int_of(0O2ull + 0b0010_1000ull)==42);

  assert(int_of(0O2uLL + 0b0010_1000uLL)==42);

  assert(int_of(0O2Ut + 0b0010_1000Ut)==42);

  assert(int_of(0O2UT + 0b0010_1000UT)==42);

  assert(int_of(0O2Us + 0b0010_1000Us)==42);

  assert(int_of(0O2US + 0b0010_1000US)==42);

  assert(int_of(0O2Ui + 0b0010_1000Ui)==42);

  assert(int_of(0O2UI + 0b0010_1000UI)==42);

  assert(int_of(0O2Ul + 0b0010_1000Ul)==42);

  assert(int_of(0O2UL + 0b0010_1000UL)==42);

  assert(int_of(0O2Uv + 0b0010_1000Uv)==42);

  assert(int_of(0O2UV + 0b0010_1000UV)==42);

  assert(int_of(0O2Ull + 0b0010_1000Ull)==42);

  assert(int_of(0O2ULL + 0b0010_1000ULL)==42);

  assert(int_of(0O2U + 0b0010_1000U)==42);

  assert(int_of(0O2tu + 0b0010_1000tu)==42);

  assert(int_of(0O2Tu + 0b0010_1000Tu)==42);

  assert(int_of(0O2su + 0b0010_1000su)==42);

  assert(int_of(0O2Su + 0b0010_1000Su)==42);

  assert(int_of(0O2iu + 0b0010_1000iu)==42);

  assert(int_of(0O2Iu + 0b0010_1000Iu)==42);

  assert(int_of(0O2lu + 0b0010_1000lu)==42);

  assert(int_of(0O2Lu + 0b0010_1000Lu)==42);

  assert(int_of(0O2vu + 0b0010_1000vu)==42);

  assert(int_of(0O2Vu + 0b0010_1000Vu)==42);

  assert(int_of(0O2llu + 0b0010_1000llu)==42);

  assert(int_of(0O2LLu + 0b0010_1000LLu)==42);

  assert(int_of(0O2tU + 0b0010_1000tU)==42);

  assert(int_of(0O2TU + 0b0010_1000TU)==42);

  assert(int_of(0O2sU + 0b0010_1000sU)==42);

  assert(int_of(0O2SU + 0b0010_1000SU)==42);

  assert(int_of(0O2iU + 0b0010_1000iU)==42);

  assert(int_of(0O2IU + 0b0010_1000IU)==42);

  assert(int_of(0O2lU + 0b0010_1000lU)==42);

  assert(int_of(0O2LU + 0b0010_1000LU)==42);

  assert(int_of(0O2vU + 0b0010_1000vU)==42);

  assert(int_of(0O2VU + 0b0010_1000VU)==42);

  assert(int_of(0O2llU + 0b0010_1000llU)==42);

  assert(int_of(0O2LLU + 0b0010_1000LLU)==42);

  assert(int_of(0O2i8 + 0b0010_1000i8)==42);

  assert(int_of(0O2i16 + 0b0010_1000i16)==42);

  assert(int_of(0O2i32 + 0b0010_1000i32)==42);

  assert(int_of(0O2i64 + 0b0010_1000i64)==42);

  assert(int_of(0O2u8 + 0b0010_1000u8)==42);

  assert(int_of(0O2u16 + 0b0010_1000u16)==42);

  assert(int_of(0O2u32 + 0b0010_1000u32)==42);

  assert(int_of(0O2u64 + 0b0010_1000u64)==42);

}

tst_0O20b0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0O20B_0010_1000 () {

  assert(int_of(0O2 + 0B_0010_1000)==42);

  assert(int_of(0O2t + 0B_0010_1000t)==42);

  assert(int_of(0O2T + 0B_0010_1000T)==42);

  assert(int_of(0O2s + 0B_0010_1000s)==42);

  assert(int_of(0O2S + 0B_0010_1000S)==42);

  assert(int_of(0O2i + 0B_0010_1000i)==42);

  assert(int_of(0O2I + 0B_0010_1000I)==42);

  assert(int_of(0O2l + 0B_0010_1000l)==42);

  assert(int_of(0O2L + 0B_0010_1000L)==42);

  assert(int_of(0O2v + 0B_0010_1000v)==42);

  assert(int_of(0O2V + 0B_0010_1000V)==42);

  assert(int_of(0O2ll + 0B_0010_1000ll)==42);

  assert(int_of(0O2LL + 0B_0010_1000LL)==42);

  assert(int_of(0O2u + 0B_0010_1000u)==42);

  assert(int_of(0O2ut + 0B_0010_1000ut)==42);

  assert(int_of(0O2uT + 0B_0010_1000uT)==42);

  assert(int_of(0O2us + 0B_0010_1000us)==42);

  assert(int_of(0O2uS + 0B_0010_1000uS)==42);

  assert(int_of(0O2ui + 0B_0010_1000ui)==42);

  assert(int_of(0O2uI + 0B_0010_1000uI)==42);

  assert(int_of(0O2ul + 0B_0010_1000ul)==42);

  assert(int_of(0O2uL + 0B_0010_1000uL)==42);

  assert(int_of(0O2uv + 0B_0010_1000uv)==42);

  assert(int_of(0O2uV + 0B_0010_1000uV)==42);

  assert(int_of(0O2ull + 0B_0010_1000ull)==42);

  assert(int_of(0O2uLL + 0B_0010_1000uLL)==42);

  assert(int_of(0O2Ut + 0B_0010_1000Ut)==42);

  assert(int_of(0O2UT + 0B_0010_1000UT)==42);

  assert(int_of(0O2Us + 0B_0010_1000Us)==42);

  assert(int_of(0O2US + 0B_0010_1000US)==42);

  assert(int_of(0O2Ui + 0B_0010_1000Ui)==42);

  assert(int_of(0O2UI + 0B_0010_1000UI)==42);

  assert(int_of(0O2Ul + 0B_0010_1000Ul)==42);

  assert(int_of(0O2UL + 0B_0010_1000UL)==42);

  assert(int_of(0O2Uv + 0B_0010_1000Uv)==42);

  assert(int_of(0O2UV + 0B_0010_1000UV)==42);

  assert(int_of(0O2Ull + 0B_0010_1000Ull)==42);

  assert(int_of(0O2ULL + 0B_0010_1000ULL)==42);

  assert(int_of(0O2U + 0B_0010_1000U)==42);

  assert(int_of(0O2tu + 0B_0010_1000tu)==42);

  assert(int_of(0O2Tu + 0B_0010_1000Tu)==42);

  assert(int_of(0O2su + 0B_0010_1000su)==42);

  assert(int_of(0O2Su + 0B_0010_1000Su)==42);

  assert(int_of(0O2iu + 0B_0010_1000iu)==42);

  assert(int_of(0O2Iu + 0B_0010_1000Iu)==42);

  assert(int_of(0O2lu + 0B_0010_1000lu)==42);

  assert(int_of(0O2Lu + 0B_0010_1000Lu)==42);

  assert(int_of(0O2vu + 0B_0010_1000vu)==42);

  assert(int_of(0O2Vu + 0B_0010_1000Vu)==42);

  assert(int_of(0O2llu + 0B_0010_1000llu)==42);

  assert(int_of(0O2LLu + 0B_0010_1000LLu)==42);

  assert(int_of(0O2tU + 0B_0010_1000tU)==42);

  assert(int_of(0O2TU + 0B_0010_1000TU)==42);

  assert(int_of(0O2sU + 0B_0010_1000sU)==42);

  assert(int_of(0O2SU + 0B_0010_1000SU)==42);

  assert(int_of(0O2iU + 0B_0010_1000iU)==42);

  assert(int_of(0O2IU + 0B_0010_1000IU)==42);

  assert(int_of(0O2lU + 0B_0010_1000lU)==42);

  assert(int_of(0O2LU + 0B_0010_1000LU)==42);

  assert(int_of(0O2vU + 0B_0010_1000vU)==42);

  assert(int_of(0O2VU + 0B_0010_1000VU)==42);

  assert(int_of(0O2llU + 0B_0010_1000llU)==42);

  assert(int_of(0O2LLU + 0B_0010_1000LLU)==42);

  assert(int_of(0O2i8 + 0B_0010_1000i8)==42);

  assert(int_of(0O2i16 + 0B_0010_1000i16)==42);

  assert(int_of(0O2i32 + 0B_0010_1000i32)==42);

  assert(int_of(0O2i64 + 0B_0010_1000i64)==42);

  assert(int_of(0O2u8 + 0B_0010_1000u8)==42);

  assert(int_of(0O2u16 + 0B_0010_1000u16)==42);

  assert(int_of(0O2u32 + 0B_0010_1000u32)==42);

  assert(int_of(0O2u64 + 0B_0010_1000u64)==42);

}

tst_0O20B_0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0O20o50 () {

  assert(int_of(0O2 + 0o50)==42);

  assert(int_of(0O2t + 0o50t)==42);

  assert(int_of(0O2T + 0o50T)==42);

  assert(int_of(0O2s + 0o50s)==42);

  assert(int_of(0O2S + 0o50S)==42);

  assert(int_of(0O2i + 0o50i)==42);

  assert(int_of(0O2I + 0o50I)==42);

  assert(int_of(0O2l + 0o50l)==42);

  assert(int_of(0O2L + 0o50L)==42);

  assert(int_of(0O2v + 0o50v)==42);

  assert(int_of(0O2V + 0o50V)==42);

  assert(int_of(0O2ll + 0o50ll)==42);

  assert(int_of(0O2LL + 0o50LL)==42);

  assert(int_of(0O2u + 0o50u)==42);

  assert(int_of(0O2ut + 0o50ut)==42);

  assert(int_of(0O2uT + 0o50uT)==42);

  assert(int_of(0O2us + 0o50us)==42);

  assert(int_of(0O2uS + 0o50uS)==42);

  assert(int_of(0O2ui + 0o50ui)==42);

  assert(int_of(0O2uI + 0o50uI)==42);

  assert(int_of(0O2ul + 0o50ul)==42);

  assert(int_of(0O2uL + 0o50uL)==42);

  assert(int_of(0O2uv + 0o50uv)==42);

  assert(int_of(0O2uV + 0o50uV)==42);

  assert(int_of(0O2ull + 0o50ull)==42);

  assert(int_of(0O2uLL + 0o50uLL)==42);

  assert(int_of(0O2Ut + 0o50Ut)==42);

  assert(int_of(0O2UT + 0o50UT)==42);

  assert(int_of(0O2Us + 0o50Us)==42);

  assert(int_of(0O2US + 0o50US)==42);

  assert(int_of(0O2Ui + 0o50Ui)==42);

  assert(int_of(0O2UI + 0o50UI)==42);

  assert(int_of(0O2Ul + 0o50Ul)==42);

  assert(int_of(0O2UL + 0o50UL)==42);

  assert(int_of(0O2Uv + 0o50Uv)==42);

  assert(int_of(0O2UV + 0o50UV)==42);

  assert(int_of(0O2Ull + 0o50Ull)==42);

  assert(int_of(0O2ULL + 0o50ULL)==42);

  assert(int_of(0O2U + 0o50U)==42);

  assert(int_of(0O2tu + 0o50tu)==42);

  assert(int_of(0O2Tu + 0o50Tu)==42);

  assert(int_of(0O2su + 0o50su)==42);

  assert(int_of(0O2Su + 0o50Su)==42);

  assert(int_of(0O2iu + 0o50iu)==42);

  assert(int_of(0O2Iu + 0o50Iu)==42);

  assert(int_of(0O2lu + 0o50lu)==42);

  assert(int_of(0O2Lu + 0o50Lu)==42);

  assert(int_of(0O2vu + 0o50vu)==42);

  assert(int_of(0O2Vu + 0o50Vu)==42);

  assert(int_of(0O2llu + 0o50llu)==42);

  assert(int_of(0O2LLu + 0o50LLu)==42);

  assert(int_of(0O2tU + 0o50tU)==42);

  assert(int_of(0O2TU + 0o50TU)==42);

  assert(int_of(0O2sU + 0o50sU)==42);

  assert(int_of(0O2SU + 0o50SU)==42);

  assert(int_of(0O2iU + 0o50iU)==42);

  assert(int_of(0O2IU + 0o50IU)==42);

  assert(int_of(0O2lU + 0o50lU)==42);

  assert(int_of(0O2LU + 0o50LU)==42);

  assert(int_of(0O2vU + 0o50vU)==42);

  assert(int_of(0O2VU + 0o50VU)==42);

  assert(int_of(0O2llU + 0o50llU)==42);

  assert(int_of(0O2LLU + 0o50LLU)==42);

  assert(int_of(0O2i8 + 0o50i8)==42);

  assert(int_of(0O2i16 + 0o50i16)==42);

  assert(int_of(0O2i32 + 0o50i32)==42);

  assert(int_of(0O2i64 + 0o50i64)==42);

  assert(int_of(0O2u8 + 0o50u8)==42);

  assert(int_of(0O2u16 + 0o50u16)==42);

  assert(int_of(0O2u32 + 0o50u32)==42);

  assert(int_of(0O2u64 + 0o50u64)==42);

}

tst_0O20o50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0O20O50 () {

  assert(int_of(0O2 + 0O50)==42);

  assert(int_of(0O2t + 0O50t)==42);

  assert(int_of(0O2T + 0O50T)==42);

  assert(int_of(0O2s + 0O50s)==42);

  assert(int_of(0O2S + 0O50S)==42);

  assert(int_of(0O2i + 0O50i)==42);

  assert(int_of(0O2I + 0O50I)==42);

  assert(int_of(0O2l + 0O50l)==42);

  assert(int_of(0O2L + 0O50L)==42);

  assert(int_of(0O2v + 0O50v)==42);

  assert(int_of(0O2V + 0O50V)==42);

  assert(int_of(0O2ll + 0O50ll)==42);

  assert(int_of(0O2LL + 0O50LL)==42);

  assert(int_of(0O2u + 0O50u)==42);

  assert(int_of(0O2ut + 0O50ut)==42);

  assert(int_of(0O2uT + 0O50uT)==42);

  assert(int_of(0O2us + 0O50us)==42);

  assert(int_of(0O2uS + 0O50uS)==42);

  assert(int_of(0O2ui + 0O50ui)==42);

  assert(int_of(0O2uI + 0O50uI)==42);

  assert(int_of(0O2ul + 0O50ul)==42);

  assert(int_of(0O2uL + 0O50uL)==42);

  assert(int_of(0O2uv + 0O50uv)==42);

  assert(int_of(0O2uV + 0O50uV)==42);

  assert(int_of(0O2ull + 0O50ull)==42);

  assert(int_of(0O2uLL + 0O50uLL)==42);

  assert(int_of(0O2Ut + 0O50Ut)==42);

  assert(int_of(0O2UT + 0O50UT)==42);

  assert(int_of(0O2Us + 0O50Us)==42);

  assert(int_of(0O2US + 0O50US)==42);

  assert(int_of(0O2Ui + 0O50Ui)==42);

  assert(int_of(0O2UI + 0O50UI)==42);

  assert(int_of(0O2Ul + 0O50Ul)==42);

  assert(int_of(0O2UL + 0O50UL)==42);

  assert(int_of(0O2Uv + 0O50Uv)==42);

  assert(int_of(0O2UV + 0O50UV)==42);

  assert(int_of(0O2Ull + 0O50Ull)==42);

  assert(int_of(0O2ULL + 0O50ULL)==42);

  assert(int_of(0O2U + 0O50U)==42);

  assert(int_of(0O2tu + 0O50tu)==42);

  assert(int_of(0O2Tu + 0O50Tu)==42);

  assert(int_of(0O2su + 0O50su)==42);

  assert(int_of(0O2Su + 0O50Su)==42);

  assert(int_of(0O2iu + 0O50iu)==42);

  assert(int_of(0O2Iu + 0O50Iu)==42);

  assert(int_of(0O2lu + 0O50lu)==42);

  assert(int_of(0O2Lu + 0O50Lu)==42);

  assert(int_of(0O2vu + 0O50vu)==42);

  assert(int_of(0O2Vu + 0O50Vu)==42);

  assert(int_of(0O2llu + 0O50llu)==42);

  assert(int_of(0O2LLu + 0O50LLu)==42);

  assert(int_of(0O2tU + 0O50tU)==42);

  assert(int_of(0O2TU + 0O50TU)==42);

  assert(int_of(0O2sU + 0O50sU)==42);

  assert(int_of(0O2SU + 0O50SU)==42);

  assert(int_of(0O2iU + 0O50iU)==42);

  assert(int_of(0O2IU + 0O50IU)==42);

  assert(int_of(0O2lU + 0O50lU)==42);

  assert(int_of(0O2LU + 0O50LU)==42);

  assert(int_of(0O2vU + 0O50vU)==42);

  assert(int_of(0O2VU + 0O50VU)==42);

  assert(int_of(0O2llU + 0O50llU)==42);

  assert(int_of(0O2LLU + 0O50LLU)==42);

  assert(int_of(0O2i8 + 0O50i8)==42);

  assert(int_of(0O2i16 + 0O50i16)==42);

  assert(int_of(0O2i32 + 0O50i32)==42);

  assert(int_of(0O2i64 + 0O50i64)==42);

  assert(int_of(0O2u8 + 0O50u8)==42);

  assert(int_of(0O2u16 + 0O50u16)==42);

  assert(int_of(0O2u32 + 0O50u32)==42);

  assert(int_of(0O2u64 + 0O50u64)==42);

}

tst_0O20O50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0O20d40 () {

  assert(int_of(0O2 + 0d40)==42);

  assert(int_of(0O2t + 0d40t)==42);

  assert(int_of(0O2T + 0d40T)==42);

  assert(int_of(0O2s + 0d40s)==42);

  assert(int_of(0O2S + 0d40S)==42);

  assert(int_of(0O2i + 0d40i)==42);

  assert(int_of(0O2I + 0d40I)==42);

  assert(int_of(0O2l + 0d40l)==42);

  assert(int_of(0O2L + 0d40L)==42);

  assert(int_of(0O2v + 0d40v)==42);

  assert(int_of(0O2V + 0d40V)==42);

  assert(int_of(0O2ll + 0d40ll)==42);

  assert(int_of(0O2LL + 0d40LL)==42);

  assert(int_of(0O2u + 0d40u)==42);

  assert(int_of(0O2ut + 0d40ut)==42);

  assert(int_of(0O2uT + 0d40uT)==42);

  assert(int_of(0O2us + 0d40us)==42);

  assert(int_of(0O2uS + 0d40uS)==42);

  assert(int_of(0O2ui + 0d40ui)==42);

  assert(int_of(0O2uI + 0d40uI)==42);

  assert(int_of(0O2ul + 0d40ul)==42);

  assert(int_of(0O2uL + 0d40uL)==42);

  assert(int_of(0O2uv + 0d40uv)==42);

  assert(int_of(0O2uV + 0d40uV)==42);

  assert(int_of(0O2ull + 0d40ull)==42);

  assert(int_of(0O2uLL + 0d40uLL)==42);

  assert(int_of(0O2Ut + 0d40Ut)==42);

  assert(int_of(0O2UT + 0d40UT)==42);

  assert(int_of(0O2Us + 0d40Us)==42);

  assert(int_of(0O2US + 0d40US)==42);

  assert(int_of(0O2Ui + 0d40Ui)==42);

  assert(int_of(0O2UI + 0d40UI)==42);

  assert(int_of(0O2Ul + 0d40Ul)==42);

  assert(int_of(0O2UL + 0d40UL)==42);

  assert(int_of(0O2Uv + 0d40Uv)==42);

  assert(int_of(0O2UV + 0d40UV)==42);

  assert(int_of(0O2Ull + 0d40Ull)==42);

  assert(int_of(0O2ULL + 0d40ULL)==42);

  assert(int_of(0O2U + 0d40U)==42);

  assert(int_of(0O2tu + 0d40tu)==42);

  assert(int_of(0O2Tu + 0d40Tu)==42);

  assert(int_of(0O2su + 0d40su)==42);

  assert(int_of(0O2Su + 0d40Su)==42);

  assert(int_of(0O2iu + 0d40iu)==42);

  assert(int_of(0O2Iu + 0d40Iu)==42);

  assert(int_of(0O2lu + 0d40lu)==42);

  assert(int_of(0O2Lu + 0d40Lu)==42);

  assert(int_of(0O2vu + 0d40vu)==42);

  assert(int_of(0O2Vu + 0d40Vu)==42);

  assert(int_of(0O2llu + 0d40llu)==42);

  assert(int_of(0O2LLu + 0d40LLu)==42);

  assert(int_of(0O2tU + 0d40tU)==42);

  assert(int_of(0O2TU + 0d40TU)==42);

  assert(int_of(0O2sU + 0d40sU)==42);

  assert(int_of(0O2SU + 0d40SU)==42);

  assert(int_of(0O2iU + 0d40iU)==42);

  assert(int_of(0O2IU + 0d40IU)==42);

  assert(int_of(0O2lU + 0d40lU)==42);

  assert(int_of(0O2LU + 0d40LU)==42);

  assert(int_of(0O2vU + 0d40vU)==42);

  assert(int_of(0O2VU + 0d40VU)==42);

  assert(int_of(0O2llU + 0d40llU)==42);

  assert(int_of(0O2LLU + 0d40LLU)==42);

  assert(int_of(0O2i8 + 0d40i8)==42);

  assert(int_of(0O2i16 + 0d40i16)==42);

  assert(int_of(0O2i32 + 0d40i32)==42);

  assert(int_of(0O2i64 + 0d40i64)==42);

  assert(int_of(0O2u8 + 0d40u8)==42);

  assert(int_of(0O2u16 + 0d40u16)==42);

  assert(int_of(0O2u32 + 0d40u32)==42);

  assert(int_of(0O2u64 + 0d40u64)==42);

}

tst_0O20d40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0O20D40 () {

  assert(int_of(0O2 + 0D40)==42);

  assert(int_of(0O2t + 0D40t)==42);

  assert(int_of(0O2T + 0D40T)==42);

  assert(int_of(0O2s + 0D40s)==42);

  assert(int_of(0O2S + 0D40S)==42);

  assert(int_of(0O2i + 0D40i)==42);

  assert(int_of(0O2I + 0D40I)==42);

  assert(int_of(0O2l + 0D40l)==42);

  assert(int_of(0O2L + 0D40L)==42);

  assert(int_of(0O2v + 0D40v)==42);

  assert(int_of(0O2V + 0D40V)==42);

  assert(int_of(0O2ll + 0D40ll)==42);

  assert(int_of(0O2LL + 0D40LL)==42);

  assert(int_of(0O2u + 0D40u)==42);

  assert(int_of(0O2ut + 0D40ut)==42);

  assert(int_of(0O2uT + 0D40uT)==42);

  assert(int_of(0O2us + 0D40us)==42);

  assert(int_of(0O2uS + 0D40uS)==42);

  assert(int_of(0O2ui + 0D40ui)==42);

  assert(int_of(0O2uI + 0D40uI)==42);

  assert(int_of(0O2ul + 0D40ul)==42);

  assert(int_of(0O2uL + 0D40uL)==42);

  assert(int_of(0O2uv + 0D40uv)==42);

  assert(int_of(0O2uV + 0D40uV)==42);

  assert(int_of(0O2ull + 0D40ull)==42);

  assert(int_of(0O2uLL + 0D40uLL)==42);

  assert(int_of(0O2Ut + 0D40Ut)==42);

  assert(int_of(0O2UT + 0D40UT)==42);

  assert(int_of(0O2Us + 0D40Us)==42);

  assert(int_of(0O2US + 0D40US)==42);

  assert(int_of(0O2Ui + 0D40Ui)==42);

  assert(int_of(0O2UI + 0D40UI)==42);

  assert(int_of(0O2Ul + 0D40Ul)==42);

  assert(int_of(0O2UL + 0D40UL)==42);

  assert(int_of(0O2Uv + 0D40Uv)==42);

  assert(int_of(0O2UV + 0D40UV)==42);

  assert(int_of(0O2Ull + 0D40Ull)==42);

  assert(int_of(0O2ULL + 0D40ULL)==42);

  assert(int_of(0O2U + 0D40U)==42);

  assert(int_of(0O2tu + 0D40tu)==42);

  assert(int_of(0O2Tu + 0D40Tu)==42);

  assert(int_of(0O2su + 0D40su)==42);

  assert(int_of(0O2Su + 0D40Su)==42);

  assert(int_of(0O2iu + 0D40iu)==42);

  assert(int_of(0O2Iu + 0D40Iu)==42);

  assert(int_of(0O2lu + 0D40lu)==42);

  assert(int_of(0O2Lu + 0D40Lu)==42);

  assert(int_of(0O2vu + 0D40vu)==42);

  assert(int_of(0O2Vu + 0D40Vu)==42);

  assert(int_of(0O2llu + 0D40llu)==42);

  assert(int_of(0O2LLu + 0D40LLu)==42);

  assert(int_of(0O2tU + 0D40tU)==42);

  assert(int_of(0O2TU + 0D40TU)==42);

  assert(int_of(0O2sU + 0D40sU)==42);

  assert(int_of(0O2SU + 0D40SU)==42);

  assert(int_of(0O2iU + 0D40iU)==42);

  assert(int_of(0O2IU + 0D40IU)==42);

  assert(int_of(0O2lU + 0D40lU)==42);

  assert(int_of(0O2LU + 0D40LU)==42);

  assert(int_of(0O2vU + 0D40vU)==42);

  assert(int_of(0O2VU + 0D40VU)==42);

  assert(int_of(0O2llU + 0D40llU)==42);

  assert(int_of(0O2LLU + 0D40LLU)==42);

  assert(int_of(0O2i8 + 0D40i8)==42);

  assert(int_of(0O2i16 + 0D40i16)==42);

  assert(int_of(0O2i32 + 0D40i32)==42);

  assert(int_of(0O2i64 + 0D40i64)==42);

  assert(int_of(0O2u8 + 0D40u8)==42);

  assert(int_of(0O2u16 + 0D40u16)==42);

  assert(int_of(0O2u32 + 0D40u32)==42);

  assert(int_of(0O2u64 + 0D40u64)==42);

}

tst_0O20D40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0O20x28 () {

  assert(int_of(0O2 + 0x28)==42);

  assert(int_of(0O2t + 0x28t)==42);

  assert(int_of(0O2T + 0x28T)==42);

  assert(int_of(0O2s + 0x28s)==42);

  assert(int_of(0O2S + 0x28S)==42);

  assert(int_of(0O2i + 0x28i)==42);

  assert(int_of(0O2I + 0x28I)==42);

  assert(int_of(0O2l + 0x28l)==42);

  assert(int_of(0O2L + 0x28L)==42);

  assert(int_of(0O2v + 0x28v)==42);

  assert(int_of(0O2V + 0x28V)==42);

  assert(int_of(0O2ll + 0x28ll)==42);

  assert(int_of(0O2LL + 0x28LL)==42);

  assert(int_of(0O2u + 0x28u)==42);

  assert(int_of(0O2ut + 0x28ut)==42);

  assert(int_of(0O2uT + 0x28uT)==42);

  assert(int_of(0O2us + 0x28us)==42);

  assert(int_of(0O2uS + 0x28uS)==42);

  assert(int_of(0O2ui + 0x28ui)==42);

  assert(int_of(0O2uI + 0x28uI)==42);

  assert(int_of(0O2ul + 0x28ul)==42);

  assert(int_of(0O2uL + 0x28uL)==42);

  assert(int_of(0O2uv + 0x28uv)==42);

  assert(int_of(0O2uV + 0x28uV)==42);

  assert(int_of(0O2ull + 0x28ull)==42);

  assert(int_of(0O2uLL + 0x28uLL)==42);

  assert(int_of(0O2Ut + 0x28Ut)==42);

  assert(int_of(0O2UT + 0x28UT)==42);

  assert(int_of(0O2Us + 0x28Us)==42);

  assert(int_of(0O2US + 0x28US)==42);

  assert(int_of(0O2Ui + 0x28Ui)==42);

  assert(int_of(0O2UI + 0x28UI)==42);

  assert(int_of(0O2Ul + 0x28Ul)==42);

  assert(int_of(0O2UL + 0x28UL)==42);

  assert(int_of(0O2Uv + 0x28Uv)==42);

  assert(int_of(0O2UV + 0x28UV)==42);

  assert(int_of(0O2Ull + 0x28Ull)==42);

  assert(int_of(0O2ULL + 0x28ULL)==42);

  assert(int_of(0O2U + 0x28U)==42);

  assert(int_of(0O2tu + 0x28tu)==42);

  assert(int_of(0O2Tu + 0x28Tu)==42);

  assert(int_of(0O2su + 0x28su)==42);

  assert(int_of(0O2Su + 0x28Su)==42);

  assert(int_of(0O2iu + 0x28iu)==42);

  assert(int_of(0O2Iu + 0x28Iu)==42);

  assert(int_of(0O2lu + 0x28lu)==42);

  assert(int_of(0O2Lu + 0x28Lu)==42);

  assert(int_of(0O2vu + 0x28vu)==42);

  assert(int_of(0O2Vu + 0x28Vu)==42);

  assert(int_of(0O2llu + 0x28llu)==42);

  assert(int_of(0O2LLu + 0x28LLu)==42);

  assert(int_of(0O2tU + 0x28tU)==42);

  assert(int_of(0O2TU + 0x28TU)==42);

  assert(int_of(0O2sU + 0x28sU)==42);

  assert(int_of(0O2SU + 0x28SU)==42);

  assert(int_of(0O2iU + 0x28iU)==42);

  assert(int_of(0O2IU + 0x28IU)==42);

  assert(int_of(0O2lU + 0x28lU)==42);

  assert(int_of(0O2LU + 0x28LU)==42);

  assert(int_of(0O2vU + 0x28vU)==42);

  assert(int_of(0O2VU + 0x28VU)==42);

  assert(int_of(0O2llU + 0x28llU)==42);

  assert(int_of(0O2LLU + 0x28LLU)==42);

  assert(int_of(0O2i8 + 0x28i8)==42);

  assert(int_of(0O2i16 + 0x28i16)==42);

  assert(int_of(0O2i32 + 0x28i32)==42);

  assert(int_of(0O2i64 + 0x28i64)==42);

  assert(int_of(0O2u8 + 0x28u8)==42);

  assert(int_of(0O2u16 + 0x28u16)==42);

  assert(int_of(0O2u32 + 0x28u32)==42);

  assert(int_of(0O2u64 + 0x28u64)==42);

}

tst_0O20x28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0O20X28 () {

  assert(int_of(0O2 + 0X28)==42);

  assert(int_of(0O2t + 0X28t)==42);

  assert(int_of(0O2T + 0X28T)==42);

  assert(int_of(0O2s + 0X28s)==42);

  assert(int_of(0O2S + 0X28S)==42);

  assert(int_of(0O2i + 0X28i)==42);

  assert(int_of(0O2I + 0X28I)==42);

  assert(int_of(0O2l + 0X28l)==42);

  assert(int_of(0O2L + 0X28L)==42);

  assert(int_of(0O2v + 0X28v)==42);

  assert(int_of(0O2V + 0X28V)==42);

  assert(int_of(0O2ll + 0X28ll)==42);

  assert(int_of(0O2LL + 0X28LL)==42);

  assert(int_of(0O2u + 0X28u)==42);

  assert(int_of(0O2ut + 0X28ut)==42);

  assert(int_of(0O2uT + 0X28uT)==42);

  assert(int_of(0O2us + 0X28us)==42);

  assert(int_of(0O2uS + 0X28uS)==42);

  assert(int_of(0O2ui + 0X28ui)==42);

  assert(int_of(0O2uI + 0X28uI)==42);

  assert(int_of(0O2ul + 0X28ul)==42);

  assert(int_of(0O2uL + 0X28uL)==42);

  assert(int_of(0O2uv + 0X28uv)==42);

  assert(int_of(0O2uV + 0X28uV)==42);

  assert(int_of(0O2ull + 0X28ull)==42);

  assert(int_of(0O2uLL + 0X28uLL)==42);

  assert(int_of(0O2Ut + 0X28Ut)==42);

  assert(int_of(0O2UT + 0X28UT)==42);

  assert(int_of(0O2Us + 0X28Us)==42);

  assert(int_of(0O2US + 0X28US)==42);

  assert(int_of(0O2Ui + 0X28Ui)==42);

  assert(int_of(0O2UI + 0X28UI)==42);

  assert(int_of(0O2Ul + 0X28Ul)==42);

  assert(int_of(0O2UL + 0X28UL)==42);

  assert(int_of(0O2Uv + 0X28Uv)==42);

  assert(int_of(0O2UV + 0X28UV)==42);

  assert(int_of(0O2Ull + 0X28Ull)==42);

  assert(int_of(0O2ULL + 0X28ULL)==42);

  assert(int_of(0O2U + 0X28U)==42);

  assert(int_of(0O2tu + 0X28tu)==42);

  assert(int_of(0O2Tu + 0X28Tu)==42);

  assert(int_of(0O2su + 0X28su)==42);

  assert(int_of(0O2Su + 0X28Su)==42);

  assert(int_of(0O2iu + 0X28iu)==42);

  assert(int_of(0O2Iu + 0X28Iu)==42);

  assert(int_of(0O2lu + 0X28lu)==42);

  assert(int_of(0O2Lu + 0X28Lu)==42);

  assert(int_of(0O2vu + 0X28vu)==42);

  assert(int_of(0O2Vu + 0X28Vu)==42);

  assert(int_of(0O2llu + 0X28llu)==42);

  assert(int_of(0O2LLu + 0X28LLu)==42);

  assert(int_of(0O2tU + 0X28tU)==42);

  assert(int_of(0O2TU + 0X28TU)==42);

  assert(int_of(0O2sU + 0X28sU)==42);

  assert(int_of(0O2SU + 0X28SU)==42);

  assert(int_of(0O2iU + 0X28iU)==42);

  assert(int_of(0O2IU + 0X28IU)==42);

  assert(int_of(0O2lU + 0X28lU)==42);

  assert(int_of(0O2LU + 0X28LU)==42);

  assert(int_of(0O2vU + 0X28vU)==42);

  assert(int_of(0O2VU + 0X28VU)==42);

  assert(int_of(0O2llU + 0X28llU)==42);

  assert(int_of(0O2LLU + 0X28LLU)==42);

  assert(int_of(0O2i8 + 0X28i8)==42);

  assert(int_of(0O2i16 + 0X28i16)==42);

  assert(int_of(0O2i32 + 0X28i32)==42);

  assert(int_of(0O2i64 + 0X28i64)==42);

  assert(int_of(0O2u8 + 0X28u8)==42);

  assert(int_of(0O2u16 + 0X28u16)==42);

  assert(int_of(0O2u32 + 0X28u32)==42);

  assert(int_of(0O2u64 + 0X28u64)==42);

}

tst_0O20X28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0d240 () {

  assert(int_of(0d2 + 40)==42);

  assert(int_of(0d2t + 40t)==42);

  assert(int_of(0d2T + 40T)==42);

  assert(int_of(0d2s + 40s)==42);

  assert(int_of(0d2S + 40S)==42);

  assert(int_of(0d2i + 40i)==42);

  assert(int_of(0d2I + 40I)==42);

  assert(int_of(0d2l + 40l)==42);

  assert(int_of(0d2L + 40L)==42);

  assert(int_of(0d2v + 40v)==42);

  assert(int_of(0d2V + 40V)==42);

  assert(int_of(0d2ll + 40ll)==42);

  assert(int_of(0d2LL + 40LL)==42);

  assert(int_of(0d2u + 40u)==42);

  assert(int_of(0d2ut + 40ut)==42);

  assert(int_of(0d2uT + 40uT)==42);

  assert(int_of(0d2us + 40us)==42);

  assert(int_of(0d2uS + 40uS)==42);

  assert(int_of(0d2ui + 40ui)==42);

  assert(int_of(0d2uI + 40uI)==42);

  assert(int_of(0d2ul + 40ul)==42);

  assert(int_of(0d2uL + 40uL)==42);

  assert(int_of(0d2uv + 40uv)==42);

  assert(int_of(0d2uV + 40uV)==42);

  assert(int_of(0d2ull + 40ull)==42);

  assert(int_of(0d2uLL + 40uLL)==42);

  assert(int_of(0d2Ut + 40Ut)==42);

  assert(int_of(0d2UT + 40UT)==42);

  assert(int_of(0d2Us + 40Us)==42);

  assert(int_of(0d2US + 40US)==42);

  assert(int_of(0d2Ui + 40Ui)==42);

  assert(int_of(0d2UI + 40UI)==42);

  assert(int_of(0d2Ul + 40Ul)==42);

  assert(int_of(0d2UL + 40UL)==42);

  assert(int_of(0d2Uv + 40Uv)==42);

  assert(int_of(0d2UV + 40UV)==42);

  assert(int_of(0d2Ull + 40Ull)==42);

  assert(int_of(0d2ULL + 40ULL)==42);

  assert(int_of(0d2U + 40U)==42);

  assert(int_of(0d2tu + 40tu)==42);

  assert(int_of(0d2Tu + 40Tu)==42);

  assert(int_of(0d2su + 40su)==42);

  assert(int_of(0d2Su + 40Su)==42);

  assert(int_of(0d2iu + 40iu)==42);

  assert(int_of(0d2Iu + 40Iu)==42);

  assert(int_of(0d2lu + 40lu)==42);

  assert(int_of(0d2Lu + 40Lu)==42);

  assert(int_of(0d2vu + 40vu)==42);

  assert(int_of(0d2Vu + 40Vu)==42);

  assert(int_of(0d2llu + 40llu)==42);

  assert(int_of(0d2LLu + 40LLu)==42);

  assert(int_of(0d2tU + 40tU)==42);

  assert(int_of(0d2TU + 40TU)==42);

  assert(int_of(0d2sU + 40sU)==42);

  assert(int_of(0d2SU + 40SU)==42);

  assert(int_of(0d2iU + 40iU)==42);

  assert(int_of(0d2IU + 40IU)==42);

  assert(int_of(0d2lU + 40lU)==42);

  assert(int_of(0d2LU + 40LU)==42);

  assert(int_of(0d2vU + 40vU)==42);

  assert(int_of(0d2VU + 40VU)==42);

  assert(int_of(0d2llU + 40llU)==42);

  assert(int_of(0d2LLU + 40LLU)==42);

  assert(int_of(0d2i8 + 40i8)==42);

  assert(int_of(0d2i16 + 40i16)==42);

  assert(int_of(0d2i32 + 40i32)==42);

  assert(int_of(0d2i64 + 40i64)==42);

  assert(int_of(0d2u8 + 40u8)==42);

  assert(int_of(0d2u16 + 40u16)==42);

  assert(int_of(0d2u32 + 40u32)==42);

  assert(int_of(0d2u64 + 40u64)==42);

}

tst_0d240;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0d20b0010_1000 () {

  assert(int_of(0d2 + 0b0010_1000)==42);

  assert(int_of(0d2t + 0b0010_1000t)==42);

  assert(int_of(0d2T + 0b0010_1000T)==42);

  assert(int_of(0d2s + 0b0010_1000s)==42);

  assert(int_of(0d2S + 0b0010_1000S)==42);

  assert(int_of(0d2i + 0b0010_1000i)==42);

  assert(int_of(0d2I + 0b0010_1000I)==42);

  assert(int_of(0d2l + 0b0010_1000l)==42);

  assert(int_of(0d2L + 0b0010_1000L)==42);

  assert(int_of(0d2v + 0b0010_1000v)==42);

  assert(int_of(0d2V + 0b0010_1000V)==42);

  assert(int_of(0d2ll + 0b0010_1000ll)==42);

  assert(int_of(0d2LL + 0b0010_1000LL)==42);

  assert(int_of(0d2u + 0b0010_1000u)==42);

  assert(int_of(0d2ut + 0b0010_1000ut)==42);

  assert(int_of(0d2uT + 0b0010_1000uT)==42);

  assert(int_of(0d2us + 0b0010_1000us)==42);

  assert(int_of(0d2uS + 0b0010_1000uS)==42);

  assert(int_of(0d2ui + 0b0010_1000ui)==42);

  assert(int_of(0d2uI + 0b0010_1000uI)==42);

  assert(int_of(0d2ul + 0b0010_1000ul)==42);

  assert(int_of(0d2uL + 0b0010_1000uL)==42);

  assert(int_of(0d2uv + 0b0010_1000uv)==42);

  assert(int_of(0d2uV + 0b0010_1000uV)==42);

  assert(int_of(0d2ull + 0b0010_1000ull)==42);

  assert(int_of(0d2uLL + 0b0010_1000uLL)==42);

  assert(int_of(0d2Ut + 0b0010_1000Ut)==42);

  assert(int_of(0d2UT + 0b0010_1000UT)==42);

  assert(int_of(0d2Us + 0b0010_1000Us)==42);

  assert(int_of(0d2US + 0b0010_1000US)==42);

  assert(int_of(0d2Ui + 0b0010_1000Ui)==42);

  assert(int_of(0d2UI + 0b0010_1000UI)==42);

  assert(int_of(0d2Ul + 0b0010_1000Ul)==42);

  assert(int_of(0d2UL + 0b0010_1000UL)==42);

  assert(int_of(0d2Uv + 0b0010_1000Uv)==42);

  assert(int_of(0d2UV + 0b0010_1000UV)==42);

  assert(int_of(0d2Ull + 0b0010_1000Ull)==42);

  assert(int_of(0d2ULL + 0b0010_1000ULL)==42);

  assert(int_of(0d2U + 0b0010_1000U)==42);

  assert(int_of(0d2tu + 0b0010_1000tu)==42);

  assert(int_of(0d2Tu + 0b0010_1000Tu)==42);

  assert(int_of(0d2su + 0b0010_1000su)==42);

  assert(int_of(0d2Su + 0b0010_1000Su)==42);

  assert(int_of(0d2iu + 0b0010_1000iu)==42);

  assert(int_of(0d2Iu + 0b0010_1000Iu)==42);

  assert(int_of(0d2lu + 0b0010_1000lu)==42);

  assert(int_of(0d2Lu + 0b0010_1000Lu)==42);

  assert(int_of(0d2vu + 0b0010_1000vu)==42);

  assert(int_of(0d2Vu + 0b0010_1000Vu)==42);

  assert(int_of(0d2llu + 0b0010_1000llu)==42);

  assert(int_of(0d2LLu + 0b0010_1000LLu)==42);

  assert(int_of(0d2tU + 0b0010_1000tU)==42);

  assert(int_of(0d2TU + 0b0010_1000TU)==42);

  assert(int_of(0d2sU + 0b0010_1000sU)==42);

  assert(int_of(0d2SU + 0b0010_1000SU)==42);

  assert(int_of(0d2iU + 0b0010_1000iU)==42);

  assert(int_of(0d2IU + 0b0010_1000IU)==42);

  assert(int_of(0d2lU + 0b0010_1000lU)==42);

  assert(int_of(0d2LU + 0b0010_1000LU)==42);

  assert(int_of(0d2vU + 0b0010_1000vU)==42);

  assert(int_of(0d2VU + 0b0010_1000VU)==42);

  assert(int_of(0d2llU + 0b0010_1000llU)==42);

  assert(int_of(0d2LLU + 0b0010_1000LLU)==42);

  assert(int_of(0d2i8 + 0b0010_1000i8)==42);

  assert(int_of(0d2i16 + 0b0010_1000i16)==42);

  assert(int_of(0d2i32 + 0b0010_1000i32)==42);

  assert(int_of(0d2i64 + 0b0010_1000i64)==42);

  assert(int_of(0d2u8 + 0b0010_1000u8)==42);

  assert(int_of(0d2u16 + 0b0010_1000u16)==42);

  assert(int_of(0d2u32 + 0b0010_1000u32)==42);

  assert(int_of(0d2u64 + 0b0010_1000u64)==42);

}

tst_0d20b0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0d20B_0010_1000 () {

  assert(int_of(0d2 + 0B_0010_1000)==42);

  assert(int_of(0d2t + 0B_0010_1000t)==42);

  assert(int_of(0d2T + 0B_0010_1000T)==42);

  assert(int_of(0d2s + 0B_0010_1000s)==42);

  assert(int_of(0d2S + 0B_0010_1000S)==42);

  assert(int_of(0d2i + 0B_0010_1000i)==42);

  assert(int_of(0d2I + 0B_0010_1000I)==42);

  assert(int_of(0d2l + 0B_0010_1000l)==42);

  assert(int_of(0d2L + 0B_0010_1000L)==42);

  assert(int_of(0d2v + 0B_0010_1000v)==42);

  assert(int_of(0d2V + 0B_0010_1000V)==42);

  assert(int_of(0d2ll + 0B_0010_1000ll)==42);

  assert(int_of(0d2LL + 0B_0010_1000LL)==42);

  assert(int_of(0d2u + 0B_0010_1000u)==42);

  assert(int_of(0d2ut + 0B_0010_1000ut)==42);

  assert(int_of(0d2uT + 0B_0010_1000uT)==42);

  assert(int_of(0d2us + 0B_0010_1000us)==42);

  assert(int_of(0d2uS + 0B_0010_1000uS)==42);

  assert(int_of(0d2ui + 0B_0010_1000ui)==42);

  assert(int_of(0d2uI + 0B_0010_1000uI)==42);

  assert(int_of(0d2ul + 0B_0010_1000ul)==42);

  assert(int_of(0d2uL + 0B_0010_1000uL)==42);

  assert(int_of(0d2uv + 0B_0010_1000uv)==42);

  assert(int_of(0d2uV + 0B_0010_1000uV)==42);

  assert(int_of(0d2ull + 0B_0010_1000ull)==42);

  assert(int_of(0d2uLL + 0B_0010_1000uLL)==42);

  assert(int_of(0d2Ut + 0B_0010_1000Ut)==42);

  assert(int_of(0d2UT + 0B_0010_1000UT)==42);

  assert(int_of(0d2Us + 0B_0010_1000Us)==42);

  assert(int_of(0d2US + 0B_0010_1000US)==42);

  assert(int_of(0d2Ui + 0B_0010_1000Ui)==42);

  assert(int_of(0d2UI + 0B_0010_1000UI)==42);

  assert(int_of(0d2Ul + 0B_0010_1000Ul)==42);

  assert(int_of(0d2UL + 0B_0010_1000UL)==42);

  assert(int_of(0d2Uv + 0B_0010_1000Uv)==42);

  assert(int_of(0d2UV + 0B_0010_1000UV)==42);

  assert(int_of(0d2Ull + 0B_0010_1000Ull)==42);

  assert(int_of(0d2ULL + 0B_0010_1000ULL)==42);

  assert(int_of(0d2U + 0B_0010_1000U)==42);

  assert(int_of(0d2tu + 0B_0010_1000tu)==42);

  assert(int_of(0d2Tu + 0B_0010_1000Tu)==42);

  assert(int_of(0d2su + 0B_0010_1000su)==42);

  assert(int_of(0d2Su + 0B_0010_1000Su)==42);

  assert(int_of(0d2iu + 0B_0010_1000iu)==42);

  assert(int_of(0d2Iu + 0B_0010_1000Iu)==42);

  assert(int_of(0d2lu + 0B_0010_1000lu)==42);

  assert(int_of(0d2Lu + 0B_0010_1000Lu)==42);

  assert(int_of(0d2vu + 0B_0010_1000vu)==42);

  assert(int_of(0d2Vu + 0B_0010_1000Vu)==42);

  assert(int_of(0d2llu + 0B_0010_1000llu)==42);

  assert(int_of(0d2LLu + 0B_0010_1000LLu)==42);

  assert(int_of(0d2tU + 0B_0010_1000tU)==42);

  assert(int_of(0d2TU + 0B_0010_1000TU)==42);

  assert(int_of(0d2sU + 0B_0010_1000sU)==42);

  assert(int_of(0d2SU + 0B_0010_1000SU)==42);

  assert(int_of(0d2iU + 0B_0010_1000iU)==42);

  assert(int_of(0d2IU + 0B_0010_1000IU)==42);

  assert(int_of(0d2lU + 0B_0010_1000lU)==42);

  assert(int_of(0d2LU + 0B_0010_1000LU)==42);

  assert(int_of(0d2vU + 0B_0010_1000vU)==42);

  assert(int_of(0d2VU + 0B_0010_1000VU)==42);

  assert(int_of(0d2llU + 0B_0010_1000llU)==42);

  assert(int_of(0d2LLU + 0B_0010_1000LLU)==42);

  assert(int_of(0d2i8 + 0B_0010_1000i8)==42);

  assert(int_of(0d2i16 + 0B_0010_1000i16)==42);

  assert(int_of(0d2i32 + 0B_0010_1000i32)==42);

  assert(int_of(0d2i64 + 0B_0010_1000i64)==42);

  assert(int_of(0d2u8 + 0B_0010_1000u8)==42);

  assert(int_of(0d2u16 + 0B_0010_1000u16)==42);

  assert(int_of(0d2u32 + 0B_0010_1000u32)==42);

  assert(int_of(0d2u64 + 0B_0010_1000u64)==42);

}

tst_0d20B_0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0d20o50 () {

  assert(int_of(0d2 + 0o50)==42);

  assert(int_of(0d2t + 0o50t)==42);

  assert(int_of(0d2T + 0o50T)==42);

  assert(int_of(0d2s + 0o50s)==42);

  assert(int_of(0d2S + 0o50S)==42);

  assert(int_of(0d2i + 0o50i)==42);

  assert(int_of(0d2I + 0o50I)==42);

  assert(int_of(0d2l + 0o50l)==42);

  assert(int_of(0d2L + 0o50L)==42);

  assert(int_of(0d2v + 0o50v)==42);

  assert(int_of(0d2V + 0o50V)==42);

  assert(int_of(0d2ll + 0o50ll)==42);

  assert(int_of(0d2LL + 0o50LL)==42);

  assert(int_of(0d2u + 0o50u)==42);

  assert(int_of(0d2ut + 0o50ut)==42);

  assert(int_of(0d2uT + 0o50uT)==42);

  assert(int_of(0d2us + 0o50us)==42);

  assert(int_of(0d2uS + 0o50uS)==42);

  assert(int_of(0d2ui + 0o50ui)==42);

  assert(int_of(0d2uI + 0o50uI)==42);

  assert(int_of(0d2ul + 0o50ul)==42);

  assert(int_of(0d2uL + 0o50uL)==42);

  assert(int_of(0d2uv + 0o50uv)==42);

  assert(int_of(0d2uV + 0o50uV)==42);

  assert(int_of(0d2ull + 0o50ull)==42);

  assert(int_of(0d2uLL + 0o50uLL)==42);

  assert(int_of(0d2Ut + 0o50Ut)==42);

  assert(int_of(0d2UT + 0o50UT)==42);

  assert(int_of(0d2Us + 0o50Us)==42);

  assert(int_of(0d2US + 0o50US)==42);

  assert(int_of(0d2Ui + 0o50Ui)==42);

  assert(int_of(0d2UI + 0o50UI)==42);

  assert(int_of(0d2Ul + 0o50Ul)==42);

  assert(int_of(0d2UL + 0o50UL)==42);

  assert(int_of(0d2Uv + 0o50Uv)==42);

  assert(int_of(0d2UV + 0o50UV)==42);

  assert(int_of(0d2Ull + 0o50Ull)==42);

  assert(int_of(0d2ULL + 0o50ULL)==42);

  assert(int_of(0d2U + 0o50U)==42);

  assert(int_of(0d2tu + 0o50tu)==42);

  assert(int_of(0d2Tu + 0o50Tu)==42);

  assert(int_of(0d2su + 0o50su)==42);

  assert(int_of(0d2Su + 0o50Su)==42);

  assert(int_of(0d2iu + 0o50iu)==42);

  assert(int_of(0d2Iu + 0o50Iu)==42);

  assert(int_of(0d2lu + 0o50lu)==42);

  assert(int_of(0d2Lu + 0o50Lu)==42);

  assert(int_of(0d2vu + 0o50vu)==42);

  assert(int_of(0d2Vu + 0o50Vu)==42);

  assert(int_of(0d2llu + 0o50llu)==42);

  assert(int_of(0d2LLu + 0o50LLu)==42);

  assert(int_of(0d2tU + 0o50tU)==42);

  assert(int_of(0d2TU + 0o50TU)==42);

  assert(int_of(0d2sU + 0o50sU)==42);

  assert(int_of(0d2SU + 0o50SU)==42);

  assert(int_of(0d2iU + 0o50iU)==42);

  assert(int_of(0d2IU + 0o50IU)==42);

  assert(int_of(0d2lU + 0o50lU)==42);

  assert(int_of(0d2LU + 0o50LU)==42);

  assert(int_of(0d2vU + 0o50vU)==42);

  assert(int_of(0d2VU + 0o50VU)==42);

  assert(int_of(0d2llU + 0o50llU)==42);

  assert(int_of(0d2LLU + 0o50LLU)==42);

  assert(int_of(0d2i8 + 0o50i8)==42);

  assert(int_of(0d2i16 + 0o50i16)==42);

  assert(int_of(0d2i32 + 0o50i32)==42);

  assert(int_of(0d2i64 + 0o50i64)==42);

  assert(int_of(0d2u8 + 0o50u8)==42);

  assert(int_of(0d2u16 + 0o50u16)==42);

  assert(int_of(0d2u32 + 0o50u32)==42);

  assert(int_of(0d2u64 + 0o50u64)==42);

}

tst_0d20o50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0d20O50 () {

  assert(int_of(0d2 + 0O50)==42);

  assert(int_of(0d2t + 0O50t)==42);

  assert(int_of(0d2T + 0O50T)==42);

  assert(int_of(0d2s + 0O50s)==42);

  assert(int_of(0d2S + 0O50S)==42);

  assert(int_of(0d2i + 0O50i)==42);

  assert(int_of(0d2I + 0O50I)==42);

  assert(int_of(0d2l + 0O50l)==42);

  assert(int_of(0d2L + 0O50L)==42);

  assert(int_of(0d2v + 0O50v)==42);

  assert(int_of(0d2V + 0O50V)==42);

  assert(int_of(0d2ll + 0O50ll)==42);

  assert(int_of(0d2LL + 0O50LL)==42);

  assert(int_of(0d2u + 0O50u)==42);

  assert(int_of(0d2ut + 0O50ut)==42);

  assert(int_of(0d2uT + 0O50uT)==42);

  assert(int_of(0d2us + 0O50us)==42);

  assert(int_of(0d2uS + 0O50uS)==42);

  assert(int_of(0d2ui + 0O50ui)==42);

  assert(int_of(0d2uI + 0O50uI)==42);

  assert(int_of(0d2ul + 0O50ul)==42);

  assert(int_of(0d2uL + 0O50uL)==42);

  assert(int_of(0d2uv + 0O50uv)==42);

  assert(int_of(0d2uV + 0O50uV)==42);

  assert(int_of(0d2ull + 0O50ull)==42);

  assert(int_of(0d2uLL + 0O50uLL)==42);

  assert(int_of(0d2Ut + 0O50Ut)==42);

  assert(int_of(0d2UT + 0O50UT)==42);

  assert(int_of(0d2Us + 0O50Us)==42);

  assert(int_of(0d2US + 0O50US)==42);

  assert(int_of(0d2Ui + 0O50Ui)==42);

  assert(int_of(0d2UI + 0O50UI)==42);

  assert(int_of(0d2Ul + 0O50Ul)==42);

  assert(int_of(0d2UL + 0O50UL)==42);

  assert(int_of(0d2Uv + 0O50Uv)==42);

  assert(int_of(0d2UV + 0O50UV)==42);

  assert(int_of(0d2Ull + 0O50Ull)==42);

  assert(int_of(0d2ULL + 0O50ULL)==42);

  assert(int_of(0d2U + 0O50U)==42);

  assert(int_of(0d2tu + 0O50tu)==42);

  assert(int_of(0d2Tu + 0O50Tu)==42);

  assert(int_of(0d2su + 0O50su)==42);

  assert(int_of(0d2Su + 0O50Su)==42);

  assert(int_of(0d2iu + 0O50iu)==42);

  assert(int_of(0d2Iu + 0O50Iu)==42);

  assert(int_of(0d2lu + 0O50lu)==42);

  assert(int_of(0d2Lu + 0O50Lu)==42);

  assert(int_of(0d2vu + 0O50vu)==42);

  assert(int_of(0d2Vu + 0O50Vu)==42);

  assert(int_of(0d2llu + 0O50llu)==42);

  assert(int_of(0d2LLu + 0O50LLu)==42);

  assert(int_of(0d2tU + 0O50tU)==42);

  assert(int_of(0d2TU + 0O50TU)==42);

  assert(int_of(0d2sU + 0O50sU)==42);

  assert(int_of(0d2SU + 0O50SU)==42);

  assert(int_of(0d2iU + 0O50iU)==42);

  assert(int_of(0d2IU + 0O50IU)==42);

  assert(int_of(0d2lU + 0O50lU)==42);

  assert(int_of(0d2LU + 0O50LU)==42);

  assert(int_of(0d2vU + 0O50vU)==42);

  assert(int_of(0d2VU + 0O50VU)==42);

  assert(int_of(0d2llU + 0O50llU)==42);

  assert(int_of(0d2LLU + 0O50LLU)==42);

  assert(int_of(0d2i8 + 0O50i8)==42);

  assert(int_of(0d2i16 + 0O50i16)==42);

  assert(int_of(0d2i32 + 0O50i32)==42);

  assert(int_of(0d2i64 + 0O50i64)==42);

  assert(int_of(0d2u8 + 0O50u8)==42);

  assert(int_of(0d2u16 + 0O50u16)==42);

  assert(int_of(0d2u32 + 0O50u32)==42);

  assert(int_of(0d2u64 + 0O50u64)==42);

}

tst_0d20O50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0d20d40 () {

  assert(int_of(0d2 + 0d40)==42);

  assert(int_of(0d2t + 0d40t)==42);

  assert(int_of(0d2T + 0d40T)==42);

  assert(int_of(0d2s + 0d40s)==42);

  assert(int_of(0d2S + 0d40S)==42);

  assert(int_of(0d2i + 0d40i)==42);

  assert(int_of(0d2I + 0d40I)==42);

  assert(int_of(0d2l + 0d40l)==42);

  assert(int_of(0d2L + 0d40L)==42);

  assert(int_of(0d2v + 0d40v)==42);

  assert(int_of(0d2V + 0d40V)==42);

  assert(int_of(0d2ll + 0d40ll)==42);

  assert(int_of(0d2LL + 0d40LL)==42);

  assert(int_of(0d2u + 0d40u)==42);

  assert(int_of(0d2ut + 0d40ut)==42);

  assert(int_of(0d2uT + 0d40uT)==42);

  assert(int_of(0d2us + 0d40us)==42);

  assert(int_of(0d2uS + 0d40uS)==42);

  assert(int_of(0d2ui + 0d40ui)==42);

  assert(int_of(0d2uI + 0d40uI)==42);

  assert(int_of(0d2ul + 0d40ul)==42);

  assert(int_of(0d2uL + 0d40uL)==42);

  assert(int_of(0d2uv + 0d40uv)==42);

  assert(int_of(0d2uV + 0d40uV)==42);

  assert(int_of(0d2ull + 0d40ull)==42);

  assert(int_of(0d2uLL + 0d40uLL)==42);

  assert(int_of(0d2Ut + 0d40Ut)==42);

  assert(int_of(0d2UT + 0d40UT)==42);

  assert(int_of(0d2Us + 0d40Us)==42);

  assert(int_of(0d2US + 0d40US)==42);

  assert(int_of(0d2Ui + 0d40Ui)==42);

  assert(int_of(0d2UI + 0d40UI)==42);

  assert(int_of(0d2Ul + 0d40Ul)==42);

  assert(int_of(0d2UL + 0d40UL)==42);

  assert(int_of(0d2Uv + 0d40Uv)==42);

  assert(int_of(0d2UV + 0d40UV)==42);

  assert(int_of(0d2Ull + 0d40Ull)==42);

  assert(int_of(0d2ULL + 0d40ULL)==42);

  assert(int_of(0d2U + 0d40U)==42);

  assert(int_of(0d2tu + 0d40tu)==42);

  assert(int_of(0d2Tu + 0d40Tu)==42);

  assert(int_of(0d2su + 0d40su)==42);

  assert(int_of(0d2Su + 0d40Su)==42);

  assert(int_of(0d2iu + 0d40iu)==42);

  assert(int_of(0d2Iu + 0d40Iu)==42);

  assert(int_of(0d2lu + 0d40lu)==42);

  assert(int_of(0d2Lu + 0d40Lu)==42);

  assert(int_of(0d2vu + 0d40vu)==42);

  assert(int_of(0d2Vu + 0d40Vu)==42);

  assert(int_of(0d2llu + 0d40llu)==42);

  assert(int_of(0d2LLu + 0d40LLu)==42);

  assert(int_of(0d2tU + 0d40tU)==42);

  assert(int_of(0d2TU + 0d40TU)==42);

  assert(int_of(0d2sU + 0d40sU)==42);

  assert(int_of(0d2SU + 0d40SU)==42);

  assert(int_of(0d2iU + 0d40iU)==42);

  assert(int_of(0d2IU + 0d40IU)==42);

  assert(int_of(0d2lU + 0d40lU)==42);

  assert(int_of(0d2LU + 0d40LU)==42);

  assert(int_of(0d2vU + 0d40vU)==42);

  assert(int_of(0d2VU + 0d40VU)==42);

  assert(int_of(0d2llU + 0d40llU)==42);

  assert(int_of(0d2LLU + 0d40LLU)==42);

  assert(int_of(0d2i8 + 0d40i8)==42);

  assert(int_of(0d2i16 + 0d40i16)==42);

  assert(int_of(0d2i32 + 0d40i32)==42);

  assert(int_of(0d2i64 + 0d40i64)==42);

  assert(int_of(0d2u8 + 0d40u8)==42);

  assert(int_of(0d2u16 + 0d40u16)==42);

  assert(int_of(0d2u32 + 0d40u32)==42);

  assert(int_of(0d2u64 + 0d40u64)==42);

}

tst_0d20d40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0d20D40 () {

  assert(int_of(0d2 + 0D40)==42);

  assert(int_of(0d2t + 0D40t)==42);

  assert(int_of(0d2T + 0D40T)==42);

  assert(int_of(0d2s + 0D40s)==42);

  assert(int_of(0d2S + 0D40S)==42);

  assert(int_of(0d2i + 0D40i)==42);

  assert(int_of(0d2I + 0D40I)==42);

  assert(int_of(0d2l + 0D40l)==42);

  assert(int_of(0d2L + 0D40L)==42);

  assert(int_of(0d2v + 0D40v)==42);

  assert(int_of(0d2V + 0D40V)==42);

  assert(int_of(0d2ll + 0D40ll)==42);

  assert(int_of(0d2LL + 0D40LL)==42);

  assert(int_of(0d2u + 0D40u)==42);

  assert(int_of(0d2ut + 0D40ut)==42);

  assert(int_of(0d2uT + 0D40uT)==42);

  assert(int_of(0d2us + 0D40us)==42);

  assert(int_of(0d2uS + 0D40uS)==42);

  assert(int_of(0d2ui + 0D40ui)==42);

  assert(int_of(0d2uI + 0D40uI)==42);

  assert(int_of(0d2ul + 0D40ul)==42);

  assert(int_of(0d2uL + 0D40uL)==42);

  assert(int_of(0d2uv + 0D40uv)==42);

  assert(int_of(0d2uV + 0D40uV)==42);

  assert(int_of(0d2ull + 0D40ull)==42);

  assert(int_of(0d2uLL + 0D40uLL)==42);

  assert(int_of(0d2Ut + 0D40Ut)==42);

  assert(int_of(0d2UT + 0D40UT)==42);

  assert(int_of(0d2Us + 0D40Us)==42);

  assert(int_of(0d2US + 0D40US)==42);

  assert(int_of(0d2Ui + 0D40Ui)==42);

  assert(int_of(0d2UI + 0D40UI)==42);

  assert(int_of(0d2Ul + 0D40Ul)==42);

  assert(int_of(0d2UL + 0D40UL)==42);

  assert(int_of(0d2Uv + 0D40Uv)==42);

  assert(int_of(0d2UV + 0D40UV)==42);

  assert(int_of(0d2Ull + 0D40Ull)==42);

  assert(int_of(0d2ULL + 0D40ULL)==42);

  assert(int_of(0d2U + 0D40U)==42);

  assert(int_of(0d2tu + 0D40tu)==42);

  assert(int_of(0d2Tu + 0D40Tu)==42);

  assert(int_of(0d2su + 0D40su)==42);

  assert(int_of(0d2Su + 0D40Su)==42);

  assert(int_of(0d2iu + 0D40iu)==42);

  assert(int_of(0d2Iu + 0D40Iu)==42);

  assert(int_of(0d2lu + 0D40lu)==42);

  assert(int_of(0d2Lu + 0D40Lu)==42);

  assert(int_of(0d2vu + 0D40vu)==42);

  assert(int_of(0d2Vu + 0D40Vu)==42);

  assert(int_of(0d2llu + 0D40llu)==42);

  assert(int_of(0d2LLu + 0D40LLu)==42);

  assert(int_of(0d2tU + 0D40tU)==42);

  assert(int_of(0d2TU + 0D40TU)==42);

  assert(int_of(0d2sU + 0D40sU)==42);

  assert(int_of(0d2SU + 0D40SU)==42);

  assert(int_of(0d2iU + 0D40iU)==42);

  assert(int_of(0d2IU + 0D40IU)==42);

  assert(int_of(0d2lU + 0D40lU)==42);

  assert(int_of(0d2LU + 0D40LU)==42);

  assert(int_of(0d2vU + 0D40vU)==42);

  assert(int_of(0d2VU + 0D40VU)==42);

  assert(int_of(0d2llU + 0D40llU)==42);

  assert(int_of(0d2LLU + 0D40LLU)==42);

  assert(int_of(0d2i8 + 0D40i8)==42);

  assert(int_of(0d2i16 + 0D40i16)==42);

  assert(int_of(0d2i32 + 0D40i32)==42);

  assert(int_of(0d2i64 + 0D40i64)==42);

  assert(int_of(0d2u8 + 0D40u8)==42);

  assert(int_of(0d2u16 + 0D40u16)==42);

  assert(int_of(0d2u32 + 0D40u32)==42);

  assert(int_of(0d2u64 + 0D40u64)==42);

}

tst_0d20D40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0d20x28 () {

  assert(int_of(0d2 + 0x28)==42);

  assert(int_of(0d2t + 0x28t)==42);

  assert(int_of(0d2T + 0x28T)==42);

  assert(int_of(0d2s + 0x28s)==42);

  assert(int_of(0d2S + 0x28S)==42);

  assert(int_of(0d2i + 0x28i)==42);

  assert(int_of(0d2I + 0x28I)==42);

  assert(int_of(0d2l + 0x28l)==42);

  assert(int_of(0d2L + 0x28L)==42);

  assert(int_of(0d2v + 0x28v)==42);

  assert(int_of(0d2V + 0x28V)==42);

  assert(int_of(0d2ll + 0x28ll)==42);

  assert(int_of(0d2LL + 0x28LL)==42);

  assert(int_of(0d2u + 0x28u)==42);

  assert(int_of(0d2ut + 0x28ut)==42);

  assert(int_of(0d2uT + 0x28uT)==42);

  assert(int_of(0d2us + 0x28us)==42);

  assert(int_of(0d2uS + 0x28uS)==42);

  assert(int_of(0d2ui + 0x28ui)==42);

  assert(int_of(0d2uI + 0x28uI)==42);

  assert(int_of(0d2ul + 0x28ul)==42);

  assert(int_of(0d2uL + 0x28uL)==42);

  assert(int_of(0d2uv + 0x28uv)==42);

  assert(int_of(0d2uV + 0x28uV)==42);

  assert(int_of(0d2ull + 0x28ull)==42);

  assert(int_of(0d2uLL + 0x28uLL)==42);

  assert(int_of(0d2Ut + 0x28Ut)==42);

  assert(int_of(0d2UT + 0x28UT)==42);

  assert(int_of(0d2Us + 0x28Us)==42);

  assert(int_of(0d2US + 0x28US)==42);

  assert(int_of(0d2Ui + 0x28Ui)==42);

  assert(int_of(0d2UI + 0x28UI)==42);

  assert(int_of(0d2Ul + 0x28Ul)==42);

  assert(int_of(0d2UL + 0x28UL)==42);

  assert(int_of(0d2Uv + 0x28Uv)==42);

  assert(int_of(0d2UV + 0x28UV)==42);

  assert(int_of(0d2Ull + 0x28Ull)==42);

  assert(int_of(0d2ULL + 0x28ULL)==42);

  assert(int_of(0d2U + 0x28U)==42);

  assert(int_of(0d2tu + 0x28tu)==42);

  assert(int_of(0d2Tu + 0x28Tu)==42);

  assert(int_of(0d2su + 0x28su)==42);

  assert(int_of(0d2Su + 0x28Su)==42);

  assert(int_of(0d2iu + 0x28iu)==42);

  assert(int_of(0d2Iu + 0x28Iu)==42);

  assert(int_of(0d2lu + 0x28lu)==42);

  assert(int_of(0d2Lu + 0x28Lu)==42);

  assert(int_of(0d2vu + 0x28vu)==42);

  assert(int_of(0d2Vu + 0x28Vu)==42);

  assert(int_of(0d2llu + 0x28llu)==42);

  assert(int_of(0d2LLu + 0x28LLu)==42);

  assert(int_of(0d2tU + 0x28tU)==42);

  assert(int_of(0d2TU + 0x28TU)==42);

  assert(int_of(0d2sU + 0x28sU)==42);

  assert(int_of(0d2SU + 0x28SU)==42);

  assert(int_of(0d2iU + 0x28iU)==42);

  assert(int_of(0d2IU + 0x28IU)==42);

  assert(int_of(0d2lU + 0x28lU)==42);

  assert(int_of(0d2LU + 0x28LU)==42);

  assert(int_of(0d2vU + 0x28vU)==42);

  assert(int_of(0d2VU + 0x28VU)==42);

  assert(int_of(0d2llU + 0x28llU)==42);

  assert(int_of(0d2LLU + 0x28LLU)==42);

  assert(int_of(0d2i8 + 0x28i8)==42);

  assert(int_of(0d2i16 + 0x28i16)==42);

  assert(int_of(0d2i32 + 0x28i32)==42);

  assert(int_of(0d2i64 + 0x28i64)==42);

  assert(int_of(0d2u8 + 0x28u8)==42);

  assert(int_of(0d2u16 + 0x28u16)==42);

  assert(int_of(0d2u32 + 0x28u32)==42);

  assert(int_of(0d2u64 + 0x28u64)==42);

}

tst_0d20x28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0d20X28 () {

  assert(int_of(0d2 + 0X28)==42);

  assert(int_of(0d2t + 0X28t)==42);

  assert(int_of(0d2T + 0X28T)==42);

  assert(int_of(0d2s + 0X28s)==42);

  assert(int_of(0d2S + 0X28S)==42);

  assert(int_of(0d2i + 0X28i)==42);

  assert(int_of(0d2I + 0X28I)==42);

  assert(int_of(0d2l + 0X28l)==42);

  assert(int_of(0d2L + 0X28L)==42);

  assert(int_of(0d2v + 0X28v)==42);

  assert(int_of(0d2V + 0X28V)==42);

  assert(int_of(0d2ll + 0X28ll)==42);

  assert(int_of(0d2LL + 0X28LL)==42);

  assert(int_of(0d2u + 0X28u)==42);

  assert(int_of(0d2ut + 0X28ut)==42);

  assert(int_of(0d2uT + 0X28uT)==42);

  assert(int_of(0d2us + 0X28us)==42);

  assert(int_of(0d2uS + 0X28uS)==42);

  assert(int_of(0d2ui + 0X28ui)==42);

  assert(int_of(0d2uI + 0X28uI)==42);

  assert(int_of(0d2ul + 0X28ul)==42);

  assert(int_of(0d2uL + 0X28uL)==42);

  assert(int_of(0d2uv + 0X28uv)==42);

  assert(int_of(0d2uV + 0X28uV)==42);

  assert(int_of(0d2ull + 0X28ull)==42);

  assert(int_of(0d2uLL + 0X28uLL)==42);

  assert(int_of(0d2Ut + 0X28Ut)==42);

  assert(int_of(0d2UT + 0X28UT)==42);

  assert(int_of(0d2Us + 0X28Us)==42);

  assert(int_of(0d2US + 0X28US)==42);

  assert(int_of(0d2Ui + 0X28Ui)==42);

  assert(int_of(0d2UI + 0X28UI)==42);

  assert(int_of(0d2Ul + 0X28Ul)==42);

  assert(int_of(0d2UL + 0X28UL)==42);

  assert(int_of(0d2Uv + 0X28Uv)==42);

  assert(int_of(0d2UV + 0X28UV)==42);

  assert(int_of(0d2Ull + 0X28Ull)==42);

  assert(int_of(0d2ULL + 0X28ULL)==42);

  assert(int_of(0d2U + 0X28U)==42);

  assert(int_of(0d2tu + 0X28tu)==42);

  assert(int_of(0d2Tu + 0X28Tu)==42);

  assert(int_of(0d2su + 0X28su)==42);

  assert(int_of(0d2Su + 0X28Su)==42);

  assert(int_of(0d2iu + 0X28iu)==42);

  assert(int_of(0d2Iu + 0X28Iu)==42);

  assert(int_of(0d2lu + 0X28lu)==42);

  assert(int_of(0d2Lu + 0X28Lu)==42);

  assert(int_of(0d2vu + 0X28vu)==42);

  assert(int_of(0d2Vu + 0X28Vu)==42);

  assert(int_of(0d2llu + 0X28llu)==42);

  assert(int_of(0d2LLu + 0X28LLu)==42);

  assert(int_of(0d2tU + 0X28tU)==42);

  assert(int_of(0d2TU + 0X28TU)==42);

  assert(int_of(0d2sU + 0X28sU)==42);

  assert(int_of(0d2SU + 0X28SU)==42);

  assert(int_of(0d2iU + 0X28iU)==42);

  assert(int_of(0d2IU + 0X28IU)==42);

  assert(int_of(0d2lU + 0X28lU)==42);

  assert(int_of(0d2LU + 0X28LU)==42);

  assert(int_of(0d2vU + 0X28vU)==42);

  assert(int_of(0d2VU + 0X28VU)==42);

  assert(int_of(0d2llU + 0X28llU)==42);

  assert(int_of(0d2LLU + 0X28LLU)==42);

  assert(int_of(0d2i8 + 0X28i8)==42);

  assert(int_of(0d2i16 + 0X28i16)==42);

  assert(int_of(0d2i32 + 0X28i32)==42);

  assert(int_of(0d2i64 + 0X28i64)==42);

  assert(int_of(0d2u8 + 0X28u8)==42);

  assert(int_of(0d2u16 + 0X28u16)==42);

  assert(int_of(0d2u32 + 0X28u32)==42);

  assert(int_of(0d2u64 + 0X28u64)==42);

}

tst_0d20X28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0D240 () {

  assert(int_of(0D2 + 40)==42);

  assert(int_of(0D2t + 40t)==42);

  assert(int_of(0D2T + 40T)==42);

  assert(int_of(0D2s + 40s)==42);

  assert(int_of(0D2S + 40S)==42);

  assert(int_of(0D2i + 40i)==42);

  assert(int_of(0D2I + 40I)==42);

  assert(int_of(0D2l + 40l)==42);

  assert(int_of(0D2L + 40L)==42);

  assert(int_of(0D2v + 40v)==42);

  assert(int_of(0D2V + 40V)==42);

  assert(int_of(0D2ll + 40ll)==42);

  assert(int_of(0D2LL + 40LL)==42);

  assert(int_of(0D2u + 40u)==42);

  assert(int_of(0D2ut + 40ut)==42);

  assert(int_of(0D2uT + 40uT)==42);

  assert(int_of(0D2us + 40us)==42);

  assert(int_of(0D2uS + 40uS)==42);

  assert(int_of(0D2ui + 40ui)==42);

  assert(int_of(0D2uI + 40uI)==42);

  assert(int_of(0D2ul + 40ul)==42);

  assert(int_of(0D2uL + 40uL)==42);

  assert(int_of(0D2uv + 40uv)==42);

  assert(int_of(0D2uV + 40uV)==42);

  assert(int_of(0D2ull + 40ull)==42);

  assert(int_of(0D2uLL + 40uLL)==42);

  assert(int_of(0D2Ut + 40Ut)==42);

  assert(int_of(0D2UT + 40UT)==42);

  assert(int_of(0D2Us + 40Us)==42);

  assert(int_of(0D2US + 40US)==42);

  assert(int_of(0D2Ui + 40Ui)==42);

  assert(int_of(0D2UI + 40UI)==42);

  assert(int_of(0D2Ul + 40Ul)==42);

  assert(int_of(0D2UL + 40UL)==42);

  assert(int_of(0D2Uv + 40Uv)==42);

  assert(int_of(0D2UV + 40UV)==42);

  assert(int_of(0D2Ull + 40Ull)==42);

  assert(int_of(0D2ULL + 40ULL)==42);

  assert(int_of(0D2U + 40U)==42);

  assert(int_of(0D2tu + 40tu)==42);

  assert(int_of(0D2Tu + 40Tu)==42);

  assert(int_of(0D2su + 40su)==42);

  assert(int_of(0D2Su + 40Su)==42);

  assert(int_of(0D2iu + 40iu)==42);

  assert(int_of(0D2Iu + 40Iu)==42);

  assert(int_of(0D2lu + 40lu)==42);

  assert(int_of(0D2Lu + 40Lu)==42);

  assert(int_of(0D2vu + 40vu)==42);

  assert(int_of(0D2Vu + 40Vu)==42);

  assert(int_of(0D2llu + 40llu)==42);

  assert(int_of(0D2LLu + 40LLu)==42);

  assert(int_of(0D2tU + 40tU)==42);

  assert(int_of(0D2TU + 40TU)==42);

  assert(int_of(0D2sU + 40sU)==42);

  assert(int_of(0D2SU + 40SU)==42);

  assert(int_of(0D2iU + 40iU)==42);

  assert(int_of(0D2IU + 40IU)==42);

  assert(int_of(0D2lU + 40lU)==42);

  assert(int_of(0D2LU + 40LU)==42);

  assert(int_of(0D2vU + 40vU)==42);

  assert(int_of(0D2VU + 40VU)==42);

  assert(int_of(0D2llU + 40llU)==42);

  assert(int_of(0D2LLU + 40LLU)==42);

  assert(int_of(0D2i8 + 40i8)==42);

  assert(int_of(0D2i16 + 40i16)==42);

  assert(int_of(0D2i32 + 40i32)==42);

  assert(int_of(0D2i64 + 40i64)==42);

  assert(int_of(0D2u8 + 40u8)==42);

  assert(int_of(0D2u16 + 40u16)==42);

  assert(int_of(0D2u32 + 40u32)==42);

  assert(int_of(0D2u64 + 40u64)==42);

}

tst_0D240;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0D20b0010_1000 () {

  assert(int_of(0D2 + 0b0010_1000)==42);

  assert(int_of(0D2t + 0b0010_1000t)==42);

  assert(int_of(0D2T + 0b0010_1000T)==42);

  assert(int_of(0D2s + 0b0010_1000s)==42);

  assert(int_of(0D2S + 0b0010_1000S)==42);

  assert(int_of(0D2i + 0b0010_1000i)==42);

  assert(int_of(0D2I + 0b0010_1000I)==42);

  assert(int_of(0D2l + 0b0010_1000l)==42);

  assert(int_of(0D2L + 0b0010_1000L)==42);

  assert(int_of(0D2v + 0b0010_1000v)==42);

  assert(int_of(0D2V + 0b0010_1000V)==42);

  assert(int_of(0D2ll + 0b0010_1000ll)==42);

  assert(int_of(0D2LL + 0b0010_1000LL)==42);

  assert(int_of(0D2u + 0b0010_1000u)==42);

  assert(int_of(0D2ut + 0b0010_1000ut)==42);

  assert(int_of(0D2uT + 0b0010_1000uT)==42);

  assert(int_of(0D2us + 0b0010_1000us)==42);

  assert(int_of(0D2uS + 0b0010_1000uS)==42);

  assert(int_of(0D2ui + 0b0010_1000ui)==42);

  assert(int_of(0D2uI + 0b0010_1000uI)==42);

  assert(int_of(0D2ul + 0b0010_1000ul)==42);

  assert(int_of(0D2uL + 0b0010_1000uL)==42);

  assert(int_of(0D2uv + 0b0010_1000uv)==42);

  assert(int_of(0D2uV + 0b0010_1000uV)==42);

  assert(int_of(0D2ull + 0b0010_1000ull)==42);

  assert(int_of(0D2uLL + 0b0010_1000uLL)==42);

  assert(int_of(0D2Ut + 0b0010_1000Ut)==42);

  assert(int_of(0D2UT + 0b0010_1000UT)==42);

  assert(int_of(0D2Us + 0b0010_1000Us)==42);

  assert(int_of(0D2US + 0b0010_1000US)==42);

  assert(int_of(0D2Ui + 0b0010_1000Ui)==42);

  assert(int_of(0D2UI + 0b0010_1000UI)==42);

  assert(int_of(0D2Ul + 0b0010_1000Ul)==42);

  assert(int_of(0D2UL + 0b0010_1000UL)==42);

  assert(int_of(0D2Uv + 0b0010_1000Uv)==42);

  assert(int_of(0D2UV + 0b0010_1000UV)==42);

  assert(int_of(0D2Ull + 0b0010_1000Ull)==42);

  assert(int_of(0D2ULL + 0b0010_1000ULL)==42);

  assert(int_of(0D2U + 0b0010_1000U)==42);

  assert(int_of(0D2tu + 0b0010_1000tu)==42);

  assert(int_of(0D2Tu + 0b0010_1000Tu)==42);

  assert(int_of(0D2su + 0b0010_1000su)==42);

  assert(int_of(0D2Su + 0b0010_1000Su)==42);

  assert(int_of(0D2iu + 0b0010_1000iu)==42);

  assert(int_of(0D2Iu + 0b0010_1000Iu)==42);

  assert(int_of(0D2lu + 0b0010_1000lu)==42);

  assert(int_of(0D2Lu + 0b0010_1000Lu)==42);

  assert(int_of(0D2vu + 0b0010_1000vu)==42);

  assert(int_of(0D2Vu + 0b0010_1000Vu)==42);

  assert(int_of(0D2llu + 0b0010_1000llu)==42);

  assert(int_of(0D2LLu + 0b0010_1000LLu)==42);

  assert(int_of(0D2tU + 0b0010_1000tU)==42);

  assert(int_of(0D2TU + 0b0010_1000TU)==42);

  assert(int_of(0D2sU + 0b0010_1000sU)==42);

  assert(int_of(0D2SU + 0b0010_1000SU)==42);

  assert(int_of(0D2iU + 0b0010_1000iU)==42);

  assert(int_of(0D2IU + 0b0010_1000IU)==42);

  assert(int_of(0D2lU + 0b0010_1000lU)==42);

  assert(int_of(0D2LU + 0b0010_1000LU)==42);

  assert(int_of(0D2vU + 0b0010_1000vU)==42);

  assert(int_of(0D2VU + 0b0010_1000VU)==42);

  assert(int_of(0D2llU + 0b0010_1000llU)==42);

  assert(int_of(0D2LLU + 0b0010_1000LLU)==42);

  assert(int_of(0D2i8 + 0b0010_1000i8)==42);

  assert(int_of(0D2i16 + 0b0010_1000i16)==42);

  assert(int_of(0D2i32 + 0b0010_1000i32)==42);

  assert(int_of(0D2i64 + 0b0010_1000i64)==42);

  assert(int_of(0D2u8 + 0b0010_1000u8)==42);

  assert(int_of(0D2u16 + 0b0010_1000u16)==42);

  assert(int_of(0D2u32 + 0b0010_1000u32)==42);

  assert(int_of(0D2u64 + 0b0010_1000u64)==42);

}

tst_0D20b0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0D20B_0010_1000 () {

  assert(int_of(0D2 + 0B_0010_1000)==42);

  assert(int_of(0D2t + 0B_0010_1000t)==42);

  assert(int_of(0D2T + 0B_0010_1000T)==42);

  assert(int_of(0D2s + 0B_0010_1000s)==42);

  assert(int_of(0D2S + 0B_0010_1000S)==42);

  assert(int_of(0D2i + 0B_0010_1000i)==42);

  assert(int_of(0D2I + 0B_0010_1000I)==42);

  assert(int_of(0D2l + 0B_0010_1000l)==42);

  assert(int_of(0D2L + 0B_0010_1000L)==42);

  assert(int_of(0D2v + 0B_0010_1000v)==42);

  assert(int_of(0D2V + 0B_0010_1000V)==42);

  assert(int_of(0D2ll + 0B_0010_1000ll)==42);

  assert(int_of(0D2LL + 0B_0010_1000LL)==42);

  assert(int_of(0D2u + 0B_0010_1000u)==42);

  assert(int_of(0D2ut + 0B_0010_1000ut)==42);

  assert(int_of(0D2uT + 0B_0010_1000uT)==42);

  assert(int_of(0D2us + 0B_0010_1000us)==42);

  assert(int_of(0D2uS + 0B_0010_1000uS)==42);

  assert(int_of(0D2ui + 0B_0010_1000ui)==42);

  assert(int_of(0D2uI + 0B_0010_1000uI)==42);

  assert(int_of(0D2ul + 0B_0010_1000ul)==42);

  assert(int_of(0D2uL + 0B_0010_1000uL)==42);

  assert(int_of(0D2uv + 0B_0010_1000uv)==42);

  assert(int_of(0D2uV + 0B_0010_1000uV)==42);

  assert(int_of(0D2ull + 0B_0010_1000ull)==42);

  assert(int_of(0D2uLL + 0B_0010_1000uLL)==42);

  assert(int_of(0D2Ut + 0B_0010_1000Ut)==42);

  assert(int_of(0D2UT + 0B_0010_1000UT)==42);

  assert(int_of(0D2Us + 0B_0010_1000Us)==42);

  assert(int_of(0D2US + 0B_0010_1000US)==42);

  assert(int_of(0D2Ui + 0B_0010_1000Ui)==42);

  assert(int_of(0D2UI + 0B_0010_1000UI)==42);

  assert(int_of(0D2Ul + 0B_0010_1000Ul)==42);

  assert(int_of(0D2UL + 0B_0010_1000UL)==42);

  assert(int_of(0D2Uv + 0B_0010_1000Uv)==42);

  assert(int_of(0D2UV + 0B_0010_1000UV)==42);

  assert(int_of(0D2Ull + 0B_0010_1000Ull)==42);

  assert(int_of(0D2ULL + 0B_0010_1000ULL)==42);

  assert(int_of(0D2U + 0B_0010_1000U)==42);

  assert(int_of(0D2tu + 0B_0010_1000tu)==42);

  assert(int_of(0D2Tu + 0B_0010_1000Tu)==42);

  assert(int_of(0D2su + 0B_0010_1000su)==42);

  assert(int_of(0D2Su + 0B_0010_1000Su)==42);

  assert(int_of(0D2iu + 0B_0010_1000iu)==42);

  assert(int_of(0D2Iu + 0B_0010_1000Iu)==42);

  assert(int_of(0D2lu + 0B_0010_1000lu)==42);

  assert(int_of(0D2Lu + 0B_0010_1000Lu)==42);

  assert(int_of(0D2vu + 0B_0010_1000vu)==42);

  assert(int_of(0D2Vu + 0B_0010_1000Vu)==42);

  assert(int_of(0D2llu + 0B_0010_1000llu)==42);

  assert(int_of(0D2LLu + 0B_0010_1000LLu)==42);

  assert(int_of(0D2tU + 0B_0010_1000tU)==42);

  assert(int_of(0D2TU + 0B_0010_1000TU)==42);

  assert(int_of(0D2sU + 0B_0010_1000sU)==42);

  assert(int_of(0D2SU + 0B_0010_1000SU)==42);

  assert(int_of(0D2iU + 0B_0010_1000iU)==42);

  assert(int_of(0D2IU + 0B_0010_1000IU)==42);

  assert(int_of(0D2lU + 0B_0010_1000lU)==42);

  assert(int_of(0D2LU + 0B_0010_1000LU)==42);

  assert(int_of(0D2vU + 0B_0010_1000vU)==42);

  assert(int_of(0D2VU + 0B_0010_1000VU)==42);

  assert(int_of(0D2llU + 0B_0010_1000llU)==42);

  assert(int_of(0D2LLU + 0B_0010_1000LLU)==42);

  assert(int_of(0D2i8 + 0B_0010_1000i8)==42);

  assert(int_of(0D2i16 + 0B_0010_1000i16)==42);

  assert(int_of(0D2i32 + 0B_0010_1000i32)==42);

  assert(int_of(0D2i64 + 0B_0010_1000i64)==42);

  assert(int_of(0D2u8 + 0B_0010_1000u8)==42);

  assert(int_of(0D2u16 + 0B_0010_1000u16)==42);

  assert(int_of(0D2u32 + 0B_0010_1000u32)==42);

  assert(int_of(0D2u64 + 0B_0010_1000u64)==42);

}

tst_0D20B_0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0D20o50 () {

  assert(int_of(0D2 + 0o50)==42);

  assert(int_of(0D2t + 0o50t)==42);

  assert(int_of(0D2T + 0o50T)==42);

  assert(int_of(0D2s + 0o50s)==42);

  assert(int_of(0D2S + 0o50S)==42);

  assert(int_of(0D2i + 0o50i)==42);

  assert(int_of(0D2I + 0o50I)==42);

  assert(int_of(0D2l + 0o50l)==42);

  assert(int_of(0D2L + 0o50L)==42);

  assert(int_of(0D2v + 0o50v)==42);

  assert(int_of(0D2V + 0o50V)==42);

  assert(int_of(0D2ll + 0o50ll)==42);

  assert(int_of(0D2LL + 0o50LL)==42);

  assert(int_of(0D2u + 0o50u)==42);

  assert(int_of(0D2ut + 0o50ut)==42);

  assert(int_of(0D2uT + 0o50uT)==42);

  assert(int_of(0D2us + 0o50us)==42);

  assert(int_of(0D2uS + 0o50uS)==42);

  assert(int_of(0D2ui + 0o50ui)==42);

  assert(int_of(0D2uI + 0o50uI)==42);

  assert(int_of(0D2ul + 0o50ul)==42);

  assert(int_of(0D2uL + 0o50uL)==42);

  assert(int_of(0D2uv + 0o50uv)==42);

  assert(int_of(0D2uV + 0o50uV)==42);

  assert(int_of(0D2ull + 0o50ull)==42);

  assert(int_of(0D2uLL + 0o50uLL)==42);

  assert(int_of(0D2Ut + 0o50Ut)==42);

  assert(int_of(0D2UT + 0o50UT)==42);

  assert(int_of(0D2Us + 0o50Us)==42);

  assert(int_of(0D2US + 0o50US)==42);

  assert(int_of(0D2Ui + 0o50Ui)==42);

  assert(int_of(0D2UI + 0o50UI)==42);

  assert(int_of(0D2Ul + 0o50Ul)==42);

  assert(int_of(0D2UL + 0o50UL)==42);

  assert(int_of(0D2Uv + 0o50Uv)==42);

  assert(int_of(0D2UV + 0o50UV)==42);

  assert(int_of(0D2Ull + 0o50Ull)==42);

  assert(int_of(0D2ULL + 0o50ULL)==42);

  assert(int_of(0D2U + 0o50U)==42);

  assert(int_of(0D2tu + 0o50tu)==42);

  assert(int_of(0D2Tu + 0o50Tu)==42);

  assert(int_of(0D2su + 0o50su)==42);

  assert(int_of(0D2Su + 0o50Su)==42);

  assert(int_of(0D2iu + 0o50iu)==42);

  assert(int_of(0D2Iu + 0o50Iu)==42);

  assert(int_of(0D2lu + 0o50lu)==42);

  assert(int_of(0D2Lu + 0o50Lu)==42);

  assert(int_of(0D2vu + 0o50vu)==42);

  assert(int_of(0D2Vu + 0o50Vu)==42);

  assert(int_of(0D2llu + 0o50llu)==42);

  assert(int_of(0D2LLu + 0o50LLu)==42);

  assert(int_of(0D2tU + 0o50tU)==42);

  assert(int_of(0D2TU + 0o50TU)==42);

  assert(int_of(0D2sU + 0o50sU)==42);

  assert(int_of(0D2SU + 0o50SU)==42);

  assert(int_of(0D2iU + 0o50iU)==42);

  assert(int_of(0D2IU + 0o50IU)==42);

  assert(int_of(0D2lU + 0o50lU)==42);

  assert(int_of(0D2LU + 0o50LU)==42);

  assert(int_of(0D2vU + 0o50vU)==42);

  assert(int_of(0D2VU + 0o50VU)==42);

  assert(int_of(0D2llU + 0o50llU)==42);

  assert(int_of(0D2LLU + 0o50LLU)==42);

  assert(int_of(0D2i8 + 0o50i8)==42);

  assert(int_of(0D2i16 + 0o50i16)==42);

  assert(int_of(0D2i32 + 0o50i32)==42);

  assert(int_of(0D2i64 + 0o50i64)==42);

  assert(int_of(0D2u8 + 0o50u8)==42);

  assert(int_of(0D2u16 + 0o50u16)==42);

  assert(int_of(0D2u32 + 0o50u32)==42);

  assert(int_of(0D2u64 + 0o50u64)==42);

}

tst_0D20o50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0D20O50 () {

  assert(int_of(0D2 + 0O50)==42);

  assert(int_of(0D2t + 0O50t)==42);

  assert(int_of(0D2T + 0O50T)==42);

  assert(int_of(0D2s + 0O50s)==42);

  assert(int_of(0D2S + 0O50S)==42);

  assert(int_of(0D2i + 0O50i)==42);

  assert(int_of(0D2I + 0O50I)==42);

  assert(int_of(0D2l + 0O50l)==42);

  assert(int_of(0D2L + 0O50L)==42);

  assert(int_of(0D2v + 0O50v)==42);

  assert(int_of(0D2V + 0O50V)==42);

  assert(int_of(0D2ll + 0O50ll)==42);

  assert(int_of(0D2LL + 0O50LL)==42);

  assert(int_of(0D2u + 0O50u)==42);

  assert(int_of(0D2ut + 0O50ut)==42);

  assert(int_of(0D2uT + 0O50uT)==42);

  assert(int_of(0D2us + 0O50us)==42);

  assert(int_of(0D2uS + 0O50uS)==42);

  assert(int_of(0D2ui + 0O50ui)==42);

  assert(int_of(0D2uI + 0O50uI)==42);

  assert(int_of(0D2ul + 0O50ul)==42);

  assert(int_of(0D2uL + 0O50uL)==42);

  assert(int_of(0D2uv + 0O50uv)==42);

  assert(int_of(0D2uV + 0O50uV)==42);

  assert(int_of(0D2ull + 0O50ull)==42);

  assert(int_of(0D2uLL + 0O50uLL)==42);

  assert(int_of(0D2Ut + 0O50Ut)==42);

  assert(int_of(0D2UT + 0O50UT)==42);

  assert(int_of(0D2Us + 0O50Us)==42);

  assert(int_of(0D2US + 0O50US)==42);

  assert(int_of(0D2Ui + 0O50Ui)==42);

  assert(int_of(0D2UI + 0O50UI)==42);

  assert(int_of(0D2Ul + 0O50Ul)==42);

  assert(int_of(0D2UL + 0O50UL)==42);

  assert(int_of(0D2Uv + 0O50Uv)==42);

  assert(int_of(0D2UV + 0O50UV)==42);

  assert(int_of(0D2Ull + 0O50Ull)==42);

  assert(int_of(0D2ULL + 0O50ULL)==42);

  assert(int_of(0D2U + 0O50U)==42);

  assert(int_of(0D2tu + 0O50tu)==42);

  assert(int_of(0D2Tu + 0O50Tu)==42);

  assert(int_of(0D2su + 0O50su)==42);

  assert(int_of(0D2Su + 0O50Su)==42);

  assert(int_of(0D2iu + 0O50iu)==42);

  assert(int_of(0D2Iu + 0O50Iu)==42);

  assert(int_of(0D2lu + 0O50lu)==42);

  assert(int_of(0D2Lu + 0O50Lu)==42);

  assert(int_of(0D2vu + 0O50vu)==42);

  assert(int_of(0D2Vu + 0O50Vu)==42);

  assert(int_of(0D2llu + 0O50llu)==42);

  assert(int_of(0D2LLu + 0O50LLu)==42);

  assert(int_of(0D2tU + 0O50tU)==42);

  assert(int_of(0D2TU + 0O50TU)==42);

  assert(int_of(0D2sU + 0O50sU)==42);

  assert(int_of(0D2SU + 0O50SU)==42);

  assert(int_of(0D2iU + 0O50iU)==42);

  assert(int_of(0D2IU + 0O50IU)==42);

  assert(int_of(0D2lU + 0O50lU)==42);

  assert(int_of(0D2LU + 0O50LU)==42);

  assert(int_of(0D2vU + 0O50vU)==42);

  assert(int_of(0D2VU + 0O50VU)==42);

  assert(int_of(0D2llU + 0O50llU)==42);

  assert(int_of(0D2LLU + 0O50LLU)==42);

  assert(int_of(0D2i8 + 0O50i8)==42);

  assert(int_of(0D2i16 + 0O50i16)==42);

  assert(int_of(0D2i32 + 0O50i32)==42);

  assert(int_of(0D2i64 + 0O50i64)==42);

  assert(int_of(0D2u8 + 0O50u8)==42);

  assert(int_of(0D2u16 + 0O50u16)==42);

  assert(int_of(0D2u32 + 0O50u32)==42);

  assert(int_of(0D2u64 + 0O50u64)==42);

}

tst_0D20O50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0D20d40 () {

  assert(int_of(0D2 + 0d40)==42);

  assert(int_of(0D2t + 0d40t)==42);

  assert(int_of(0D2T + 0d40T)==42);

  assert(int_of(0D2s + 0d40s)==42);

  assert(int_of(0D2S + 0d40S)==42);

  assert(int_of(0D2i + 0d40i)==42);

  assert(int_of(0D2I + 0d40I)==42);

  assert(int_of(0D2l + 0d40l)==42);

  assert(int_of(0D2L + 0d40L)==42);

  assert(int_of(0D2v + 0d40v)==42);

  assert(int_of(0D2V + 0d40V)==42);

  assert(int_of(0D2ll + 0d40ll)==42);

  assert(int_of(0D2LL + 0d40LL)==42);

  assert(int_of(0D2u + 0d40u)==42);

  assert(int_of(0D2ut + 0d40ut)==42);

  assert(int_of(0D2uT + 0d40uT)==42);

  assert(int_of(0D2us + 0d40us)==42);

  assert(int_of(0D2uS + 0d40uS)==42);

  assert(int_of(0D2ui + 0d40ui)==42);

  assert(int_of(0D2uI + 0d40uI)==42);

  assert(int_of(0D2ul + 0d40ul)==42);

  assert(int_of(0D2uL + 0d40uL)==42);

  assert(int_of(0D2uv + 0d40uv)==42);

  assert(int_of(0D2uV + 0d40uV)==42);

  assert(int_of(0D2ull + 0d40ull)==42);

  assert(int_of(0D2uLL + 0d40uLL)==42);

  assert(int_of(0D2Ut + 0d40Ut)==42);

  assert(int_of(0D2UT + 0d40UT)==42);

  assert(int_of(0D2Us + 0d40Us)==42);

  assert(int_of(0D2US + 0d40US)==42);

  assert(int_of(0D2Ui + 0d40Ui)==42);

  assert(int_of(0D2UI + 0d40UI)==42);

  assert(int_of(0D2Ul + 0d40Ul)==42);

  assert(int_of(0D2UL + 0d40UL)==42);

  assert(int_of(0D2Uv + 0d40Uv)==42);

  assert(int_of(0D2UV + 0d40UV)==42);

  assert(int_of(0D2Ull + 0d40Ull)==42);

  assert(int_of(0D2ULL + 0d40ULL)==42);

  assert(int_of(0D2U + 0d40U)==42);

  assert(int_of(0D2tu + 0d40tu)==42);

  assert(int_of(0D2Tu + 0d40Tu)==42);

  assert(int_of(0D2su + 0d40su)==42);

  assert(int_of(0D2Su + 0d40Su)==42);

  assert(int_of(0D2iu + 0d40iu)==42);

  assert(int_of(0D2Iu + 0d40Iu)==42);

  assert(int_of(0D2lu + 0d40lu)==42);

  assert(int_of(0D2Lu + 0d40Lu)==42);

  assert(int_of(0D2vu + 0d40vu)==42);

  assert(int_of(0D2Vu + 0d40Vu)==42);

  assert(int_of(0D2llu + 0d40llu)==42);

  assert(int_of(0D2LLu + 0d40LLu)==42);

  assert(int_of(0D2tU + 0d40tU)==42);

  assert(int_of(0D2TU + 0d40TU)==42);

  assert(int_of(0D2sU + 0d40sU)==42);

  assert(int_of(0D2SU + 0d40SU)==42);

  assert(int_of(0D2iU + 0d40iU)==42);

  assert(int_of(0D2IU + 0d40IU)==42);

  assert(int_of(0D2lU + 0d40lU)==42);

  assert(int_of(0D2LU + 0d40LU)==42);

  assert(int_of(0D2vU + 0d40vU)==42);

  assert(int_of(0D2VU + 0d40VU)==42);

  assert(int_of(0D2llU + 0d40llU)==42);

  assert(int_of(0D2LLU + 0d40LLU)==42);

  assert(int_of(0D2i8 + 0d40i8)==42);

  assert(int_of(0D2i16 + 0d40i16)==42);

  assert(int_of(0D2i32 + 0d40i32)==42);

  assert(int_of(0D2i64 + 0d40i64)==42);

  assert(int_of(0D2u8 + 0d40u8)==42);

  assert(int_of(0D2u16 + 0d40u16)==42);

  assert(int_of(0D2u32 + 0d40u32)==42);

  assert(int_of(0D2u64 + 0d40u64)==42);

}

tst_0D20d40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0D20D40 () {

  assert(int_of(0D2 + 0D40)==42);

  assert(int_of(0D2t + 0D40t)==42);

  assert(int_of(0D2T + 0D40T)==42);

  assert(int_of(0D2s + 0D40s)==42);

  assert(int_of(0D2S + 0D40S)==42);

  assert(int_of(0D2i + 0D40i)==42);

  assert(int_of(0D2I + 0D40I)==42);

  assert(int_of(0D2l + 0D40l)==42);

  assert(int_of(0D2L + 0D40L)==42);

  assert(int_of(0D2v + 0D40v)==42);

  assert(int_of(0D2V + 0D40V)==42);

  assert(int_of(0D2ll + 0D40ll)==42);

  assert(int_of(0D2LL + 0D40LL)==42);

  assert(int_of(0D2u + 0D40u)==42);

  assert(int_of(0D2ut + 0D40ut)==42);

  assert(int_of(0D2uT + 0D40uT)==42);

  assert(int_of(0D2us + 0D40us)==42);

  assert(int_of(0D2uS + 0D40uS)==42);

  assert(int_of(0D2ui + 0D40ui)==42);

  assert(int_of(0D2uI + 0D40uI)==42);

  assert(int_of(0D2ul + 0D40ul)==42);

  assert(int_of(0D2uL + 0D40uL)==42);

  assert(int_of(0D2uv + 0D40uv)==42);

  assert(int_of(0D2uV + 0D40uV)==42);

  assert(int_of(0D2ull + 0D40ull)==42);

  assert(int_of(0D2uLL + 0D40uLL)==42);

  assert(int_of(0D2Ut + 0D40Ut)==42);

  assert(int_of(0D2UT + 0D40UT)==42);

  assert(int_of(0D2Us + 0D40Us)==42);

  assert(int_of(0D2US + 0D40US)==42);

  assert(int_of(0D2Ui + 0D40Ui)==42);

  assert(int_of(0D2UI + 0D40UI)==42);

  assert(int_of(0D2Ul + 0D40Ul)==42);

  assert(int_of(0D2UL + 0D40UL)==42);

  assert(int_of(0D2Uv + 0D40Uv)==42);

  assert(int_of(0D2UV + 0D40UV)==42);

  assert(int_of(0D2Ull + 0D40Ull)==42);

  assert(int_of(0D2ULL + 0D40ULL)==42);

  assert(int_of(0D2U + 0D40U)==42);

  assert(int_of(0D2tu + 0D40tu)==42);

  assert(int_of(0D2Tu + 0D40Tu)==42);

  assert(int_of(0D2su + 0D40su)==42);

  assert(int_of(0D2Su + 0D40Su)==42);

  assert(int_of(0D2iu + 0D40iu)==42);

  assert(int_of(0D2Iu + 0D40Iu)==42);

  assert(int_of(0D2lu + 0D40lu)==42);

  assert(int_of(0D2Lu + 0D40Lu)==42);

  assert(int_of(0D2vu + 0D40vu)==42);

  assert(int_of(0D2Vu + 0D40Vu)==42);

  assert(int_of(0D2llu + 0D40llu)==42);

  assert(int_of(0D2LLu + 0D40LLu)==42);

  assert(int_of(0D2tU + 0D40tU)==42);

  assert(int_of(0D2TU + 0D40TU)==42);

  assert(int_of(0D2sU + 0D40sU)==42);

  assert(int_of(0D2SU + 0D40SU)==42);

  assert(int_of(0D2iU + 0D40iU)==42);

  assert(int_of(0D2IU + 0D40IU)==42);

  assert(int_of(0D2lU + 0D40lU)==42);

  assert(int_of(0D2LU + 0D40LU)==42);

  assert(int_of(0D2vU + 0D40vU)==42);

  assert(int_of(0D2VU + 0D40VU)==42);

  assert(int_of(0D2llU + 0D40llU)==42);

  assert(int_of(0D2LLU + 0D40LLU)==42);

  assert(int_of(0D2i8 + 0D40i8)==42);

  assert(int_of(0D2i16 + 0D40i16)==42);

  assert(int_of(0D2i32 + 0D40i32)==42);

  assert(int_of(0D2i64 + 0D40i64)==42);

  assert(int_of(0D2u8 + 0D40u8)==42);

  assert(int_of(0D2u16 + 0D40u16)==42);

  assert(int_of(0D2u32 + 0D40u32)==42);

  assert(int_of(0D2u64 + 0D40u64)==42);

}

tst_0D20D40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0D20x28 () {

  assert(int_of(0D2 + 0x28)==42);

  assert(int_of(0D2t + 0x28t)==42);

  assert(int_of(0D2T + 0x28T)==42);

  assert(int_of(0D2s + 0x28s)==42);

  assert(int_of(0D2S + 0x28S)==42);

  assert(int_of(0D2i + 0x28i)==42);

  assert(int_of(0D2I + 0x28I)==42);

  assert(int_of(0D2l + 0x28l)==42);

  assert(int_of(0D2L + 0x28L)==42);

  assert(int_of(0D2v + 0x28v)==42);

  assert(int_of(0D2V + 0x28V)==42);

  assert(int_of(0D2ll + 0x28ll)==42);

  assert(int_of(0D2LL + 0x28LL)==42);

  assert(int_of(0D2u + 0x28u)==42);

  assert(int_of(0D2ut + 0x28ut)==42);

  assert(int_of(0D2uT + 0x28uT)==42);

  assert(int_of(0D2us + 0x28us)==42);

  assert(int_of(0D2uS + 0x28uS)==42);

  assert(int_of(0D2ui + 0x28ui)==42);

  assert(int_of(0D2uI + 0x28uI)==42);

  assert(int_of(0D2ul + 0x28ul)==42);

  assert(int_of(0D2uL + 0x28uL)==42);

  assert(int_of(0D2uv + 0x28uv)==42);

  assert(int_of(0D2uV + 0x28uV)==42);

  assert(int_of(0D2ull + 0x28ull)==42);

  assert(int_of(0D2uLL + 0x28uLL)==42);

  assert(int_of(0D2Ut + 0x28Ut)==42);

  assert(int_of(0D2UT + 0x28UT)==42);

  assert(int_of(0D2Us + 0x28Us)==42);

  assert(int_of(0D2US + 0x28US)==42);

  assert(int_of(0D2Ui + 0x28Ui)==42);

  assert(int_of(0D2UI + 0x28UI)==42);

  assert(int_of(0D2Ul + 0x28Ul)==42);

  assert(int_of(0D2UL + 0x28UL)==42);

  assert(int_of(0D2Uv + 0x28Uv)==42);

  assert(int_of(0D2UV + 0x28UV)==42);

  assert(int_of(0D2Ull + 0x28Ull)==42);

  assert(int_of(0D2ULL + 0x28ULL)==42);

  assert(int_of(0D2U + 0x28U)==42);

  assert(int_of(0D2tu + 0x28tu)==42);

  assert(int_of(0D2Tu + 0x28Tu)==42);

  assert(int_of(0D2su + 0x28su)==42);

  assert(int_of(0D2Su + 0x28Su)==42);

  assert(int_of(0D2iu + 0x28iu)==42);

  assert(int_of(0D2Iu + 0x28Iu)==42);

  assert(int_of(0D2lu + 0x28lu)==42);

  assert(int_of(0D2Lu + 0x28Lu)==42);

  assert(int_of(0D2vu + 0x28vu)==42);

  assert(int_of(0D2Vu + 0x28Vu)==42);

  assert(int_of(0D2llu + 0x28llu)==42);

  assert(int_of(0D2LLu + 0x28LLu)==42);

  assert(int_of(0D2tU + 0x28tU)==42);

  assert(int_of(0D2TU + 0x28TU)==42);

  assert(int_of(0D2sU + 0x28sU)==42);

  assert(int_of(0D2SU + 0x28SU)==42);

  assert(int_of(0D2iU + 0x28iU)==42);

  assert(int_of(0D2IU + 0x28IU)==42);

  assert(int_of(0D2lU + 0x28lU)==42);

  assert(int_of(0D2LU + 0x28LU)==42);

  assert(int_of(0D2vU + 0x28vU)==42);

  assert(int_of(0D2VU + 0x28VU)==42);

  assert(int_of(0D2llU + 0x28llU)==42);

  assert(int_of(0D2LLU + 0x28LLU)==42);

  assert(int_of(0D2i8 + 0x28i8)==42);

  assert(int_of(0D2i16 + 0x28i16)==42);

  assert(int_of(0D2i32 + 0x28i32)==42);

  assert(int_of(0D2i64 + 0x28i64)==42);

  assert(int_of(0D2u8 + 0x28u8)==42);

  assert(int_of(0D2u16 + 0x28u16)==42);

  assert(int_of(0D2u32 + 0x28u32)==42);

  assert(int_of(0D2u64 + 0x28u64)==42);

}

tst_0D20x28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0D20X28 () {

  assert(int_of(0D2 + 0X28)==42);

  assert(int_of(0D2t + 0X28t)==42);

  assert(int_of(0D2T + 0X28T)==42);

  assert(int_of(0D2s + 0X28s)==42);

  assert(int_of(0D2S + 0X28S)==42);

  assert(int_of(0D2i + 0X28i)==42);

  assert(int_of(0D2I + 0X28I)==42);

  assert(int_of(0D2l + 0X28l)==42);

  assert(int_of(0D2L + 0X28L)==42);

  assert(int_of(0D2v + 0X28v)==42);

  assert(int_of(0D2V + 0X28V)==42);

  assert(int_of(0D2ll + 0X28ll)==42);

  assert(int_of(0D2LL + 0X28LL)==42);

  assert(int_of(0D2u + 0X28u)==42);

  assert(int_of(0D2ut + 0X28ut)==42);

  assert(int_of(0D2uT + 0X28uT)==42);

  assert(int_of(0D2us + 0X28us)==42);

  assert(int_of(0D2uS + 0X28uS)==42);

  assert(int_of(0D2ui + 0X28ui)==42);

  assert(int_of(0D2uI + 0X28uI)==42);

  assert(int_of(0D2ul + 0X28ul)==42);

  assert(int_of(0D2uL + 0X28uL)==42);

  assert(int_of(0D2uv + 0X28uv)==42);

  assert(int_of(0D2uV + 0X28uV)==42);

  assert(int_of(0D2ull + 0X28ull)==42);

  assert(int_of(0D2uLL + 0X28uLL)==42);

  assert(int_of(0D2Ut + 0X28Ut)==42);

  assert(int_of(0D2UT + 0X28UT)==42);

  assert(int_of(0D2Us + 0X28Us)==42);

  assert(int_of(0D2US + 0X28US)==42);

  assert(int_of(0D2Ui + 0X28Ui)==42);

  assert(int_of(0D2UI + 0X28UI)==42);

  assert(int_of(0D2Ul + 0X28Ul)==42);

  assert(int_of(0D2UL + 0X28UL)==42);

  assert(int_of(0D2Uv + 0X28Uv)==42);

  assert(int_of(0D2UV + 0X28UV)==42);

  assert(int_of(0D2Ull + 0X28Ull)==42);

  assert(int_of(0D2ULL + 0X28ULL)==42);

  assert(int_of(0D2U + 0X28U)==42);

  assert(int_of(0D2tu + 0X28tu)==42);

  assert(int_of(0D2Tu + 0X28Tu)==42);

  assert(int_of(0D2su + 0X28su)==42);

  assert(int_of(0D2Su + 0X28Su)==42);

  assert(int_of(0D2iu + 0X28iu)==42);

  assert(int_of(0D2Iu + 0X28Iu)==42);

  assert(int_of(0D2lu + 0X28lu)==42);

  assert(int_of(0D2Lu + 0X28Lu)==42);

  assert(int_of(0D2vu + 0X28vu)==42);

  assert(int_of(0D2Vu + 0X28Vu)==42);

  assert(int_of(0D2llu + 0X28llu)==42);

  assert(int_of(0D2LLu + 0X28LLu)==42);

  assert(int_of(0D2tU + 0X28tU)==42);

  assert(int_of(0D2TU + 0X28TU)==42);

  assert(int_of(0D2sU + 0X28sU)==42);

  assert(int_of(0D2SU + 0X28SU)==42);

  assert(int_of(0D2iU + 0X28iU)==42);

  assert(int_of(0D2IU + 0X28IU)==42);

  assert(int_of(0D2lU + 0X28lU)==42);

  assert(int_of(0D2LU + 0X28LU)==42);

  assert(int_of(0D2vU + 0X28vU)==42);

  assert(int_of(0D2VU + 0X28VU)==42);

  assert(int_of(0D2llU + 0X28llU)==42);

  assert(int_of(0D2LLU + 0X28LLU)==42);

  assert(int_of(0D2i8 + 0X28i8)==42);

  assert(int_of(0D2i16 + 0X28i16)==42);

  assert(int_of(0D2i32 + 0X28i32)==42);

  assert(int_of(0D2i64 + 0X28i64)==42);

  assert(int_of(0D2u8 + 0X28u8)==42);

  assert(int_of(0D2u16 + 0X28u16)==42);

  assert(int_of(0D2u32 + 0X28u32)==42);

  assert(int_of(0D2u64 + 0X28u64)==42);

}

tst_0D20X28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0x240 () {

  assert(int_of(0x2 + 40)==42);

  assert(int_of(0x2t + 40t)==42);

  assert(int_of(0x2T + 40T)==42);

  assert(int_of(0x2s + 40s)==42);

  assert(int_of(0x2S + 40S)==42);

  assert(int_of(0x2i + 40i)==42);

  assert(int_of(0x2I + 40I)==42);

  assert(int_of(0x2l + 40l)==42);

  assert(int_of(0x2L + 40L)==42);

  assert(int_of(0x2v + 40v)==42);

  assert(int_of(0x2V + 40V)==42);

  assert(int_of(0x2ll + 40ll)==42);

  assert(int_of(0x2LL + 40LL)==42);

  assert(int_of(0x2u + 40u)==42);

  assert(int_of(0x2ut + 40ut)==42);

  assert(int_of(0x2uT + 40uT)==42);

  assert(int_of(0x2us + 40us)==42);

  assert(int_of(0x2uS + 40uS)==42);

  assert(int_of(0x2ui + 40ui)==42);

  assert(int_of(0x2uI + 40uI)==42);

  assert(int_of(0x2ul + 40ul)==42);

  assert(int_of(0x2uL + 40uL)==42);

  assert(int_of(0x2uv + 40uv)==42);

  assert(int_of(0x2uV + 40uV)==42);

  assert(int_of(0x2ull + 40ull)==42);

  assert(int_of(0x2uLL + 40uLL)==42);

  assert(int_of(0x2Ut + 40Ut)==42);

  assert(int_of(0x2UT + 40UT)==42);

  assert(int_of(0x2Us + 40Us)==42);

  assert(int_of(0x2US + 40US)==42);

  assert(int_of(0x2Ui + 40Ui)==42);

  assert(int_of(0x2UI + 40UI)==42);

  assert(int_of(0x2Ul + 40Ul)==42);

  assert(int_of(0x2UL + 40UL)==42);

  assert(int_of(0x2Uv + 40Uv)==42);

  assert(int_of(0x2UV + 40UV)==42);

  assert(int_of(0x2Ull + 40Ull)==42);

  assert(int_of(0x2ULL + 40ULL)==42);

  assert(int_of(0x2U + 40U)==42);

  assert(int_of(0x2tu + 40tu)==42);

  assert(int_of(0x2Tu + 40Tu)==42);

  assert(int_of(0x2su + 40su)==42);

  assert(int_of(0x2Su + 40Su)==42);

  assert(int_of(0x2iu + 40iu)==42);

  assert(int_of(0x2Iu + 40Iu)==42);

  assert(int_of(0x2lu + 40lu)==42);

  assert(int_of(0x2Lu + 40Lu)==42);

  assert(int_of(0x2vu + 40vu)==42);

  assert(int_of(0x2Vu + 40Vu)==42);

  assert(int_of(0x2llu + 40llu)==42);

  assert(int_of(0x2LLu + 40LLu)==42);

  assert(int_of(0x2tU + 40tU)==42);

  assert(int_of(0x2TU + 40TU)==42);

  assert(int_of(0x2sU + 40sU)==42);

  assert(int_of(0x2SU + 40SU)==42);

  assert(int_of(0x2iU + 40iU)==42);

  assert(int_of(0x2IU + 40IU)==42);

  assert(int_of(0x2lU + 40lU)==42);

  assert(int_of(0x2LU + 40LU)==42);

  assert(int_of(0x2vU + 40vU)==42);

  assert(int_of(0x2VU + 40VU)==42);

  assert(int_of(0x2llU + 40llU)==42);

  assert(int_of(0x2LLU + 40LLU)==42);

  assert(int_of(0x2i8 + 40i8)==42);

  assert(int_of(0x2i16 + 40i16)==42);

  assert(int_of(0x2i32 + 40i32)==42);

  assert(int_of(0x2i64 + 40i64)==42);

  assert(int_of(0x2u8 + 40u8)==42);

  assert(int_of(0x2u16 + 40u16)==42);

  assert(int_of(0x2u32 + 40u32)==42);

  assert(int_of(0x2u64 + 40u64)==42);

}

tst_0x240;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0x20b0010_1000 () {

  assert(int_of(0x2 + 0b0010_1000)==42);

  assert(int_of(0x2t + 0b0010_1000t)==42);

  assert(int_of(0x2T + 0b0010_1000T)==42);

  assert(int_of(0x2s + 0b0010_1000s)==42);

  assert(int_of(0x2S + 0b0010_1000S)==42);

  assert(int_of(0x2i + 0b0010_1000i)==42);

  assert(int_of(0x2I + 0b0010_1000I)==42);

  assert(int_of(0x2l + 0b0010_1000l)==42);

  assert(int_of(0x2L + 0b0010_1000L)==42);

  assert(int_of(0x2v + 0b0010_1000v)==42);

  assert(int_of(0x2V + 0b0010_1000V)==42);

  assert(int_of(0x2ll + 0b0010_1000ll)==42);

  assert(int_of(0x2LL + 0b0010_1000LL)==42);

  assert(int_of(0x2u + 0b0010_1000u)==42);

  assert(int_of(0x2ut + 0b0010_1000ut)==42);

  assert(int_of(0x2uT + 0b0010_1000uT)==42);

  assert(int_of(0x2us + 0b0010_1000us)==42);

  assert(int_of(0x2uS + 0b0010_1000uS)==42);

  assert(int_of(0x2ui + 0b0010_1000ui)==42);

  assert(int_of(0x2uI + 0b0010_1000uI)==42);

  assert(int_of(0x2ul + 0b0010_1000ul)==42);

  assert(int_of(0x2uL + 0b0010_1000uL)==42);

  assert(int_of(0x2uv + 0b0010_1000uv)==42);

  assert(int_of(0x2uV + 0b0010_1000uV)==42);

  assert(int_of(0x2ull + 0b0010_1000ull)==42);

  assert(int_of(0x2uLL + 0b0010_1000uLL)==42);

  assert(int_of(0x2Ut + 0b0010_1000Ut)==42);

  assert(int_of(0x2UT + 0b0010_1000UT)==42);

  assert(int_of(0x2Us + 0b0010_1000Us)==42);

  assert(int_of(0x2US + 0b0010_1000US)==42);

  assert(int_of(0x2Ui + 0b0010_1000Ui)==42);

  assert(int_of(0x2UI + 0b0010_1000UI)==42);

  assert(int_of(0x2Ul + 0b0010_1000Ul)==42);

  assert(int_of(0x2UL + 0b0010_1000UL)==42);

  assert(int_of(0x2Uv + 0b0010_1000Uv)==42);

  assert(int_of(0x2UV + 0b0010_1000UV)==42);

  assert(int_of(0x2Ull + 0b0010_1000Ull)==42);

  assert(int_of(0x2ULL + 0b0010_1000ULL)==42);

  assert(int_of(0x2U + 0b0010_1000U)==42);

  assert(int_of(0x2tu + 0b0010_1000tu)==42);

  assert(int_of(0x2Tu + 0b0010_1000Tu)==42);

  assert(int_of(0x2su + 0b0010_1000su)==42);

  assert(int_of(0x2Su + 0b0010_1000Su)==42);

  assert(int_of(0x2iu + 0b0010_1000iu)==42);

  assert(int_of(0x2Iu + 0b0010_1000Iu)==42);

  assert(int_of(0x2lu + 0b0010_1000lu)==42);

  assert(int_of(0x2Lu + 0b0010_1000Lu)==42);

  assert(int_of(0x2vu + 0b0010_1000vu)==42);

  assert(int_of(0x2Vu + 0b0010_1000Vu)==42);

  assert(int_of(0x2llu + 0b0010_1000llu)==42);

  assert(int_of(0x2LLu + 0b0010_1000LLu)==42);

  assert(int_of(0x2tU + 0b0010_1000tU)==42);

  assert(int_of(0x2TU + 0b0010_1000TU)==42);

  assert(int_of(0x2sU + 0b0010_1000sU)==42);

  assert(int_of(0x2SU + 0b0010_1000SU)==42);

  assert(int_of(0x2iU + 0b0010_1000iU)==42);

  assert(int_of(0x2IU + 0b0010_1000IU)==42);

  assert(int_of(0x2lU + 0b0010_1000lU)==42);

  assert(int_of(0x2LU + 0b0010_1000LU)==42);

  assert(int_of(0x2vU + 0b0010_1000vU)==42);

  assert(int_of(0x2VU + 0b0010_1000VU)==42);

  assert(int_of(0x2llU + 0b0010_1000llU)==42);

  assert(int_of(0x2LLU + 0b0010_1000LLU)==42);

  assert(int_of(0x2i8 + 0b0010_1000i8)==42);

  assert(int_of(0x2i16 + 0b0010_1000i16)==42);

  assert(int_of(0x2i32 + 0b0010_1000i32)==42);

  assert(int_of(0x2i64 + 0b0010_1000i64)==42);

  assert(int_of(0x2u8 + 0b0010_1000u8)==42);

  assert(int_of(0x2u16 + 0b0010_1000u16)==42);

  assert(int_of(0x2u32 + 0b0010_1000u32)==42);

  assert(int_of(0x2u64 + 0b0010_1000u64)==42);

}

tst_0x20b0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0x20B_0010_1000 () {

  assert(int_of(0x2 + 0B_0010_1000)==42);

  assert(int_of(0x2t + 0B_0010_1000t)==42);

  assert(int_of(0x2T + 0B_0010_1000T)==42);

  assert(int_of(0x2s + 0B_0010_1000s)==42);

  assert(int_of(0x2S + 0B_0010_1000S)==42);

  assert(int_of(0x2i + 0B_0010_1000i)==42);

  assert(int_of(0x2I + 0B_0010_1000I)==42);

  assert(int_of(0x2l + 0B_0010_1000l)==42);

  assert(int_of(0x2L + 0B_0010_1000L)==42);

  assert(int_of(0x2v + 0B_0010_1000v)==42);

  assert(int_of(0x2V + 0B_0010_1000V)==42);

  assert(int_of(0x2ll + 0B_0010_1000ll)==42);

  assert(int_of(0x2LL + 0B_0010_1000LL)==42);

  assert(int_of(0x2u + 0B_0010_1000u)==42);

  assert(int_of(0x2ut + 0B_0010_1000ut)==42);

  assert(int_of(0x2uT + 0B_0010_1000uT)==42);

  assert(int_of(0x2us + 0B_0010_1000us)==42);

  assert(int_of(0x2uS + 0B_0010_1000uS)==42);

  assert(int_of(0x2ui + 0B_0010_1000ui)==42);

  assert(int_of(0x2uI + 0B_0010_1000uI)==42);

  assert(int_of(0x2ul + 0B_0010_1000ul)==42);

  assert(int_of(0x2uL + 0B_0010_1000uL)==42);

  assert(int_of(0x2uv + 0B_0010_1000uv)==42);

  assert(int_of(0x2uV + 0B_0010_1000uV)==42);

  assert(int_of(0x2ull + 0B_0010_1000ull)==42);

  assert(int_of(0x2uLL + 0B_0010_1000uLL)==42);

  assert(int_of(0x2Ut + 0B_0010_1000Ut)==42);

  assert(int_of(0x2UT + 0B_0010_1000UT)==42);

  assert(int_of(0x2Us + 0B_0010_1000Us)==42);

  assert(int_of(0x2US + 0B_0010_1000US)==42);

  assert(int_of(0x2Ui + 0B_0010_1000Ui)==42);

  assert(int_of(0x2UI + 0B_0010_1000UI)==42);

  assert(int_of(0x2Ul + 0B_0010_1000Ul)==42);

  assert(int_of(0x2UL + 0B_0010_1000UL)==42);

  assert(int_of(0x2Uv + 0B_0010_1000Uv)==42);

  assert(int_of(0x2UV + 0B_0010_1000UV)==42);

  assert(int_of(0x2Ull + 0B_0010_1000Ull)==42);

  assert(int_of(0x2ULL + 0B_0010_1000ULL)==42);

  assert(int_of(0x2U + 0B_0010_1000U)==42);

  assert(int_of(0x2tu + 0B_0010_1000tu)==42);

  assert(int_of(0x2Tu + 0B_0010_1000Tu)==42);

  assert(int_of(0x2su + 0B_0010_1000su)==42);

  assert(int_of(0x2Su + 0B_0010_1000Su)==42);

  assert(int_of(0x2iu + 0B_0010_1000iu)==42);

  assert(int_of(0x2Iu + 0B_0010_1000Iu)==42);

  assert(int_of(0x2lu + 0B_0010_1000lu)==42);

  assert(int_of(0x2Lu + 0B_0010_1000Lu)==42);

  assert(int_of(0x2vu + 0B_0010_1000vu)==42);

  assert(int_of(0x2Vu + 0B_0010_1000Vu)==42);

  assert(int_of(0x2llu + 0B_0010_1000llu)==42);

  assert(int_of(0x2LLu + 0B_0010_1000LLu)==42);

  assert(int_of(0x2tU + 0B_0010_1000tU)==42);

  assert(int_of(0x2TU + 0B_0010_1000TU)==42);

  assert(int_of(0x2sU + 0B_0010_1000sU)==42);

  assert(int_of(0x2SU + 0B_0010_1000SU)==42);

  assert(int_of(0x2iU + 0B_0010_1000iU)==42);

  assert(int_of(0x2IU + 0B_0010_1000IU)==42);

  assert(int_of(0x2lU + 0B_0010_1000lU)==42);

  assert(int_of(0x2LU + 0B_0010_1000LU)==42);

  assert(int_of(0x2vU + 0B_0010_1000vU)==42);

  assert(int_of(0x2VU + 0B_0010_1000VU)==42);

  assert(int_of(0x2llU + 0B_0010_1000llU)==42);

  assert(int_of(0x2LLU + 0B_0010_1000LLU)==42);

  assert(int_of(0x2i8 + 0B_0010_1000i8)==42);

  assert(int_of(0x2i16 + 0B_0010_1000i16)==42);

  assert(int_of(0x2i32 + 0B_0010_1000i32)==42);

  assert(int_of(0x2i64 + 0B_0010_1000i64)==42);

  assert(int_of(0x2u8 + 0B_0010_1000u8)==42);

  assert(int_of(0x2u16 + 0B_0010_1000u16)==42);

  assert(int_of(0x2u32 + 0B_0010_1000u32)==42);

  assert(int_of(0x2u64 + 0B_0010_1000u64)==42);

}

tst_0x20B_0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0x20o50 () {

  assert(int_of(0x2 + 0o50)==42);

  assert(int_of(0x2t + 0o50t)==42);

  assert(int_of(0x2T + 0o50T)==42);

  assert(int_of(0x2s + 0o50s)==42);

  assert(int_of(0x2S + 0o50S)==42);

  assert(int_of(0x2i + 0o50i)==42);

  assert(int_of(0x2I + 0o50I)==42);

  assert(int_of(0x2l + 0o50l)==42);

  assert(int_of(0x2L + 0o50L)==42);

  assert(int_of(0x2v + 0o50v)==42);

  assert(int_of(0x2V + 0o50V)==42);

  assert(int_of(0x2ll + 0o50ll)==42);

  assert(int_of(0x2LL + 0o50LL)==42);

  assert(int_of(0x2u + 0o50u)==42);

  assert(int_of(0x2ut + 0o50ut)==42);

  assert(int_of(0x2uT + 0o50uT)==42);

  assert(int_of(0x2us + 0o50us)==42);

  assert(int_of(0x2uS + 0o50uS)==42);

  assert(int_of(0x2ui + 0o50ui)==42);

  assert(int_of(0x2uI + 0o50uI)==42);

  assert(int_of(0x2ul + 0o50ul)==42);

  assert(int_of(0x2uL + 0o50uL)==42);

  assert(int_of(0x2uv + 0o50uv)==42);

  assert(int_of(0x2uV + 0o50uV)==42);

  assert(int_of(0x2ull + 0o50ull)==42);

  assert(int_of(0x2uLL + 0o50uLL)==42);

  assert(int_of(0x2Ut + 0o50Ut)==42);

  assert(int_of(0x2UT + 0o50UT)==42);

  assert(int_of(0x2Us + 0o50Us)==42);

  assert(int_of(0x2US + 0o50US)==42);

  assert(int_of(0x2Ui + 0o50Ui)==42);

  assert(int_of(0x2UI + 0o50UI)==42);

  assert(int_of(0x2Ul + 0o50Ul)==42);

  assert(int_of(0x2UL + 0o50UL)==42);

  assert(int_of(0x2Uv + 0o50Uv)==42);

  assert(int_of(0x2UV + 0o50UV)==42);

  assert(int_of(0x2Ull + 0o50Ull)==42);

  assert(int_of(0x2ULL + 0o50ULL)==42);

  assert(int_of(0x2U + 0o50U)==42);

  assert(int_of(0x2tu + 0o50tu)==42);

  assert(int_of(0x2Tu + 0o50Tu)==42);

  assert(int_of(0x2su + 0o50su)==42);

  assert(int_of(0x2Su + 0o50Su)==42);

  assert(int_of(0x2iu + 0o50iu)==42);

  assert(int_of(0x2Iu + 0o50Iu)==42);

  assert(int_of(0x2lu + 0o50lu)==42);

  assert(int_of(0x2Lu + 0o50Lu)==42);

  assert(int_of(0x2vu + 0o50vu)==42);

  assert(int_of(0x2Vu + 0o50Vu)==42);

  assert(int_of(0x2llu + 0o50llu)==42);

  assert(int_of(0x2LLu + 0o50LLu)==42);

  assert(int_of(0x2tU + 0o50tU)==42);

  assert(int_of(0x2TU + 0o50TU)==42);

  assert(int_of(0x2sU + 0o50sU)==42);

  assert(int_of(0x2SU + 0o50SU)==42);

  assert(int_of(0x2iU + 0o50iU)==42);

  assert(int_of(0x2IU + 0o50IU)==42);

  assert(int_of(0x2lU + 0o50lU)==42);

  assert(int_of(0x2LU + 0o50LU)==42);

  assert(int_of(0x2vU + 0o50vU)==42);

  assert(int_of(0x2VU + 0o50VU)==42);

  assert(int_of(0x2llU + 0o50llU)==42);

  assert(int_of(0x2LLU + 0o50LLU)==42);

  assert(int_of(0x2i8 + 0o50i8)==42);

  assert(int_of(0x2i16 + 0o50i16)==42);

  assert(int_of(0x2i32 + 0o50i32)==42);

  assert(int_of(0x2i64 + 0o50i64)==42);

  assert(int_of(0x2u8 + 0o50u8)==42);

  assert(int_of(0x2u16 + 0o50u16)==42);

  assert(int_of(0x2u32 + 0o50u32)==42);

  assert(int_of(0x2u64 + 0o50u64)==42);

}

tst_0x20o50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0x20O50 () {

  assert(int_of(0x2 + 0O50)==42);

  assert(int_of(0x2t + 0O50t)==42);

  assert(int_of(0x2T + 0O50T)==42);

  assert(int_of(0x2s + 0O50s)==42);

  assert(int_of(0x2S + 0O50S)==42);

  assert(int_of(0x2i + 0O50i)==42);

  assert(int_of(0x2I + 0O50I)==42);

  assert(int_of(0x2l + 0O50l)==42);

  assert(int_of(0x2L + 0O50L)==42);

  assert(int_of(0x2v + 0O50v)==42);

  assert(int_of(0x2V + 0O50V)==42);

  assert(int_of(0x2ll + 0O50ll)==42);

  assert(int_of(0x2LL + 0O50LL)==42);

  assert(int_of(0x2u + 0O50u)==42);

  assert(int_of(0x2ut + 0O50ut)==42);

  assert(int_of(0x2uT + 0O50uT)==42);

  assert(int_of(0x2us + 0O50us)==42);

  assert(int_of(0x2uS + 0O50uS)==42);

  assert(int_of(0x2ui + 0O50ui)==42);

  assert(int_of(0x2uI + 0O50uI)==42);

  assert(int_of(0x2ul + 0O50ul)==42);

  assert(int_of(0x2uL + 0O50uL)==42);

  assert(int_of(0x2uv + 0O50uv)==42);

  assert(int_of(0x2uV + 0O50uV)==42);

  assert(int_of(0x2ull + 0O50ull)==42);

  assert(int_of(0x2uLL + 0O50uLL)==42);

  assert(int_of(0x2Ut + 0O50Ut)==42);

  assert(int_of(0x2UT + 0O50UT)==42);

  assert(int_of(0x2Us + 0O50Us)==42);

  assert(int_of(0x2US + 0O50US)==42);

  assert(int_of(0x2Ui + 0O50Ui)==42);

  assert(int_of(0x2UI + 0O50UI)==42);

  assert(int_of(0x2Ul + 0O50Ul)==42);

  assert(int_of(0x2UL + 0O50UL)==42);

  assert(int_of(0x2Uv + 0O50Uv)==42);

  assert(int_of(0x2UV + 0O50UV)==42);

  assert(int_of(0x2Ull + 0O50Ull)==42);

  assert(int_of(0x2ULL + 0O50ULL)==42);

  assert(int_of(0x2U + 0O50U)==42);

  assert(int_of(0x2tu + 0O50tu)==42);

  assert(int_of(0x2Tu + 0O50Tu)==42);

  assert(int_of(0x2su + 0O50su)==42);

  assert(int_of(0x2Su + 0O50Su)==42);

  assert(int_of(0x2iu + 0O50iu)==42);

  assert(int_of(0x2Iu + 0O50Iu)==42);

  assert(int_of(0x2lu + 0O50lu)==42);

  assert(int_of(0x2Lu + 0O50Lu)==42);

  assert(int_of(0x2vu + 0O50vu)==42);

  assert(int_of(0x2Vu + 0O50Vu)==42);

  assert(int_of(0x2llu + 0O50llu)==42);

  assert(int_of(0x2LLu + 0O50LLu)==42);

  assert(int_of(0x2tU + 0O50tU)==42);

  assert(int_of(0x2TU + 0O50TU)==42);

  assert(int_of(0x2sU + 0O50sU)==42);

  assert(int_of(0x2SU + 0O50SU)==42);

  assert(int_of(0x2iU + 0O50iU)==42);

  assert(int_of(0x2IU + 0O50IU)==42);

  assert(int_of(0x2lU + 0O50lU)==42);

  assert(int_of(0x2LU + 0O50LU)==42);

  assert(int_of(0x2vU + 0O50vU)==42);

  assert(int_of(0x2VU + 0O50VU)==42);

  assert(int_of(0x2llU + 0O50llU)==42);

  assert(int_of(0x2LLU + 0O50LLU)==42);

  assert(int_of(0x2i8 + 0O50i8)==42);

  assert(int_of(0x2i16 + 0O50i16)==42);

  assert(int_of(0x2i32 + 0O50i32)==42);

  assert(int_of(0x2i64 + 0O50i64)==42);

  assert(int_of(0x2u8 + 0O50u8)==42);

  assert(int_of(0x2u16 + 0O50u16)==42);

  assert(int_of(0x2u32 + 0O50u32)==42);

  assert(int_of(0x2u64 + 0O50u64)==42);

}

tst_0x20O50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0x20d40 () {

  assert(int_of(0x2 + 0d40)==42);

  assert(int_of(0x2t + 0d40t)==42);

  assert(int_of(0x2T + 0d40T)==42);

  assert(int_of(0x2s + 0d40s)==42);

  assert(int_of(0x2S + 0d40S)==42);

  assert(int_of(0x2i + 0d40i)==42);

  assert(int_of(0x2I + 0d40I)==42);

  assert(int_of(0x2l + 0d40l)==42);

  assert(int_of(0x2L + 0d40L)==42);

  assert(int_of(0x2v + 0d40v)==42);

  assert(int_of(0x2V + 0d40V)==42);

  assert(int_of(0x2ll + 0d40ll)==42);

  assert(int_of(0x2LL + 0d40LL)==42);

  assert(int_of(0x2u + 0d40u)==42);

  assert(int_of(0x2ut + 0d40ut)==42);

  assert(int_of(0x2uT + 0d40uT)==42);

  assert(int_of(0x2us + 0d40us)==42);

  assert(int_of(0x2uS + 0d40uS)==42);

  assert(int_of(0x2ui + 0d40ui)==42);

  assert(int_of(0x2uI + 0d40uI)==42);

  assert(int_of(0x2ul + 0d40ul)==42);

  assert(int_of(0x2uL + 0d40uL)==42);

  assert(int_of(0x2uv + 0d40uv)==42);

  assert(int_of(0x2uV + 0d40uV)==42);

  assert(int_of(0x2ull + 0d40ull)==42);

  assert(int_of(0x2uLL + 0d40uLL)==42);

  assert(int_of(0x2Ut + 0d40Ut)==42);

  assert(int_of(0x2UT + 0d40UT)==42);

  assert(int_of(0x2Us + 0d40Us)==42);

  assert(int_of(0x2US + 0d40US)==42);

  assert(int_of(0x2Ui + 0d40Ui)==42);

  assert(int_of(0x2UI + 0d40UI)==42);

  assert(int_of(0x2Ul + 0d40Ul)==42);

  assert(int_of(0x2UL + 0d40UL)==42);

  assert(int_of(0x2Uv + 0d40Uv)==42);

  assert(int_of(0x2UV + 0d40UV)==42);

  assert(int_of(0x2Ull + 0d40Ull)==42);

  assert(int_of(0x2ULL + 0d40ULL)==42);

  assert(int_of(0x2U + 0d40U)==42);

  assert(int_of(0x2tu + 0d40tu)==42);

  assert(int_of(0x2Tu + 0d40Tu)==42);

  assert(int_of(0x2su + 0d40su)==42);

  assert(int_of(0x2Su + 0d40Su)==42);

  assert(int_of(0x2iu + 0d40iu)==42);

  assert(int_of(0x2Iu + 0d40Iu)==42);

  assert(int_of(0x2lu + 0d40lu)==42);

  assert(int_of(0x2Lu + 0d40Lu)==42);

  assert(int_of(0x2vu + 0d40vu)==42);

  assert(int_of(0x2Vu + 0d40Vu)==42);

  assert(int_of(0x2llu + 0d40llu)==42);

  assert(int_of(0x2LLu + 0d40LLu)==42);

  assert(int_of(0x2tU + 0d40tU)==42);

  assert(int_of(0x2TU + 0d40TU)==42);

  assert(int_of(0x2sU + 0d40sU)==42);

  assert(int_of(0x2SU + 0d40SU)==42);

  assert(int_of(0x2iU + 0d40iU)==42);

  assert(int_of(0x2IU + 0d40IU)==42);

  assert(int_of(0x2lU + 0d40lU)==42);

  assert(int_of(0x2LU + 0d40LU)==42);

  assert(int_of(0x2vU + 0d40vU)==42);

  assert(int_of(0x2VU + 0d40VU)==42);

  assert(int_of(0x2llU + 0d40llU)==42);

  assert(int_of(0x2LLU + 0d40LLU)==42);

  assert(int_of(0x2i8 + 0d40i8)==42);

  assert(int_of(0x2i16 + 0d40i16)==42);

  assert(int_of(0x2i32 + 0d40i32)==42);

  assert(int_of(0x2i64 + 0d40i64)==42);

  assert(int_of(0x2u8 + 0d40u8)==42);

  assert(int_of(0x2u16 + 0d40u16)==42);

  assert(int_of(0x2u32 + 0d40u32)==42);

  assert(int_of(0x2u64 + 0d40u64)==42);

}

tst_0x20d40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0x20D40 () {

  assert(int_of(0x2 + 0D40)==42);

  assert(int_of(0x2t + 0D40t)==42);

  assert(int_of(0x2T + 0D40T)==42);

  assert(int_of(0x2s + 0D40s)==42);

  assert(int_of(0x2S + 0D40S)==42);

  assert(int_of(0x2i + 0D40i)==42);

  assert(int_of(0x2I + 0D40I)==42);

  assert(int_of(0x2l + 0D40l)==42);

  assert(int_of(0x2L + 0D40L)==42);

  assert(int_of(0x2v + 0D40v)==42);

  assert(int_of(0x2V + 0D40V)==42);

  assert(int_of(0x2ll + 0D40ll)==42);

  assert(int_of(0x2LL + 0D40LL)==42);

  assert(int_of(0x2u + 0D40u)==42);

  assert(int_of(0x2ut + 0D40ut)==42);

  assert(int_of(0x2uT + 0D40uT)==42);

  assert(int_of(0x2us + 0D40us)==42);

  assert(int_of(0x2uS + 0D40uS)==42);

  assert(int_of(0x2ui + 0D40ui)==42);

  assert(int_of(0x2uI + 0D40uI)==42);

  assert(int_of(0x2ul + 0D40ul)==42);

  assert(int_of(0x2uL + 0D40uL)==42);

  assert(int_of(0x2uv + 0D40uv)==42);

  assert(int_of(0x2uV + 0D40uV)==42);

  assert(int_of(0x2ull + 0D40ull)==42);

  assert(int_of(0x2uLL + 0D40uLL)==42);

  assert(int_of(0x2Ut + 0D40Ut)==42);

  assert(int_of(0x2UT + 0D40UT)==42);

  assert(int_of(0x2Us + 0D40Us)==42);

  assert(int_of(0x2US + 0D40US)==42);

  assert(int_of(0x2Ui + 0D40Ui)==42);

  assert(int_of(0x2UI + 0D40UI)==42);

  assert(int_of(0x2Ul + 0D40Ul)==42);

  assert(int_of(0x2UL + 0D40UL)==42);

  assert(int_of(0x2Uv + 0D40Uv)==42);

  assert(int_of(0x2UV + 0D40UV)==42);

  assert(int_of(0x2Ull + 0D40Ull)==42);

  assert(int_of(0x2ULL + 0D40ULL)==42);

  assert(int_of(0x2U + 0D40U)==42);

  assert(int_of(0x2tu + 0D40tu)==42);

  assert(int_of(0x2Tu + 0D40Tu)==42);

  assert(int_of(0x2su + 0D40su)==42);

  assert(int_of(0x2Su + 0D40Su)==42);

  assert(int_of(0x2iu + 0D40iu)==42);

  assert(int_of(0x2Iu + 0D40Iu)==42);

  assert(int_of(0x2lu + 0D40lu)==42);

  assert(int_of(0x2Lu + 0D40Lu)==42);

  assert(int_of(0x2vu + 0D40vu)==42);

  assert(int_of(0x2Vu + 0D40Vu)==42);

  assert(int_of(0x2llu + 0D40llu)==42);

  assert(int_of(0x2LLu + 0D40LLu)==42);

  assert(int_of(0x2tU + 0D40tU)==42);

  assert(int_of(0x2TU + 0D40TU)==42);

  assert(int_of(0x2sU + 0D40sU)==42);

  assert(int_of(0x2SU + 0D40SU)==42);

  assert(int_of(0x2iU + 0D40iU)==42);

  assert(int_of(0x2IU + 0D40IU)==42);

  assert(int_of(0x2lU + 0D40lU)==42);

  assert(int_of(0x2LU + 0D40LU)==42);

  assert(int_of(0x2vU + 0D40vU)==42);

  assert(int_of(0x2VU + 0D40VU)==42);

  assert(int_of(0x2llU + 0D40llU)==42);

  assert(int_of(0x2LLU + 0D40LLU)==42);

  assert(int_of(0x2i8 + 0D40i8)==42);

  assert(int_of(0x2i16 + 0D40i16)==42);

  assert(int_of(0x2i32 + 0D40i32)==42);

  assert(int_of(0x2i64 + 0D40i64)==42);

  assert(int_of(0x2u8 + 0D40u8)==42);

  assert(int_of(0x2u16 + 0D40u16)==42);

  assert(int_of(0x2u32 + 0D40u32)==42);

  assert(int_of(0x2u64 + 0D40u64)==42);

}

tst_0x20D40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0x20x28 () {

  assert(int_of(0x2 + 0x28)==42);

  assert(int_of(0x2t + 0x28t)==42);

  assert(int_of(0x2T + 0x28T)==42);

  assert(int_of(0x2s + 0x28s)==42);

  assert(int_of(0x2S + 0x28S)==42);

  assert(int_of(0x2i + 0x28i)==42);

  assert(int_of(0x2I + 0x28I)==42);

  assert(int_of(0x2l + 0x28l)==42);

  assert(int_of(0x2L + 0x28L)==42);

  assert(int_of(0x2v + 0x28v)==42);

  assert(int_of(0x2V + 0x28V)==42);

  assert(int_of(0x2ll + 0x28ll)==42);

  assert(int_of(0x2LL + 0x28LL)==42);

  assert(int_of(0x2u + 0x28u)==42);

  assert(int_of(0x2ut + 0x28ut)==42);

  assert(int_of(0x2uT + 0x28uT)==42);

  assert(int_of(0x2us + 0x28us)==42);

  assert(int_of(0x2uS + 0x28uS)==42);

  assert(int_of(0x2ui + 0x28ui)==42);

  assert(int_of(0x2uI + 0x28uI)==42);

  assert(int_of(0x2ul + 0x28ul)==42);

  assert(int_of(0x2uL + 0x28uL)==42);

  assert(int_of(0x2uv + 0x28uv)==42);

  assert(int_of(0x2uV + 0x28uV)==42);

  assert(int_of(0x2ull + 0x28ull)==42);

  assert(int_of(0x2uLL + 0x28uLL)==42);

  assert(int_of(0x2Ut + 0x28Ut)==42);

  assert(int_of(0x2UT + 0x28UT)==42);

  assert(int_of(0x2Us + 0x28Us)==42);

  assert(int_of(0x2US + 0x28US)==42);

  assert(int_of(0x2Ui + 0x28Ui)==42);

  assert(int_of(0x2UI + 0x28UI)==42);

  assert(int_of(0x2Ul + 0x28Ul)==42);

  assert(int_of(0x2UL + 0x28UL)==42);

  assert(int_of(0x2Uv + 0x28Uv)==42);

  assert(int_of(0x2UV + 0x28UV)==42);

  assert(int_of(0x2Ull + 0x28Ull)==42);

  assert(int_of(0x2ULL + 0x28ULL)==42);

  assert(int_of(0x2U + 0x28U)==42);

  assert(int_of(0x2tu + 0x28tu)==42);

  assert(int_of(0x2Tu + 0x28Tu)==42);

  assert(int_of(0x2su + 0x28su)==42);

  assert(int_of(0x2Su + 0x28Su)==42);

  assert(int_of(0x2iu + 0x28iu)==42);

  assert(int_of(0x2Iu + 0x28Iu)==42);

  assert(int_of(0x2lu + 0x28lu)==42);

  assert(int_of(0x2Lu + 0x28Lu)==42);

  assert(int_of(0x2vu + 0x28vu)==42);

  assert(int_of(0x2Vu + 0x28Vu)==42);

  assert(int_of(0x2llu + 0x28llu)==42);

  assert(int_of(0x2LLu + 0x28LLu)==42);

  assert(int_of(0x2tU + 0x28tU)==42);

  assert(int_of(0x2TU + 0x28TU)==42);

  assert(int_of(0x2sU + 0x28sU)==42);

  assert(int_of(0x2SU + 0x28SU)==42);

  assert(int_of(0x2iU + 0x28iU)==42);

  assert(int_of(0x2IU + 0x28IU)==42);

  assert(int_of(0x2lU + 0x28lU)==42);

  assert(int_of(0x2LU + 0x28LU)==42);

  assert(int_of(0x2vU + 0x28vU)==42);

  assert(int_of(0x2VU + 0x28VU)==42);

  assert(int_of(0x2llU + 0x28llU)==42);

  assert(int_of(0x2LLU + 0x28LLU)==42);

  assert(int_of(0x2i8 + 0x28i8)==42);

  assert(int_of(0x2i16 + 0x28i16)==42);

  assert(int_of(0x2i32 + 0x28i32)==42);

  assert(int_of(0x2i64 + 0x28i64)==42);

  assert(int_of(0x2u8 + 0x28u8)==42);

  assert(int_of(0x2u16 + 0x28u16)==42);

  assert(int_of(0x2u32 + 0x28u32)==42);

  assert(int_of(0x2u64 + 0x28u64)==42);

}

tst_0x20x28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0x20X28 () {

  assert(int_of(0x2 + 0X28)==42);

  assert(int_of(0x2t + 0X28t)==42);

  assert(int_of(0x2T + 0X28T)==42);

  assert(int_of(0x2s + 0X28s)==42);

  assert(int_of(0x2S + 0X28S)==42);

  assert(int_of(0x2i + 0X28i)==42);

  assert(int_of(0x2I + 0X28I)==42);

  assert(int_of(0x2l + 0X28l)==42);

  assert(int_of(0x2L + 0X28L)==42);

  assert(int_of(0x2v + 0X28v)==42);

  assert(int_of(0x2V + 0X28V)==42);

  assert(int_of(0x2ll + 0X28ll)==42);

  assert(int_of(0x2LL + 0X28LL)==42);

  assert(int_of(0x2u + 0X28u)==42);

  assert(int_of(0x2ut + 0X28ut)==42);

  assert(int_of(0x2uT + 0X28uT)==42);

  assert(int_of(0x2us + 0X28us)==42);

  assert(int_of(0x2uS + 0X28uS)==42);

  assert(int_of(0x2ui + 0X28ui)==42);

  assert(int_of(0x2uI + 0X28uI)==42);

  assert(int_of(0x2ul + 0X28ul)==42);

  assert(int_of(0x2uL + 0X28uL)==42);

  assert(int_of(0x2uv + 0X28uv)==42);

  assert(int_of(0x2uV + 0X28uV)==42);

  assert(int_of(0x2ull + 0X28ull)==42);

  assert(int_of(0x2uLL + 0X28uLL)==42);

  assert(int_of(0x2Ut + 0X28Ut)==42);

  assert(int_of(0x2UT + 0X28UT)==42);

  assert(int_of(0x2Us + 0X28Us)==42);

  assert(int_of(0x2US + 0X28US)==42);

  assert(int_of(0x2Ui + 0X28Ui)==42);

  assert(int_of(0x2UI + 0X28UI)==42);

  assert(int_of(0x2Ul + 0X28Ul)==42);

  assert(int_of(0x2UL + 0X28UL)==42);

  assert(int_of(0x2Uv + 0X28Uv)==42);

  assert(int_of(0x2UV + 0X28UV)==42);

  assert(int_of(0x2Ull + 0X28Ull)==42);

  assert(int_of(0x2ULL + 0X28ULL)==42);

  assert(int_of(0x2U + 0X28U)==42);

  assert(int_of(0x2tu + 0X28tu)==42);

  assert(int_of(0x2Tu + 0X28Tu)==42);

  assert(int_of(0x2su + 0X28su)==42);

  assert(int_of(0x2Su + 0X28Su)==42);

  assert(int_of(0x2iu + 0X28iu)==42);

  assert(int_of(0x2Iu + 0X28Iu)==42);

  assert(int_of(0x2lu + 0X28lu)==42);

  assert(int_of(0x2Lu + 0X28Lu)==42);

  assert(int_of(0x2vu + 0X28vu)==42);

  assert(int_of(0x2Vu + 0X28Vu)==42);

  assert(int_of(0x2llu + 0X28llu)==42);

  assert(int_of(0x2LLu + 0X28LLu)==42);

  assert(int_of(0x2tU + 0X28tU)==42);

  assert(int_of(0x2TU + 0X28TU)==42);

  assert(int_of(0x2sU + 0X28sU)==42);

  assert(int_of(0x2SU + 0X28SU)==42);

  assert(int_of(0x2iU + 0X28iU)==42);

  assert(int_of(0x2IU + 0X28IU)==42);

  assert(int_of(0x2lU + 0X28lU)==42);

  assert(int_of(0x2LU + 0X28LU)==42);

  assert(int_of(0x2vU + 0X28vU)==42);

  assert(int_of(0x2VU + 0X28VU)==42);

  assert(int_of(0x2llU + 0X28llU)==42);

  assert(int_of(0x2LLU + 0X28LLU)==42);

  assert(int_of(0x2i8 + 0X28i8)==42);

  assert(int_of(0x2i16 + 0X28i16)==42);

  assert(int_of(0x2i32 + 0X28i32)==42);

  assert(int_of(0x2i64 + 0X28i64)==42);

  assert(int_of(0x2u8 + 0X28u8)==42);

  assert(int_of(0x2u16 + 0X28u16)==42);

  assert(int_of(0x2u32 + 0X28u32)==42);

  assert(int_of(0x2u64 + 0X28u64)==42);

}

tst_0x20X28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0X240 () {

  assert(int_of(0X2 + 40)==42);

  assert(int_of(0X2t + 40t)==42);

  assert(int_of(0X2T + 40T)==42);

  assert(int_of(0X2s + 40s)==42);

  assert(int_of(0X2S + 40S)==42);

  assert(int_of(0X2i + 40i)==42);

  assert(int_of(0X2I + 40I)==42);

  assert(int_of(0X2l + 40l)==42);

  assert(int_of(0X2L + 40L)==42);

  assert(int_of(0X2v + 40v)==42);

  assert(int_of(0X2V + 40V)==42);

  assert(int_of(0X2ll + 40ll)==42);

  assert(int_of(0X2LL + 40LL)==42);

  assert(int_of(0X2u + 40u)==42);

  assert(int_of(0X2ut + 40ut)==42);

  assert(int_of(0X2uT + 40uT)==42);

  assert(int_of(0X2us + 40us)==42);

  assert(int_of(0X2uS + 40uS)==42);

  assert(int_of(0X2ui + 40ui)==42);

  assert(int_of(0X2uI + 40uI)==42);

  assert(int_of(0X2ul + 40ul)==42);

  assert(int_of(0X2uL + 40uL)==42);

  assert(int_of(0X2uv + 40uv)==42);

  assert(int_of(0X2uV + 40uV)==42);

  assert(int_of(0X2ull + 40ull)==42);

  assert(int_of(0X2uLL + 40uLL)==42);

  assert(int_of(0X2Ut + 40Ut)==42);

  assert(int_of(0X2UT + 40UT)==42);

  assert(int_of(0X2Us + 40Us)==42);

  assert(int_of(0X2US + 40US)==42);

  assert(int_of(0X2Ui + 40Ui)==42);

  assert(int_of(0X2UI + 40UI)==42);

  assert(int_of(0X2Ul + 40Ul)==42);

  assert(int_of(0X2UL + 40UL)==42);

  assert(int_of(0X2Uv + 40Uv)==42);

  assert(int_of(0X2UV + 40UV)==42);

  assert(int_of(0X2Ull + 40Ull)==42);

  assert(int_of(0X2ULL + 40ULL)==42);

  assert(int_of(0X2U + 40U)==42);

  assert(int_of(0X2tu + 40tu)==42);

  assert(int_of(0X2Tu + 40Tu)==42);

  assert(int_of(0X2su + 40su)==42);

  assert(int_of(0X2Su + 40Su)==42);

  assert(int_of(0X2iu + 40iu)==42);

  assert(int_of(0X2Iu + 40Iu)==42);

  assert(int_of(0X2lu + 40lu)==42);

  assert(int_of(0X2Lu + 40Lu)==42);

  assert(int_of(0X2vu + 40vu)==42);

  assert(int_of(0X2Vu + 40Vu)==42);

  assert(int_of(0X2llu + 40llu)==42);

  assert(int_of(0X2LLu + 40LLu)==42);

  assert(int_of(0X2tU + 40tU)==42);

  assert(int_of(0X2TU + 40TU)==42);

  assert(int_of(0X2sU + 40sU)==42);

  assert(int_of(0X2SU + 40SU)==42);

  assert(int_of(0X2iU + 40iU)==42);

  assert(int_of(0X2IU + 40IU)==42);

  assert(int_of(0X2lU + 40lU)==42);

  assert(int_of(0X2LU + 40LU)==42);

  assert(int_of(0X2vU + 40vU)==42);

  assert(int_of(0X2VU + 40VU)==42);

  assert(int_of(0X2llU + 40llU)==42);

  assert(int_of(0X2LLU + 40LLU)==42);

  assert(int_of(0X2i8 + 40i8)==42);

  assert(int_of(0X2i16 + 40i16)==42);

  assert(int_of(0X2i32 + 40i32)==42);

  assert(int_of(0X2i64 + 40i64)==42);

  assert(int_of(0X2u8 + 40u8)==42);

  assert(int_of(0X2u16 + 40u16)==42);

  assert(int_of(0X2u32 + 40u32)==42);

  assert(int_of(0X2u64 + 40u64)==42);

}

tst_0X240;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0X20b0010_1000 () {

  assert(int_of(0X2 + 0b0010_1000)==42);

  assert(int_of(0X2t + 0b0010_1000t)==42);

  assert(int_of(0X2T + 0b0010_1000T)==42);

  assert(int_of(0X2s + 0b0010_1000s)==42);

  assert(int_of(0X2S + 0b0010_1000S)==42);

  assert(int_of(0X2i + 0b0010_1000i)==42);

  assert(int_of(0X2I + 0b0010_1000I)==42);

  assert(int_of(0X2l + 0b0010_1000l)==42);

  assert(int_of(0X2L + 0b0010_1000L)==42);

  assert(int_of(0X2v + 0b0010_1000v)==42);

  assert(int_of(0X2V + 0b0010_1000V)==42);

  assert(int_of(0X2ll + 0b0010_1000ll)==42);

  assert(int_of(0X2LL + 0b0010_1000LL)==42);

  assert(int_of(0X2u + 0b0010_1000u)==42);

  assert(int_of(0X2ut + 0b0010_1000ut)==42);

  assert(int_of(0X2uT + 0b0010_1000uT)==42);

  assert(int_of(0X2us + 0b0010_1000us)==42);

  assert(int_of(0X2uS + 0b0010_1000uS)==42);

  assert(int_of(0X2ui + 0b0010_1000ui)==42);

  assert(int_of(0X2uI + 0b0010_1000uI)==42);

  assert(int_of(0X2ul + 0b0010_1000ul)==42);

  assert(int_of(0X2uL + 0b0010_1000uL)==42);

  assert(int_of(0X2uv + 0b0010_1000uv)==42);

  assert(int_of(0X2uV + 0b0010_1000uV)==42);

  assert(int_of(0X2ull + 0b0010_1000ull)==42);

  assert(int_of(0X2uLL + 0b0010_1000uLL)==42);

  assert(int_of(0X2Ut + 0b0010_1000Ut)==42);

  assert(int_of(0X2UT + 0b0010_1000UT)==42);

  assert(int_of(0X2Us + 0b0010_1000Us)==42);

  assert(int_of(0X2US + 0b0010_1000US)==42);

  assert(int_of(0X2Ui + 0b0010_1000Ui)==42);

  assert(int_of(0X2UI + 0b0010_1000UI)==42);

  assert(int_of(0X2Ul + 0b0010_1000Ul)==42);

  assert(int_of(0X2UL + 0b0010_1000UL)==42);

  assert(int_of(0X2Uv + 0b0010_1000Uv)==42);

  assert(int_of(0X2UV + 0b0010_1000UV)==42);

  assert(int_of(0X2Ull + 0b0010_1000Ull)==42);

  assert(int_of(0X2ULL + 0b0010_1000ULL)==42);

  assert(int_of(0X2U + 0b0010_1000U)==42);

  assert(int_of(0X2tu + 0b0010_1000tu)==42);

  assert(int_of(0X2Tu + 0b0010_1000Tu)==42);

  assert(int_of(0X2su + 0b0010_1000su)==42);

  assert(int_of(0X2Su + 0b0010_1000Su)==42);

  assert(int_of(0X2iu + 0b0010_1000iu)==42);

  assert(int_of(0X2Iu + 0b0010_1000Iu)==42);

  assert(int_of(0X2lu + 0b0010_1000lu)==42);

  assert(int_of(0X2Lu + 0b0010_1000Lu)==42);

  assert(int_of(0X2vu + 0b0010_1000vu)==42);

  assert(int_of(0X2Vu + 0b0010_1000Vu)==42);

  assert(int_of(0X2llu + 0b0010_1000llu)==42);

  assert(int_of(0X2LLu + 0b0010_1000LLu)==42);

  assert(int_of(0X2tU + 0b0010_1000tU)==42);

  assert(int_of(0X2TU + 0b0010_1000TU)==42);

  assert(int_of(0X2sU + 0b0010_1000sU)==42);

  assert(int_of(0X2SU + 0b0010_1000SU)==42);

  assert(int_of(0X2iU + 0b0010_1000iU)==42);

  assert(int_of(0X2IU + 0b0010_1000IU)==42);

  assert(int_of(0X2lU + 0b0010_1000lU)==42);

  assert(int_of(0X2LU + 0b0010_1000LU)==42);

  assert(int_of(0X2vU + 0b0010_1000vU)==42);

  assert(int_of(0X2VU + 0b0010_1000VU)==42);

  assert(int_of(0X2llU + 0b0010_1000llU)==42);

  assert(int_of(0X2LLU + 0b0010_1000LLU)==42);

  assert(int_of(0X2i8 + 0b0010_1000i8)==42);

  assert(int_of(0X2i16 + 0b0010_1000i16)==42);

  assert(int_of(0X2i32 + 0b0010_1000i32)==42);

  assert(int_of(0X2i64 + 0b0010_1000i64)==42);

  assert(int_of(0X2u8 + 0b0010_1000u8)==42);

  assert(int_of(0X2u16 + 0b0010_1000u16)==42);

  assert(int_of(0X2u32 + 0b0010_1000u32)==42);

  assert(int_of(0X2u64 + 0b0010_1000u64)==42);

}

tst_0X20b0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0X20B_0010_1000 () {

  assert(int_of(0X2 + 0B_0010_1000)==42);

  assert(int_of(0X2t + 0B_0010_1000t)==42);

  assert(int_of(0X2T + 0B_0010_1000T)==42);

  assert(int_of(0X2s + 0B_0010_1000s)==42);

  assert(int_of(0X2S + 0B_0010_1000S)==42);

  assert(int_of(0X2i + 0B_0010_1000i)==42);

  assert(int_of(0X2I + 0B_0010_1000I)==42);

  assert(int_of(0X2l + 0B_0010_1000l)==42);

  assert(int_of(0X2L + 0B_0010_1000L)==42);

  assert(int_of(0X2v + 0B_0010_1000v)==42);

  assert(int_of(0X2V + 0B_0010_1000V)==42);

  assert(int_of(0X2ll + 0B_0010_1000ll)==42);

  assert(int_of(0X2LL + 0B_0010_1000LL)==42);

  assert(int_of(0X2u + 0B_0010_1000u)==42);

  assert(int_of(0X2ut + 0B_0010_1000ut)==42);

  assert(int_of(0X2uT + 0B_0010_1000uT)==42);

  assert(int_of(0X2us + 0B_0010_1000us)==42);

  assert(int_of(0X2uS + 0B_0010_1000uS)==42);

  assert(int_of(0X2ui + 0B_0010_1000ui)==42);

  assert(int_of(0X2uI + 0B_0010_1000uI)==42);

  assert(int_of(0X2ul + 0B_0010_1000ul)==42);

  assert(int_of(0X2uL + 0B_0010_1000uL)==42);

  assert(int_of(0X2uv + 0B_0010_1000uv)==42);

  assert(int_of(0X2uV + 0B_0010_1000uV)==42);

  assert(int_of(0X2ull + 0B_0010_1000ull)==42);

  assert(int_of(0X2uLL + 0B_0010_1000uLL)==42);

  assert(int_of(0X2Ut + 0B_0010_1000Ut)==42);

  assert(int_of(0X2UT + 0B_0010_1000UT)==42);

  assert(int_of(0X2Us + 0B_0010_1000Us)==42);

  assert(int_of(0X2US + 0B_0010_1000US)==42);

  assert(int_of(0X2Ui + 0B_0010_1000Ui)==42);

  assert(int_of(0X2UI + 0B_0010_1000UI)==42);

  assert(int_of(0X2Ul + 0B_0010_1000Ul)==42);

  assert(int_of(0X2UL + 0B_0010_1000UL)==42);

  assert(int_of(0X2Uv + 0B_0010_1000Uv)==42);

  assert(int_of(0X2UV + 0B_0010_1000UV)==42);

  assert(int_of(0X2Ull + 0B_0010_1000Ull)==42);

  assert(int_of(0X2ULL + 0B_0010_1000ULL)==42);

  assert(int_of(0X2U + 0B_0010_1000U)==42);

  assert(int_of(0X2tu + 0B_0010_1000tu)==42);

  assert(int_of(0X2Tu + 0B_0010_1000Tu)==42);

  assert(int_of(0X2su + 0B_0010_1000su)==42);

  assert(int_of(0X2Su + 0B_0010_1000Su)==42);

  assert(int_of(0X2iu + 0B_0010_1000iu)==42);

  assert(int_of(0X2Iu + 0B_0010_1000Iu)==42);

  assert(int_of(0X2lu + 0B_0010_1000lu)==42);

  assert(int_of(0X2Lu + 0B_0010_1000Lu)==42);

  assert(int_of(0X2vu + 0B_0010_1000vu)==42);

  assert(int_of(0X2Vu + 0B_0010_1000Vu)==42);

  assert(int_of(0X2llu + 0B_0010_1000llu)==42);

  assert(int_of(0X2LLu + 0B_0010_1000LLu)==42);

  assert(int_of(0X2tU + 0B_0010_1000tU)==42);

  assert(int_of(0X2TU + 0B_0010_1000TU)==42);

  assert(int_of(0X2sU + 0B_0010_1000sU)==42);

  assert(int_of(0X2SU + 0B_0010_1000SU)==42);

  assert(int_of(0X2iU + 0B_0010_1000iU)==42);

  assert(int_of(0X2IU + 0B_0010_1000IU)==42);

  assert(int_of(0X2lU + 0B_0010_1000lU)==42);

  assert(int_of(0X2LU + 0B_0010_1000LU)==42);

  assert(int_of(0X2vU + 0B_0010_1000vU)==42);

  assert(int_of(0X2VU + 0B_0010_1000VU)==42);

  assert(int_of(0X2llU + 0B_0010_1000llU)==42);

  assert(int_of(0X2LLU + 0B_0010_1000LLU)==42);

  assert(int_of(0X2i8 + 0B_0010_1000i8)==42);

  assert(int_of(0X2i16 + 0B_0010_1000i16)==42);

  assert(int_of(0X2i32 + 0B_0010_1000i32)==42);

  assert(int_of(0X2i64 + 0B_0010_1000i64)==42);

  assert(int_of(0X2u8 + 0B_0010_1000u8)==42);

  assert(int_of(0X2u16 + 0B_0010_1000u16)==42);

  assert(int_of(0X2u32 + 0B_0010_1000u32)==42);

  assert(int_of(0X2u64 + 0B_0010_1000u64)==42);

}

tst_0X20B_0010_1000;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0X20o50 () {

  assert(int_of(0X2 + 0o50)==42);

  assert(int_of(0X2t + 0o50t)==42);

  assert(int_of(0X2T + 0o50T)==42);

  assert(int_of(0X2s + 0o50s)==42);

  assert(int_of(0X2S + 0o50S)==42);

  assert(int_of(0X2i + 0o50i)==42);

  assert(int_of(0X2I + 0o50I)==42);

  assert(int_of(0X2l + 0o50l)==42);

  assert(int_of(0X2L + 0o50L)==42);

  assert(int_of(0X2v + 0o50v)==42);

  assert(int_of(0X2V + 0o50V)==42);

  assert(int_of(0X2ll + 0o50ll)==42);

  assert(int_of(0X2LL + 0o50LL)==42);

  assert(int_of(0X2u + 0o50u)==42);

  assert(int_of(0X2ut + 0o50ut)==42);

  assert(int_of(0X2uT + 0o50uT)==42);

  assert(int_of(0X2us + 0o50us)==42);

  assert(int_of(0X2uS + 0o50uS)==42);

  assert(int_of(0X2ui + 0o50ui)==42);

  assert(int_of(0X2uI + 0o50uI)==42);

  assert(int_of(0X2ul + 0o50ul)==42);

  assert(int_of(0X2uL + 0o50uL)==42);

  assert(int_of(0X2uv + 0o50uv)==42);

  assert(int_of(0X2uV + 0o50uV)==42);

  assert(int_of(0X2ull + 0o50ull)==42);

  assert(int_of(0X2uLL + 0o50uLL)==42);

  assert(int_of(0X2Ut + 0o50Ut)==42);

  assert(int_of(0X2UT + 0o50UT)==42);

  assert(int_of(0X2Us + 0o50Us)==42);

  assert(int_of(0X2US + 0o50US)==42);

  assert(int_of(0X2Ui + 0o50Ui)==42);

  assert(int_of(0X2UI + 0o50UI)==42);

  assert(int_of(0X2Ul + 0o50Ul)==42);

  assert(int_of(0X2UL + 0o50UL)==42);

  assert(int_of(0X2Uv + 0o50Uv)==42);

  assert(int_of(0X2UV + 0o50UV)==42);

  assert(int_of(0X2Ull + 0o50Ull)==42);

  assert(int_of(0X2ULL + 0o50ULL)==42);

  assert(int_of(0X2U + 0o50U)==42);

  assert(int_of(0X2tu + 0o50tu)==42);

  assert(int_of(0X2Tu + 0o50Tu)==42);

  assert(int_of(0X2su + 0o50su)==42);

  assert(int_of(0X2Su + 0o50Su)==42);

  assert(int_of(0X2iu + 0o50iu)==42);

  assert(int_of(0X2Iu + 0o50Iu)==42);

  assert(int_of(0X2lu + 0o50lu)==42);

  assert(int_of(0X2Lu + 0o50Lu)==42);

  assert(int_of(0X2vu + 0o50vu)==42);

  assert(int_of(0X2Vu + 0o50Vu)==42);

  assert(int_of(0X2llu + 0o50llu)==42);

  assert(int_of(0X2LLu + 0o50LLu)==42);

  assert(int_of(0X2tU + 0o50tU)==42);

  assert(int_of(0X2TU + 0o50TU)==42);

  assert(int_of(0X2sU + 0o50sU)==42);

  assert(int_of(0X2SU + 0o50SU)==42);

  assert(int_of(0X2iU + 0o50iU)==42);

  assert(int_of(0X2IU + 0o50IU)==42);

  assert(int_of(0X2lU + 0o50lU)==42);

  assert(int_of(0X2LU + 0o50LU)==42);

  assert(int_of(0X2vU + 0o50vU)==42);

  assert(int_of(0X2VU + 0o50VU)==42);

  assert(int_of(0X2llU + 0o50llU)==42);

  assert(int_of(0X2LLU + 0o50LLU)==42);

  assert(int_of(0X2i8 + 0o50i8)==42);

  assert(int_of(0X2i16 + 0o50i16)==42);

  assert(int_of(0X2i32 + 0o50i32)==42);

  assert(int_of(0X2i64 + 0o50i64)==42);

  assert(int_of(0X2u8 + 0o50u8)==42);

  assert(int_of(0X2u16 + 0o50u16)==42);

  assert(int_of(0X2u32 + 0o50u32)==42);

  assert(int_of(0X2u64 + 0o50u64)==42);

}

tst_0X20o50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0X20O50 () {

  assert(int_of(0X2 + 0O50)==42);

  assert(int_of(0X2t + 0O50t)==42);

  assert(int_of(0X2T + 0O50T)==42);

  assert(int_of(0X2s + 0O50s)==42);

  assert(int_of(0X2S + 0O50S)==42);

  assert(int_of(0X2i + 0O50i)==42);

  assert(int_of(0X2I + 0O50I)==42);

  assert(int_of(0X2l + 0O50l)==42);

  assert(int_of(0X2L + 0O50L)==42);

  assert(int_of(0X2v + 0O50v)==42);

  assert(int_of(0X2V + 0O50V)==42);

  assert(int_of(0X2ll + 0O50ll)==42);

  assert(int_of(0X2LL + 0O50LL)==42);

  assert(int_of(0X2u + 0O50u)==42);

  assert(int_of(0X2ut + 0O50ut)==42);

  assert(int_of(0X2uT + 0O50uT)==42);

  assert(int_of(0X2us + 0O50us)==42);

  assert(int_of(0X2uS + 0O50uS)==42);

  assert(int_of(0X2ui + 0O50ui)==42);

  assert(int_of(0X2uI + 0O50uI)==42);

  assert(int_of(0X2ul + 0O50ul)==42);

  assert(int_of(0X2uL + 0O50uL)==42);

  assert(int_of(0X2uv + 0O50uv)==42);

  assert(int_of(0X2uV + 0O50uV)==42);

  assert(int_of(0X2ull + 0O50ull)==42);

  assert(int_of(0X2uLL + 0O50uLL)==42);

  assert(int_of(0X2Ut + 0O50Ut)==42);

  assert(int_of(0X2UT + 0O50UT)==42);

  assert(int_of(0X2Us + 0O50Us)==42);

  assert(int_of(0X2US + 0O50US)==42);

  assert(int_of(0X2Ui + 0O50Ui)==42);

  assert(int_of(0X2UI + 0O50UI)==42);

  assert(int_of(0X2Ul + 0O50Ul)==42);

  assert(int_of(0X2UL + 0O50UL)==42);

  assert(int_of(0X2Uv + 0O50Uv)==42);

  assert(int_of(0X2UV + 0O50UV)==42);

  assert(int_of(0X2Ull + 0O50Ull)==42);

  assert(int_of(0X2ULL + 0O50ULL)==42);

  assert(int_of(0X2U + 0O50U)==42);

  assert(int_of(0X2tu + 0O50tu)==42);

  assert(int_of(0X2Tu + 0O50Tu)==42);

  assert(int_of(0X2su + 0O50su)==42);

  assert(int_of(0X2Su + 0O50Su)==42);

  assert(int_of(0X2iu + 0O50iu)==42);

  assert(int_of(0X2Iu + 0O50Iu)==42);

  assert(int_of(0X2lu + 0O50lu)==42);

  assert(int_of(0X2Lu + 0O50Lu)==42);

  assert(int_of(0X2vu + 0O50vu)==42);

  assert(int_of(0X2Vu + 0O50Vu)==42);

  assert(int_of(0X2llu + 0O50llu)==42);

  assert(int_of(0X2LLu + 0O50LLu)==42);

  assert(int_of(0X2tU + 0O50tU)==42);

  assert(int_of(0X2TU + 0O50TU)==42);

  assert(int_of(0X2sU + 0O50sU)==42);

  assert(int_of(0X2SU + 0O50SU)==42);

  assert(int_of(0X2iU + 0O50iU)==42);

  assert(int_of(0X2IU + 0O50IU)==42);

  assert(int_of(0X2lU + 0O50lU)==42);

  assert(int_of(0X2LU + 0O50LU)==42);

  assert(int_of(0X2vU + 0O50vU)==42);

  assert(int_of(0X2VU + 0O50VU)==42);

  assert(int_of(0X2llU + 0O50llU)==42);

  assert(int_of(0X2LLU + 0O50LLU)==42);

  assert(int_of(0X2i8 + 0O50i8)==42);

  assert(int_of(0X2i16 + 0O50i16)==42);

  assert(int_of(0X2i32 + 0O50i32)==42);

  assert(int_of(0X2i64 + 0O50i64)==42);

  assert(int_of(0X2u8 + 0O50u8)==42);

  assert(int_of(0X2u16 + 0O50u16)==42);

  assert(int_of(0X2u32 + 0O50u32)==42);

  assert(int_of(0X2u64 + 0O50u64)==42);

}

tst_0X20O50;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0X20d40 () {

  assert(int_of(0X2 + 0d40)==42);

  assert(int_of(0X2t + 0d40t)==42);

  assert(int_of(0X2T + 0d40T)==42);

  assert(int_of(0X2s + 0d40s)==42);

  assert(int_of(0X2S + 0d40S)==42);

  assert(int_of(0X2i + 0d40i)==42);

  assert(int_of(0X2I + 0d40I)==42);

  assert(int_of(0X2l + 0d40l)==42);

  assert(int_of(0X2L + 0d40L)==42);

  assert(int_of(0X2v + 0d40v)==42);

  assert(int_of(0X2V + 0d40V)==42);

  assert(int_of(0X2ll + 0d40ll)==42);

  assert(int_of(0X2LL + 0d40LL)==42);

  assert(int_of(0X2u + 0d40u)==42);

  assert(int_of(0X2ut + 0d40ut)==42);

  assert(int_of(0X2uT + 0d40uT)==42);

  assert(int_of(0X2us + 0d40us)==42);

  assert(int_of(0X2uS + 0d40uS)==42);

  assert(int_of(0X2ui + 0d40ui)==42);

  assert(int_of(0X2uI + 0d40uI)==42);

  assert(int_of(0X2ul + 0d40ul)==42);

  assert(int_of(0X2uL + 0d40uL)==42);

  assert(int_of(0X2uv + 0d40uv)==42);

  assert(int_of(0X2uV + 0d40uV)==42);

  assert(int_of(0X2ull + 0d40ull)==42);

  assert(int_of(0X2uLL + 0d40uLL)==42);

  assert(int_of(0X2Ut + 0d40Ut)==42);

  assert(int_of(0X2UT + 0d40UT)==42);

  assert(int_of(0X2Us + 0d40Us)==42);

  assert(int_of(0X2US + 0d40US)==42);

  assert(int_of(0X2Ui + 0d40Ui)==42);

  assert(int_of(0X2UI + 0d40UI)==42);

  assert(int_of(0X2Ul + 0d40Ul)==42);

  assert(int_of(0X2UL + 0d40UL)==42);

  assert(int_of(0X2Uv + 0d40Uv)==42);

  assert(int_of(0X2UV + 0d40UV)==42);

  assert(int_of(0X2Ull + 0d40Ull)==42);

  assert(int_of(0X2ULL + 0d40ULL)==42);

  assert(int_of(0X2U + 0d40U)==42);

  assert(int_of(0X2tu + 0d40tu)==42);

  assert(int_of(0X2Tu + 0d40Tu)==42);

  assert(int_of(0X2su + 0d40su)==42);

  assert(int_of(0X2Su + 0d40Su)==42);

  assert(int_of(0X2iu + 0d40iu)==42);

  assert(int_of(0X2Iu + 0d40Iu)==42);

  assert(int_of(0X2lu + 0d40lu)==42);

  assert(int_of(0X2Lu + 0d40Lu)==42);

  assert(int_of(0X2vu + 0d40vu)==42);

  assert(int_of(0X2Vu + 0d40Vu)==42);

  assert(int_of(0X2llu + 0d40llu)==42);

  assert(int_of(0X2LLu + 0d40LLu)==42);

  assert(int_of(0X2tU + 0d40tU)==42);

  assert(int_of(0X2TU + 0d40TU)==42);

  assert(int_of(0X2sU + 0d40sU)==42);

  assert(int_of(0X2SU + 0d40SU)==42);

  assert(int_of(0X2iU + 0d40iU)==42);

  assert(int_of(0X2IU + 0d40IU)==42);

  assert(int_of(0X2lU + 0d40lU)==42);

  assert(int_of(0X2LU + 0d40LU)==42);

  assert(int_of(0X2vU + 0d40vU)==42);

  assert(int_of(0X2VU + 0d40VU)==42);

  assert(int_of(0X2llU + 0d40llU)==42);

  assert(int_of(0X2LLU + 0d40LLU)==42);

  assert(int_of(0X2i8 + 0d40i8)==42);

  assert(int_of(0X2i16 + 0d40i16)==42);

  assert(int_of(0X2i32 + 0d40i32)==42);

  assert(int_of(0X2i64 + 0d40i64)==42);

  assert(int_of(0X2u8 + 0d40u8)==42);

  assert(int_of(0X2u16 + 0d40u16)==42);

  assert(int_of(0X2u32 + 0d40u32)==42);

  assert(int_of(0X2u64 + 0d40u64)==42);

}

tst_0X20d40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0X20D40 () {

  assert(int_of(0X2 + 0D40)==42);

  assert(int_of(0X2t + 0D40t)==42);

  assert(int_of(0X2T + 0D40T)==42);

  assert(int_of(0X2s + 0D40s)==42);

  assert(int_of(0X2S + 0D40S)==42);

  assert(int_of(0X2i + 0D40i)==42);

  assert(int_of(0X2I + 0D40I)==42);

  assert(int_of(0X2l + 0D40l)==42);

  assert(int_of(0X2L + 0D40L)==42);

  assert(int_of(0X2v + 0D40v)==42);

  assert(int_of(0X2V + 0D40V)==42);

  assert(int_of(0X2ll + 0D40ll)==42);

  assert(int_of(0X2LL + 0D40LL)==42);

  assert(int_of(0X2u + 0D40u)==42);

  assert(int_of(0X2ut + 0D40ut)==42);

  assert(int_of(0X2uT + 0D40uT)==42);

  assert(int_of(0X2us + 0D40us)==42);

  assert(int_of(0X2uS + 0D40uS)==42);

  assert(int_of(0X2ui + 0D40ui)==42);

  assert(int_of(0X2uI + 0D40uI)==42);

  assert(int_of(0X2ul + 0D40ul)==42);

  assert(int_of(0X2uL + 0D40uL)==42);

  assert(int_of(0X2uv + 0D40uv)==42);

  assert(int_of(0X2uV + 0D40uV)==42);

  assert(int_of(0X2ull + 0D40ull)==42);

  assert(int_of(0X2uLL + 0D40uLL)==42);

  assert(int_of(0X2Ut + 0D40Ut)==42);

  assert(int_of(0X2UT + 0D40UT)==42);

  assert(int_of(0X2Us + 0D40Us)==42);

  assert(int_of(0X2US + 0D40US)==42);

  assert(int_of(0X2Ui + 0D40Ui)==42);

  assert(int_of(0X2UI + 0D40UI)==42);

  assert(int_of(0X2Ul + 0D40Ul)==42);

  assert(int_of(0X2UL + 0D40UL)==42);

  assert(int_of(0X2Uv + 0D40Uv)==42);

  assert(int_of(0X2UV + 0D40UV)==42);

  assert(int_of(0X2Ull + 0D40Ull)==42);

  assert(int_of(0X2ULL + 0D40ULL)==42);

  assert(int_of(0X2U + 0D40U)==42);

  assert(int_of(0X2tu + 0D40tu)==42);

  assert(int_of(0X2Tu + 0D40Tu)==42);

  assert(int_of(0X2su + 0D40su)==42);

  assert(int_of(0X2Su + 0D40Su)==42);

  assert(int_of(0X2iu + 0D40iu)==42);

  assert(int_of(0X2Iu + 0D40Iu)==42);

  assert(int_of(0X2lu + 0D40lu)==42);

  assert(int_of(0X2Lu + 0D40Lu)==42);

  assert(int_of(0X2vu + 0D40vu)==42);

  assert(int_of(0X2Vu + 0D40Vu)==42);

  assert(int_of(0X2llu + 0D40llu)==42);

  assert(int_of(0X2LLu + 0D40LLu)==42);

  assert(int_of(0X2tU + 0D40tU)==42);

  assert(int_of(0X2TU + 0D40TU)==42);

  assert(int_of(0X2sU + 0D40sU)==42);

  assert(int_of(0X2SU + 0D40SU)==42);

  assert(int_of(0X2iU + 0D40iU)==42);

  assert(int_of(0X2IU + 0D40IU)==42);

  assert(int_of(0X2lU + 0D40lU)==42);

  assert(int_of(0X2LU + 0D40LU)==42);

  assert(int_of(0X2vU + 0D40vU)==42);

  assert(int_of(0X2VU + 0D40VU)==42);

  assert(int_of(0X2llU + 0D40llU)==42);

  assert(int_of(0X2LLU + 0D40LLU)==42);

  assert(int_of(0X2i8 + 0D40i8)==42);

  assert(int_of(0X2i16 + 0D40i16)==42);

  assert(int_of(0X2i32 + 0D40i32)==42);

  assert(int_of(0X2i64 + 0D40i64)==42);

  assert(int_of(0X2u8 + 0D40u8)==42);

  assert(int_of(0X2u16 + 0D40u16)==42);

  assert(int_of(0X2u32 + 0D40u32)==42);

  assert(int_of(0X2u64 + 0D40u64)==42);

}

tst_0X20D40;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0X20x28 () {

  assert(int_of(0X2 + 0x28)==42);

  assert(int_of(0X2t + 0x28t)==42);

  assert(int_of(0X2T + 0x28T)==42);

  assert(int_of(0X2s + 0x28s)==42);

  assert(int_of(0X2S + 0x28S)==42);

  assert(int_of(0X2i + 0x28i)==42);

  assert(int_of(0X2I + 0x28I)==42);

  assert(int_of(0X2l + 0x28l)==42);

  assert(int_of(0X2L + 0x28L)==42);

  assert(int_of(0X2v + 0x28v)==42);

  assert(int_of(0X2V + 0x28V)==42);

  assert(int_of(0X2ll + 0x28ll)==42);

  assert(int_of(0X2LL + 0x28LL)==42);

  assert(int_of(0X2u + 0x28u)==42);

  assert(int_of(0X2ut + 0x28ut)==42);

  assert(int_of(0X2uT + 0x28uT)==42);

  assert(int_of(0X2us + 0x28us)==42);

  assert(int_of(0X2uS + 0x28uS)==42);

  assert(int_of(0X2ui + 0x28ui)==42);

  assert(int_of(0X2uI + 0x28uI)==42);

  assert(int_of(0X2ul + 0x28ul)==42);

  assert(int_of(0X2uL + 0x28uL)==42);

  assert(int_of(0X2uv + 0x28uv)==42);

  assert(int_of(0X2uV + 0x28uV)==42);

  assert(int_of(0X2ull + 0x28ull)==42);

  assert(int_of(0X2uLL + 0x28uLL)==42);

  assert(int_of(0X2Ut + 0x28Ut)==42);

  assert(int_of(0X2UT + 0x28UT)==42);

  assert(int_of(0X2Us + 0x28Us)==42);

  assert(int_of(0X2US + 0x28US)==42);

  assert(int_of(0X2Ui + 0x28Ui)==42);

  assert(int_of(0X2UI + 0x28UI)==42);

  assert(int_of(0X2Ul + 0x28Ul)==42);

  assert(int_of(0X2UL + 0x28UL)==42);

  assert(int_of(0X2Uv + 0x28Uv)==42);

  assert(int_of(0X2UV + 0x28UV)==42);

  assert(int_of(0X2Ull + 0x28Ull)==42);

  assert(int_of(0X2ULL + 0x28ULL)==42);

  assert(int_of(0X2U + 0x28U)==42);

  assert(int_of(0X2tu + 0x28tu)==42);

  assert(int_of(0X2Tu + 0x28Tu)==42);

  assert(int_of(0X2su + 0x28su)==42);

  assert(int_of(0X2Su + 0x28Su)==42);

  assert(int_of(0X2iu + 0x28iu)==42);

  assert(int_of(0X2Iu + 0x28Iu)==42);

  assert(int_of(0X2lu + 0x28lu)==42);

  assert(int_of(0X2Lu + 0x28Lu)==42);

  assert(int_of(0X2vu + 0x28vu)==42);

  assert(int_of(0X2Vu + 0x28Vu)==42);

  assert(int_of(0X2llu + 0x28llu)==42);

  assert(int_of(0X2LLu + 0x28LLu)==42);

  assert(int_of(0X2tU + 0x28tU)==42);

  assert(int_of(0X2TU + 0x28TU)==42);

  assert(int_of(0X2sU + 0x28sU)==42);

  assert(int_of(0X2SU + 0x28SU)==42);

  assert(int_of(0X2iU + 0x28iU)==42);

  assert(int_of(0X2IU + 0x28IU)==42);

  assert(int_of(0X2lU + 0x28lU)==42);

  assert(int_of(0X2LU + 0x28LU)==42);

  assert(int_of(0X2vU + 0x28vU)==42);

  assert(int_of(0X2VU + 0x28VU)==42);

  assert(int_of(0X2llU + 0x28llU)==42);

  assert(int_of(0X2LLU + 0x28LLU)==42);

  assert(int_of(0X2i8 + 0x28i8)==42);

  assert(int_of(0X2i16 + 0x28i16)==42);

  assert(int_of(0X2i32 + 0x28i32)==42);

  assert(int_of(0X2i64 + 0x28i64)==42);

  assert(int_of(0X2u8 + 0x28u8)==42);

  assert(int_of(0X2u16 + 0x28u16)==42);

  assert(int_of(0X2u32 + 0x28u32)==42);

  assert(int_of(0X2u64 + 0x28u64)==42);

}

tst_0X20x28;

//noinline is needed to stop gcc dropping dead

noinline proc tst_0X20X28 () {

  assert(int_of(0X2 + 0X28)==42);

  assert(int_of(0X2t + 0X28t)==42);

  assert(int_of(0X2T + 0X28T)==42);

  assert(int_of(0X2s + 0X28s)==42);

  assert(int_of(0X2S + 0X28S)==42);

  assert(int_of(0X2i + 0X28i)==42);

  assert(int_of(0X2I + 0X28I)==42);

  assert(int_of(0X2l + 0X28l)==42);

  assert(int_of(0X2L + 0X28L)==42);

  assert(int_of(0X2v + 0X28v)==42);

  assert(int_of(0X2V + 0X28V)==42);

  assert(int_of(0X2ll + 0X28ll)==42);

  assert(int_of(0X2LL + 0X28LL)==42);

  assert(int_of(0X2u + 0X28u)==42);

  assert(int_of(0X2ut + 0X28ut)==42);

  assert(int_of(0X2uT + 0X28uT)==42);

  assert(int_of(0X2us + 0X28us)==42);

  assert(int_of(0X2uS + 0X28uS)==42);

  assert(int_of(0X2ui + 0X28ui)==42);

  assert(int_of(0X2uI + 0X28uI)==42);

  assert(int_of(0X2ul + 0X28ul)==42);

  assert(int_of(0X2uL + 0X28uL)==42);

  assert(int_of(0X2uv + 0X28uv)==42);

  assert(int_of(0X2uV + 0X28uV)==42);

  assert(int_of(0X2ull + 0X28ull)==42);

  assert(int_of(0X2uLL + 0X28uLL)==42);

  assert(int_of(0X2Ut + 0X28Ut)==42);

  assert(int_of(0X2UT + 0X28UT)==42);

  assert(int_of(0X2Us + 0X28Us)==42);

  assert(int_of(0X2US + 0X28US)==42);

  assert(int_of(0X2Ui + 0X28Ui)==42);

  assert(int_of(0X2UI + 0X28UI)==42);

  assert(int_of(0X2Ul + 0X28Ul)==42);

  assert(int_of(0X2UL + 0X28UL)==42);

  assert(int_of(0X2Uv + 0X28Uv)==42);

  assert(int_of(0X2UV + 0X28UV)==42);

  assert(int_of(0X2Ull + 0X28Ull)==42);

  assert(int_of(0X2ULL + 0X28ULL)==42);

  assert(int_of(0X2U + 0X28U)==42);

  assert(int_of(0X2tu + 0X28tu)==42);

  assert(int_of(0X2Tu + 0X28Tu)==42);

  assert(int_of(0X2su + 0X28su)==42);

  assert(int_of(0X2Su + 0X28Su)==42);

  assert(int_of(0X2iu + 0X28iu)==42);

  assert(int_of(0X2Iu + 0X28Iu)==42);

  assert(int_of(0X2lu + 0X28lu)==42);

  assert(int_of(0X2Lu + 0X28Lu)==42);

  assert(int_of(0X2vu + 0X28vu)==42);

  assert(int_of(0X2Vu + 0X28Vu)==42);

  assert(int_of(0X2llu + 0X28llu)==42);

  assert(int_of(0X2LLu + 0X28LLu)==42);

  assert(int_of(0X2tU + 0X28tU)==42);

  assert(int_of(0X2TU + 0X28TU)==42);

  assert(int_of(0X2sU + 0X28sU)==42);

  assert(int_of(0X2SU + 0X28SU)==42);

  assert(int_of(0X2iU + 0X28iU)==42);

  assert(int_of(0X2IU + 0X28IU)==42);

  assert(int_of(0X2lU + 0X28lU)==42);

  assert(int_of(0X2LU + 0X28LU)==42);

  assert(int_of(0X2vU + 0X28vU)==42);

  assert(int_of(0X2VU + 0X28VU)==42);

  assert(int_of(0X2llU + 0X28llU)==42);

  assert(int_of(0X2LLU + 0X28LLU)==42);

  assert(int_of(0X2i8 + 0X28i8)==42);

  assert(int_of(0X2i16 + 0X28i16)==42);

  assert(int_of(0X2i32 + 0X28i32)==42);

  assert(int_of(0X2i64 + 0X28i64)==42);

  assert(int_of(0X2u8 + 0X28u8)==42);

  assert(int_of(0X2u16 + 0X28u16)==42);

  assert(int_of(0X2u32 + 0X28u32)==42);

  assert(int_of(0X2u64 + 0X28u64)==42);

}

tst_0X20X28;

print "test complete"; endl;

@expect
test complete
@
