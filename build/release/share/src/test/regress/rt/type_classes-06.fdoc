
@h1 type_classes-06.flx
@felix
open class X[T] {
  union A = V of varray[T];
  proc p(x:A) {
    match x with | V v => println v; endmatch;
  }

  fun doubler (x:A): X[T*T]::A => match x with | V v =>
    V (map (fun (a:T)=>a,a) v)
  ;

  struct B { b:T; };
  proc p(x:B) { println x.b; }
  typedef r = (h:int, g:T);
  proc p (x:r) { println x.g; }
}
val x = varray(1,2,3);
println x;
val u = V x;
p u;

p $ doubler u;

val b = B(42);
p b;

val e = (h=1,g="Hello");
p e;
val e2 = (h=1,g="Hello",k="dont care");
p (e2:>>X[string]::r);


@expect
varray(1, 2, 3)
varray(1, 2, 3)
varray((1, 1), (2, 2), (3, 3))
42
Hello
Hello
@
