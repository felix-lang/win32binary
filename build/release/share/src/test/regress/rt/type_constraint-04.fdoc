
@h1 type_constraint-04.flx
@felix
//Check type constraints
open C_hack;
header '#include <iostream>';
proc pr[t]:t="std::cout<<$1<<std::endl;";

var x = 1;
var px:&int = &x;

module X {
  proc h[t,u=&t]: u  * t = '*$1=$2; ::std::cout <<*$1<<","<<$2<<::std::endl;';
  proc chk() => h(px,1);

  // address and dereference operators where
  // constraint is required to deduce type variable
  // (artificial example, since we could write signatures
  // directly in terms of t)
  fun adr[t,u=&t]: t->u = "&$1";
  fun drf[t,u=&t]:  u -> t = "*$1";
  //h(px,1.1); // should fail
}

open X[int];
open C_hack;
chk();
h(px,1);
//h(px,1.1); // should fail

pr$ drf px;
pr$ drf$ adr x;
pr$ X::drf px;
pr$ X::drf$ X::adr x;

fun ff[t,k where t==k ]: t * k -> t = "$1+$2";

pr$ ff$ 1,2;
//pr$ ff$ 1,2.0; // should fail

@expect
1,1
1,1
1
1
1
1
3
@
