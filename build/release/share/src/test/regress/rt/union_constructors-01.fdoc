
@h1 union_constructors-01.flx
@felix
// named variant type constructor with one element as function
union U = | A | B of int;
proc print (u:U) {
  print "union U ";
  print$ match u with | #A => "A" | B b => f"B %d" b endmatch;
}
fun exec (p:int -> U, x:int) => p x;

val u1 = B 1; print u1; endl;

val u2 = exec (B of (int), 2); print u2; endl;
val u3 = exec (B,          3); print u3; endl;

val u4 = (B of (int)) 4; print u4; endl;
val u5 = (B)          5; print u5; endl;

val f1 = B of (int); val u6 = f1 6; print u6; endl;
val f2 = B;          val u7 = f2 7; print u7; endl;

print (exec (B of (int), 8)); endl;
print (exec (B,          9)); endl;

@expect
union U B 1
union U B 2
union U B 3
union U B 4
union U B 5
union U B 6
union U B 7
union U B 8
union U B 9
@
