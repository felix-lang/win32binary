
@h1 stream-01.flx
@felix
// iterator filter

var f = gen ( var g : 1 -> opt[int] ) () : opt[int] = {
   match x when x > 10 in g do yield Some x; done
   return None[int];
};


syntax SSTREAM {
  spattern := "?" sinteger ":" "pattern" =># "`(PARSER_ARGUMENT ,_2)";
}

syntax STREAM {
  open syntax SSTREAM;
  x[let_pri] := "stream-filter" "[" sexpr "]" spattern "=>" sexpr =># 
  (
    gen ( var g : 1 -> opt[?3] ) () : opt[?3] = 
    {
      match ?5:pattern in g do yield Some ?7; done
      return None[?3];
    }
  );
};
open syntax STREAM;

var x = list (99,88,1,5,10,15,2,6,11,16);
var y = list$ f x.iterator;

println$ y;

var z = list$ (stream-filter [int] x when x > 10 => x ) x.iterator;
println$ z;


var z2 = 
  list $ 
  (stream-filter [int] x when x > 10 => x ) $ 
  (stream-filter [int] x when x < 90 => x ) $ 
  iterator $
  x
;
println$ z2;

x 
  . iterator
  . (stream-filter [int] x when x < 90 => x ) 
  . (stream-filter [int] x when x > 10 => x )  
  . list
  . println
;


@expect
list(99, 88, 15, 11, 16)
list(99, 88, 15, 11, 16)
list(88, 15, 11, 16)
list(88, 15, 11, 16)
@
