
@h1 polymorphism-02.flx
@felix
//Check polymorphism
open List;

fun snd[A,B] (x:A,y:B)=>y;
fun fst[A,B](x:A,y:B)=>x;

fun index[t] (l:list[t]) = {
  fun f(il:int * list [int * t]) (e: t) =>
    match il with
    | i,l => i+1, Cons ((i, e),l)
    endmatch
  ;
  return
    rev (snd ( fold_left
      f of (int * list[int *t])
      (0, Empty[int * t])
      l
    ))
  ;
}

var x = Empty[int];
x = Cons(11,x);
x = Cons(22,x);
x = Cons(33,x);
x = Cons(44,x);
x = Cons(55,x);
x = Cons(66,x);

val z = index x;
iter
  (proc (x:int,y:int)
    {
      print x; print " -> "; print y; endl;
    }
  )
  z
;

@expect
0 -> 66
1 -> 55
2 -> 44
3 -> 33
4 -> 22
5 -> 11
@
