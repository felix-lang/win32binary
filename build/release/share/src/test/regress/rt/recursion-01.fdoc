
@h1 recursion-01.flx
@felix
//Check closures
//Check recursion
//Check closures
//Check recursion

// test some recursion
fun fact(a:int): int =
{
  fun f (a:int, p:int) : int = {
    return
      if a>1 then f(a - 1, p*a) else p endif;
  }
  return f(a,1);
}

// test function variable
val factc : int -> int = fact of (int);
assert (fact 6 == 6 * 5 * 4 * 3 * 2);
assert (factc 6 == 6 * 5 * 4 * 3 * 2);

// test procedure variable
proc printer (a:int) { print a; }
val printv = printer of (int);
printer 10;
print "\n";
printv 10;

// test structure constructor function
struct X = {
  x : int;
  y : int;
}

proc printX (x:X) {
  print "x=";
  print x.x;
  print ", y=";
  print x.y;
  print "\n";
}

val x = X(1,2);
printX x;

// test special procedure overloading
proc t1()
{
  proc print: int = 'printf("int=%d",$1);';
  print "Not hidden: ";
  print 1;
  print " print:int hides outer\n";
}
t1();

module A
{
  proc print:int='printf("module A print int=%d",$1);';
  proc chk() {
    print 1;
    print "\n";
  }
}

A::chk();
@expect
10
10x=1, y=2
Not hidden: int=1 print:int hides outer
module A print int=1
@
