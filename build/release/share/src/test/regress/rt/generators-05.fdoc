
@h1 generators-05.flx
@felix
//Check generators

union tree = TEmpty | Leaf of int | Node of tree * tree;

var example =
  Node
  (
    Node
    (
      Leaf 1,
      Node
      (
        Leaf 2,
        Leaf 3
      )
    )
    ,
    Node
    (
      Leaf 4,
      Leaf 5
    )
  )
;

fun sum: tree->int =
  | Leaf x => x
  | Node (l,r) => sum l + sum r
  | #TEmpty => 0
;

print$ sum example; endl;

fun accumulate(it: 1-> int):int=
{
  var x = 0;
  var v = it();
  while v != -1 do
    x += v;
    v = it();
  done;
  return x;
}

gen visitor(x:tree) () : int =
{
    match x with
    | Leaf a => print "visiting leaf "; print a; endl; yield a; return -1; 
    | Node (aa,bb) =>
        print "visiting node: left\n";
        var it = visitor(aa);
        var v = it();
        while v != -1 do
          yield v;
          v = it();
        done;
        print "visiting node: right\n";
        it = visitor(bb);
        v = it();
        while v != -1 do
          yield v;
          v = it();
        done;
        return -1;
    | #TEmpty => return -1; 
    endmatch
  ;
}

var it = visitor(example);
var res = accumulate(it);
print$ res; endl;

@expect
15
visiting node: left
visiting node: left
visiting leaf 1
visiting node: right
visiting node: left
visiting leaf 2
visiting node: right
visiting leaf 3
visiting node: right
visiting node: left
visiting leaf 4
visiting node: right
visiting leaf 5
15
@
