# 1 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
 
open Dypgen_parser
open Lexing

let ($) = Buffer.add_string
let ocaml_code_buffer = Buffer.create 100000
let string_buf = Buffer.create 100
let in_string = ref false
let comment_count = ref 0
let look_for_type = ref false
let parser_def = ref false (* this flag is set to true once %% or %parser has been read *)

let in_pattern = ref false

let start_ocaml_type = ref dummy_pos
let start_ocaml_code = ref dummy_pos
let start_curlyb = ref []
(*let start_bracket = ref []*)
let start_pattern = ref dummy_pos
let start_dypgen_comment = ref []
let start_ocaml_comment = ref []
let start_string = ref dummy_pos

let update_loc lexbuf file line absolute chars =
  let pos = lexbuf.lex_curr_p in
  let new_file = match file with
                 | None -> pos.pos_fname
                 | Some s -> s
  in
  lexbuf.lex_curr_p <- { pos with
    pos_fname = new_file;
    pos_lnum = if absolute then line else pos.pos_lnum + line;
    pos_bol = pos.pos_cnum - chars;
  }

let decimal_code  c d u =
  100 * (Char.code c - 48) + 10 * (Char.code d - 48) + (Char.code u - 48)

let char_for_hexadecimal_code d u =
  let d1 = Char.code d in
  let val1 = if d1 >= 97 then d1 - 87
             else if d1 >= 65 then d1 - 55
             else d1 - 48
  in
  let d2 = Char.code u in
  let val2 = if d2 >= 97 then d2 - 87
             else if d2 >= 65 then d2 - 55
             else d2 - 48
  in
  Char.chr (val1 * 16 + val2)

let char_for_backslash = function
    'n' -> '\n'
  | 't' -> '\t'
  | 'b' -> '\b'
  | 'r' -> '\r'
  | c   -> c

let string_of_char c = let x = " " in x.[0] <- c; x


# 64 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\205\255\116\000\207\255\208\255\209\255\006\000\006\000\
    \212\255\213\255\214\255\004\000\220\255\221\255\222\255\003\000\
    \224\255\225\255\226\255\000\000\228\255\229\255\230\255\231\255\
    \118\000\218\000\170\001\122\002\242\000\018\000\001\000\255\255\
    \237\255\029\000\031\000\020\000\022\000\023\000\034\000\035\000\
    \021\000\028\000\026\000\033\000\040\000\033\000\253\255\043\000\
    \243\255\048\000\032\000\031\000\252\255\043\000\055\000\037\000\
    \049\000\044\000\046\000\251\255\043\000\058\000\047\000\066\000\
    \054\000\049\000\049\000\250\255\062\000\249\255\064\000\248\255\
    \074\000\078\000\019\000\241\255\071\000\068\000\068\000\071\000\
    \069\000\088\000\072\000\078\000\076\000\246\255\077\000\245\255\
    \105\000\152\000\142\000\158\000\147\000\153\000\158\000\154\000\
    \168\000\168\000\244\255\157\000\157\000\169\000\164\000\166\000\
    \242\255\208\000\196\000\239\255\197\000\197\000\213\000\228\000\
    \238\255\074\003\026\004\232\255\233\255\078\001\219\255\006\000\
    \223\255\248\004\014\000\218\255\245\001\063\001\015\000\217\255\
    \073\001\016\000\216\255\197\002\017\000\215\255\211\255\210\255\
    \188\003\004\000\206\255\079\001\037\002\051\002\093\001\006\000\
    \206\255\197\003\247\255\248\255\249\255\017\005\255\255\250\255\
    \160\003\093\001\253\255\099\001\040\002\046\002\252\255\101\004\
    \251\255\007\003\252\255\007\000\253\255\010\000\050\000\255\255\
    \254\255\019\005\243\255\009\000\244\255\050\001\051\001\247\255\
    \248\255\227\001\229\002\254\255\255\255\251\255\252\255\198\003\
    \249\255\250\255\246\255\245\255\149\004\252\255\010\000\253\255\
    \254\255\035\001\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\028\000\255\255\255\255\255\255\255\255\
    \021\000\020\000\019\000\019\000\255\255\001\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\008\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\019\000\015\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\049\000\255\255\255\255\255\255\255\255\255\255\049\000\
    \255\255\255\255\255\255\255\255\255\255\008\000\255\255\255\255\
    \005\000\005\000\255\255\001\000\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\002\000\255\255\003\000\003\000\255\255\
    \255\255\255\255\255\255\011\000\255\255\012\000\012\000\255\255\
    \255\255\012\000\012\000\255\255\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\255\255\
    \255\255\003\000\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\122\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\000\000\255\255\000\000\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\000\000\000\000\
    \139\000\255\255\000\000\139\000\140\000\139\000\142\000\255\255\
    \000\000\146\000\000\000\000\000\000\000\151\000\000\000\000\000\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\255\255\
    \000\000\162\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\170\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\189\000\000\000\255\255\000\000\
    \000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\031\000\031\000\029\000\030\000\138\000\007\000\
    \144\000\164\000\007\000\172\000\191\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\029\000\075\000\000\000\029\000\075\000\
    \029\000\004\000\010\000\002\000\000\000\028\000\007\000\011\000\
    \024\000\023\000\012\000\013\000\018\000\019\000\015\000\006\000\
    \135\000\119\000\029\000\075\000\120\000\123\000\127\000\130\000\
    \133\000\168\000\016\000\017\000\009\000\003\000\118\000\014\000\
    \007\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\022\000\167\000\021\000\020\000\026\000\
    \121\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\027\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\008\000\005\000\002\000\108\000\117\000\
    \100\000\134\000\117\000\088\000\099\000\086\000\076\000\060\000\
    \053\000\049\000\047\000\043\000\044\000\045\000\061\000\046\000\
    \048\000\050\000\051\000\052\000\002\000\042\000\117\000\054\000\
    \055\000\056\000\057\000\058\000\059\000\072\000\070\000\068\000\
    \066\000\067\000\069\000\063\000\136\000\136\000\136\000\136\000\
    \136\000\136\000\136\000\136\000\136\000\136\000\062\000\064\000\
    \071\000\073\000\116\000\074\000\115\000\077\000\065\000\078\000\
    \079\000\080\000\081\000\082\000\083\000\084\000\085\000\087\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\089\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\090\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \001\000\025\000\091\000\092\000\255\255\093\000\094\000\095\000\
    \096\000\097\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\098\000\105\000\101\000\032\000\
    \102\000\103\000\104\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\106\000\107\000\109\000\
    \110\000\025\000\111\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\037\000\112\000\117\000\
    \036\000\138\000\117\000\187\000\137\000\186\000\034\000\038\000\
    \035\000\194\000\033\000\000\000\039\000\040\000\041\000\144\000\
    \000\000\000\000\143\000\000\000\156\000\156\000\117\000\128\000\
    \128\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\129\000\129\000\129\000\129\000\129\000\129\000\129\000\
    \129\000\129\000\129\000\156\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\116\000\000\000\115\000\157\000\157\000\157\000\
    \157\000\157\000\157\000\157\000\157\000\157\000\157\000\000\000\
    \000\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\026\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\184\000\000\000\000\000\
    \000\000\026\000\000\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\138\000\
    \000\000\156\000\137\000\000\000\000\000\000\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\141\000\138\000\000\000\185\000\
    \137\000\000\000\000\000\000\000\000\000\000\000\000\000\142\000\
    \156\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\141\000\000\000\140\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\000\000\255\255\158\000\158\000\
    \158\000\158\000\158\000\158\000\158\000\158\000\158\000\158\000\
    \000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
    \000\000\026\000\000\000\026\000\026\000\026\000\026\000\113\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\132\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\132\000\132\000\132\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\132\000\132\000\
    \132\000\132\000\132\000\132\000\000\000\000\000\000\000\000\000\
    \000\000\164\000\000\000\000\000\163\000\183\000\183\000\183\000\
    \183\000\183\000\183\000\183\000\183\000\183\000\183\000\000\000\
    \000\000\182\000\000\000\181\000\000\000\255\255\132\000\132\000\
    \132\000\132\000\132\000\132\000\000\000\000\000\000\000\000\000\
    \000\000\165\000\000\000\255\255\000\000\000\000\166\000\000\000\
    \000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
    \000\000\026\000\000\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\114\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\141\000\138\000\000\000\
    \000\000\137\000\000\000\000\000\000\000\000\000\000\000\147\000\
    \159\000\159\000\159\000\159\000\159\000\159\000\159\000\159\000\
    \159\000\159\000\000\000\000\000\141\000\000\000\140\000\000\000\
    \000\000\159\000\159\000\159\000\159\000\159\000\159\000\150\000\
    \000\000\000\000\000\000\000\000\136\000\136\000\136\000\136\000\
    \136\000\136\000\136\000\136\000\136\000\136\000\183\000\183\000\
    \183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
    \000\000\159\000\159\000\159\000\159\000\159\000\159\000\255\255\
    \000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\149\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\
    \000\000\026\000\000\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\160\000\160\000\160\000\
    \160\000\160\000\160\000\160\000\160\000\160\000\160\000\191\000\
    \000\000\000\000\190\000\000\000\000\000\000\000\160\000\160\000\
    \160\000\160\000\160\000\160\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\193\000\000\000\000\000\148\000\160\000\160\000\
    \160\000\160\000\160\000\160\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\126\000\156\000\000\000\172\000\155\000\126\000\
    \171\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \125\000\125\000\000\000\154\000\000\000\176\000\000\000\178\000\
    \154\000\000\000\000\000\174\000\000\000\173\000\000\000\000\000\
    \000\000\153\000\153\000\153\000\153\000\153\000\153\000\153\000\
    \153\000\153\000\153\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\179\000\000\000\000\000\126\000\000\000\000\000\000\000\
    \000\000\000\000\126\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\126\000\000\000\
    \000\000\000\000\126\000\000\000\126\000\154\000\000\000\177\000\
    \124\000\000\000\000\000\154\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\154\000\
    \000\000\000\000\000\000\154\000\000\000\154\000\000\000\000\000\
    \000\000\152\000\000\000\000\000\000\000\000\000\175\000\000\000\
    \180\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\255\255";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\030\000\000\000\000\000\137\000\007\000\
    \143\000\163\000\007\000\171\000\190\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\029\000\074\000\255\255\029\000\074\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\007\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \006\000\015\000\029\000\074\000\119\000\122\000\126\000\129\000\
    \132\000\165\000\000\000\000\000\000\000\000\000\019\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\166\000\000\000\000\000\000\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\002\000\033\000\024\000\
    \034\000\007\000\024\000\035\000\034\000\036\000\037\000\038\000\
    \039\000\040\000\042\000\041\000\043\000\044\000\038\000\045\000\
    \047\000\049\000\050\000\051\000\002\000\041\000\024\000\053\000\
    \054\000\055\000\056\000\057\000\058\000\060\000\062\000\064\000\
    \065\000\066\000\068\000\061\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\061\000\063\000\
    \070\000\072\000\024\000\073\000\024\000\076\000\063\000\077\000\
    \078\000\079\000\080\000\081\000\082\000\083\000\084\000\086\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\088\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\089\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\090\000\091\000\011\000\092\000\093\000\094\000\
    \095\000\096\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\097\000\099\000\100\000\028\000\
    \101\000\102\000\103\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\105\000\106\000\108\000\
    \109\000\025\000\110\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\028\000\111\000\117\000\
    \028\000\139\000\117\000\173\000\139\000\174\000\028\000\028\000\
    \028\000\193\000\028\000\255\255\028\000\028\000\028\000\142\000\
    \255\255\255\255\142\000\255\255\155\000\155\000\117\000\125\000\
    \125\000\125\000\125\000\125\000\125\000\125\000\125\000\125\000\
    \125\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
    \128\000\128\000\128\000\155\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\117\000\255\255\117\000\153\000\153\000\153\000\
    \153\000\153\000\153\000\153\000\153\000\153\000\153\000\255\255\
    \255\255\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\026\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\177\000\255\255\255\255\
    \255\255\026\000\255\255\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\124\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\124\000\124\000\124\000\140\000\
    \255\255\156\000\140\000\255\255\255\255\255\255\124\000\124\000\
    \124\000\124\000\124\000\124\000\141\000\141\000\255\255\177\000\
    \141\000\255\255\255\255\255\255\255\255\255\255\255\255\140\000\
    \156\000\255\255\255\255\255\255\255\255\255\255\255\255\139\000\
    \255\255\255\255\255\255\141\000\255\255\141\000\124\000\124\000\
    \124\000\124\000\124\000\124\000\255\255\142\000\157\000\157\000\
    \157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
    \255\255\255\255\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\255\255\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\027\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\255\255\255\255\255\255\
    \255\255\027\000\255\255\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\131\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\131\000\131\000\131\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\131\000\131\000\
    \131\000\131\000\131\000\131\000\255\255\255\255\255\255\255\255\
    \255\255\161\000\255\255\255\255\161\000\178\000\178\000\178\000\
    \178\000\178\000\178\000\178\000\178\000\178\000\178\000\255\255\
    \255\255\178\000\255\255\178\000\255\255\140\000\131\000\131\000\
    \131\000\131\000\131\000\131\000\255\255\255\255\255\255\255\255\
    \255\255\161\000\255\255\141\000\255\255\255\255\161\000\255\255\
    \255\255\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\113\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\255\255\255\255\255\255\
    \255\255\113\000\255\255\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\136\000\136\000\255\255\
    \255\255\136\000\255\255\255\255\255\255\255\255\255\255\145\000\
    \152\000\152\000\152\000\152\000\152\000\152\000\152\000\152\000\
    \152\000\152\000\255\255\255\255\136\000\255\255\136\000\255\255\
    \255\255\152\000\152\000\152\000\152\000\152\000\152\000\145\000\
    \255\255\255\255\255\255\255\255\136\000\136\000\136\000\136\000\
    \136\000\136\000\136\000\136\000\136\000\136\000\183\000\183\000\
    \183\000\183\000\183\000\183\000\183\000\183\000\183\000\183\000\
    \255\255\152\000\152\000\152\000\152\000\152\000\152\000\161\000\
    \255\255\255\255\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\145\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\114\000\113\000\113\000\113\000\113\000\113\000\113\000\
    \113\000\113\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\255\255\255\255\255\255\
    \255\255\114\000\255\255\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\159\000\159\000\159\000\
    \159\000\159\000\159\000\159\000\159\000\159\000\159\000\188\000\
    \255\255\255\255\188\000\255\255\255\255\255\255\159\000\159\000\
    \159\000\159\000\159\000\159\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\136\000\255\255\255\255\255\255\
    \255\255\255\255\188\000\255\255\255\255\145\000\159\000\159\000\
    \159\000\159\000\159\000\159\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\188\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\255\255\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\255\255\114\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\121\000\149\000\255\255\169\000\149\000\121\000\
    \169\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \121\000\121\000\121\000\121\000\121\000\121\000\121\000\121\000\
    \121\000\121\000\255\255\149\000\255\255\169\000\255\255\169\000\
    \149\000\255\255\255\255\169\000\255\255\169\000\255\255\255\255\
    \255\255\149\000\149\000\149\000\149\000\149\000\149\000\149\000\
    \149\000\149\000\149\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\169\000\255\255\255\255\121\000\255\255\255\255\255\255\
    \255\255\255\255\121\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\121\000\255\255\
    \255\255\255\255\121\000\255\255\121\000\149\000\255\255\169\000\
    \121\000\255\255\255\255\149\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\149\000\
    \255\255\255\255\255\255\149\000\255\255\149\000\255\255\255\255\
    \255\255\149\000\255\255\255\255\255\255\255\255\169\000\255\255\
    \169\000\255\255\255\255\255\255\255\255\188\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\149\000\255\255\169\000";
  Lexing.lex_base_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\012\000\000\000\000\000\002\000\000\000\000\000\
    \027\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_backtrk_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\000\000\000\000\000\000\000\000\000\000\027\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\039\000\039\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_default_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\000\000\036\000\036\000\000\000\036\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\001\000\022\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\002\000\140\000\149\000\155\000\140\000\149\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \002\000\255\255\140\000\000\000\141\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\136\000\255\255\255\255\255\255\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\136\000\136\000\136\000\136\000\136\000\136\000\
    \136\000\136\000\136\000\136\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \140\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_code = 
   "\255\004\255\255\005\255\255\007\255\006\255\255\003\255\000\004\
    \001\005\255\007\255\255\006\255\007\255\255\000\004\001\005\003\
    \006\002\007\255\001\255\255\000\001\255";
}

let rec token lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 8 (-1) ;   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 74 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( update_loc lexbuf None 1 false 0;
        token lexbuf
      )
# 699 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 1 ->
# 78 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( token lexbuf )
# 704 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 2 ->
# 79 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
             ( look_for_type:=true; KWD_TOKEN )
# 709 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 3 ->
# 80 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
             ( look_for_type:=true; KWD_START )
# 714 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 4 ->
# 81 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                ( look_for_type:=false; KWD_RELATION )
# 719 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 5 ->
# 82 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
              ( KWD_MLITOP )
# 724 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 6 ->
# 83 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
              ( KWD_MLIMID )
# 729 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 7 ->
# 84 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
             ( KWD_MLTOP )
# 734 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 8 ->
# 85 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
           ( KWD_MLI )
# 739 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 9 ->
# 86 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                   ( KWD_CONSTRUCTOR )
# 744 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 10 ->
# 87 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
           ( KWD_FOR )
# 749 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 11 ->
# 88 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                    ( KWD_NON_TERMINAL )
# 754 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 12 ->
# 89 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
            ( KWD_TYPE )
# 759 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 13 ->
# 90 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
              ( KWD_LAYOUT )
# 764 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 14 ->
# 91 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                   ( KWD_MERGE )
# 769 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 15 ->
# 92 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
          ( LET )
# 774 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 16 ->
# 93 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
             ( KWD_LEXER )
# 779 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 17 ->
# 94 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
              ( look_for_type:=false; parser_def := true; KWD_PARSER )
# 784 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 18 ->
# 95 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( look_for_type:=false; parser_def := true; PERCENTPERCENT )
# 789 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 19 ->
# 97 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( let pos = lexeme_start_p lexbuf in
        let line = pos.pos_lnum in
        let col1 = pos.pos_cnum - pos.pos_bol in
        let col2 = lexbuf.lex_curr_p.pos_cnum - lexbuf.lex_curr_p.pos_bol in
        let fname = pos.pos_fname in
        LIDENT((Lexing.lexeme lexbuf),(line,col1,col2,fname)) )
# 799 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 20 ->
# 104 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( let pos = lexeme_start_p lexbuf in
        let line = pos.pos_lnum in
        let col1 = pos.pos_cnum - pos.pos_bol in
        let col2 = lexbuf.lex_curr_p.pos_cnum - lexbuf.lex_curr_p.pos_bol in
        let fname = pos.pos_fname in
        UIDENT((Lexing.lexeme lexbuf),(line,col1,col2,fname)) )
# 809 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 21 ->
# 110 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( LPAREN )
# 814 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 22 ->
# 111 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                     ( LPARENLESS )
# 819 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 23 ->
# 112 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                     ( LPARENGREATER )
# 824 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 24 ->
# 113 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( RPAREN )
# 829 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 25 ->
# 115 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( (*if !parser_def then
        (Buffer.clear ocaml_code_buffer;
        let pos = lexeme_start_p lexbuf in
        start_pattern := pos;
        (*paren_count:=1;*)
        ocaml_code lexbuf;
        PATTERN (Buffer.contents ocaml_code_buffer,
          (pos.pos_lnum,pos.pos_cnum-pos.pos_bol)))
      else*) LBRACK
      )
# 843 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 26 ->
# 125 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( RBRACK )
# 848 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 27 ->
# 126 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( CARET )
# 853 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 28 ->
# 127 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( DASH )
# 858 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 29 ->
# 128 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( COMMA )
# 863 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 30 ->
# 129 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( SEMI )
# 868 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 31 ->
# 130 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( COLON )
# 873 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 32 ->
# 131 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
          ( THREEDOTS )
# 878 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 33 ->
# 132 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( QUESTION )
# 883 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 34 ->
# 133 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( PLUS )
# 888 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 35 ->
# 134 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( STAR )
# 893 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 36 ->
# 135 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( ARROW )
# 898 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 37 ->
# 137 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                     ( CHAR(Lexing.lexeme_char lexbuf 1) )
# 903 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 38 ->
# 139 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( CHAR(char_for_backslash (Lexing.lexeme_char lexbuf 2)) )
# 908 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 39 ->
let
# 140 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                           c
# 914 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2)
and
# 140 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                            d
# 919 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 3)
and
# 140 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                                             u
# 924 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 4) in
# 141 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( let v = decimal_code c d u in
      if v > 255 then
        failwith (Printf.sprintf "illegal escape sequence \\%c%c%c" c d u)
      else CHAR (Char.chr v) )
# 931 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 40 ->
let
# 146 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                     d
# 937 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 3)
and
# 146 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                                                      u
# 942 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 4) in
# 147 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
       ( CHAR(char_for_hexadecimal_code d u) )
# 946 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 41 ->
# 150 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( Buffer.clear string_buf;
      string lexbuf;
      STRING (Buffer.contents string_buf) )
# 953 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 42 ->
# 155 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( if !look_for_type then
          (Buffer.clear ocaml_code_buffer;
          start_ocaml_type := lexeme_start_p lexbuf;
          ocaml_type lexbuf;
          OCAML_TYPE ("("^(Buffer.contents ocaml_code_buffer)^")"))
        else if !parser_def then
          (Buffer.clear ocaml_code_buffer;
          let pos = lexeme_start_p lexbuf in
          start_pattern := pos;
          in_pattern := true;
          ocaml_code lexbuf;
          PATTERN (Buffer.contents ocaml_code_buffer,pos))
            (*(pos.pos_lnum,pos.pos_cnum-pos.pos_bol)*)
        else LESS
      )
# 972 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 43 ->
# 171 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( Buffer.clear ocaml_code_buffer;
        let pos = lexeme_start_p lexbuf in
        start_ocaml_code := pos;
        ocaml_code lexbuf;
        OCAML_CODE (Buffer.contents ocaml_code_buffer,
          (pos,false))
          (*((pos.pos_lnum,pos.pos_cnum-pos.pos_bol),false)*)
      )
# 984 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 44 ->
# 180 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( Buffer.clear ocaml_code_buffer;
        let pos = lexeme_start_p lexbuf in
        start_ocaml_code := pos;
        ocaml_code lexbuf;
        OCAML_CODE (Buffer.contents ocaml_code_buffer,
          (pos,true))
          (*(pos.pos_lnum,pos.pos_cnum-pos.pos_bol),true*)
      )
# 996 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 45 ->
# 189 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
       ( (*dypgen_comment := !dypgen_comment+1;*)
         start_dypgen_comment := (lexeme_start_p lexbuf)::(!start_dypgen_comment);
         comment lexbuf; token lexbuf )
# 1003 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 46 ->
# 192 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( BAR )
# 1008 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 47 ->
# 193 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( BANG )
# 1013 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 48 ->
# 194 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( EQUAL )
# 1018 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 49 ->
let
# 195 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                   num
# 1024 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 196 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                           name
# 1029 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_opt lexbuf lexbuf.Lexing.lex_mem.(3) lexbuf.Lexing.lex_mem.(2) in
# 198 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( update_loc lexbuf name (int_of_string num) true 0;
        token lexbuf
      )
# 1035 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 50 ->
# 201 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
        ( EOF )
# 1040 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1) ;   __ocaml_lex_string_rec lexbuf 145
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 206 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( () )
# 1052 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 1 ->
let
# 207 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                                            spaces
# 1058 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 208 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( update_loc lexbuf None 1 false (String.length spaces);
      string lexbuf )
# 1063 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 2 ->
let
# 210 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                               c
# 1069 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 211 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( string_buf $ (string_of_char(char_for_backslash c));
      string lexbuf )
# 1074 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 3 ->
let
# 213 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                       c
# 1080 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1)
and
# 213 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                        d
# 1085 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2)
and
# 213 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                                          u
# 1090 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 3) in
# 214 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( let v = decimal_code c d u in
      if v > 255 then
       failwith
        (Printf.sprintf
          "illegal backslash escape in string: `\\%c%c%c'" c d u);
      string_buf $ (string_of_char (Char.chr v));
      string lexbuf )
# 1100 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 4 ->
let
# 221 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                          d
# 1106 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 2)
and
# 221 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                                                                           u
# 1111 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 3) in
# 222 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( string_buf $ (string_of_char (char_for_hexadecimal_code d u));
      string lexbuf )
# 1116 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 5 ->
let
# 224 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
               c
# 1122 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 225 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( failwith
        (Printf.sprintf "illegal backslash escape in string: `\\%c'" c) )
# 1127 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 6 ->
# 228 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( failwith "unterminated string" )
# 1132 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 7 ->
# 230 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( string_buf $ "\010";
      update_loc lexbuf None 1 false 0;
      string lexbuf )
# 1139 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 8 ->
let
# 233 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         c
# 1145 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 234 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
    ( string_buf $ (string_of_char c);
      string lexbuf )
# 1150 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 161
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 238 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
         ( (*dypgen_comment := !dypgen_comment+1;*)
           start_dypgen_comment := (lexeme_start_p lexbuf)::(!start_dypgen_comment);
           comment lexbuf )
# 1164 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 1 ->
# 242 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( (*dypgen_comment := !dypgen_comment-1;*)
         start_dypgen_comment := List.tl (!start_dypgen_comment);
         if !start_dypgen_comment=[] then () else comment lexbuf )
# 1171 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 2 ->
# 246 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( update_loc lexbuf None 1 false 0; comment lexbuf )
# 1176 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 3 ->
# 247 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( comment lexbuf )
# 1181 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and ocaml_code lexbuf =
    __ocaml_lex_ocaml_code_rec lexbuf 169
and __ocaml_lex_ocaml_code_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 251 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( 
        if !in_string = false && !comment_count = 0 then
          begin
            match !start_curlyb with
              | [] ->
                if !start_ocaml_code=dummy_pos then (
                  ocaml_code_buffer $ "}";
                  ocaml_code lexbuf)
                else start_ocaml_code:=dummy_pos
              | _::tl ->
                  start_curlyb:=tl;
                  ocaml_code_buffer $ "}";
                  ocaml_code lexbuf

            (*if (!paren_count) = 0 then start_ocaml_code := dummy_pos
            else
              let _ = ocaml_code_buffer $
                (String.make 1 (Lexing.lexeme_char lexbuf 0)) in
              let _ = paren_count := ((!paren_count)-1) in
              ocaml_code lexbuf*)
          end
        else
          begin
            ocaml_code_buffer $ "}";
            ocaml_code lexbuf
          end
      )
# 1219 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 1 ->
# 278 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
        ( if !in_string=false && !comment_count=0 && !in_pattern
        then (in_pattern := false; start_pattern := dummy_pos)
        else (
          ocaml_code_buffer $ ">";
          ocaml_code lexbuf) )
# 1228 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 2 ->
let
# 283 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
                       n
# 1234 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 284 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( (if !in_string then ocaml_code_buffer $ (Lexing.lexeme lexbuf)
      else ocaml_code_buffer $ ("_"^n));
        ocaml_code lexbuf
      )
# 1241 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 3 ->
# 289 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( (if !in_string then ocaml_code_buffer $ (Lexing.lexeme lexbuf)
      else ocaml_code_buffer $ ("dyp.Dyp.rhs_start_pos "));
        ocaml_code lexbuf
      )
# 1249 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 4 ->
# 294 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( (if !in_string then ocaml_code_buffer $ (Lexing.lexeme lexbuf)
      else ocaml_code_buffer $ ("dyp.Dyp.rhs_end_pos "));
        ocaml_code lexbuf
      )
# 1257 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 5 ->
# 299 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( ocaml_code_buffer $ "\\\\";
        ocaml_code lexbuf
      )
# 1264 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 6 ->
# 303 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( ocaml_code_buffer $ "\\\"";
        ocaml_code lexbuf
      )
# 1271 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 7 ->
# 307 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( 
        if !in_string then (in_string := false; start_string := dummy_pos)
        else (in_string := true; start_string := lexeme_start_p lexbuf);
        ocaml_code_buffer $ "\"";
        ocaml_code lexbuf
      )
# 1281 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 8 ->
# 314 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( ocaml_code_buffer $ "{";
        if !in_string = false && !comment_count = 0 then
          start_curlyb := (lexeme_start_p lexbuf)::!start_curlyb;
          (*paren_count := (!paren_count)+1;*)
        ocaml_code lexbuf
      )
# 1291 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 9 ->
# 321 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( 
        if !in_string then () else (comment_count := !comment_count + 1;
          start_ocaml_comment :=
            (lexeme_start_p lexbuf)::(!start_ocaml_comment));
        ocaml_code_buffer $ "(*";
        ocaml_code lexbuf
      )
# 1302 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 10 ->
# 329 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( 
        if !in_string then () else (comment_count := !comment_count - 1;
          start_ocaml_comment := List.tl (!start_ocaml_comment));
        ocaml_code_buffer $ "*)";
        ocaml_code lexbuf
      )
# 1312 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 11 ->
# 336 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( update_loc lexbuf None 1 false 0;
        ocaml_code_buffer $
          (String.make 1 (Lexing.lexeme_char lexbuf 0));
        ocaml_code lexbuf
      )
# 1321 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 12 ->
# 342 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( ocaml_code_buffer $
          (String.make 1 (Lexing.lexeme_char lexbuf 0));
        ocaml_code lexbuf
      )
# 1329 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_ocaml_code_rec lexbuf __ocaml_lex_state

and ocaml_type lexbuf =
    __ocaml_lex_ocaml_type_rec lexbuf 188
and __ocaml_lex_ocaml_type_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 349 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( ocaml_code_buffer $ "->";
        ocaml_type lexbuf
      )
# 1343 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 1 ->
# 352 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
        ( start_ocaml_type := dummy_pos; () )
# 1348 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 2 ->
# 354 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( update_loc lexbuf None 1 false 0;
        ocaml_code_buffer $
          (String.make 1 (Lexing.lexeme_char lexbuf 0));
        ocaml_type lexbuf
      )
# 1357 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | 3 ->
# 360 "src\compiler\dypgen\dypgen\dypgen_lexer.mll"
      ( ocaml_code_buffer $
          (String.make 1 (Lexing.lexeme_char lexbuf 0));
        ocaml_type lexbuf
      )
# 1365 "build\release\src\compiler\dypgen\dypgen\dypgen_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_ocaml_type_rec lexbuf __ocaml_lex_state

;;

