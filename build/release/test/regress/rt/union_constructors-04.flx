// named variant type constructor with one element as function
typedef U = 1 + (int * int * int);
proc print (u:U) {
  print "union U ";
  print$
    match u with
    | case 0 => "1"
    | case 1 (b, c, d) => f"int %d %d %d" (b, c, d)
    endmatch;
}
fun exec (p:int * int * int -> U, x:int, y:int, z:int) => p (x, y, z);

val u1 = (case 1 of U) (1, 2, 3); print u1; endl;

val u2 = exec (case 1 of U, 4, 5, 6); print u2; endl;

val u3 = (case 1 of U) (7, 8, 9); print u3; endl;

val f1 = case 1 of U; val u4 = f1 (10, 11, 12); print u4; endl;

print (exec (case 1 of U, 13, 14, 15)); endl;

