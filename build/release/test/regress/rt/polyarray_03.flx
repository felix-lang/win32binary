fun ==: 3 * 3 -> bool = "$1==$2";

var i : 3 = case 0 of 3;
var j : 3 = case 1 of 3;
var k : 3 = case 2 of 3;
var ijk : 3 * 3 * 3 = i,j,k; 

fun str (x:3*3*3) => (x :>> int) . str;
fun str (x:3) => (x :>> int) . str;

println$ "ijk=" + str ijk;
println$ ijk . 0 .str;
println$ ijk . 1 .str;
println$ ijk . 2 .str;

assert ijk . 0 == i;
assert ijk . 1 == j;
assert ijk . 2 == k;

assert ijk . 0 :>> int == 0;
assert ijk . 1 :>> int == 1;
assert ijk . 2 :>> int == 2;

// Encoding test
println$ "Encoding test";
for var ii in 0 upto 2 do
  i = ii :>> 3;
  for var jj in 0 upto 2 do
    j = jj :>> 3;
    for var kk in 0 upto 2 do
      k = kk :>> 3;
      ijk = i,j,k;
      println$ ijk.0.str + "," + ijk.1.str + "," + ijk.2.str+" encoding=" + (ijk :>>int) .str;
      assert 9 * (i:>>int) + 3 * (j:>>int) + (k:>>int) == ijk :>>int;
    done
  done
done

println$ str ijk;
ijk.1 = case 2 of 3;
println$ str ijk;

println$ "Decoding test";
// Decoding test
for var v in 0 upto 26 do
  ijk = v :>> (3 * 3 * 3);
  println$ ijk.0.str + "," + ijk.1.str + "," + ijk.2.str+" encoding=" + (ijk :>>int) .str;
  assert 9 * (ijk.0 :>>int)+ 3 * (ijk.1:>>int)+ (ijk.2 :>>int) == ijk :>>int;
done

// Assignment test
println$ "Assignment test";
for ii in 0 upto 2 do
  i = ii :>> 3;
  for jj in 0 upto 2 do
    j = jj :>> 3;
    for kk in 0 upto 2 do
      k = kk :>> 3;
      ijk.0 = i;
      ijk.1 = j;
      ijk.2 = k;
      println$ ijk.0.str + "," + ijk.1.str + "," + ijk.2.str+" encoding=" + (ijk :>>int) .str;
      assert 9 * (i:>>int) + 3 * (j:>>int) + (k:>>int) == ijk :>>int;
    done
  done
done

 

