
// single value
5 |> println;

// multiple values
range(0,5) |> println ;

// lambda
range(0,5) |> map (fun (x:int) => x + 1) |> println ;

// launch sequence
fun addOne(x:int):int => x + 1;
fun sayNumber(x:int) = { println$ "T-Minus " + x; }
List::range(0,5)       // generate a series of numberes
  |> List::rev         // reverse list 
  |> map addOne        // modify the intermediate result
  |> iter sayNumber    // output something for each number
;
println$ "Blastoff!";

// string manipulation
"The horrible conclusion which had been gradually obtruding itself upon my confused and reluctant mind was now an awful certainty."
    |> (fun (x:string) => search_and_replace(x, "horrible", "pleasant"))
    |> (fun (x:string) => search_and_replace(x, "obtruding itself upon", "growing in"))
    |> (fun (x:string) => search_and_replace(x, "confused", "focused"))
    |> (fun (x:string) => search_and_replace(x, "reluctant", "open"))
    |> (fun (x:string) => search_and_replace(x, "awful", "brilliant"))
    |> println ;


// match test
list(Some(1), None[int], Some(3), Some(1))
    |> map (fun (x:opt[int]) => match x with 
               | Some n => n 
               | #None    => 0
            endmatch)
    |> fold_left (fun (x:int)(y:int) => x + y) 0
    |> println
;

