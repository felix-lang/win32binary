class Constraints {
type Int = "int";
type Long = "long";
ctor Int : int = "$1";
ctor Long: long= "$1";
ctor int : Int = "$1";
ctor long: Long= "$1";
fun add: Int * Int -> Int = "$1+$2";
fun add: Long * Long -> Long = "$1+$2";
instance Str[Int] { fun str(x:Int) => str (int x); }
instance Str[Long] { fun str(x:Long) => str (long x); }
fun add: Int * Long -> Long = "$1+$2";
fun add: Long * Int -> Long = "$1+$2";
typedef integers = typesetof(Int, Long);
fun add[I in integers]: I * I -> I = "$1+$2";
fun add[I in integers, J in integers]: I * J -> I = "(?1)($1+$2)";
fun add: !integers * !integers -> int = "(int)($1+$2)";
header myf = "int f(int, int);";
fun f: !integers * !integers -> int = "f($1, $2)" requires myf;
fun f[T in integers]: T -> T = "$1+1";
fun f[T in floats]: T -> T = "$1+2";
println$ (f 1.2), f (Int 1);
typedef mynumbers = integers \cup floats;
} // end class Constraints
