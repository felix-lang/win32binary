  header cback_h = 
  """
  typedef void cb_t(int x, void *client_data);
  """;
  body cback_h =
  """
  void register_callback(int x, void (*cb)(int, void*), void *client_data)
  {
    cb (x, client_data);
  }
  """;
proc flx_cb(x:int){ println$ "Called back with " + str x; }
  body cback_wrapper = 
  """
  void wrap_flx_cb(int x, void *client_data)
  {
    // cast client data to Felix function base type
    ::flx_cb_t cb = (::flx_cb_t)client_data;

    // set the caller address and argument 
    // return a continuation
    ::flx::rtl::con_t *p = cb->call(0,x);

    // run the continuation
    while(p) p = p->resume();
  }
  """ requires cback_h;
// bind the registration function
proc register_callback: int * (int * address --> void) * address
  requires cback_h;

// bind to our wrapper
const wrap_flx_cb: int * address --> void
  requires cback_wrapper;

// do a test call
register_callback(42, wrap_flx_cb, C_hack::cast[address] flx_cb);
export type (int -> void) as "flx_cb_t";
