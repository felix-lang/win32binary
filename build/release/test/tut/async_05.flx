typedef il_t = int * list[int];
proc client (x:ischannel[il_t], y:oschannel[il_t])
{
  p, l := read x;
  l = List::filter (fun (e:int) => (e%p != 0 or e/p == 1)) l;
  val r = List::find (fun (e:int) => e > p) l;
  match r with 
  | #None => 
    write$ y, (0, l); //We're done
  | Some x => 
    inp,out:=#mk_ioschannel_pair[il_t];
    spawn_fthread { client (inp, y); };
    write$ out, (x, l);
  endmatch;
}
proc sieve (k:int)
{
  inp,out:=#mk_ioschannel_pair[il_t];
  spawn_fthread { client (inp, out); };

  var l = List::range (2, (k + 1));
  write$ out, (2, l);

  val i, res = read inp;
  println$ "Primes: " + str (res);
}
val k = 1000; //Run with FLX_MIN_MEM=500 (MB) for k=5000
sieve k;
