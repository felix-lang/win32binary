//Input file: build\release\share\src\tools\flx_pkgconfig
//Generated by Felix Version 2016.07.12-rc1
//Timestamp: 2017/7/9 5:48:56 UTC
//Timestamp: 2017/7/9 5:48:56 (local)
#define FLX_EXTERN_flx_pkgconfig FLX_EXPORT
#include "flx_pkgconfig.hpp"
#include <stdio.h>
#define comma ,

//-----------------------------------------
//EMIT USER BODY CODE
using namespace ::flxusr::flx_pkgconfig;

    static void _rev(void** plt, _a13708t_70442*) // second arg is a dummy
    { // in place reversal
      //struct node_t { _a13708t_70442 elt; void *tail; };
      struct node_t { void *tail; _a13708t_70442 elt; };
      void *nutail = 0;
      void *cur = *plt;
      while(cur)
      {
        void *oldtail = ((node_t*)FLX_VNP(cur))->tail;   // save old tail in temp
        ((node_t*)FLX_VNP(cur))->tail = nutail;          // overwrite current node tail
        nutail = cur;                                   // set new tail to current
        cur = oldtail;                                  // set current to saved old tail
      }
      *plt = nutail;                                    // overwrite
    }
    

//-----------------------------------------
namespace flxusr { namespace flx_pkgconfig {

//-----------------------------------------
//DEFINE OFFSET tables for GC
#include "flx_pkgconfig.rtti"
FLX_DEF_THREAD_FRAME
//Thread Frame Constructor
thread_frame_t::thread_frame_t(
) :
  gcp(0),
  shape_list_head(flx_pkgconfig_head_shape)
{}

//-----------------------------------------
//DEFINE FUNCTION CLASS METHODS
#include "flx_pkgconfig.ctors_cpp"
//------------------------------
//FUNCTION <69498>: flx_pkgconfig::handle_pkg::_lam_64579::aux_uncurry: Apply method
void* _fI69498_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69499_x_uncurry = _arg.data[0];
  _vI69500_y = _arg.data[1];
    start_68488_L69507:;
      _vI69503_aux__apos_2_mv_1328  = _vI69499_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69503_aux__apos_2_mv_1328)==0) ) goto _ml1330_L69502;
      return _vI69500_y;
    _ml1330_L69502:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI69503_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI69506__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L69501;
      _vI69504_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI69503_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI69505_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI69503_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI69500_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69500_y, _vI69504_h_param_std_1210))); //init
      _vI69499_x_uncurry  = _vI69505_t_param_std_1209; //init
      goto start_68488_L69507;
    _ml1331_L69501:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <70357>: flx_pkgconfig::_lam_64610: Apply method
 ::flx::rtl::cl_t _lam_64610::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",372,9,372,23); // HACK! 
}

//------------------------------
//FUNCTION <70045>: flx_pkgconfig::parse_args::_lam_64536: Apply method
 ::flx::rtl::cl_t _lam_64536::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",154,9,154,23); // HACK! 
}

//------------------------------
//FUNCTION <68912>: flx_pkgconfig::get_variable::_lam_64578: Apply method
 ::flx::rtl::cl_t _lam_64578::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",265,11,265,16); // HACK! 
}

//------------------------------

//PROCEDURE <64983:> flx_pkgconfig::add_val: Call method
::flx::rtl::con_t * add_val::call(::flx::rtl::con_t *_ptr_caller, _a13708t_70442 const &_arg){
  _caller = _ptr_caller;
  v = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <64983:> flx_pkgconfig::add_val: Resume method
::flx::rtl::con_t *add_val::resume(){
      _vI68548_insert_unique__apos_3_mv_1428  = mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt70482((FLX_NEWP(_lam_1398)(FLX_FPAR_PASS this, ptrflx_pkgconfig)), ptrflx_pkgconfig->result)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI68548_insert_unique__apos_3_mv_1428%2==1) ) goto _ml1430_L68547;
      _urv68543  = ptrflx_pkgconfig->result; //init
      goto _end_hash_856274349;
    _ml1430_L68547:;
/*match case 2:any*/
      _urv68543  = _fI68561_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at70473(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_fI68551_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at70473(ptrflx_pkgconfig->result, (void* /*VR_nullptr*/ )0)) /* apply_stack */, v))), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
    _end_hash_856274349:;
      ptrflx_pkgconfig->result = _urv68543; //assign simple
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------

//PROCEDURE <65026:> flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::_lam_64602: Call method
::flx::rtl::con_t * _lam_64602::call(::flx::rtl::con_t *_ptr_caller, _a13708t_70442 const &_arg){
  _caller = _ptr_caller;
  _vI65028_s = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <65026:> flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::_lam_64602: Resume method
::flx::rtl::con_t *_lam_64602::resume(){
      {
      void* _tmp70563 = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(ptrhandle_pkg->trace, ptrhandle_pkg->pkg)));
      ::flx::rtl::con_t *tmp = _caller;
      _caller = 0;
      return (FLX_NEWP(handle_pkg)(FLX_FPAR_PASS ptrflx_pkgconfig))
      ->call(tmp, _tt70462(_vI65028_s, (_tmp70563)));
      }
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------

//PROCEDURE <64862:> flx_pkgconfig::parse_args: Call method
void parse_args::stack_call(void* const &_arg){
  ::flx::rtl::con_t *cc = call(0,_arg);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * parse_args::call(::flx::rtl::con_t *_ptr_caller, void* const &_arg){
  _caller = _ptr_caller;
  _vI64929_args = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <64862:> flx_pkgconfig::parse_args: Resume method
::flx::rtl::con_t *parse_args::resume(){
      parse_args_mv_64525  = _vI64929_args; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(parse_args_mv_64525)==0) ) goto _ml64527_L69970;
      FLX_RETURN // procedure return
    _ml64527_L69970:;
/*match case 2:|Cons (arg_param_flx_pkgconfig_64428, tail_param_flx_pkgconfig_64429)*/
      if(!andthen(!!parse_args_mv_64525 , (FLX_NEWP(_lam_64536)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64529_L69971;
      tail_param_flx_pkgconfig_64429 = (reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>(parse_args_mv_64525))).mem_1; //assign simple
      arg_param_flx_pkgconfig_64428 = (reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>(parse_args_mv_64525))).mem_0; //assign simple
      if(!((::std::string("--hide") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,::std::string("--hide").size()))) ) goto _ifdoend_flx_pkgconfig_64430_L70053;
      ptrflx_pkgconfig->hide = 1; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64430_L70053:;
      if(!((::std::string("--backwards") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,::std::string("--backwards").size()))) ) goto _ifdoend_flx_pkgconfig_64432_L70054;
      ptrflx_pkgconfig->backwards = 1; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64432_L70054:;
      if(!((::std::string("--list") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,::std::string("--list").size()))) ) goto _ifdoend_flx_pkgconfig_64434_L70055;
      ptrflx_pkgconfig->dolist = 1; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64434_L70055:;
      if(!((::std::string("--missing") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,::std::string("--missing").size()))) ) goto _ifdoend_flx_pkgconfig_64436_L70056;
      ptrflx_pkgconfig->missing = 1; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64436_L70056:;
      if(!((::std::string("--noerror") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,::std::string("--noerror").size()))) ) goto _ifdoend_flx_pkgconfig_64438_L70057;
      ptrflx_pkgconfig->require_pkg_exists = 0; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64438_L70057:;
      if(!((::std::string("--keeprightmost") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,::std::string("--keeprightmost").size()))) ) goto _ifdoend_flx_pkgconfig_64440_L70058;
      ptrflx_pkgconfig->keep = /*VR_int*/2; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64440_L70058:;
      if(!((::std::string("--keepleftmost") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,::std::string("--keepleftmost").size()))) ) goto _ifdoend_flx_pkgconfig_64442_L70059;
      ptrflx_pkgconfig->keep = /*VR_int*/1; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64442_L70059:;
      if(!((::std::string("--keepall") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,::std::string("--keepall").size()))) ) goto _ifdoend_flx_pkgconfig_64444_L70060;
      ptrflx_pkgconfig->keep = /*VR_int*/0; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64444_L70060:;
      if(!((::std::string("--field") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,7))) ) goto _ifdoend_flx_pkgconfig_64446_L70061;
      ptrflx_pkgconfig->fields = _fI67551___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt70445(ptrflx_pkgconfig->fields, ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,8,arg_param_flx_pkgconfig_64428.size()))) /* apply_stack */; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64446_L70061:;
      if(!((::std::string("--extension") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,11))) ) goto _ifdoend_flx_pkgconfig_64448_L70062;
      ptrflx_pkgconfig->extension = ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,12,arg_param_flx_pkgconfig_64428.size()); //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64448_L70062:;
      if(!((::std::string("-") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,1)) && !((::std::string("-") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,1,2)))  ) ) goto _ifdoend_flx_pkgconfig_64450_L70071;
      _vI70049_flags = ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,1,arg_param_flx_pkgconfig_64428.size()); //assign simple
      if(!xfind(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_at70444(_vI70049_flags, ::std::string("r"))) /* apply_stack */ ) goto _ifdoelse_flx_pkgconfig_64453_L70064;
      ptrflx_pkgconfig->recfields = _fI70099_aux(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at70473(ptrflx_pkgconfig->recfields, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
    _ifdoelse_flx_pkgconfig_64453_L70064:;
      if(!xfind(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_at70444(_vI70049_flags, ::std::string("h"))) /* apply_stack */ ) goto _ifdoelse_flx_pkgconfig_64455_L70066;
      ptrflx_pkgconfig->hide = 1; //assign simple
    _ifdoelse_flx_pkgconfig_64455_L70066:;
      if(!xfind(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_at70444(_vI70049_flags, ::std::string("b"))) /* apply_stack */ ) goto _ifdoelse_flx_pkgconfig_64457_L70068;
      ptrflx_pkgconfig->backwards = 1; //assign simple
    _ifdoelse_flx_pkgconfig_64457_L70068:;
      if(!xfind(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_at70444(_vI70049_flags, ::std::string("l"))) /* apply_stack */ ) goto _ifdoelse_flx_pkgconfig_64431_L70098;
      ptrflx_pkgconfig->dolist = 1; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64450_L70071:;
      if(!((::std::string("--rec") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,5))) ) goto _ifdoend_flx_pkgconfig_64460_L70072;
      fld = ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,6,arg_param_flx_pkgconfig_64428.size()); //assign simple
      _lam_64530_mv_64532  = (fld == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_lam_64530_mv_64532%2==1) ) goto _ml64534_L70123;
      _urv69735  = ::std::string("Requires"); //init
      goto _end_hash_214435207;
    _ml64534_L70123:;
/*match case 2:any*/
      _urv69735  = fld; //init
    _end_hash_214435207:;
      fld = _urv69735; //assign simple
      ptrflx_pkgconfig->recfields = _fI70125_aux(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at70473(ptrflx_pkgconfig->recfields, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64460_L70072:;
      if(!((::std::string("--path+") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,7))) ) goto _ifdoend_flx_pkgconfig_64462_L70075;
      _vI70051_x = ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,8,arg_param_flx_pkgconfig_64428.size()); //assign simple
      if(!(!((ptrflx_pkgconfig->path == ::std::string(""))) ) ) goto _ifdoend_flx_pkgconfig_64464_L70073;
      ptrflx_pkgconfig->path = (ptrflx_pkgconfig->path + ::std::string(":") ) + _vI70051_x ; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64464_L70073:;
      ptrflx_pkgconfig->path = _vI70051_x; //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64462_L70075:;
      if(!((::std::string("--path") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,6))) ) goto _ifdoend_flx_pkgconfig_64466_L70076;
      ptrflx_pkgconfig->path = ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,7,arg_param_flx_pkgconfig_64428.size()); //assign simple
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64466_L70076:;
      if(!((::std::string("--help") == arg_param_flx_pkgconfig_64428)) ) goto _ifdoend_flx_pkgconfig_64468_L70077;
      {
      print_help(ptrflx_pkgconfig)
      .stack_call();
      }
      ::std::exit(0);
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64468_L70077:;
      if(!((::std::string("@") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,1))) ) goto _ifdoend_flx_pkgconfig_64470_L70078;
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_573_L70148;
      {
      _a13708t_70442 _tmp70567 = (::std::string("[load] ") + lstrip(rstrip(::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,1,arg_param_flx_pkgconfig_64428.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp70567)));
      }
      fflush(stderr);
    _ifdoelse_std_573_L70148:;
      data = ::flx::rtl::ioutil::load_file((lstrip(rstrip(::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,1,arg_param_flx_pkgconfig_64428.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")))); //assign simple
      {
      void* _tmp70568 = _fI70162_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at70473(_fI70149_aux(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_tt70462(data, (void* /*VR_nullptr*/ )0)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
      parse_args(FLX_FPAR_PASS ptrflx_pkgconfig)
      .stack_call((_tmp70568));
      }
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64470_L70078:;
      if(!((::std::string("-") == ::flx::rtl::strutil::substr(arg_param_flx_pkgconfig_64428,0,1))) ) goto _ifdoend_flx_pkgconfig_64472_L70079;
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64472_L70079:;
      if(!((::std::string("") == arg_param_flx_pkgconfig_64428)) ) goto _ifdoend_flx_pkgconfig_64474_L70080;
      goto _ifdoelse_flx_pkgconfig_64431_L70098;
    _ifdoend_flx_pkgconfig_64474_L70080:;
      ptrflx_pkgconfig->pkgs = _fI67551___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt70445(ptrflx_pkgconfig->pkgs, arg_param_flx_pkgconfig_64428)) /* apply_stack */; //assign simple
    _ifdoelse_flx_pkgconfig_64431_L70098:;
      {
      parse_args(FLX_FPAR_PASS ptrflx_pkgconfig)
      .stack_call(tail_param_flx_pkgconfig_64429);
      }
      FLX_RETURN // procedure return
    _ml64529_L69971:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",221,7,221,10);
;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <64948>: flx_pkgconfig::check_id: Apply method
 ::flx::rtl::cl_t check_id::apply(_a13708t_70442 const &_arg ){
  _vI64955_s = _arg;
      acc = 1; //assign simple
      _vI68752_x  = _vI64955_s; //init
      _genout_urv68747  = (FLX_NEWP(_fI68748_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_pkgconfig)); //init
      _generator_flx_pkgconfig_10763 = _genout_urv68747; //assign simple
    continue__ll_flx_pkgconfig_10758_L64956:;
      check_id_mv_64549  = (_generator_flx_pkgconfig_10763)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some elt_param_flx_pkgconfig_64481*/
      if(!andthen(FLX_VNI(check_id_mv_64549)==1, (FLX_NEWP(_lam_64552)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64551_L64957;
      elt_param_flx_pkgconfig_64481 = *((char*)FLX_VNP(check_id_mv_64549)); //assign simple
      acc = acc && (isidstart(FLX_FPAR_PASS_ONLY)
      .apply(elt_param_flx_pkgconfig_64481) /* apply_stack */ || (!!isdigit(elt_param_flx_pkgconfig_64481)) ) ; //assign simple
      goto continue__ll_flx_pkgconfig_10758_L64956;
    _ml64551_L64957:;
/*match case 2:|None*/
      if(!(FLX_VNI(check_id_mv_64549)==0) ) goto _ml64553_L64958;
      goto _em64549_L64959;
    _ml64553_L64958:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",248,7,248,56);
;
    _em64549_L64959:;
      return acc;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",250,5,250,6); // HACK! 
}

//------------------------------
//FUNCTION <64784>: flx_pkgconfig: Apply method
_tt70457 flx_pkgconfig::apply(void* const &_arg ){
  args = _arg;
      path = ::flx::rtl::strutil::atostr(std::getenv((::std::string("PKG_CONFIG_PATH")).c_str())); //assign simple
      fields = (void* /*VR_nullptr*/ )0; //assign simple
      pkgs = (void* /*VR_nullptr*/ )0; //assign simple
      hide = 0; //assign simple
      require_pkg_exists = 1; //assign simple
      missing = 0; //assign simple
      recfields = (void* /*VR_nullptr*/ )0; //assign simple
      dolist = 0; //assign simple
      listkeys = 0; //assign simple
      return_code = 0; //assign simple
      backwards = 0; //assign simple
      keep = /*VR_int*/1; //assign simple
      extension = ::std::string("fpc"); //assign simple
      {
      parse_args(FLX_FPAR_PASS this)
      .stack_call(args);
      }
      dirs = reattach_drive_letters(FLX_FPAR_PASS this)
      .apply(_fI70322_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at70473(_fI70309_aux(FLX_FPAR_PASS this)
      .apply(_tt70462(path, (void* /*VR_nullptr*/ )0)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */) /* apply_stack */; //assign simple
      result = (void* /*VR_nullptr*/ )0; //assign simple
    continue__ll_flx_pkgconfig_10930_L65079:;
      is_empty_mv_1309  = pkgs; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(is_empty_mv_1309)==0) ) goto _ml1311_L70346;
      _urv70344  = 1; //init
      goto _end_inline_is_empty_70349_L70349;
    _ml1311_L70346:;
/*match case 2:any*/
      _urv70344  = 0; //init
    _end_inline_is_empty_70349_L70349:;
      if(FLX_UNLIKELY(_urv70344)) goto break__ll_flx_pkgconfig_10930_L65080;
      flx_pkgconfig_mv_64604  = pkgs; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(flx_pkgconfig_mv_64604)==0) ) goto _ml64606_L70355;
      goto continue__ll_flx_pkgconfig_10930_L65079;
    _ml64606_L70355:;
/*match case 2:|Cons (pkg_param_flx_pkgconfig_64511, tail_param_flx_pkgconfig_64512)*/
      if(!andthen(!!flx_pkgconfig_mv_64604 , (FLX_NEWP(_lam_64610)(FLX_FPAR_PASS this))) ) goto _ml64608_L70356;
      tail_param_flx_pkgconfig_64512 = (reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>(flx_pkgconfig_mv_64604))).mem_1; //assign simple
      pkg_param_flx_pkgconfig_64511 = (reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>(flx_pkgconfig_mv_64604))).mem_0; //assign simple
      pkgs = tail_param_flx_pkgconfig_64512; //assign simple
      //run procedure directcall handle_pkg<64995>directproc (pkg_param_flx_pkgconfig_64511<70353>varname, Empty<67109>varname);
      {
        ::flx::rtl::con_t *_p =
          (FLX_NEWP(handle_pkg)(FLX_FPAR_PASS this))
          ->call(0, _tt70462(pkg_param_flx_pkgconfig_64511, (void* /*VR_nullptr*/ )0));
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            fprintf(stderr,"Caller flx_pkgconfig\n");
            fprintf(stderr,"Calls  handle_pkg\n");
            abort();
          }
          _p=_p->resume();
        }
      }
      goto continue__ll_flx_pkgconfig_10930_L65079;
    _ml64608_L70356:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",378,7,378,10);
;
      goto continue__ll_flx_pkgconfig_10930_L65079;
    break__ll_flx_pkgconfig_10930_L65080:;
      return _tt70457(return_code, result);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",385,3,385,4); // HACK! 
}

//------------------------------
//FUNCTION <70117>: flx_pkgconfig::parse_args::aux::_lam_1443: Apply method
 ::flx::rtl::cl_t _fI70117__lam_1443::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",579,9,579,17); // HACK! 
}

//------------------------------
//FUNCTION <68708>: +::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI68708__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <64931>: flx_pkgconfig::reattach_drive_letters: Apply method
void* reattach_drive_letters::apply(void* const &_arg ){
  _a = _arg;
      reattach_drive_letters_mv_64538  = _a; //init
/*begin match*/
/*match case 1:|Cons (a_param_flx_pkgconfig_64476, |Cons (b_param_flx_pkgconfig_64477, tail_param_flx_pkgconfig_64478))*/
      if(!andthen(!!reattach_drive_letters_mv_64538 , (FLX_NEWP(_lam_64546)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64540_L70222;
      tail_param_flx_pkgconfig_64478 = (reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>(((reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>(reattach_drive_letters_mv_64538))).mem_1)))).mem_1; //assign simple
      b_param_flx_pkgconfig_64477 = (reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>(((reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>(reattach_drive_letters_mv_64538))).mem_1)))).mem_0; //assign simple
      a_param_flx_pkgconfig_64476 = (reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>(reattach_drive_letters_mv_64538))).mem_0; //assign simple
      reattach_drive_letters_mv_64542  = ((a_param_flx_pkgconfig_64476.size() == (static_cast<_a5038t_70465>(1)/*int.flx: ctor size from _a5038t_70465*/)) && (!!isalpha((::flx::rtl::strutil::subscript(a_param_flx_pkgconfig_64476,0)))) ) && (::flx::rtl::strutil::substr(b_param_flx_pkgconfig_64477,0,::std::string("\\").size()) == ::std::string("\\")) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(reattach_drive_letters_mv_64542%2==1) ) goto _ml64544_L70226;
      return FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(reattach_drive_letters(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(tail_param_flx_pkgconfig_64478) /* apply_stack */, (a_param_flx_pkgconfig_64476 + ::std::string(":") ) + b_param_flx_pkgconfig_64477 )));
    _ml64544_L70226:;
/*match case 2:any*/
      return FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(reattach_drive_letters(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(tail_param_flx_pkgconfig_64478, b_param_flx_pkgconfig_64477)))) /* apply_stack */, a_param_flx_pkgconfig_64476)));
    _ml64540_L70222:;
/*match case 2:other_param_flx_pkgconfig_64479*/
      other_param_flx_pkgconfig_64479 = reattach_drive_letters_mv_64538; //assign simple
      return other_param_flx_pkgconfig_64479;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",238,5,238,6); // HACK! 
}

//------------------------------
//FUNCTION <68947>: search_and_replace_uncurry::iterator'2: Apply method
void* _fI68947_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L68948:;
      _vI68952_iterator__apos_2_mv_1504  = ptrsearch_and_replace_uncurry->_vI68946_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI68952_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_lam_1507)(FLX_FPAR_PASS this, ptrsearch_and_replace_uncurry))) ) goto _ml1506_L68951;
      h_param_std_1260 = (*((_tt70479*)FLX_VNP(_vI68952_iterator__apos_2_mv_1504))).mem_1; //assign simple
      t_param_std_1259 = (*((_tt70479*)FLX_VNP(_vI68952_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrsearch_and_replace_uncurry->_vI68946_xs = t_param_std_1259; //assign simple
      FLX_SET_PC(70576)
      return FLX_VNR(1, new(*PTF gcp, _at70444_ptr_map, true) _at70444 (h_param_std_1260));//yield
    FLX_CASE_LABEL(70576)
      goto continue__ll_lists_5177_L68948;
    _ml1506_L68951:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI68952_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L68950;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L68950:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L68948;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <70330>: flx_pkgconfig::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI70330__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <69316>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::aux_uncurry: Apply method
void* _fI69316_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69317_inp_uncurry = _arg.data[0];
  _vI69318_out = _arg.data[1];
    start_69293_L69325:;
      _vI69321_aux__apos_2_mv_1322  = _vI69317_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69321_aux__apos_2_mv_1322)==0) ) goto _ml1324_L69320;
      return _vI69318_out;
    _ml1324_L69320:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI69321_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI69324__lam_1326)(FLX_FPAR_PASS this, ptr_lam_64590, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1325_L69319;
      _vI69322_h_param_std_1208 = (*((_tt70445*)FLX_VNP(_vI69321_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI69323_t_param_std_1207 = (*((_tt70445*)FLX_VNP(_vI69321_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI69318_out  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69318_out, _fI69243_search_and_replace__apos_2(FLX_FPAR_PASS ptr_lam_64590, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_vI69322_h_param_std_1208) /* apply_stack */))); //init
      _vI69317_inp_uncurry  = _vI69323_t_param_std_1207; //init
      goto start_69293_L69325;
    _ml1325_L69319:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <70170>: flx_pkgconfig::parse_args::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI70170__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <69416>: flx_pkgconfig::handle_pkg::_lam_64579::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI69416__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <68551>: flx_pkgconfig::add_val::aux_uncurry: Apply method
void* _fI68551_aux_uncurry::apply(_at70473 const &_arg ){
  x_uncurry = _arg.data[0];
  _vI68553_y = _arg.data[1];
    start_68488_L68560:;
      _vI68556_aux__apos_2_mv_1328  = x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68556_aux__apos_2_mv_1328)==0) ) goto _ml1330_L68555;
      return _vI68553_y;
    _ml1330_L68555:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI68556_aux__apos_2_mv_1328)==1, (FLX_NEWP(_lam_1332)(FLX_FPAR_PASS this, ptradd_val, ptrflx_pkgconfig))) ) goto _ml1331_L68554;
      h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI68556_aux__apos_2_mv_1328))).mem_1; //assign simple
      t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI68556_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI68553_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI68553_y, h_param_std_1210))); //init
      x_uncurry  = t_param_std_1209; //init
      goto start_68488_L68560;
    _ml1331_L68554:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------

//PROCEDURE <65007:> flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590: Call method
::flx::rtl::con_t * _lam_64590::call(::flx::rtl::con_t *_ptr_caller, _a13708t_70442 const &_arg){
  _caller = _ptr_caller;
  _vI65030_line = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <65007:> flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590: Resume method
::flx::rtl::con_t *_lam_64590::resume(){
  FLX_START_SWITCH
      _ds2_64591 = get_variable(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_vI65030_line) /* apply_stack */; //assign simple
      variable = (_ds2_64591.data)[0]; //assign simple
      vval = (_ds2_64591.data)[1]; //assign simple
      if(!(!((variable == ::std::string(""))) ) ) goto _ifdoend_flx_pkgconfig_64496_L65031;
      bdy = search_and_replace_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt70487(ptrhandle_pkg->variables, vval)) /* apply_stack */; //assign simple
      ptrhandle_pkg->variables = FLX_VNR(1, new(*PTF gcp, _tt70479_ptr_map, true) _tt70479 (_tt70479(ptrhandle_pkg->variables, _at70444((::std::string("${") + variable ) + ::std::string("}") , bdy)))); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_flx_pkgconfig_64496_L65031:;
      _ds2_64592 = get_field(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_vI65030_line) /* apply_stack */; //assign simple
      key = (_ds2_64592.data)[0]; //assign simple
      value = (_ds2_64592.data)[1]; //assign simple
      if(!ptrflx_pkgconfig->listkeys ) goto _ifdoelse_flx_pkgconfig_64499_L65033;
      _vI69055_insert_unique__apos_3_mv_1428  = mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt70482((FLX_NEWP(_fI69056__lam_1398)(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig)), ptrflx_pkgconfig->result)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI69055_insert_unique__apos_3_mv_1428%2==1) ) goto _ml1430_L69054;
      _vI69053__urv68543  = ptrflx_pkgconfig->result; //init
      goto _end_hash_856304846;
    _ml1430_L69054:;
/*match case 2:any*/
      _vI69053__urv68543  = _fI69068_aux_uncurry(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at70473(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_fI69058_aux_uncurry(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at70473(ptrflx_pkgconfig->result, (void* /*VR_nullptr*/ )0)) /* apply_stack */, key))), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
    _end_hash_856304846:;
      ptrflx_pkgconfig->result = _vI69053__urv68543; //assign simple
    _ifdoelse_flx_pkgconfig_64499_L65033:;
      values = lexstr(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(value) /* apply_stack */; //assign simple
      r = _fI69316_aux_uncurry(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at70473(values, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp70580 = (void**)&r;
      _rev(((_tmp70580)),(_a13708t_70442*)0);
      }
      values = r; //assign simple
      if(!mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt70482((FLX_NEWP(_fI69333__lam_1398)(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig)), ptrflx_pkgconfig->fields)) /* apply_stack */ ) goto _ifdoelse_flx_pkgconfig_64501_L65035;
      _lam_64590_mv_64594  = ptrflx_pkgconfig->keep; //init
/*begin match*/
/*match case 1:|keepleftmost*/
      if(!(_lam_64590_mv_64594%3==1) ) goto _ml64596_L69342;
      {
      _pt70483* _tmp70581 = (FLX_NEWP(add_val)(FLX_FPAR_PASS ptrflx_pkgconfig));
      FLX_SET_PC(70582)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt70484((_tmp70581), values));
      }
    FLX_CASE_LABEL(70582)
      goto _ifdoelse_flx_pkgconfig_64501_L65035;
    _ml64596_L69342:;
/*match case 2:|keeprightmost*/
      if(!(_lam_64590_mv_64594%3==2) ) goto _ml64598_L69343;
      {
      _pt70483* _tmp70583 = (FLX_NEWP(tail_val)(FLX_FPAR_PASS ptrflx_pkgconfig));
      FLX_SET_PC(70584)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt70484((_tmp70583), values));
      }
    FLX_CASE_LABEL(70584)
      goto _ifdoelse_flx_pkgconfig_64501_L65035;
    _ml64598_L69343:;
/*match case 3:|keepall*/
      if(!(_lam_64590_mv_64594%3==0) ) goto _ml64600_L69344;
      {
      _pt70483* _tmp70585 = (FLX_NEWP(keep_val)(FLX_FPAR_PASS ptrflx_pkgconfig));
      FLX_SET_PC(70586)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt70484((_tmp70585), values));
      }
    FLX_CASE_LABEL(70586)
      goto _ifdoelse_flx_pkgconfig_64501_L65035;
    _ml64600_L69344:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",335,18,335,57);
;
    _ifdoelse_flx_pkgconfig_64501_L65035:;
      if(!mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt70482((FLX_NEWP(_fI69354__lam_1398)(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig)), ptrflx_pkgconfig->recfields)) /* apply_stack */ ) goto _ifdoelse_flx_pkgconfig_64497_L65038;
      {
      _pt70483* _tmp70588 = (FLX_NEWP(_lam_64602)(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig));
      ::flx::rtl::con_t *tmp = _caller;
      _caller = 0;
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(tmp, _tt70484((_tmp70588), values));
      }
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ifdoelse_flx_pkgconfig_64497_L65038:;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------
//FUNCTION <68005>: cat_uncurry: Apply method
_a13708t_70442 cat_uncurry::apply(_tt70462 const &_arg ){
  sep_uncurry = _arg.mem_0;
  _vI68108_x = _arg.mem_1;
      n = 0; //assign simple
      xs  = _vI68108_x; //init
      _genout_urv70385  = (FLX_NEWP(_fI70387_iterator__apos_2)(FLX_FPAR_PASS this)); //init
      _generator_lists_5045 = _genout_urv70385; //assign simple
    continue__ll_lists_5041_L68109:;
      _vI68088_cat__apos_2_mv_1372  = (_generator_lists_5045)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some s_param_std_1226*/
      if(!andthen(FLX_VNI(_vI68088_cat__apos_2_mv_1372)==1, (FLX_NEWP(_lam_1375)(FLX_FPAR_PASS this))) ) goto _ml1374_L68110;
      s_param_std_1226 = *((_a13708t_70442*)FLX_VNP(_vI68088_cat__apos_2_mv_1372)); //assign simple
      {
      _a5038t_70465* _tmp70590 = (_a5038t_70465*)&n;
      _a5038t_70465 _tmp70591 = s_param_std_1226.size() + 1 ;
      *((_tmp70590))+=((_tmp70591));
      }
      goto continue__ll_lists_5041_L68109;
    _ml1374_L68110:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI68088_cat__apos_2_mv_1372)==0) ) goto _ml1376_L68111;
      goto _em1372_L68112;
    _ml1376_L68111:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",464,5,464,38);
;
    _em1372_L68112:;
      _vI68101_r = ::std::string(""); //assign simple
      {
      _a13708t_70442* _tmp70593 = (_a13708t_70442*)&_vI68101_r;
      ((_tmp70593))->reserve(n);
      }
      _vI68091_cat__apos_2_mv_1377  = _vI68108_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68091_cat__apos_2_mv_1377)==0) ) goto _ml1379_L68113;
      return _vI68101_r;
    _ml1379_L68113:;
/*match case 2:|Snoc (tail_param_std_1228, head_param_std_1229)*/
      if(!andthen(FLX_VNI(_vI68091_cat__apos_2_mv_1377)==1, (FLX_NEWP(_lam_1386)(FLX_FPAR_PASS this))) ) goto _ml1380_L68118;
      head_param_std_1229 = (*((_tt70445*)FLX_VNP(_vI68091_cat__apos_2_mv_1377))).mem_1; //assign simple
      tail_param_std_1228 = (*((_tt70445*)FLX_VNP(_vI68091_cat__apos_2_mv_1377))).mem_0; //assign simple
      _vI68101_r = head_param_std_1229; //assign simple
    next_L68114:;
      _vI68094_cat__apos_2_mv_1381  = tail_param_std_1228; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68094_cat__apos_2_mv_1381)==0) ) goto _ml1383_L68115;
      return _vI68101_r;
    _ml1383_L68115:;
/*match case 2:|Snoc (t_param_std_1231_param_std_1234, h_param_std_1232_param_std_1235)*/
      if(!andthen(FLX_VNI(_vI68094_cat__apos_2_mv_1381)==1, (FLX_NEWP(_lam_1385)(FLX_FPAR_PASS this))) ) goto _ml1384_L68116;
      h_param_std_1232_param_std_1235 = (*((_tt70445*)FLX_VNP(_vI68094_cat__apos_2_mv_1381))).mem_1; //assign simple
      t_param_std_1231_param_std_1234 = (*((_tt70445*)FLX_VNP(_vI68094_cat__apos_2_mv_1381))).mem_0; //assign simple
      {
      _a13708t_70442* _tmp70594 = (_a13708t_70442*)&_vI68101_r;
      _a13708t_70442 _tmp70595 = sep_uncurry + h_param_std_1232_param_std_1235 ;
      ((_tmp70594))->append((_tmp70595));
      }
      tail_param_std_1228 = t_param_std_1231_param_std_1234; //assign simple
      goto next_L68114;
      FLX_HALT("C:/projects/felix/src/packages/lists.fdoc",469,7,469,23,"HALT: Jump to end of function");
    _ml1384_L68116:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",478,7,478,16);
;
      FLX_HALT("C:/projects/felix/src/packages/lists.fdoc",469,7,469,23,"HALT: Jump to end of function");
    _ml1380_L68118:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",479,5,479,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",481,3,481,4); // HACK! 
}

//------------------------------
//FUNCTION <69272>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::search_and_replace'2::_lam_2306: Apply method
 ::flx::rtl::cl_t _fI69272__lam_2306::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9); // HACK! 
}

//------------------------------
//FUNCTION <70143>: flx_pkgconfig::parse_args::aux::_lam_1443: Apply method
 ::flx::rtl::cl_t _fI70143__lam_1443::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",579,9,579,17); // HACK! 
}

//------------------------------
//FUNCTION <70395>: cat_uncurry::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI70395__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <64790>: flx_pkgconfig::lexit: Apply method
_tt70490 lexit::apply(_at70489 const &_arg ){
  ini = _arg.data[0];
  finish = _arg.data[1];
      start = ini; //assign simple
      if(!((start == finish)) ) goto _ifdoend_flx_pkgconfig_64412_L64798;
      return _tt70490(start, ::std::string(""));
    _ifdoend_flx_pkgconfig_64412_L64798:;
      if(!((*start  == ::flx::rtl::strutil::subscript(::std::string(" "),0))) ) goto _ifdoend_flx_pkgconfig_64414_L64801;
      {
      _a15443t_70488* _tmp70598 = (_a15443t_70488*)&start;
      ++*((_tmp70598));
      }
    continue__ll_flx_pkgconfig_10495_L64799:;
      if(FLX_UNLIKELY(!(!((start == finish))  && (*start  == ::flx::rtl::strutil::subscript(::std::string(" "),0)) ) )) goto break__ll_flx_pkgconfig_10495_L64800;
      {
      _a15443t_70488* _tmp70599 = (_a15443t_70488*)&start;
      ++*((_tmp70599));
      }
      goto continue__ll_flx_pkgconfig_10495_L64799;
    break__ll_flx_pkgconfig_10495_L64800:;
      return _tt70490(start, ::std::string(""));
    _ifdoend_flx_pkgconfig_64414_L64801:;
      if(!((*start  == ::flx::rtl::strutil::subscript(::std::string("\""),0))) ) goto _ifdoend_flx_pkgconfig_64416_L64805;
      {
      _a15443t_70488* _tmp70600 = (_a15443t_70488*)&start;
      ++*((_tmp70600));
      }
      p1 = start; //assign simple
    continue__ll_flx_pkgconfig_10510_L64802:;
      if(FLX_UNLIKELY(!(!((start == finish))  && !((*start  == ::flx::rtl::strutil::subscript(::std::string("\""),0)))  ) )) goto break__ll_flx_pkgconfig_10510_L64803;
      {
      _a15443t_70488* _tmp70601 = (_a15443t_70488*)&start;
      ++*((_tmp70601));
      }
      goto continue__ll_flx_pkgconfig_10510_L64802;
    break__ll_flx_pkgconfig_10510_L64803:;
      if(!((start == finish)) ) goto _ifdoend_flx_pkgconfig_64418_L64804;
      return _tt70490(start, ::std::string(p1,start));
    _ifdoend_flx_pkgconfig_64418_L64804:;
      return _tt70490(start + 1 , ::std::string(p1,start));
    _ifdoend_flx_pkgconfig_64416_L64805:;
      if(!((*start  == ::flx::rtl::strutil::subscript(::std::string("'"),0))) ) goto _ifdoend_flx_pkgconfig_64420_L64809;
      {
      _a15443t_70488* _tmp70602 = (_a15443t_70488*)&start;
      ++*((_tmp70602));
      }
      p2 = start; //assign simple
    continue__ll_flx_pkgconfig_10536_L64806:;
      if(FLX_UNLIKELY(!(!((start == finish))  && !((*start  == ::flx::rtl::strutil::subscript(::std::string("'"),0)))  ) )) goto break__ll_flx_pkgconfig_10536_L64807;
      {
      _a15443t_70488* _tmp70603 = (_a15443t_70488*)&start;
      ++*((_tmp70603));
      }
      goto continue__ll_flx_pkgconfig_10536_L64806;
    break__ll_flx_pkgconfig_10536_L64807:;
      if(!((start == finish)) ) goto _ifdoend_flx_pkgconfig_64422_L64808;
      return _tt70490(start, ::std::string(p2,start));
    _ifdoend_flx_pkgconfig_64422_L64808:;
      return _tt70490(start + 1 , ::std::string(p2,start));
    _ifdoend_flx_pkgconfig_64420_L64809:;
      p3 = start; //assign simple
    continue__ll_flx_pkgconfig_10561_L64810:;
      if(FLX_UNLIKELY(!(!((start == finish))  && !((*start  == ::flx::rtl::strutil::subscript(::std::string(" "),0)))  ) )) goto break__ll_flx_pkgconfig_10561_L64811;
      {
      _a15443t_70488* _tmp70604 = (_a15443t_70488*)&start;
      ++*((_tmp70604));
      }
      goto continue__ll_flx_pkgconfig_10561_L64810;
    break__ll_flx_pkgconfig_10561_L64811:;
      return _tt70490(start, ::std::string(p3,start));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",98,5,98,6); // HACK! 
}

//------------------------------
//FUNCTION <68007>: mem_uncurry: Apply method
 ::flx::rtl::cl_t mem_uncurry::apply(_tt70482 const &_arg ){
  eq_uncurry = _arg.mem_0;
  _vI68158_xs = _arg.mem_1;
    start_68457_L68457:;
      _vI68450_mem__apos_2_mv_1388  = _vI68158_xs; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68450_mem__apos_2_mv_1388)==0) ) goto _ml1390_L68449;
      return 0;
    _ml1390_L68449:;
/*match case 2:|Snoc (t_param_std_1236, h_param_std_1237)*/
      if(!andthen(FLX_VNI(_vI68450_mem__apos_2_mv_1388)==1, (FLX_NEWP(_lam_1397)(FLX_FPAR_PASS this))) ) goto _ml1391_L68448;
      h_param_std_1237 = (*((_tt70445*)FLX_VNP(_vI68450_mem__apos_2_mv_1388))).mem_1; //assign simple
      t_param_std_1236 = (*((_tt70445*)FLX_VNP(_vI68450_mem__apos_2_mv_1388))).mem_0; //assign simple
      _vI68455_mem__apos_2_mv_1393  = (eq_uncurry)->clone()
      ->apply(h_param_std_1237) /* general apply */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI68455_mem__apos_2_mv_1393%2==1) ) goto _ml1395_L68454;
      return 1;
    _ml1395_L68454:;
/*match case 2:any*/
/*parallel assignment*/
      _vI68158_xs  = t_param_std_1236; //init
      goto start_68457_L68457;
    _ml1391_L68448:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",505,5,505,58);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",507,3,507,4); // HACK! 
}

//------------------------------

//PROCEDURE <65090:> _init_: Call method
void _init_::stack_call(){
  ::flx::rtl::con_t *cc = call(0);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * _init_::call(::flx::rtl::con_t *_ptr_caller){
  _caller = _ptr_caller;
  INIT_PC
  return this;
}

//PROCEDURE <65090:> _init_: Resume method
::flx::rtl::con_t *_init_::resume(){
      PTF upper = ::std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ"); //assign simple
      PTF lower = ::std::string("abcdefghijklmnopqrstuvwxyz"); //assign simple
      PTF letters = PTF upper + PTF lower ; //assign simple
      PTF gcp->allow_collection_anywhere=false;
      _vI68383_r = aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt70450(range(FLX_FPAR_PASS 0, PTF argc, 1), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp70607 = (void**)&_vI68383_r;
      _rev(((_tmp70607)),(_a13708t_70442*)0);
      }
      tail_mv_1313  = _vI68383_r; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1204, any)*/
      if(!andthen(FLX_VNI(tail_mv_1313)==1, (FLX_NEWP(_lam_1316)(FLX_FPAR_PASS this))) ) goto _ml1315_L68405;
      t_param_std_1204 = (*((_tt70445*)FLX_VNP(tail_mv_1313))).mem_0; //assign simple
      _urv68403  = t_param_std_1204; //init
      goto _end_inline_tail_68410_L68410;
    _ml1315_L68405:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",271,5,271,14);
;
    _end_inline_tail_68410_L68410:;
      _genout_urv70363  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_urv68403) /* apply_stack */; //init
      PTF _ds2_64411 = _genout_urv70363; //assign simple
      PTF _vI65088_return_code = PTF _ds2_64411.mem_0; //assign simple
      PTF _vI65089_result = PTF _ds2_64411.mem_1; //assign simple
      {
      _a13708t_70442 _tmp70609 = lstrip(rstrip(cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt70462(::std::string(" "), PTF _vI65089_result)) /* apply_stack */, ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B"));
      ::flx::rtl::ioutil::write(stdout,((_tmp70609)));
      }
      ::flx::rtl::ioutil::write(stdout,(::std::string("\n")));
      ::std::exit((PTF _vI65088_return_code));
    FLX_RETURN
}
//------------------------------
//FUNCTION <68695>: +::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI68695__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <64812>: flx_pkgconfig::lexstr: Apply method
void* lexstr::apply(_a13708t_70442 const &_arg ){
  _vI64826_s__apos_ = _arg;
      s = _vI64826_s__apos_; //assign simple
      first = s.c_str(); //assign simple
      _vI64816_finish = s.c_str()+s.size(); //assign simple
      current = first; //assign simple
      words = (void* /*VR_nullptr*/ )0; //assign simple
    continue__ll_flx_pkgconfig_10580_L64827:;
      if(FLX_UNLIKELY(!(!((current == _vI64816_finish)) ) )) goto break__ll_flx_pkgconfig_10580_L64828;
      lexstr_mv_64514  = lexit(ptrflx_pkgconfig)
      .apply(_at70489(current, _vI64816_finish)) /* apply_stack */; //init
/*begin match*/
/*match case 1:(next_param_flx_pkgconfig_64424, lexeme_param_flx_pkgconfig_64425)*/
      lexeme_param_flx_pkgconfig_64425 = lexstr_mv_64514.mem_1; //assign simple
      next_param_flx_pkgconfig_64424 = lexstr_mv_64514.mem_0; //assign simple
      current = next_param_flx_pkgconfig_64424; //assign simple
      if(!(!((lexeme_param_flx_pkgconfig_64425 == ::std::string(""))) ) ) goto continue__ll_flx_pkgconfig_10580_L64827;
      words = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(words, lexeme_param_flx_pkgconfig_64425))); //assign simple
      goto continue__ll_flx_pkgconfig_10580_L64827;
      goto continue__ll_flx_pkgconfig_10580_L64827;
      goto continue__ll_flx_pkgconfig_10580_L64827;
    break__ll_flx_pkgconfig_10580_L64828:;
      return _fI69185_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at70473(words, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",118,5,118,6); // HACK! 
}

//------------------------------
//FUNCTION <69333>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI69333__lam_1398::apply(_a13708t_70442 const &_arg ){
  _vI69334_x = _arg;
      return eq(_vI69334_x, ptr_lam_64590->key);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------

//PROCEDURE <64786:> flx_pkgconfig::print_help: Call method
void print_help::stack_call(){
      {
      _a13708t_70442 _tmp70610 = ::std::string("flx_pkgconfig [options] pkg pkg ...") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70610)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70611 = ::std::string("  returns code 1 if any packages are missing unless --noerror is specified") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70611)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70612 = ::std::string("  prints package or field list to standard output on one line") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70612)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70613 = ::std::string("options: (follows GNU conventions)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70613)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70614 = ::std::string("  --path=dirname        set database directory name") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70614)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70615 = ::std::string("  --path+=dirname       append database directory name") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70615)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70616 = ::std::string("  --extension=fpc       set resource descriptor extensions,") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70616)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70617 = ::std::string("                          default 'fpc' use 'pc' for pkgconfig databases") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70617)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70618 = ::std::string("  -h") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70618)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70619 = ::std::string("  --hide                only process first package in path with a given name") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70619)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70620 = ::std::string("                          default, process all occurences") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70620)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70621 = ::std::string("  --list                list available packages from specified set") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70621)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70622 = ::std::string("  --missing             list missing packages from specified set") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70622)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70623 = ::std::string("  --noerror             do not return 1 because of missing packages") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70623)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70624 = ::std::string("  -r") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70624)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70625 = ::std::string("  --rec                 form transitive closure of specified set based on Requires field") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70625)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70626 = ::std::string("  --rec=field           form transitive closure of specified set based on specified field") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70626)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70627 = ::std::string("  -b") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70627)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70628 = ::std::string("  --backwards           process specified packages in reverse order") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70628)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70629 = ::std::string("  --field=field         collate values of field in package set") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70629)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70630 = ::std::string("  --keepleftmost        remove duplicate values in output keeping only leftmost occurrence") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70630)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70631 = ::std::string("  --keeprightmost       remove duplicate values in output keeping only rightmost occurrence") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70631)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70632 = ::std::string("  --keepall             keep duplicate values in output") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70632)));
      }
      fflush(stdout);
      {
      _a13708t_70442 _tmp70633 = ::std::string("  @filename             Replace with arguments from filename, one line per argument") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp70633)));
      }
      fflush(stdout);
      return; // proc return from stackable 

}
//------------------------------
//FUNCTION <69324>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI69324__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//C FUNC <67138>: eq
 ::flx::rtl::cl_t eq( _a13708t_70442 _vI67616_x, _a13708t_70442 _vI67617_y){
      return (_vI67616_x == _vI67617_y);
}
//------------------------------
//FUNCTION <68559>: flx_pkgconfig::add_val::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <68569>: flx_pkgconfig::add_val::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI68569__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <70224>: flx_pkgconfig::reattach_drive_letters::_lam_64546::_lam_64547: Apply method
 ::flx::rtl::cl_t _lam_64547::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",231,18,231,31); // HACK! 
}

//------------------------------
//FUNCTION <70149>: flx_pkgconfig::parse_args::aux: Apply method
void* _fI70149_aux::apply(_tt70462 const &_arg ){
  _vI70150_x = _arg.mem_0;
  _vI70151_y = _arg.mem_1;
    start_69843_L70161:;
      find_first_of_mv_2096  = _vI70150_x.find_first_of((" \n\x0D\x09,")); //init
/*begin match*/
/*match case 1:(i_param_std_1853 when (== (i_param_std_1853, stl_npos)))*/
      if(!((find_first_of_mv_2096 == ::std::string::npos)) ) goto _ml2098_L70158;
      aux_mv_2237  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_first_of_69814_L70159;
    _ml2098_L70158:;
/*match case 2:i_param_std_1854*/
      i_param_std_1854 = find_first_of_mv_2096; //assign simple
      aux_mv_2237  = FLX_VNR(1, new(*PTF gcp, _a5038t_70465_ptr_map, true) _a5038t_70465 (i_param_std_1854)); //init
    _end_inline_find_first_of_69814_L70159:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(aux_mv_2237)==0) ) goto _ml2239_L70154;
      return FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70151_y, _vI70150_x)));
    _ml2239_L70154:;
/*match case 2:|Some n_param_std_1913*/
      if(!andthen(FLX_VNI(aux_mv_2237)==1, (FLX_NEWP(_lam_2241)(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml2240_L70155;
      n_param_std_1913 = *((_a5038t_70465*)FLX_VNP(aux_mv_2237)); //assign simple
/*parallel assignment*/
      _vI70151_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70151_y, ::flx::rtl::strutil::substr(_vI70150_x,0,n_param_std_1913)))); //init
      _vI70150_x  = ::flx::rtl::strutil::substr(_vI70150_x,n_param_std_1913 + 1 ,_vI70150_x.size()); //init
      goto start_69843_L70161;
    _ml2240_L70155:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",502,7,502,61);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",504,5,504,6); // HACK! 
}

//------------------------------
//FUNCTION <70309>: flx_pkgconfig::aux: Apply method
void* _fI70309_aux::apply(_tt70462 const &_arg ){
  _vI70310_x = _arg.mem_0;
  _vI70311_y = _arg.mem_1;
    start_70272_L70321:;
      _vI70316_find_mv_2046  = _vI70310_x.find((::flx::rtl::strutil::subscript(::std::string(":"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI70316_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L70318;
      aux_mv_2226  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_70243_L70319;
    _ml2048_L70318:;
/*match case 2:i_param_std_1834*/
      _vI70317_i_param_std_1834 = _vI70316_find_mv_2046; //assign simple
      aux_mv_2226  = FLX_VNR(1, new(*PTF gcp, _a5038t_70465_ptr_map, true) _a5038t_70465 (_vI70317_i_param_std_1834)); //init
    _end_inline_find_70243_L70319:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(aux_mv_2226)==0) ) goto _ml2228_L70314;
      return FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70311_y, _vI70310_x)));
    _ml2228_L70314:;
/*match case 2:|Some n_param_std_1909*/
      if(!andthen(FLX_VNI(aux_mv_2226)==1, (FLX_NEWP(_lam_2230)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml2229_L70315;
      n_param_std_1909 = *((_a5038t_70465*)FLX_VNP(aux_mv_2226)); //assign simple
/*parallel assignment*/
      _vI70311_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70311_y, ::flx::rtl::strutil::substr(_vI70310_x,0,n_param_std_1909)))); //init
      _vI70310_x  = ::flx::rtl::strutil::substr(_vI70310_x,n_param_std_1909 + 1 ,_vI70310_x.size()); //init
      goto start_70272_L70321;
    _ml2229_L70315:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,7,478,61);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",480,5,480,6); // HACK! 
}

//------------------------------
//C FUNC <14342>: rstrip
_a13708t_70442 rstrip( _a13708t_70442 _vI14347_x, _a13708t_70442 e){
  _a5038t_70465 j;
   ::flx::rtl::cl_t _vI14345_found;
  _a5038t_70465 _vI14344_i;
      if(!((0 < _vI14347_x.size())) ) goto _ifdoelse_std_1904_L14359;
      _vI14344_i = _vI14347_x.size() - 1 ; //assign simple
      {
      _a5038t_70465* _tmp70636 = (_a5038t_70465*)&_vI14344_i;
      ++*((_tmp70636));
      }
    redo__ll_strings_7042_L14349:;
      if(FLX_UNLIKELY(!((0 < _vI14344_i)) )) goto _ifdoelse_std_1904_L14359;
      {
      _a5038t_70465* _tmp70637 = (_a5038t_70465*)&_vI14344_i;
      --*((_tmp70637));
      }
      _vI14345_found = 0; //assign simple
      j = 0; //assign simple
    redo__ll_strings_7046_L14350:;
      if(FLX_UNLIKELY(!(!((e.size() - 1  < j)) ) )) goto break__ll_strings_7046_L14354;
      if(!((::flx::rtl::strutil::subscript(_vI14347_x,_vI14344_i) == ::flx::rtl::strutil::subscript(e,j))) ) goto _ifdoelse_std_1906_L14352;
      _vI14345_found = 1; //assign simple
    _ifdoelse_std_1906_L14352:;
      {
      _a5038t_70465* _tmp70638 = (_a5038t_70465*)&j;
      ++*((_tmp70638));
      }
      goto redo__ll_strings_7046_L14350;
    break__ll_strings_7046_L14354:;
      if(_vI14345_found) goto redo__ll_strings_7042_L14349;
      return ::flx::rtl::strutil::substr(_vI14347_x,0,(static_cast<int>(_vI14344_i)/*int.flx: ctor*/) + 1 );
      goto redo__ll_strings_7042_L14349;
    _ifdoelse_std_1904_L14359:;
      return ::std::string("");
}
//------------------------------
//FUNCTION <68795>: isidstart::_lam_168: Apply method
 ::flx::rtl::cl_t _lam_168::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/char.fdoc",66,57,66,62); // HACK! 
}

//------------------------------
//FUNCTION <70133>: flx_pkgconfig::parse_args::aux::aux_uncurry: Apply method
void* _fI70133_aux_uncurry::apply(_at70473 const &_arg ){
  _vI70134_x_uncurry = _arg.data[0];
  _vI70135_y = _arg.data[1];
    start_68488_L70142:;
      _vI70138_aux__apos_2_mv_1328  = _vI70134_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI70138_aux__apos_2_mv_1328)==0) ) goto _ml1330_L70137;
      return _vI70135_y;
    _ml1330_L70137:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI70138_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI70141__lam_1332)(FLX_FPAR_PASS this, ptr_fI70125_aux, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1331_L70136;
      _vI70139_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI70138_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI70140_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI70138_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI70135_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70135_y, _vI70139_h_param_std_1210))); //init
      _vI70134_x_uncurry  = _vI70140_t_param_std_1209; //init
      goto start_68488_L70142;
    _ml1331_L70136:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <69536>: flx_pkgconfig::handle_pkg::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI69536__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <68666>: flx_pkgconfig::tail_val::aux::aux_uncurry: Apply method
void* _fI68666_aux_uncurry::apply(_at70473 const &_arg ){
  _vI68667_x_uncurry = _arg.data[0];
  _vI68668_y = _arg.data[1];
    start_68488_L68675:;
      _vI68671_aux__apos_2_mv_1328  = _vI68667_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68671_aux__apos_2_mv_1328)==0) ) goto _ml1330_L68670;
      return _vI68668_y;
    _ml1330_L68670:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI68671_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI68674__lam_1332)(FLX_FPAR_PASS this, ptraux, ptrtail_val, ptrflx_pkgconfig))) ) goto _ml1331_L68669;
      _vI68672_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI68671_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI68673_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI68671_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI68668_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI68668_y, _vI68672_h_param_std_1210))); //init
      _vI68667_x_uncurry  = _vI68673_t_param_std_1209; //init
      goto start_68488_L68675;
    _ml1331_L68669:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <69442>: flx_pkgconfig::handle_pkg::_lam_64579::aux::aux_uncurry: Apply method
void* _fI69442_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69443_x_uncurry = _arg.data[0];
  _vI69444_y = _arg.data[1];
    start_68488_L69451:;
      _vI69447_aux__apos_2_mv_1328  = _vI69443_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69447_aux__apos_2_mv_1328)==0) ) goto _ml1330_L69446;
      return _vI69444_y;
    _ml1330_L69446:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI69447_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI69450__lam_1332)(FLX_FPAR_PASS this, ptr_fI69434_aux, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L69445;
      _vI69448_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI69447_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI69449_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI69447_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI69444_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69444_y, _vI69448_h_param_std_1210))); //init
      _vI69443_x_uncurry  = _vI69449_t_param_std_1209; //init
      goto start_68488_L69451;
    _ml1331_L69445:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <70162>: flx_pkgconfig::parse_args::aux_uncurry: Apply method
void* _fI70162_aux_uncurry::apply(_at70473 const &_arg ){
  _vI70163_x_uncurry = _arg.data[0];
  _vI70164_y = _arg.data[1];
    start_68488_L70171:;
      _vI70167_aux__apos_2_mv_1328  = _vI70163_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI70167_aux__apos_2_mv_1328)==0) ) goto _ml1330_L70166;
      return _vI70164_y;
    _ml1330_L70166:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI70167_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI70170__lam_1332)(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1331_L70165;
      _vI70168_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI70167_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI70169_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI70167_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI70164_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70164_y, _vI70168_h_param_std_1210))); //init
      _vI70163_x_uncurry  = _vI70169_t_param_std_1209; //init
      goto start_68488_L70171;
    _ml1331_L70165:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <69406>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI69406__lam_1398::apply(_a13708t_70442 const &_arg ){
  _vI69407_x = _arg;
      return eq(_vI69407_x, ptrhandle_pkg->pkg);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <68700>: +::aux_uncurry: Apply method
void* _fI68700_aux_uncurry::apply(_at70473 const &_arg ){
  _vI68701_x_uncurry = _arg.data[0];
  _vI68702_y = _arg.data[1];
    start_68488_L68709:;
      _vI68705_aux__apos_2_mv_1328  = _vI68701_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68705_aux__apos_2_mv_1328)==0) ) goto _ml1330_L68704;
      return _vI68702_y;
    _ml1330_L68704:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI68705_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI68708__lam_1332)(FLX_FPAR_PASS this, ptr_fI67551___plus_))) ) goto _ml1331_L68703;
      _vI68706_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI68705_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI68707_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI68705_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI68702_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI68702_y, _vI68706_h_param_std_1210))); //init
      _vI68701_x_uncurry  = _vI68707_t_param_std_1209; //init
      goto start_68488_L68709;
    _ml1331_L68703:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <68453>: mem_uncurry::_lam_1397: Apply method
 ::flx::rtl::cl_t _lam_1397::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",505,7,505,15); // HACK! 
}

//------------------------------
//FUNCTION <70141>: flx_pkgconfig::parse_args::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI70141__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <70223>: flx_pkgconfig::reattach_drive_letters::_lam_64546: Apply method
 ::flx::rtl::cl_t _lam_64546::apply(){
      return andthen(!!((reinterpret<_tt70462>(flx::list::snoc2cons<_a13708t_70442>((ptrreattach_drive_letters->reattach_drive_letters_mv_64538)))).mem_1) , (FLX_NEWP(_lam_64547)(FLX_FPAR_PASS this, ptrreattach_drive_letters, ptrflx_pkgconfig)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",231,9,231,32); // HACK! 
}

//------------------------------
//FUNCTION <69452>: flx_pkgconfig::handle_pkg::_lam_64579::aux::_lam_1443: Apply method
 ::flx::rtl::cl_t _fI69452__lam_1443::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",579,9,579,17); // HACK! 
}

//------------------------------
//FUNCTION <68384>: _init_::aux_uncurry: Apply method
void* aux_uncurry::apply(_tt70450 const &_arg ){
  inp_uncurry = _arg.mem_0;
  out = _arg.mem_1;
    start_68347_L68393:;
      _vI68389_aux__apos_2_mv_1322  = inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68389_aux__apos_2_mv_1322)==0) ) goto _ml1324_L68388;
      return out;
    _ml1324_L68388:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI68389_aux__apos_2_mv_1322)==1, (FLX_NEWP(_lam_1326)(FLX_FPAR_PASS this, ptr_init_))) ) goto _ml1325_L68387;
      h_param_std_1208 = (*((_tt70448*)FLX_VNP(_vI68389_aux__apos_2_mv_1322))).mem_1; //assign simple
      t_param_std_1207 = (*((_tt70448*)FLX_VNP(_vI68389_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      out  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(out, _a68244_argv(FLX_FPAR_PASS h_param_std_1208)))); //init
      inp_uncurry  = t_param_std_1207; //init
      goto start_68347_L68393;
    _ml1325_L68387:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <70320>: flx_pkgconfig::aux::_lam_2230: Apply method
 ::flx::rtl::cl_t _lam_2230::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,9,478,14); // HACK! 
}

//------------------------------
//FUNCTION <69546>: flx_pkgconfig::handle_pkg::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI69546__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------

//PROCEDURE <64987:> flx_pkgconfig::tail_val: Call method
::flx::rtl::con_t * tail_val::call(::flx::rtl::con_t *_ptr_caller, _a13708t_70442 const &_arg){
  _caller = _ptr_caller;
  _vI64989_v = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <64987:> flx_pkgconfig::tail_val: Resume method
::flx::rtl::con_t *tail_val::resume(){
      ptrflx_pkgconfig->result = aux(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at70473(ptrflx_pkgconfig->result, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <68959>: search_and_replace_uncurry::_lam_2304: Apply method
 ::flx::rtl::cl_t _lam_2304::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9); // HACK! 
}

//------------------------------
//FUNCTION <69418>: flx_pkgconfig::handle_pkg::_lam_64579::aux_uncurry: Apply method
void* _fI69418_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69419_x_uncurry = _arg.data[0];
  _vI69420_y = _arg.data[1];
    start_68488_L69427:;
      _vI69423_aux__apos_2_mv_1328  = _vI69419_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69423_aux__apos_2_mv_1328)==0) ) goto _ml1330_L69422;
      return _vI69420_y;
    _ml1330_L69422:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI69423_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI69426__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L69421;
      _vI69424_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI69423_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI69425_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI69423_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI69420_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69420_y, _vI69424_h_param_std_1210))); //init
      _vI69419_x_uncurry  = _vI69425_t_param_std_1209; //init
      goto start_68488_L69427;
    _ml1331_L69421:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <5658>: isidstart: Apply method
 ::flx::rtl::cl_t isidstart::apply(char const &_arg ){
  x = _arg;
      find_mv_2046  = (PTF letters).find(x); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L68793;
      isidstart_mv_165  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_68779_L68794;
    _ml2048_L68793:;
/*match case 2:i_param_std_1834*/
      i_param_std_1834 = find_mv_2046; //assign simple
      isidstart_mv_165  = FLX_VNR(1, new(*PTF gcp, _a5038t_70465_ptr_map, true) _a5038t_70465 (i_param_std_1834)); //init
    _end_inline_find_68779_L68794:;
/*begin match*/
/*match case 1:|Some any*/
      if(!andthen(FLX_VNI(isidstart_mv_165)==1, (FLX_NEWP(_lam_168)(FLX_FPAR_PASS this))) ) goto _ml167_L68789;
      return 1;
    _ml167_L68789:;
/*match case 2:|None*/
      if(!(FLX_VNI(isidstart_mv_165)==0) ) goto _ml169_L68790;
      return 0;
    _ml169_L68790:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/char.fdoc",66,28,66,87);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/char.fdoc",66,3,66,97); // HACK! 
}

//------------------------------
//FUNCTION <68561>: flx_pkgconfig::add_val::aux_uncurry: Apply method
void* _fI68561_aux_uncurry::apply(_at70473 const &_arg ){
  _vI68562_x_uncurry = _arg.data[0];
  _vI68563_y = _arg.data[1];
    start_68488_L68570:;
      _vI68566_aux__apos_2_mv_1328  = _vI68562_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68566_aux__apos_2_mv_1328)==0) ) goto _ml1330_L68565;
      return _vI68563_y;
    _ml1330_L68565:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI68566_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI68569__lam_1332)(FLX_FPAR_PASS this, ptradd_val, ptrflx_pkgconfig))) ) goto _ml1331_L68564;
      _vI68567_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI68566_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI68568_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI68566_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI68563_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI68563_y, _vI68567_h_param_std_1210))); //init
      _vI68562_x_uncurry  = _vI68568_t_param_std_1209; //init
      goto start_68488_L68570;
    _ml1331_L68564:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <70387>: cat_uncurry::iterator'2: Apply method
void* _fI70387_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L70388:;
      _vI70392_iterator__apos_2_mv_1504  = ptrcat_uncurry->xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI70392_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI70395__lam_1507)(FLX_FPAR_PASS this, ptrcat_uncurry))) ) goto _ml1506_L70391;
      _vI70393_h_param_std_1260 = (*((_tt70445*)FLX_VNP(_vI70392_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI70394_t_param_std_1259 = (*((_tt70445*)FLX_VNP(_vI70392_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrcat_uncurry->xs = _vI70394_t_param_std_1259; //assign simple
      FLX_SET_PC(70648)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_70442_ptr_map, true) _a13708t_70442 (_vI70393_h_param_std_1260));//yield
    FLX_CASE_LABEL(70648)
      goto continue__ll_lists_5177_L70388;
    _ml1506_L70391:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI70392_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L70390;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L70390:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L70388;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <69265>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::search_and_replace'2::_lam_2304: Apply method
 ::flx::rtl::cl_t _fI69265__lam_2304::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9); // HACK! 
}

//------------------------------
//FUNCTION <69506>: flx_pkgconfig::handle_pkg::_lam_64579::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI69506__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <69408>: flx_pkgconfig::handle_pkg::_lam_64579::aux_uncurry: Apply method
void* _fI69408_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69409_x_uncurry = _arg.data[0];
  _vI69410_y = _arg.data[1];
    start_68488_L69417:;
      _vI69413_aux__apos_2_mv_1328  = _vI69409_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69413_aux__apos_2_mv_1328)==0) ) goto _ml1330_L69412;
      return _vI69410_y;
    _ml1330_L69412:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI69413_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI69416__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L69411;
      _vI69414_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI69413_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI69415_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI69413_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI69410_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69410_y, _vI69414_h_param_std_1210))); //init
      _vI69409_x_uncurry  = _vI69415_t_param_std_1209; //init
      goto start_68488_L69417;
    _ml1331_L69411:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <69185>: flx_pkgconfig::lexstr::aux_uncurry: Apply method
void* _fI69185_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69186_x_uncurry = _arg.data[0];
  _vI69187_y = _arg.data[1];
    start_68488_L69194:;
      _vI69190_aux__apos_2_mv_1328  = _vI69186_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69190_aux__apos_2_mv_1328)==0) ) goto _ml1330_L69189;
      return _vI69187_y;
    _ml1330_L69189:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI69190_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI69193__lam_1332)(FLX_FPAR_PASS this, ptrlexstr, ptrflx_pkgconfig))) ) goto _ml1331_L69188;
      _vI69191_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI69190_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI69192_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI69190_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI69187_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69187_y, _vI69191_h_param_std_1210))); //init
      _vI69186_x_uncurry  = _vI69192_t_param_std_1209; //init
      goto start_68488_L69194;
    _ml1331_L69188:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <68392>: _init_::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <70115>: flx_pkgconfig::parse_args::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI70115__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------

//PROCEDURE <64995:> flx_pkgconfig::handle_pkg: Call method
::flx::rtl::con_t * handle_pkg::call(::flx::rtl::con_t *_ptr_caller, _tt70462 const &_arg){
  _caller = _ptr_caller;
  pkg = _arg.mem_0;
  trace = _arg.mem_1;
  INIT_PC
  return this;
}

//PROCEDURE <64995:> flx_pkgconfig::handle_pkg: Resume method
::flx::rtl::con_t *handle_pkg::resume(){
  FLX_START_SWITCH
      variables = (void* /*VR_nullptr*/ )0; //assign simple
      if(!mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt70482((FLX_NEWP(_fI69515__lam_1398)(FLX_FPAR_PASS this, ptrflx_pkgconfig)), trace)) /* apply_stack */ ) goto _ifret_flx_pkgconfig_64486_L65059;
      FLX_RETURN // procedure return
    _ifret_flx_pkgconfig_64486_L65059:;
      found = 0; //assign simple
      {
      _pt70483* _tmp70652 = (FLX_NEWP(_lam_64579)(FLX_FPAR_PASS this, ptrflx_pkgconfig));
      FLX_SET_PC(70653)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt70484((_tmp70652), ptrflx_pkgconfig->dirs));
      }
    FLX_CASE_LABEL(70653)
      if(found) goto _ifdoelse_flx_pkgconfig_64506_L65065;
      {
      _a13708t_70442 _tmp70654 = (::std::string("package not found: ") + pkg ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp70654)));
      }
      fflush(stderr);
      if(!ptrflx_pkgconfig->require_pkg_exists ) goto _ifdoelse_flx_pkgconfig_64508_L65061;
      ptrflx_pkgconfig->return_code = 1; //assign simple
    _ifdoelse_flx_pkgconfig_64508_L65061:;
      if(!ptrflx_pkgconfig->missing ) goto _ifdoelse_flx_pkgconfig_64506_L65065;
      _vI69525_insert_unique__apos_3_mv_1428  = mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt70482((FLX_NEWP(_fI69526__lam_1398)(FLX_FPAR_PASS this, ptrflx_pkgconfig)), ptrflx_pkgconfig->result)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI69525_insert_unique__apos_3_mv_1428%2==1) ) goto _ml1430_L69524;
      _vI69523__urv68543  = ptrflx_pkgconfig->result; //init
      goto _end_hash_856310192;
    _ml1430_L69524:;
/*match case 2:any*/
      _vI69523__urv68543  = _fI69538_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at70473(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_fI69528_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at70473(ptrflx_pkgconfig->result, (void* /*VR_nullptr*/ )0)) /* apply_stack */, pkg))), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
    _end_hash_856310192:;
      ptrflx_pkgconfig->result = _vI69523__urv68543; //assign simple
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ifdoelse_flx_pkgconfig_64506_L65065:;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------
//FUNCTION <70416>: cat_uncurry::_lam_1385: Apply method
 ::flx::rtl::cl_t _lam_1385::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",474,9,474,17); // HACK! 
}

//------------------------------
//FUNCTION <69243>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::search_and_replace'2: Apply method
_a13708t_70442 _fI69243_search_and_replace__apos_2::apply(_a13708t_70442 const &_arg ){
  _vI69247_v = _arg;
      _vI69255_xs  = ptrhandle_pkg->variables; //init
      _genout_urv69202  = (FLX_NEWP(_fI69256_iterator__apos_2)(FLX_FPAR_PASS this, ptr_lam_64590, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig)); //init
      _vI69244__generator_strings_7324 = _genout_urv69202; //assign simple
    continue__ll_strings_7319_L69248:;
      _vI69242_search_and_replace__apos_2_mv_2301  = (_vI69244__generator_strings_7324)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some (k_param_std_1958, b_param_std_1959)*/
      if(!andthen(FLX_VNI(_vI69242_search_and_replace__apos_2_mv_2301)==1, (FLX_NEWP(_fI69265__lam_2304)(FLX_FPAR_PASS this, ptr_lam_64590, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml2303_L69249;
      _vI69245_b_param_std_1959 = ((*((_at70444*)FLX_VNP(_vI69242_search_and_replace__apos_2_mv_2301))).data)[1]; //assign simple
      _vI69246_k_param_std_1958 = ((*((_at70444*)FLX_VNP(_vI69242_search_and_replace__apos_2_mv_2301))).data)[0]; //assign simple
      _vI69269_spos  = 0; //init
      _vI69266_m = _vI69246_k_param_std_1958.size(); //assign simple
      _vI69267_o = ::flx::rtl::strutil::substr(_vI69247_v,0,_vI69269_spos); //assign simple
      _vI69268_n = _vI69247_v.find(_vI69246_k_param_std_1958,_vI69269_spos); //assign simple
    continue__ll_strings_7305_L69270:;
      if(FLX_UNLIKELY(!(!((_vI69268_n == ::std::string::npos)) ) )) goto break__ll_strings_7305_L69271;
      {
      _a13708t_70442* _tmp70655 = (_a13708t_70442*)&_vI69267_o;
      _a13708t_70442 _tmp70656 = ::flx::rtl::strutil::substr(_vI69247_v,_vI69269_spos,_vI69268_n) + _vI69245_b_param_std_1959 ;
      ((_tmp70655))->append((_tmp70656));
      }
      _vI69269_spos = _vI69268_n + _vI69266_m ; //assign simple
      _vI69268_n = ((_vI69247_v.find(_vI69246_k_param_std_1958,_vI69269_spos)))/*int.flx: ctor size IDENT*/; //assign simple
      goto continue__ll_strings_7305_L69270;
    break__ll_strings_7305_L69271:;
      {
      _a13708t_70442* _tmp70657 = (_a13708t_70442*)&_vI69267_o;
      _a13708t_70442 _tmp70658 = ::flx::rtl::strutil::substr(_vI69247_v,_vI69269_spos,_vI69247_v.size());
      ((_tmp70657))->append((_tmp70658));
      }
      _vI69247_v = _vI69267_o; //assign simple
      goto continue__ll_strings_7319_L69248;
    _ml2303_L69249:;
/*match case 2:|Some any*/
      if(!andthen(FLX_VNI(_vI69242_search_and_replace__apos_2_mv_2301)==1, (FLX_NEWP(_fI69272__lam_2306)(FLX_FPAR_PASS this, ptr_lam_64590, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml2305_L69250;
      goto continue__ll_strings_7319_L69248;
    _ml2305_L69250:;
/*match case 3:|None*/
      if(!(FLX_VNI(_vI69242_search_and_replace__apos_2_mv_2301)==0) ) goto _ml2307_L69251;
      goto _em2301_L69252;
    _ml2307_L69251:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9);
;
    _em2301_L69252:;
      return _vI69247_v;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",742,3,742,4); // HACK! 
}

//------------------------------
//FUNCTION <69426>: flx_pkgconfig::handle_pkg::_lam_64579::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI69426__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------

//PROCEDURE <64999:> flx_pkgconfig::handle_pkg::_lam_64579: Call method
::flx::rtl::con_t * _lam_64579::call(::flx::rtl::con_t *_ptr_caller, _a13708t_70442 const &_arg){
  _caller = _ptr_caller;
  dir = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <64999:> flx_pkgconfig::handle_pkg::_lam_64579: Resume method
::flx::rtl::con_t *_lam_64579::resume(){
  FLX_START_SWITCH
      _lam_64579_mv_64581  = (dir == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_lam_64579_mv_64581%2==1) ) goto _ml64583_L69362;
      _urv69360  = ::std::string("."); //init
      goto _end_hash_577488139;
    _ml64583_L69362:;
/*match case 2:any*/
      _urv69360  = dir; //init
    _end_hash_577488139:;
      filename = (((_urv69360 + ::std::string("\\") ) + ptrhandle_pkg->pkg ) + ::std::string(".") ) + ptrflx_pkgconfig->extension ; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_562_L69392;
      {
      _a13708t_70442 _tmp70660 = (::std::string("[Open_input] ") + filename ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp70660)));
      }
      fflush(stderr);
    _ifdoelse_std_562_L69392:;
      _genout_urv69397  = fopen(filename.c_str(),"rb"); //init
      _genout_urv69388  = _genout_urv69397; //init
      _genout_urv69390  = _genout_urv69388; //init
      file = _genout_urv69390; //assign simple
      _genout_urv69398  = file!=(FILE*)0; //init
      if(!_genout_urv69398 ) goto _ifdoelse_flx_pkgconfig_64488_L65055;
      if(!ptrflx_pkgconfig->dolist ) goto _ifdoelse_flx_pkgconfig_64490_L65046;
      _lam_64579_mv_64585  = ptrflx_pkgconfig->keep; //init
/*begin match*/
/*match case 1:|keepleftmost*/
      if(!(_lam_64579_mv_64585%3==1) ) goto _ml64587_L65041;
      _vI69405_insert_unique__apos_3_mv_1428  = mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt70482((FLX_NEWP(_fI69406__lam_1398)(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)), ptrflx_pkgconfig->result)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI69405_insert_unique__apos_3_mv_1428%2==1) ) goto _ml1430_L69404;
      _vI69403__urv68543  = ptrflx_pkgconfig->result; //init
      goto _end_hash_856309037;
    _ml1430_L69404:;
/*match case 2:any*/
      _vI69403__urv68543  = _fI69418_aux_uncurry(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at70473(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_fI69408_aux_uncurry(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at70473(ptrflx_pkgconfig->result, (void* /*VR_nullptr*/ )0)) /* apply_stack */, ptrhandle_pkg->pkg))), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
    _end_hash_856309037:;
      ptrflx_pkgconfig->result = _vI69403__urv68543; //assign simple
      goto _ifdoelse_flx_pkgconfig_64490_L65046;
    _ml64587_L65041:;
/*match case 2:|keeprightmost*/
      if(!(_lam_64579_mv_64585%3==2) ) goto _ml64588_L65042;
      ptrflx_pkgconfig->result = _fI69434_aux(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at70473(ptrflx_pkgconfig->result, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      goto _ifdoelse_flx_pkgconfig_64490_L65046;
    _ml64588_L65042:;
/*match case 3:|keepall*/
      if(!(_lam_64579_mv_64585%3==0) ) goto _ml64589_L65043;
      ptrflx_pkgconfig->result = _fI67551___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt70445(ptrflx_pkgconfig->result, ptrhandle_pkg->pkg)) /* apply_stack */; //assign simple
      goto _ifdoelse_flx_pkgconfig_64490_L65046;
    _ml64589_L65043:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",306,14,306,23);
;
    _ifdoelse_flx_pkgconfig_64490_L65046:;
      lines = (void* /*VR_nullptr*/ )0; //assign simple
      _genout_urv69462  = ::flx::rtl::ioutil::readln(file); //init
      _vI65006_line = _genout_urv69462; //assign simple
    continue__ll_flx_pkgconfig_10814_L65047:;
      if(FLX_UNLIKELY(!(!((_vI65006_line == ::std::string(""))) ) )) goto break__ll_flx_pkgconfig_10814_L65050;
      _vI65006_line = lstrip(rstrip(_vI65006_line, ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //assign simple
      if(!(!((_vI65006_line == ::std::string("")))  && !((::flx::rtl::strutil::subscript(_vI65006_line,0) == ::flx::rtl::strutil::subscript(::std::string("#"),0)))  ) ) goto _ifdoelse_flx_pkgconfig_64493_L65049;
      lines = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(lines, _vI65006_line))); //assign simple
    _ifdoelse_flx_pkgconfig_64493_L65049:;
      _genout_urv69495  = ::flx::rtl::ioutil::readln(file); //init
      _vI65006_line = _genout_urv69495; //assign simple
      goto continue__ll_flx_pkgconfig_10814_L65047;
    break__ll_flx_pkgconfig_10814_L65050:;
      if(ptrflx_pkgconfig->backwards) goto _ifdoelse_flx_pkgconfig_64495_L65052;
      lines = _fI69498_aux_uncurry(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at70473(lines, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
    _ifdoelse_flx_pkgconfig_64495_L65052:;
      {
      _pt70483* _tmp70662 = (FLX_NEWP(_lam_64590)(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig));
      FLX_SET_PC(70663)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt70484((_tmp70662), lines));
      }
    FLX_CASE_LABEL(70663)
      (void)fclose(file);
      ptrhandle_pkg->found = 1; //assign simple
      if(!ptrflx_pkgconfig->hide ) goto _ifdoelse_flx_pkgconfig_64488_L65055;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ifdoelse_flx_pkgconfig_64488_L65055:;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------
//FUNCTION <70409>: cat_uncurry::_lam_1386: Apply method
 ::flx::rtl::cl_t _lam_1386::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",469,7,469,23); // HACK! 
}

//------------------------------
//FUNCTION <64854>: flx_pkgconfig::xfind: Apply method
 ::flx::rtl::cl_t xfind::apply(_at70444 const &_arg ){
  flags = _arg.data[0];
  c = _arg.data[1];
      find_mv_2026  = flags.find(c); //init
/*begin match*/
/*match case 1:(i_param_std_1825 when (== (i_param_std_1825, stl_npos)))*/
      if(!((find_mv_2026 == ::std::string::npos)) ) goto _ml2028_L69649;
      xfind_mv_64519  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_69635_L69650;
    _ml2028_L69649:;
/*match case 2:i_param_std_1826*/
      i_param_std_1826 = find_mv_2026; //assign simple
      xfind_mv_64519  = FLX_VNR(1, new(*PTF gcp, _a5038t_70465_ptr_map, true) _a5038t_70465 (i_param_std_1826)); //init
    _end_inline_find_69635_L69650:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(xfind_mv_64519)==0) ) goto _ml64521_L69645;
      return 0;
    _ml64521_L69645:;
/*match case 2:|Some any*/
      if(!andthen(FLX_VNI(xfind_mv_64519)==1, (FLX_NEWP(_lam_64523)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64522_L69646;
      return 1;
    _ml64522_L69646:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",146,6,146,22);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",148,5,148,6); // HACK! 
}

//------------------------------

//PROCEDURE <64991:> flx_pkgconfig::keep_val: Call method
::flx::rtl::con_t * keep_val::call(::flx::rtl::con_t *_ptr_caller, _a13708t_70442 const &_arg){
  _caller = _ptr_caller;
  _vI64993_v = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <64991:> flx_pkgconfig::keep_val: Resume method
::flx::rtl::con_t *keep_val::resume(){
      ptrflx_pkgconfig->result = _fI67551___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt70445(ptrflx_pkgconfig->result, _vI64993_v)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <68687>: +::aux_uncurry: Apply method
void* _fI68687_aux_uncurry::apply(_at70473 const &_arg ){
  _vI68688_x_uncurry = _arg.data[0];
  _vI68689_y = _arg.data[1];
    start_68488_L68696:;
      _vI68692_aux__apos_2_mv_1328  = _vI68688_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68692_aux__apos_2_mv_1328)==0) ) goto _ml1330_L68691;
      return _vI68689_y;
    _ml1330_L68691:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI68692_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI68695__lam_1332)(FLX_FPAR_PASS this, ptr_fI67551___plus_))) ) goto _ml1331_L68690;
      _vI68693_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI68692_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI68694_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI68692_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI68689_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI68689_y, _vI68693_h_param_std_1210))); //init
      _vI68688_x_uncurry  = _vI68694_t_param_std_1209; //init
      goto start_68488_L68696;
    _ml1331_L68690:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <69066>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI69066__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <69264>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::search_and_replace'2::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI69264__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <70099>: flx_pkgconfig::parse_args::aux: Apply method
void* _fI70099_aux::apply(_at70473 const &_arg ){
  _vI70100_inp = _arg.data[0];
  _vI70101_out = _arg.data[1];
    start_68652_L70120:;
      _vI70104_aux_mv_1434  = _vI70100_inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI70104_aux_mv_1434)==0) ) goto _ml1436_L70103;
      return _fI70107_aux_uncurry(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig)
      .apply(_at70473(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70101_out, ::std::string("Requires")))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1436_L70103:;
/*match case 2:|Snoc (t_param_std_1242, h_param_std_1243)*/
      if(!andthen(FLX_VNI(_vI70104_aux_mv_1434)==1, (FLX_NEWP(_fI70117__lam_1443)(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1437_L70102;
      _vI70105_h_param_std_1243 = (*((_tt70445*)FLX_VNP(_vI70104_aux_mv_1434))).mem_1; //assign simple
      _vI70106_t_param_std_1242 = (*((_tt70445*)FLX_VNP(_vI70104_aux_mv_1434))).mem_0; //assign simple
      _vI70119_aux_mv_1439  = !eq(_vI70105_h_param_std_1243, ::std::string("Requires")) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI70119_aux_mv_1439%2==1) ) goto _ml1441_L70118;
/*parallel assignment*/
      _vI70101_out  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70101_out, _vI70105_h_param_std_1243))); //init
      _vI70100_inp  = _vI70106_t_param_std_1242; //init
      goto start_68652_L70120;
    _ml1441_L70118:;
/*match case 2:any*/
/*parallel assignment*/
      _vI70100_inp  = _vI70106_t_param_std_1242; //init
      goto start_68652_L70120;
    _ml1437_L70102:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",582,7,582,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",584,5,584,6); // HACK! 
}

//------------------------------
//FUNCTION <69056>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI69056__lam_1398::apply(_a13708t_70442 const &_arg ){
  _vI69057_x = _arg;
      return eq(_vI69057_x, ptr_lam_64590->key);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <69076>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI69076__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <69651>: flx_pkgconfig::xfind::_lam_64523: Apply method
 ::flx::rtl::cl_t _lam_64523::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",146,8,146,13); // HACK! 
}

//------------------------------
//FUNCTION <68955>: search_and_replace_uncurry::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <67551>: +: Apply method
void* _fI67551___plus_::apply(_tt70445 const &_arg ){
  _vI67552_x = _arg.mem_0;
  y = _arg.mem_1;
      return _fI68700_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at70473(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_fI68687_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at70473(_vI67552_x, (void* /*VR_nullptr*/ )0)) /* apply_stack */, y))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",419,3,419,69); // HACK! 
}

//------------------------------
//FUNCTION <69058>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::aux_uncurry: Apply method
void* _fI69058_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69059_x_uncurry = _arg.data[0];
  _vI69060_y = _arg.data[1];
    start_68488_L69067:;
      _vI69063_aux__apos_2_mv_1328  = _vI69059_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69063_aux__apos_2_mv_1328)==0) ) goto _ml1330_L69062;
      return _vI69060_y;
    _ml1330_L69062:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI69063_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI69066__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64590, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L69061;
      _vI69064_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI69063_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI69065_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI69063_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI69060_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69060_y, _vI69064_h_param_std_1210))); //init
      _vI69059_x_uncurry  = _vI69065_t_param_std_1209; //init
      goto start_68488_L69067;
    _ml1331_L69061:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <69256>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::search_and_replace'2::iterator'2: Apply method
void* _fI69256_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L69257:;
      _vI69261_iterator__apos_2_mv_1504  = ptr_fI69243_search_and_replace__apos_2->_vI69255_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI69261_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI69264__lam_1507)(FLX_FPAR_PASS this, ptr_fI69243_search_and_replace__apos_2, ptr_lam_64590, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1506_L69260;
      _vI69262_h_param_std_1260 = (*((_tt70479*)FLX_VNP(_vI69261_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI69263_t_param_std_1259 = (*((_tt70479*)FLX_VNP(_vI69261_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptr_fI69243_search_and_replace__apos_2->_vI69255_xs = _vI69263_t_param_std_1259; //assign simple
      FLX_SET_PC(70668)
      return FLX_VNR(1, new(*PTF gcp, _at70444_ptr_map, true) _at70444 (_vI69262_h_param_std_1260));//yield
    FLX_CASE_LABEL(70668)
      goto continue__ll_lists_5177_L69257;
    _ml1506_L69260:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI69261_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L69259;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L69259:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L69257;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <68408>: _init_::_lam_1316: Apply method
 ::flx::rtl::cl_t _lam_1316::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",270,7,270,15); // HACK! 
}

//------------------------------
//FUNCTION <70322>: flx_pkgconfig::aux_uncurry: Apply method
void* _fI70322_aux_uncurry::apply(_at70473 const &_arg ){
  _vI70323_x_uncurry = _arg.data[0];
  _vI70324_y = _arg.data[1];
    start_68488_L70331:;
      _vI70327_aux__apos_2_mv_1328  = _vI70323_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI70327_aux__apos_2_mv_1328)==0) ) goto _ml1330_L70326;
      return _vI70324_y;
    _ml1330_L70326:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI70327_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI70330__lam_1332)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml1331_L70325;
      _vI70328_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI70327_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI70329_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI70327_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI70324_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70324_y, _vI70328_h_param_std_1210))); //init
      _vI70323_x_uncurry  = _vI70329_t_param_std_1209; //init
      goto start_68488_L70331;
    _ml1331_L70325:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <70107>: flx_pkgconfig::parse_args::aux::aux_uncurry: Apply method
void* _fI70107_aux_uncurry::apply(_at70473 const &_arg ){
  _vI70108_x_uncurry = _arg.data[0];
  _vI70109_y = _arg.data[1];
    start_68488_L70116:;
      _vI70112_aux__apos_2_mv_1328  = _vI70108_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI70112_aux__apos_2_mv_1328)==0) ) goto _ml1330_L70111;
      return _vI70109_y;
    _ml1330_L70111:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI70112_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI70115__lam_1332)(FLX_FPAR_PASS this, ptr_fI70099_aux, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1331_L70110;
      _vI70113_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI70112_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI70114_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI70112_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI70109_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70109_y, _vI70113_h_param_std_1210))); //init
      _vI70108_x_uncurry  = _vI70114_t_param_std_1209; //init
      goto start_68488_L70116;
    _ml1331_L70110:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <64969>: flx_pkgconfig::get_variable: Apply method
_at70444 get_variable::apply(_a13708t_70442 const &_arg ){
  _vI64982_line = _arg;
      _vI68908_find_mv_2046  = _vI64982_line.find((::flx::rtl::strutil::subscript(::std::string("="),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI68908_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L68910;
      get_variable_mv_64561  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_68888_L68911;
    _ml2048_L68910:;
/*match case 2:i_param_std_1834*/
      _vI68909_i_param_std_1834 = _vI68908_find_mv_2046; //assign simple
      get_variable_mv_64561  = FLX_VNR(1, new(*PTF gcp, _a5038t_70465_ptr_map, true) _a5038t_70465 (_vI68909_i_param_std_1834)); //init
    _end_inline_find_68888_L68911:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(get_variable_mv_64561)==0) ) goto _ml64563_L68906;
      return _at70444(::std::string(""), ::std::string(""));
    _ml64563_L68906:;
/*match case 2:|Some n_param_flx_pkgconfig_64483*/
      if(!andthen(FLX_VNI(get_variable_mv_64561)==1, (FLX_NEWP(_lam_64578)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64564_L68907;
      n_param_flx_pkgconfig_64483 = *((_a5038t_70465*)FLX_VNP(get_variable_mv_64561)); //assign simple
      get_variable_mv_64566  = lstrip(rstrip(::flx::rtl::strutil::substr(_vI64982_line,0,n_param_flx_pkgconfig_64483), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //init
/*begin match*/
/*match case 1:name_param_flx_pkgconfig_64484*/
      name_param_flx_pkgconfig_64484 = get_variable_mv_64566; //assign simple
      get_variable_mv_64570  = lstrip(rstrip(::flx::rtl::strutil::substr(_vI64982_line,n_param_flx_pkgconfig_64483 + 1 ,_vI64982_line.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //init
/*begin match*/
/*match case 1:value_param_flx_pkgconfig_64485*/
      value_param_flx_pkgconfig_64485 = get_variable_mv_64570; //assign simple
      get_variable_mv_64574  = check_id(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(name_param_flx_pkgconfig_64484) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(get_variable_mv_64574%2==1) ) goto _ml64576_L68918;
      return _at70444(name_param_flx_pkgconfig_64484, value_param_flx_pkgconfig_64485);
    _ml64576_L68918:;
/*match case 2:any*/
      return _at70444(::std::string(""), ::std::string(""));
    _ml64564_L68907:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",268,9,268,56);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",270,5,270,8); // HACK! 
}

//------------------------------
//C FUNC <5149>: andthen
 ::flx::rtl::cl_t andthen(  ::flx::rtl::cl_t _vI5153_x, _ft70454* _vI5154_y){
   ::flx::rtl::cl_t andthen_mv_147;
      andthen_mv_147  = _vI5153_x; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(andthen_mv_147%2==1) ) goto _ml149_L68328;
      return (_vI5154_y)->clone()
      ->apply() /* general apply */;
    _ml149_L68328:;
/*match case 2:any*/
      return 0;
}
//------------------------------
//FUNCTION <70160>: flx_pkgconfig::parse_args::aux::_lam_2241: Apply method
 ::flx::rtl::cl_t _lam_2241::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",502,9,502,14); // HACK! 
}

//------------------------------
//FUNCTION <69193>: flx_pkgconfig::lexstr::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI69193__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <69068>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::aux_uncurry: Apply method
void* _fI69068_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69069_x_uncurry = _arg.data[0];
  _vI69070_y = _arg.data[1];
    start_68488_L69077:;
      _vI69073_aux__apos_2_mv_1328  = _vI69069_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69073_aux__apos_2_mv_1328)==0) ) goto _ml1330_L69072;
      return _vI69070_y;
    _ml1330_L69072:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI69073_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI69076__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64590, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L69071;
      _vI69074_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI69073_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI69075_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI69073_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI69070_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69070_y, _vI69074_h_param_std_1210))); //init
      _vI69069_x_uncurry  = _vI69075_t_param_std_1209; //init
      goto start_68488_L69077;
    _ml1331_L69071:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <70399>: cat_uncurry::_lam_1375: Apply method
 ::flx::rtl::cl_t _lam_1375::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",464,5,464,38); // HACK! 
}

//------------------------------
//FUNCTION <69526>: flx_pkgconfig::handle_pkg::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI69526__lam_1398::apply(_a13708t_70442 const &_arg ){
  _vI69527_x = _arg;
      return eq(_vI69527_x, ptrhandle_pkg->pkg);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <69515>: flx_pkgconfig::handle_pkg::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI69515__lam_1398::apply(_a13708t_70442 const &_arg ){
  _vI69516_x = _arg;
      return eq(_vI69516_x, ptrhandle_pkg->pkg);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <68674>: flx_pkgconfig::tail_val::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI68674__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <69450>: flx_pkgconfig::handle_pkg::_lam_64579::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI69450__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//C FUNC <68244>: _a68244_argv
_a13708t_70442 _a68244_argv(FLX_APAR_DECL int _a68245){
      return ::std::string(_a68245<0||_a68245>=PTF argc?"":PTF argv[_a68245]);
}
//------------------------------
//C FUNC <11248>: range
void* range(FLX_APAR_DECL  int low, int high, int step){
   ::flx::rtl::cl_t inner_mv_1341;
  void* _vI68309_values;
  int _vI68308_step;
  int _vI68307_high;
  int _vI68306_low;
   ::flx::rtl::cl_t range_mv_1352;
   ::flx::rtl::cl_t range_mv_1347;
  _at70452 _urv68299;
  int _vI11264_n;
  int _vI11263_s;
  int hi;
  int lo;
  _at70452 _ds1_1345;
      range_mv_1347  = (low < high); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(range_mv_1347%2==1) ) goto _ml1349_L68301;
      (_urv68299.data)[0] = low; //assign simple
      (_urv68299.data)[1] = high; //assign simple
      (_urv68299.data)[2] = step; //assign simple
      goto _end_inline_range_mf_1346_68303_L68303;
    _ml1349_L68301:;
/*match case 2:any*/
      (_urv68299.data)[0] = high; //assign simple
      (_urv68299.data)[1] = low; //assign simple
      (_urv68299.data)[2] = - step ; //assign simple
    _end_inline_range_mf_1346_68303_L68303:;
      _ds1_1345 = _urv68299; //assign simple
      lo = (_ds1_1345.data)[0]; //assign simple
      hi = (_ds1_1345.data)[1]; //assign simple
      _vI11263_s = (_ds1_1345.data)[2]; //assign simple
      _vI11264_n = (hi - lo ) - 1 ; //assign simple
      range_mv_1352  = !((0 < _vI11263_s)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(range_mv_1352%2==1) ) goto _ml1354_L68305;
      return (void* /*VR_nullptr*/ )0;
    _ml1354_L68305:;
/*match case 2:any*/
      _vI68306_low  = lo; //init
      _vI68307_high  = lo + (_vI11264_n - (_vI11264_n % _vI11263_s ) ) ; //init
      _vI68308_step  = _vI11263_s; //init
      _vI68309_values  = (void* /*VR_nullptr*/ )0; //init
    start_68288_L68312:;
      inner_mv_1341  = (_vI68307_high < _vI68306_low); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(inner_mv_1341%2==1) ) goto _ml1343_L68311;
      return _vI68309_values;
    _ml1343_L68311:;
/*match case 2:any*/
/*parallel assignment*/
      _vI68309_values  = FLX_VNR(1, new(*PTF gcp, _tt70448_ptr_map, true) _tt70448 (_tt70448(_vI68309_values, _vI68307_high))); //init
      _vI68307_high  = _vI68307_high - _vI68308_step ; //init
      goto start_68288_L68312;
}
//------------------------------
//FUNCTION <69434>: flx_pkgconfig::handle_pkg::_lam_64579::aux: Apply method
void* _fI69434_aux::apply(_at70473 const &_arg ){
  _vI69435_inp = _arg.data[0];
  _vI69436_out = _arg.data[1];
    start_68652_L69455:;
      _vI69439_aux_mv_1434  = _vI69435_inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69439_aux_mv_1434)==0) ) goto _ml1436_L69438;
      return _fI69442_aux_uncurry(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at70473(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69436_out, ptrhandle_pkg->pkg))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1436_L69438:;
/*match case 2:|Snoc (t_param_std_1242, h_param_std_1243)*/
      if(!andthen(FLX_VNI(_vI69439_aux_mv_1434)==1, (FLX_NEWP(_fI69452__lam_1443)(FLX_FPAR_PASS this, ptr_lam_64579, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1437_L69437;
      _vI69440_h_param_std_1243 = (*((_tt70445*)FLX_VNP(_vI69439_aux_mv_1434))).mem_1; //assign simple
      _vI69441_t_param_std_1242 = (*((_tt70445*)FLX_VNP(_vI69439_aux_mv_1434))).mem_0; //assign simple
      _vI69454_aux_mv_1439  = !eq(_vI69440_h_param_std_1243, ptrhandle_pkg->pkg) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI69454_aux_mv_1439%2==1) ) goto _ml1441_L69453;
/*parallel assignment*/
      _vI69436_out  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69436_out, _vI69440_h_param_std_1243))); //init
      _vI69435_inp  = _vI69441_t_param_std_1242; //init
      goto start_68652_L69455;
    _ml1441_L69453:;
/*match case 2:any*/
/*parallel assignment*/
      _vI69435_inp  = _vI69441_t_param_std_1242; //init
      goto start_68652_L69455;
    _ml1437_L69437:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",582,7,582,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",584,5,584,6); // HACK! 
}

//------------------------------
//FUNCTION <69538>: flx_pkgconfig::handle_pkg::aux_uncurry: Apply method
void* _fI69538_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69539_x_uncurry = _arg.data[0];
  _vI69540_y = _arg.data[1];
    start_68488_L69547:;
      _vI69543_aux__apos_2_mv_1328  = _vI69539_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69543_aux__apos_2_mv_1328)==0) ) goto _ml1330_L69542;
      return _vI69540_y;
    _ml1330_L69542:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI69543_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI69546__lam_1332)(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L69541;
      _vI69544_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI69543_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI69545_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI69543_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI69540_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69540_y, _vI69544_h_param_std_1210))); //init
      _vI69539_x_uncurry  = _vI69545_t_param_std_1209; //init
      goto start_68488_L69547;
    _ml1331_L69541:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <64961>: flx_pkgconfig::get_field: Apply method
_at70444 get_field::apply(_a13708t_70442 const &_arg ){
  line = _arg;
      _vI69045_find_mv_2046  = line.find((::flx::rtl::strutil::subscript(::std::string(":"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI69045_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L69047;
      get_field_mv_64555  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_69024_L69048;
    _ml2048_L69047:;
/*match case 2:i_param_std_1834*/
      _vI69046_i_param_std_1834 = _vI69045_find_mv_2046; //assign simple
      get_field_mv_64555  = FLX_VNR(1, new(*PTF gcp, _a5038t_70465_ptr_map, true) _a5038t_70465 (_vI69046_i_param_std_1834)); //init
    _end_inline_find_69024_L69048:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(get_field_mv_64555)==0) ) goto _ml64557_L69043;
      return _at70444(::std::string(""), ::std::string(""));
    _ml64557_L69043:;
/*match case 2:|Some n_param_flx_pkgconfig_64482*/
      if(!andthen(FLX_VNI(get_field_mv_64555)==1, (FLX_NEWP(_lam_64559)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64558_L69044;
      n_param_flx_pkgconfig_64482 = *((_a5038t_70465*)FLX_VNP(get_field_mv_64555)); //assign simple
      return _at70444(lstrip(rstrip(::flx::rtl::strutil::substr(line,0,n_param_flx_pkgconfig_64482), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")), lstrip(rstrip(::flx::rtl::strutil::substr(line,n_param_flx_pkgconfig_64482 + 1 ,line.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")));
    _ml64558_L69044:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",257,9,257,32);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",259,5,259,8); // HACK! 
}

//------------------------------
//FUNCTION <68595>: iter_uncurry::_lam_1295: Apply method
 ::flx::rtl::cl_t _lam_1295::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",221,9,221,17); // HACK! 
}

//------------------------------
//FUNCTION <70125>: flx_pkgconfig::parse_args::aux: Apply method
void* _fI70125_aux::apply(_at70473 const &_arg ){
  _vI70126_inp = _arg.data[0];
  _vI70127_out = _arg.data[1];
    start_68652_L70146:;
      _vI70130_aux_mv_1434  = _vI70126_inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI70130_aux_mv_1434)==0) ) goto _ml1436_L70129;
      return _fI70133_aux_uncurry(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig)
      .apply(_at70473(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70127_out, ptrparse_args->fld))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1436_L70129:;
/*match case 2:|Snoc (t_param_std_1242, h_param_std_1243)*/
      if(!andthen(FLX_VNI(_vI70130_aux_mv_1434)==1, (FLX_NEWP(_fI70143__lam_1443)(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1437_L70128;
      _vI70131_h_param_std_1243 = (*((_tt70445*)FLX_VNP(_vI70130_aux_mv_1434))).mem_1; //assign simple
      _vI70132_t_param_std_1242 = (*((_tt70445*)FLX_VNP(_vI70130_aux_mv_1434))).mem_0; //assign simple
      _vI70145_aux_mv_1439  = !eq(_vI70131_h_param_std_1243, ptrparse_args->fld) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI70145_aux_mv_1439%2==1) ) goto _ml1441_L70144;
/*parallel assignment*/
      _vI70127_out  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI70127_out, _vI70131_h_param_std_1243))); //init
      _vI70126_inp  = _vI70132_t_param_std_1242; //init
      goto start_68652_L70146;
    _ml1441_L70144:;
/*match case 2:any*/
/*parallel assignment*/
      _vI70126_inp  = _vI70132_t_param_std_1242; //init
      goto start_68652_L70146;
    _ml1437_L70128:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",582,7,582,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",584,5,584,6); // HACK! 
}

//------------------------------
//C FUNC <14324>: lstrip
_a13708t_70442 lstrip( _a13708t_70442 _vI14329_x, _a13708t_70442 _vI14330_e){
  _a5038t_70465 _vI14328_j;
   ::flx::rtl::cl_t _vI14327_found;
  _a5038t_70465 _vI14326_i;
      if(!((0 < _vI14329_x.size())) ) goto _ifdoelse_std_1898_L14341;
      _vI14326_i = 0; //assign simple
    redo__ll_strings_7002_L14331:;
      if(FLX_UNLIKELY(!(!((_vI14329_x.size() - 1  < _vI14326_i)) ) )) goto _ifdoelse_std_1898_L14341;
      _vI14327_found = 0; //assign simple
      _vI14328_j = 0; //assign simple
    redo__ll_strings_7008_L14332:;
      if(FLX_UNLIKELY(!(!((_vI14330_e.size() - 1  < _vI14328_j)) ) )) goto break__ll_strings_7008_L14336;
      if(!((::flx::rtl::strutil::subscript(_vI14329_x,_vI14326_i) == ::flx::rtl::strutil::subscript(_vI14330_e,_vI14328_j))) ) goto _ifdoelse_std_1900_L14334;
      _vI14327_found = 1; //assign simple
    _ifdoelse_std_1900_L14334:;
      {
      _a5038t_70465* _tmp70678 = (_a5038t_70465*)&_vI14328_j;
      ++*((_tmp70678));
      }
      goto redo__ll_strings_7008_L14332;
    break__ll_strings_7008_L14336:;
      if(_vI14327_found) goto _ifdoend_std_1901_L14337;
      return ::flx::rtl::strutil::substr(_vI14329_x,_vI14326_i,_vI14329_x.size());
    _ifdoend_std_1901_L14337:;
      {
      _a5038t_70465* _tmp70679 = (_a5038t_70465*)&_vI14326_i;
      ++*((_tmp70679));
      }
      goto redo__ll_strings_7002_L14331;
    _ifdoelse_std_1898_L14341:;
      return ::std::string("");
}
//------------------------------
//FUNCTION <68748>: flx_pkgconfig::check_id::iterator'2: Apply method
void* _fI68748_iterator__apos_2::apply(){
  FLX_START_SWITCH
      i = 0; //assign simple
    redo__ll_strings_6968_L68750:;
      if(FLX_UNLIKELY(!(!(((static_cast<int>((ptrcheck_id->_vI68752_x.size()))/*int.flx: ctor*/) - 1  < i)) ) )) goto break__ll_strings_6968_L68751;
      FLX_SET_PC(70680)
      return FLX_VNR(1, new(*PTF gcp, char_ptr_map, true) char (::flx::rtl::strutil::subscript(ptrcheck_id->_vI68752_x,i)));//yield
    FLX_CASE_LABEL(70680)
      {
      int* _tmp70681 = (int*)&i;
      ++*((_tmp70681));
      }
      goto redo__ll_strings_6968_L68750;
    break__ll_strings_6968_L68751:;
      return (void* /*VR_nullptr*/ )0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",365,5,365,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <68549>: flx_pkgconfig::add_val::_lam_1398: Apply method
 ::flx::rtl::cl_t _lam_1398::apply(_a13708t_70442 const &_arg ){
  _vI68550_x = _arg;
      return eq(_vI68550_x, ptradd_val->v);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <68006>: search_and_replace_uncurry: Apply method
_a13708t_70442 search_and_replace_uncurry::apply(_tt70487 const &_arg ){
  vs_uncurry = _arg.mem_0;
  _vI68150_v = _arg.mem_1;
      _vI68946_xs  = vs_uncurry; //init
      _genout_urv68945  = (FLX_NEWP(_fI68947_iterator__apos_2)(FLX_FPAR_PASS this)); //init
      _generator_strings_7324 = _genout_urv68945; //assign simple
    continue__ll_strings_7319_L68151:;
      _vI68141_search_and_replace__apos_2_mv_2301  = (_generator_strings_7324)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some (k_param_std_1958, b_param_std_1959)*/
      if(!andthen(FLX_VNI(_vI68141_search_and_replace__apos_2_mv_2301)==1, (FLX_NEWP(_lam_2304)(FLX_FPAR_PASS this))) ) goto _ml2303_L68152;
      b_param_std_1959 = ((*((_at70444*)FLX_VNP(_vI68141_search_and_replace__apos_2_mv_2301))).data)[1]; //assign simple
      k_param_std_1958 = ((*((_at70444*)FLX_VNP(_vI68141_search_and_replace__apos_2_mv_2301))).data)[0]; //assign simple
      spos  = 0; //init
      m = k_param_std_1958.size(); //assign simple
      o = ::flx::rtl::strutil::substr(_vI68150_v,0,spos); //assign simple
      _vI68988_n = _vI68150_v.find(k_param_std_1958,spos); //assign simple
    continue__ll_strings_7305_L68990:;
      if(FLX_UNLIKELY(!(!((_vI68988_n == ::std::string::npos)) ) )) goto break__ll_strings_7305_L68991;
      {
      _a13708t_70442* _tmp70682 = (_a13708t_70442*)&o;
      _a13708t_70442 _tmp70683 = ::flx::rtl::strutil::substr(_vI68150_v,spos,_vI68988_n) + b_param_std_1959 ;
      ((_tmp70682))->append((_tmp70683));
      }
      spos = _vI68988_n + m ; //assign simple
      _vI68988_n = ((_vI68150_v.find(k_param_std_1958,spos)))/*int.flx: ctor size IDENT*/; //assign simple
      goto continue__ll_strings_7305_L68990;
    break__ll_strings_7305_L68991:;
      {
      _a13708t_70442* _tmp70684 = (_a13708t_70442*)&o;
      _a13708t_70442 _tmp70685 = ::flx::rtl::strutil::substr(_vI68150_v,spos,_vI68150_v.size());
      ((_tmp70684))->append((_tmp70685));
      }
      _vI68150_v = o; //assign simple
      goto continue__ll_strings_7319_L68151;
    _ml2303_L68152:;
/*match case 2:|Some any*/
      if(!andthen(FLX_VNI(_vI68141_search_and_replace__apos_2_mv_2301)==1, (FLX_NEWP(_lam_2306)(FLX_FPAR_PASS this))) ) goto _ml2305_L68153;
      goto continue__ll_strings_7319_L68151;
    _ml2305_L68153:;
/*match case 3:|None*/
      if(!(FLX_VNI(_vI68141_search_and_replace__apos_2_mv_2301)==0) ) goto _ml2307_L68154;
      goto _em2301_L68155;
    _ml2307_L68154:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9);
;
    _em2301_L68155:;
      return _vI68150_v;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",742,3,742,4); // HACK! 
}

//------------------------------
//FUNCTION <68756>: flx_pkgconfig::check_id::_lam_64552: Apply method
 ::flx::rtl::cl_t _lam_64552::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",248,7,248,56); // HACK! 
}

//------------------------------
//FUNCTION <69049>: flx_pkgconfig::get_field::_lam_64559: Apply method
 ::flx::rtl::cl_t _lam_64559::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",255,11,255,16); // HACK! 
}

//------------------------------
//FUNCTION <68658>: flx_pkgconfig::tail_val::aux: Apply method
void* aux::apply(_at70473 const &_arg ){
  inp = _arg.data[0];
  _vI68660_out = _arg.data[1];
    start_68652_L68679:;
      aux_mv_1434  = inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(aux_mv_1434)==0) ) goto _ml1436_L68662;
      return _fI68666_aux_uncurry(FLX_FPAR_PASS this, ptrtail_val, ptrflx_pkgconfig)
      .apply(_at70473(FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI68660_out, ptrtail_val->_vI64989_v))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1436_L68662:;
/*match case 2:|Snoc (t_param_std_1242, h_param_std_1243)*/
      if(!andthen(FLX_VNI(aux_mv_1434)==1, (FLX_NEWP(_lam_1443)(FLX_FPAR_PASS this, ptrtail_val, ptrflx_pkgconfig))) ) goto _ml1437_L68661;
      h_param_std_1243 = (*((_tt70445*)FLX_VNP(aux_mv_1434))).mem_1; //assign simple
      t_param_std_1242 = (*((_tt70445*)FLX_VNP(aux_mv_1434))).mem_0; //assign simple
      aux_mv_1439  = !eq(h_param_std_1243, ptrtail_val->_vI64989_v) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(aux_mv_1439%2==1) ) goto _ml1441_L68677;
/*parallel assignment*/
      _vI68660_out  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI68660_out, h_param_std_1243))); //init
      inp  = t_param_std_1242; //init
      goto start_68652_L68679;
    _ml1441_L68677:;
/*match case 2:any*/
/*parallel assignment*/
      inp  = t_param_std_1242; //init
      goto start_68652_L68679;
    _ml1437_L68661:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",582,7,582,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",584,5,584,6); // HACK! 
}

//------------------------------
//FUNCTION <68676>: flx_pkgconfig::tail_val::aux::_lam_1443: Apply method
 ::flx::rtl::cl_t _lam_1443::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",579,9,579,17); // HACK! 
}

//------------------------------
//FUNCTION <69354>: flx_pkgconfig::handle_pkg::_lam_64579::_lam_64590::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI69354__lam_1398::apply(_a13708t_70442 const &_arg ){
  _vI69355_x = _arg;
      return eq(_vI69355_x, ptr_lam_64590->key);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <69528>: flx_pkgconfig::handle_pkg::aux_uncurry: Apply method
void* _fI69528_aux_uncurry::apply(_at70473 const &_arg ){
  _vI69529_x_uncurry = _arg.data[0];
  _vI69530_y = _arg.data[1];
    start_68488_L69537:;
      _vI69533_aux__apos_2_mv_1328  = _vI69529_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI69533_aux__apos_2_mv_1328)==0) ) goto _ml1330_L69532;
      return _vI69530_y;
    _ml1330_L69532:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI69533_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI69536__lam_1332)(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L69531;
      _vI69534_h_param_std_1210 = (*((_tt70445*)FLX_VNP(_vI69533_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI69535_t_param_std_1209 = (*((_tt70445*)FLX_VNP(_vI69533_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI69530_y  = FLX_VNR(1, new(*PTF gcp, _tt70445_ptr_map, true) _tt70445 (_tt70445(_vI69530_y, _vI69534_h_param_std_1210))); //init
      _vI69529_x_uncurry  = _vI69535_t_param_std_1209; //init
      goto start_68488_L69537;
    _ml1331_L69531:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <68996>: search_and_replace_uncurry::_lam_2306: Apply method
 ::flx::rtl::cl_t _lam_2306::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9); // HACK! 
}

//------------------------------

//PROCEDURE <68000:> iter_uncurry: Call method
::flx::rtl::con_t * iter_uncurry::call(::flx::rtl::con_t *_ptr_caller, _tt70484 const &_arg){
  _caller = _ptr_caller;
  _f_uncurry = _arg.mem_0;
  _vI68032_x = _arg.mem_1;
  INIT_PC
  return this;
}

//PROCEDURE <68000:> iter_uncurry: Resume method
::flx::rtl::con_t *iter_uncurry::resume(){
  FLX_START_SWITCH
      _vI68590_iter__apos_2_mv_1289  = _vI68032_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI68590_iter__apos_2_mv_1289)==0) ) goto _ml1291_L68589;
      FLX_RETURN // procedure return
    _ml1291_L68589:;
/*match case 2:|Snoc (t_param_std_1197, h_param_std_1198)*/
      if(!andthen(FLX_VNI(_vI68590_iter__apos_2_mv_1289)==1, (FLX_NEWP(_lam_1295)(FLX_FPAR_PASS this))) ) goto _ml1293_L68588;
      h_param_std_1198 = (*((_tt70445*)FLX_VNP(_vI68590_iter__apos_2_mv_1289))).mem_1; //assign simple
      t_param_std_1197 = (*((_tt70445*)FLX_VNP(_vI68590_iter__apos_2_mv_1289))).mem_0; //assign simple
      FLX_SET_PC(70689)
      return (_f_uncurry)->clone()
      ->call(this, h_param_std_1198);
    FLX_CASE_LABEL(70689)
      {
      ::flx::rtl::con_t *tmp = _caller;
      _caller = 0;
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(tmp, _tt70484(_f_uncurry, t_param_std_1197));
      }
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ml1293_L68588:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",221,7,221,42);
;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}

//-----------------------------------------
}} // namespace flxusr::flx_pkgconfig
//CREATE STANDARD EXTERNAL INTERFACE
FLX_FRAME_WRAPPERS(::flxusr::flx_pkgconfig,flx_pkgconfig)
FLX_STACK_START_WRAPPER_PTF(::flxusr::flx_pkgconfig,flx_pkgconfig,_init_)

//-----------------------------------------
//body complete
