//Input file: build\release\share\src\tools\bootflx
//Generated by Felix Version 2016.07.12-rc1
//Timestamp: 2017/7/9 5:49:32 UTC
//Timestamp: 2017/7/9 5:49:32 (local)
#define FLX_EXTERN_bootflx FLX_EXPORT
#include "bootflx.hpp"
#include <stdio.h>
#define comma ,

//-----------------------------------------
//EMIT USER BODY CODE
using namespace ::flxusr::bootflx;

      static void **_mkjudy(FLX_APAR_DECL ::flx::gc::generic::gc_shape_t *jptr_map){
        typedef void *voidp; // syntax
        void **m = new (*PTF gcp, *jptr_map, false) voidp;
        *m=0;
        return m;
      }
    
#define JUDY_SL_MAXLEN 10000

      static void _jSLfree(::flx::gc::generic::collector_t*,void *p) {
        //printf("Free JSLArray %p\n",p);
        JError_t je;
        JudySLFreeArray((void**)p, &je);
      }
    

  static ::std::string RE2_encoder(void *p) {
    return (*(::std::shared_ptr< ::re2::RE2>*)p)->pattern();
  }

  static size_t RE2_decoder (void *p, char *s, size_t i) {
    char tmp[sizeof(::std::string)];
    i = ::flx::gc::generic::string_decoder (&tmp,s,i);
    new(p) ::std::shared_ptr< ::re2::RE2> (new ::re2::RE2 (*(::std::string*)(&tmp)));
    ::destroy((::std::string*)&tmp);
    return i;
  }
  

    static void _rev(void** plt, _a13708t_107090*) // second arg is a dummy
    { // in place reversal
      //struct node_t { _a13708t_107090 elt; void *tail; };
      struct node_t { void *tail; _a13708t_107090 elt; };
      void *nutail = 0;
      void *cur = *plt;
      while(cur)
      {
        void *oldtail = ((node_t*)FLX_VNP(cur))->tail;   // save old tail in temp
        ((node_t*)FLX_VNP(cur))->tail = nutail;          // overwrite current node tail
        nutail = cur;                                   // set new tail to current
        cur = oldtail;                                  // set current to saved old tail
      }
      *plt = nutail;                                    // overwrite
    }
    

    static void _rev_last(void** p1, void** p2, _a13708t_107090*)
    { // in place reversal returns tail as well
      //struct node_t { _a13708t_107090 elt; void *tail; };
      struct node_t { void *tail; _a13708t_107090 elt; };
      void *nutail = (void*)0;                 // new temp tail
      void *cur = *p1;                         // list to reverse
      void *last = cur;                        // save head
      while(cur)
      {
        void *oldtail = ((node_t*)FLX_VNP(cur))->tail;            // set old tail to current's tail
        ((node_t*)FLX_VNP(cur))->tail = nutail;                   // set current's tail to nutail
        nutail = cur;                                            // set nutail to current
        cur = oldtail;                                           // set current to old tail
      }
      *p1 = nutail;                                              // reversed list
      *p2 = last;                                                // original lists tail
    }
    

    static void _rev(void** plt, _at107092*) // second arg is a dummy
    { // in place reversal
      //struct node_t { _at107092 elt; void *tail; };
      struct node_t { void *tail; _at107092 elt; };
      void *nutail = 0;
      void *cur = *plt;
      while(cur)
      {
        void *oldtail = ((node_t*)FLX_VNP(cur))->tail;   // save old tail in temp
        ((node_t*)FLX_VNP(cur))->tail = nutail;          // overwrite current node tail
        nutail = cur;                                   // set new tail to current
        cur = oldtail;                                  // set current to saved old tail
      }
      *plt = nutail;                                    // overwrite
    }
    

    static void _rev_last(void** p1, void** p2, _at107092*)
    { // in place reversal returns tail as well
      //struct node_t { _at107092 elt; void *tail; };
      struct node_t { void *tail; _at107092 elt; };
      void *nutail = (void*)0;                 // new temp tail
      void *cur = *p1;                         // list to reverse
      void *last = cur;                        // save head
      while(cur)
      {
        void *oldtail = ((node_t*)FLX_VNP(cur))->tail;            // set old tail to current's tail
        ((node_t*)FLX_VNP(cur))->tail = nutail;                   // set current's tail to nutail
        nutail = cur;                                            // set nutail to current
        cur = oldtail;                                           // set current to old tail
      }
      *p1 = nutail;                                              // reversed list
      *p2 = last;                                                // original lists tail
    }
    

//-----------------------------------------
namespace flxusr { namespace bootflx {

//-----------------------------------------
//DEFINE OFFSET tables for GC
#include "bootflx.rtti"
FLX_DEF_THREAD_FRAME
//Thread Frame Constructor
thread_frame_t::thread_frame_t(
) :
  gcp(0),
  shape_list_head(bootflx_head_shape)
{}

//-----------------------------------------
//DEFINE FUNCTION CLASS METHODS
#include "bootflx.ctors_cpp"
//------------------------------
//FUNCTION <66337>: toolchain_clang_osx::dynamic_library_extension: Apply method
_a13708t_107090 _fI66337_dynamic_library_extension::apply(){
      return ::std::string(".dylib");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1465,3,1465,54); // HACK! 
}

//------------------------------
//FUNCTION <65826>: toolchain_msvc_win32::c_static_object_compiler: Apply method
int c_static_object_compiler::apply(_art107177 const &_arg ){
  _vI65831_spec = _arg;
      _genout_urv92409  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_msvc_win32->macros, ::std::string("/Tc") + _vI65831_spec.src ))), ::std::string("/c")))), ::std::string("/Zi")))), ::std::string("/MDd")))), ::std::string("/DFLX_STATIC_LINK")))), ::std::string("/nologo")))), ::std::string("cl.exe")))), ptrtoolchain_msvc_win32->include_switches)) /* apply_stack */, ::std::string("/Fo") + _vI65831_spec.dst )) /* apply_stack */) /* apply_stack */; //init
      _ds2_65674 = _genout_urv92409; //assign simple
      _vI65829_result = _ds2_65674.mem_0; //assign simple
      _vI65830_text = _ds2_65674.mem_1; //assign simple
      {
      checkwarn(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .stack_call(_tt107175(_vI65829_result, _vI65830_text));
      }
      return _vI65829_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1841,3,1841,4); // HACK! 
}

//------------------------------
//FUNCTION <96535>: flx_pkgconfig::handle_pkg::_lam_64696::aux::_lam_1443: Apply method
 ::flx::rtl::cl_t _fI96535__lam_1443::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",579,9,579,17); // HACK! 
}

//------------------------------
//FUNCTION <68379>: runflx: Apply method
int runflx::apply(void* const &_arg ){
  _vI68384_args = _arg;
      _vI90534_r = _fI90535_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI68384_args, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107598 = (void**)&_vI90534_r;
      _rev(((_tmp107598)),(_a13708t_107090*)0);
      }
      {
      _a13708t_107090 _tmp107599 = (::std::string("[bootflx] ") + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI90534_r)) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107599)));
      }
      fflush(stdout);
      _vI68381_config = std_config(FLX_FPAR_PASS_ONLY); //assign simple
      dflt_control_mv_64833  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_BUNDLE_DIR")).c_str())); //init
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == dflt_control_mv_64833)) ) goto _ml64835_L91897;
      _urv91882  = (void* /*VR_nullptr*/ )0; //init
      goto _end_hash_803751851;
    _ml64835_L91897:;
/*match case 2:dir_param_bootflx_64831*/
      dir_param_bootflx_64831 = dflt_control_mv_64833; //assign simple
      _urv91882  = FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (dir_param_bootflx_64831)); //init
    _end_hash_803751851:;
      _vI68382_control = _art107120(::std::string(""), _urv91882, (void* /*VR_nullptr*/ )0, 1, 1, 0, 0, 0, ::std::string(""), 0, 0, ::std::string(""), 0, 0, 0, ::std::string(""), (void* /*VR_nullptr*/ )0, 1, ::std::string(""), (void* /*VR_nullptr*/ )0, 0, ::std::string(""), (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, 1, ::std::string(""), 0, 0, (void* /*VR_nullptr*/ )0, ::std::string(""), ::std::string(""), (void* /*VR_nullptr*/ )0, ::std::string(""), ::std::string(""), ::std::string(""), (void* /*VR_nullptr*/ )0, ::std::string(""), 25, ::std::string(""), ::std::string(""), (void* /*VR_nullptr*/ )0, 0, 1, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, 0, 0, 0, 0, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-O1")))), 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, 0, 0, ::std::string(""), ::std::string("plat/flx.flxh"), ::std::string(""), ::std::string(""), 0, ::std::string("time -p"), ::std::string("production"), (void* /*VR_nullptr*/ )0, 1, 0.0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0); //assign simple
      _vI68383_loopctl = _art107121(1, ::std::string(""), ::std::string(""), ::std::string(""), 1, ::std::string(""), ::std::string("")); //assign simple
      return flx_processing(FLX_FPAR_PASS_ONLY)
      .apply(_tt107125((_art107117*)&_vI68381_config, (_art107120*)&_vI68382_control, (_art107121*)&_vI68383_loopctl, _vI68384_args)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",3320,3,3320,4); // HACK! 
}

//------------------------------
//FUNCTION <93277>: generic_static_library_uncurry::aux_uncurry: Apply method
void* _fI93277_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93278_inp_uncurry = _arg.data[0];
  _vI93279_out = _arg.data[1];
    start_90421_L93286:;
      _vI93282_aux__apos_2_mv_1322  = _vI93278_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93282_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93281;
      return _vI93279_out;
    _ml1324_L93281:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93282_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93285__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_static_library_uncurry))) ) goto _ml1325_L93280;
      _vI93283_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93282_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93284_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93282_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93279_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93279_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93283_h_param_std_1208) /* apply_stack */))); //init
      _vI93278_inp_uncurry  = _vI93284_t_param_std_1207; //init
      goto start_90421_L93286;
    _ml1325_L93280:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <97315>: flx_pkgconfig::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI97315__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <106743>: flx_processing::ocaml_compile::_lam_65509: Apply method
 ::flx::rtl::cl_t _fI106743__lam_65509::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2428,5,2428,9); // HACK! 
}

//------------------------------
//FUNCTION <65981>: toolchain_gcc_linux::cxx_static_library_object_compiler: Apply method
int _fI65981_cxx_static_library_object_compiler::apply(_art107177 const &_arg ){
  _vI65984_spec = _arg;
      _vI65983_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_linux->_vI65925_base_cxx_compile_flags, ::std::string("-D_GLIBCXX_USE_CXX11_ABI=1")))), ::std::string("-fvisibility=hidden")))), ptrtoolchain_gcc_linux->cxx_compiler, ptrtoolchain_gcc_linux->_vI66005_config.header_search_dirs, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_linux->_vI66005_config.macros, ::std::string("FLX_STATIC_LINK")))), ::std::string("-o "), ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI65984_spec.src, _vI65984_spec.dst)) /* apply_stack */; //assign simple
      return _vI65983_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",854,3,854,4); // HACK! 
}

//------------------------------
//FUNCTION <90509>: cat_uncurry::_lam_1385: Apply method
 ::flx::rtl::cl_t _lam_1385::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",474,9,474,17); // HACK! 
}

//------------------------------
//FUNCTION <95844>: iter_uncurry::_lam_1295: Apply method
 ::flx::rtl::cl_t _lam_1295::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",221,9,221,17); // HACK! 
}

//------------------------------
//FUNCTION <106281>: flx_processing::cxx_link_shared_exe::_lam_65518: Apply method
_a13708t_107090 _fI106281__lam_65518::apply(_a13708t_107090 const &_arg ){
  _vI106282_s = _arg;
      return ::std::string("--path+=") + _vI106282_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2551,11,2551,40); // HACK! 
}

//------------------------------
//FUNCTION <106723>: flx_processing::cxx_compile_static::_lam_65496: Apply method
 ::flx::rtl::cl_t _fI106723__lam_65496::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2325,5,2325,9); // HACK! 
}

//------------------------------
//FUNCTION <93211>: generic_cxx_compile_for_dynamic_uncurry::aux_uncurry: Apply method
void* _fI93211_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93212_inp_uncurry = _arg.data[0];
  _vI93213_out = _arg.data[1];
    start_90421_L93220:;
      _vI93216_aux__apos_2_mv_1322  = _vI93212_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93216_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93215;
      return _vI93213_out;
    _ml1324_L93215:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93216_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93219__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_cxx_compile_for_dynamic_uncurry))) ) goto _ml1325_L93214;
      _vI93217_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93216_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93218_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93216_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93213_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93213_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93217_h_param_std_1208) /* apply_stack */))); //init
      _vI93212_inp_uncurry  = _vI93218_t_param_std_1207; //init
      goto start_90421_L93220;
    _ml1325_L93214:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <85577>: func1::_lam_522: Apply method
int _fI85577__lam_522::apply(_a13708t_107090 const &_arg ){
  _vI85578_a0 = _arg;
      return ptrfunc1->_vI85575_s(ptrfunc1->tf, _vI85578_a0);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",1118,12,1118,36); // HACK! 
}

//------------------------------
//FUNCTION <106512>: flx_processing::find_cxx_pkgs::_lam_65444: Apply method
 ::flx::rtl::cl_t _fI106512__lam_65444::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2091,11,2091,16); // HACK! 
}

//------------------------------
//FUNCTION <96609>: flx_pkgconfig::handle_pkg::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI96609__lam_1398::apply(_a13708t_107090 const &_arg ){
  _vI96610_x = _arg;
      return eq(_vI96610_x, ptrhandle_pkg->_vI68127_pkg);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <68018>: flx_pkgconfig::check_id: Apply method
 ::flx::rtl::cl_t check_id::apply(_a13708t_107090 const &_arg ){
  _vI68025_s = _arg;
      acc = 1; //assign simple
      _vI95965_x  = _vI68025_s; //init
      _genout_urv95960  = (FLX_NEWP(_fI95961_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_pkgconfig)); //init
      _generator_flx_pkgconfig_10763 = _genout_urv95960; //assign simple
    continue__ll_flx_pkgconfig_10758_L68026:;
      check_id_mv_64666  = (_generator_flx_pkgconfig_10763)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some elt_param_bootflx_64598*/
      if(!andthen(FLX_VNI(check_id_mv_64666)==1, (FLX_NEWP(_lam_64669)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64668_L68027;
      elt_param_bootflx_64598 = *((char*)FLX_VNP(check_id_mv_64666)); //assign simple
      acc = acc && (isidstart(FLX_FPAR_PASS_ONLY)
      .apply(elt_param_bootflx_64598) /* apply_stack */ || (!!isdigit(elt_param_bootflx_64598)) ) ; //assign simple
      goto continue__ll_flx_pkgconfig_10758_L68026;
    _ml64668_L68027:;
/*match case 2:|None*/
      if(!(FLX_VNI(check_id_mv_64666)==0) ) goto _ml64670_L68028;
      goto _em64666_L68029;
    _ml64670_L68028:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",248,7,248,56);
;
    _em64666_L68029:;
      return acc;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",250,5,250,6); // HACK! 
}

//------------------------------
//FUNCTION <103077>: setup-from-file_uncurry::aux::_lam_2230: Apply method
 ::flx::rtl::cl_t _fI103077__lam_2230::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,9,478,14); // HACK! 
}

//------------------------------
//FUNCTION <98501>: cxx_depcheck::==::_lam_65569: Apply method
 ::flx::rtl::cl_t _lam_65569::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",392,23,392,34); // HACK! 
}

//------------------------------
//FUNCTION <95362>: cal_depvars::_lam_65227: Apply method
 ::flx::rtl::cl_t _lam_65227::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1789,7,1789,14); // HACK! 
}

//------------------------------
//FUNCTION <66404>: cxx_depcheck: Apply method
 ::flx::rtl::cl_t cxx_depcheck::apply(_tt107593 const &_arg ){
  tc = _arg.mem_0;
  src = _arg.mem_1;
  dst = _arg.mem_2;
      new_switches = cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), (tc.get_base_cxx_compile_flags)->clone()
      ->apply() /* general apply */)) /* apply_stack */; //assign simple
      _ds2_65571 = (tc.cxx_dependency_generator)->clone()
      ->apply(_art107174(src)) /* general apply */; //assign simple
      _vI66430_result = _ds2_65571.mem_0; //assign simple
      deps = _ds2_65571.mem_1; //assign simple
      if(!(!((_vI66430_result == 0)) ) ) goto _ifdoend_bootflx_65549_L66455;
      {
      _a13708t_107090 _tmp107603 = (::std::string("[flx_depchk] C++ Dependency generator FAILED on ") + src ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107603)));
      }
      fflush(stdout);
      return 0;
    _ifdoend_bootflx_65549_L66455:;
      newdeps = (tc.dependency_parser)->clone()
      ->apply(deps) /* general apply */; //assign simple
      depfile = dst + ::std::string(".d") ; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_573_L98557;
      {
      _a13708t_107090 _tmp107604 = (::std::string("[load] ") + depfile ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107604)));
      }
      fflush(stderr);
    _ifdoelse_std_573_L98557:;
      olddeptxt = ::flx::rtl::ioutil::load_file(depfile); //assign simple
      cxx_depcheck_mv_65575  = _fI98567_aux(FLX_FPAR_PASS this)
      .apply(_at107115(split(FLX_FPAR_PASS_ONLY)
      .apply(_at107092(olddeptxt, ::std::string("\n"))) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|Cons (h_param_bootflx_65551, t_param_bootflx_65552)*/
      if(!andthen(!!cxx_depcheck_mv_65575 , (FLX_NEWP(_lam_65578)(FLX_FPAR_PASS this))) ) goto _ml65577_L98566;
      t_param_bootflx_65552 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(cxx_depcheck_mv_65575))).mem_1; //assign simple
      h_param_bootflx_65551 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(cxx_depcheck_mv_65575))).mem_0; //assign simple
      _urv98560.mem_0 = h_param_bootflx_65551; //assign simple
      _urv98560.mem_1 = t_param_bootflx_65552; //assign simple
      goto _end_hash_7925989;
    _ml65577_L98566:;
/*match case 2:any*/
      _urv98560.mem_0 = ::std::string(""); //assign simple
      _urv98560.mem_1 = (void* /*VR_nullptr*/ )0; //assign simple
    _end_hash_7925989:;
      _ds2_65572 = _urv98560; //assign simple
      old_switches = _ds2_65572.mem_0; //assign simple
      olddeps = _ds2_65572.mem_1; //assign simple
      samedeps = (new_switches == old_switches) && _fI66406___equals___equals_(FLX_FPAR_PASS this)
      .apply(_at107115(newdeps, olddeps)) /* apply_stack */ ; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_565_L98608;
      {
      _a13708t_107090 _tmp107605 = (::std::string("[Open_output] ") + depfile ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107605)));
      }
      fflush(stderr);
    _ifdoelse_std_565_L98608:;
      _genout_urv98614  = fopen(depfile.c_str(),"wb"); //init
      _genout_urv98600  = _genout_urv98614; //init
      _genout_urv98289  = _genout_urv98600; //init
      _genout_urv98593  = _genout_urv98289; //init
      f = _genout_urv98593; //assign simple
      //run procedure directcall iter_uncurry<88913>directproc (_lam_582<98605>closure, (Snoc<79816>struct (newdeps<66432>varname, new_switches<66428>varname)));
      {
      _pt107148* _tmp107606 = (FLX_NEWP(_lam_582)(FLX_FPAR_PASS this));
      void* _tmp107607 = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(newdeps, new_switches)));
        ::flx::rtl::con_t *_p =
          (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
          ->call(0, _tt107149((_tmp107606), (_tmp107607)));
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            fprintf(stderr,"Caller cxx_depcheck\n");
            fprintf(stderr,"Calls  iter_uncurry\n");
            abort();
          }
          _p=_p->resume();
        }
      }
      (void)fclose(f);
      t = _fI98617_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107527(- 1.0 , newdeps)) /* apply_stack */; //assign simple
      fresh = samedeps && (t < dfiletime(dst, - 1.0 )) ; //assign simple
      return fresh;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",432,3,432,4); // HACK! 
}

//------------------------------
//FUNCTION <102698>: handle_filename::_lam_1537: Apply method
 ::flx::rtl::cl_t _lam_1537::apply(_a13708t_107090 const &_arg ){
  _vI102699_a = _arg;
      return eq(_vI102699_a, (split_extension(ptrhandle_filename->_vI67427_arg).data)[1]);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",766,11,766,32); // HACK! 
}

//------------------------------
//FUNCTION <65993>: toolchain_gcc_linux::static_executable_linker: Apply method
int _fI65993_static_executable_linker::apply(_art107181 const &_arg ){
  _vI65996_spec = _arg;
      _vI65995_result = generic_link_exe_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_gcc_linux->linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_gcc_linux->_vI66005_config.library_search_dirs, ptrtoolchain_gcc_linux->_vI66005_config.static_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI65996_spec.srcs, _vI65996_spec.dst)) /* apply_stack */; //assign simple
      return _vI65995_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",902,3,902,4); // HACK! 
}

//------------------------------
//FUNCTION <88545>: +: Apply method
void* _fI88545___plus_::apply(_tt107274 const &_arg ){
  _vI88611_x = _arg.mem_0;
  _vI88612_y = _arg.mem_1;
      return _fI102616_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107285(FLX_VNR(1, new(*PTF gcp, _tt107274_ptr_map, true) _tt107274 (_tt107274(_fI102603_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107285(_vI88611_x, (void* /*VR_nullptr*/ )0)) /* apply_stack */, _vI88612_y))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",419,3,419,69); // HACK! 
}

//------------------------------
//C FUNC <86832>: _fI86832_str
_a13708t_107090 _fI86832_str(_at107102 _vI86833_xs){
  _at107102 _vI102208_a;
  _a5038t_107106 _vI86861_i;
  _a5038t_107106 _vI86860_n;
  _a13708t_107090 _vI86858_o;
      _vI86858_o = ::std::string("("); //assign simple
      _vI86860_n = 3; //assign simple
      if(!((0 < _vI86860_n)) ) goto _ifdoelse_std_1608_L86853;
      {
      _a13708t_107090* _tmp107609 = (_a13708t_107090*)&_vI86858_o;
      _a13708t_107090 _tmp107610 = ::flx::rtl::strutil::str<int>((_vI86833_xs.data)[reinterpret< ::flx::rtl::cl_t>(0)]) + ::std::string("") ;
      ((_tmp107609))->append((_tmp107610));
      }
      _vI86861_i = 1; //assign simple
    redo__ll_arrays_5710_L86856:;
      if(FLX_UNLIKELY(!(!((_vI86860_n - 1  < _vI86861_i)) ) )) goto _ifdoelse_std_1608_L86853;
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(_vI86861_i)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < 3))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      _vI102208_a  = _vI86833_xs; //init
      {
      _a13708t_107090* _tmp107611 = (_a13708t_107090*)&_vI86858_o;
      _a13708t_107090 _tmp107612 = ::std::string(", ") + (::flx::rtl::strutil::str<int>((_vI102208_a.data)[reinterpret< ::flx::rtl::cl_t>(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(_vI86861_i)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)]) + ::std::string("") ) ;
      ((_tmp107611))->append((_tmp107612));
      }
      {
      _a5038t_107106* _tmp107613 = (_a5038t_107106*)&_vI86861_i;
      ++*((_tmp107613));
      }
      goto redo__ll_arrays_5710_L86856;
    _ifdoelse_std_1608_L86853:;
      return _vI86858_o + ::std::string(")") ;
}
//------------------------------
//FUNCTION <102700>: handle_filename::_lam_65078: Apply method
 ::flx::rtl::cl_t _lam_65078::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1388,5,1388,12); // HACK! 
}

//------------------------------
//FUNCTION <65720>: toolchain_msvc_win32::dynamic_library_extension: Apply method
_a13708t_107090 dynamic_library_extension::apply(){
      return ::std::string(".dll");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1740,3,1740,52); // HACK! 
}

//------------------------------
//FUNCTION <105213>: flx_processing::cxx_compile_dynamic: Apply method
int cxx_compile_dynamic::apply(_pt107161* const &_arg ){
  _vI105219_ehandler = _arg;
      _vI105214_EXT_SHARED_OBJ = ((ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(ptrflx_processing->_vI105142_dflt_clang_config) /* general apply */.dynamic_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI105441_control.CXXONLY == 0) && ((ptrflx_processing->_vI105441_control.LINKIT == 1) || ((ptrflx_processing->_vI105441_control.OUTPUT_FILENAME_SPECIFIED == 0) && (ptrflx_processing->_vI105441_control.OUTP_hash_48688961 == 0) ) ) ) ) goto _ifdoelse_bootflx_65298_L105222;
      _vI105215_result = cxx_compile_dynamic1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI105219_ehandler, ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string("_static_link_thunk.cpp") , (ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string("_static_link_thunk") ) + _vI105214_EXT_SHARED_OBJ )) /* apply_stack */; //assign simple
      if(!(!((_vI105215_result == 0)) ) ) goto _ifdoelse_bootflx_65298_L105222;
      return _vI105215_result;
    _ifdoelse_bootflx_65298_L105222:;
      if(!((ptrflx_processing->_vI105441_control.CXXONLY == 0)) ) goto _ifdoelse_bootflx_65302_L105228;
      if(!((ptrflx_processing->_vI105441_control.LINKIT == 0)) ) goto _ifdoend_bootflx_65303_L105224;
      _vI105215_result = cxx_compile_dynamic1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI105219_ehandler, ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string(".cpp") , ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME)) /* apply_stack */; //assign simple
      if(!(!((_vI105215_result == 0)) ) ) goto _ifdoelse_bootflx_65302_L105228;
      return _vI105215_result;
      goto _ifdoelse_bootflx_65302_L105228;
    _ifdoend_bootflx_65303_L105224:;
      _vI105215_result = cxx_compile_dynamic1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI105219_ehandler, ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string(".cpp") , ptrflx_processing->_vI105038_dvars.cpp_filebase + _vI105214_EXT_SHARED_OBJ )) /* apply_stack */; //assign simple
      if(!(!((_vI105215_result == 0)) ) ) goto _ifdoelse_bootflx_65302_L105228;
      return _vI105215_result;
    _ifdoelse_bootflx_65302_L105228:;
      _vI105681_xs  = ptrflx_processing->_vI105441_control.cpps; //init
      _genout_urv98661  = (FLX_NEWP(_fI105682_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _generator_flx_2483 = _genout_urv98661; //assign simple
    continue__ll_flx_2471_L105229:;
      cxx_compile_dynamic_mv_65488  = (_generator_flx_2483)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some src_param_bootflx_65310*/
      if(!andthen(FLX_VNI(cxx_compile_dynamic_mv_65488)==1, (FLX_NEWP(_lam_65491)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65490_L105231;
      src_param_bootflx_65310 = *((_a13708t_107090*)FLX_VNP(cxx_compile_dynamic_mv_65488)); //assign simple
      _vI105218_dst = (split_extension(src_param_bootflx_65310).data)[0] + _vI105214_EXT_SHARED_OBJ ; //assign simple
      _vI105215_result = cxx_compile_dynamic1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI105219_ehandler, src_param_bootflx_65310, _vI105218_dst)) /* apply_stack */; //assign simple
      if(!(!((_vI105215_result == 0)) ) ) goto _ifdoend_bootflx_65311_L105230;
      return _vI105215_result;
    _ifdoend_bootflx_65311_L105230:;
      *(&(*(&((_art107120*)&ptrflx_processing->_vI105441_control)->cppos) ))  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*(&(*(&((_art107120*)&ptrflx_processing->_vI105441_control)->cppos) )) , _vI105218_dst)) /* apply_stack */; //assign simple
      goto continue__ll_flx_2471_L105229;
    _ml65490_L105231:;
/*match case 2:|None*/
      if(!(FLX_VNI(cxx_compile_dynamic_mv_65488)==0) ) goto _ml65492_L105232;
      goto _em65488_L105233;
    _ml65492_L105232:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2293,5,2293,9);
;
    _em65488_L105233:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2295,3,2295,4); // HACK! 
}

//------------------------------
//FUNCTION <65936>: toolchain_gcc_linux::executable_extension: Apply method
_a13708t_107090 _fI65936_executable_extension::apply(){
      return ::std::string("");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",737,3,737,43); // HACK! 
}

//------------------------------
//FUNCTION <93395>: generic_link_exe_static_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93395__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <92692>: toolchain_msvc_win32::aux: Apply method
void* _fI92692_aux::apply(_at107115 const &_arg ){
  inp = _arg.data[0];
  _vI92694_out = _arg.data[1];
    start_92687_L92713:;
      aux_mv_1412  = inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(aux_mv_1412)==0) ) goto _ml1414_L92696;
      return _fI92700_aux_uncurry(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)
      .apply(_at107115(_vI92694_out, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1414_L92696:;
/*match case 2:|Snoc (t_param_std_1240, h_param_std_1241)*/
      if(!andthen(FLX_VNI(aux_mv_1412)==1, (FLX_NEWP(_lam_1421)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32))) ) goto _ml1415_L92695;
      h_param_std_1241 = (*((_tt107095*)FLX_VNP(aux_mv_1412))).mem_1; //assign simple
      t_param_std_1240 = (*((_tt107095*)FLX_VNP(aux_mv_1412))).mem_0; //assign simple
      aux_mv_1417  = _lam_65647(ptrtoolchain_msvc_win32)
      .apply(h_param_std_1241) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(aux_mv_1417%2==1) ) goto _ml1419_L92711;
/*parallel assignment*/
      _vI92694_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92694_out, h_param_std_1241))); //init
      inp  = t_param_std_1240; //init
      goto start_92687_L92713;
    _ml1419_L92711:;
/*match case 2:any*/
/*parallel assignment*/
      inp  = t_param_std_1240; //init
      goto start_92687_L92713;
    _ml1415_L92695:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",550,7,550,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",552,5,552,6); // HACK! 
}

//------------------------------
//FUNCTION <91239>: process_config_text_uncurry::_lam_2913: Apply method
 ::flx::rtl::cl_t _lam_2913::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",537,9,537,14); // HACK! 
}

//------------------------------
//FUNCTION <102460>: exts::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI102460__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <65712>: toolchain_msvc_win32::executable_extension: Apply method
_a13708t_107090 executable_extension::apply(){
      return ::std::string(".exe");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1736,3,1736,47); // HACK! 
}

//------------------------------
//FUNCTION <89215>: toolchain_clang_apple_iOS_maker_uncurry::cxx_compiler_vendor: Apply method
_a13708t_107090 _fI89215_cxx_compiler_vendor::apply(){
      return ::std::string("clang");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1990,3,1990,47); // HACK! 
}

//------------------------------
//FUNCTION <104169>: parse::iterator'2: Apply method
void* _fI104169_iterator__apos_2::apply(){
  FLX_START_SWITCH
      _vI104170_i = 0; //assign simple
    redo__ll_strings_6968_L104171:;
      if(FLX_UNLIKELY(!(!(((static_cast<int>((ptrparse->_vI104173_x.size()))/*int.flx: ctor*/) - 1  < _vI104170_i)) ) )) goto break__ll_strings_6968_L104172;
      FLX_SET_PC(107616)
      return FLX_VNR(1, new(*PTF gcp, char_ptr_map, true) char (::flx::rtl::strutil::subscript(ptrparse->_vI104173_x,_vI104170_i)));//yield
    FLX_CASE_LABEL(107616)
      {
      int* _tmp107617 = (int*)&_vI104170_i;
      ++*((_tmp107617));
      }
      goto redo__ll_strings_6968_L104171;
    break__ll_strings_6968_L104172:;
      return (void* /*VR_nullptr*/ )0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",365,5,365,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <96719>: flx_pkgconfig::xfind::_lam_64640: Apply method
 ::flx::rtl::cl_t _lam_64640::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",146,8,146,13); // HACK! 
}

//------------------------------
//FUNCTION <95678>: list_eq::_lam_1501: Apply method
 ::flx::rtl::cl_t _lam_1501::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",640,7,640,17); // HACK! 
}

//------------------------------
//FUNCTION <91096>: process_config_text_uncurry::aux_uncurry: Apply method
void* _fI91096_aux_uncurry::apply(_at107115 const &_arg ){
  _vI91097_x_uncurry = _arg.data[0];
  _vI91098_y = _arg.data[1];
    start_91065_L91105:;
      _vI91101_aux__apos_2_mv_1328  = _vI91097_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI91101_aux__apos_2_mv_1328)==0) ) goto _ml1330_L91100;
      return _vI91098_y;
    _ml1330_L91100:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI91101_aux__apos_2_mv_1328)==1, (FLX_NEWP(_lam_1332)(FLX_FPAR_PASS this, ptrprocess_config_text_uncurry))) ) goto _ml1331_L91099;
      h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI91101_aux__apos_2_mv_1328))).mem_1; //assign simple
      t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI91101_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI91098_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI91098_y, h_param_std_1210))); //init
      _vI91097_x_uncurry  = t_param_std_1209; //init
      goto start_91065_L91105;
    _ml1331_L91099:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <104900>: FlxPkgConfigQuery::getpkgfieldopt::getpkgfieldopt'2::_lam_64776: Apply method
 ::flx::rtl::cl_t _lam_64776::apply(){
      return FLX_VNI((reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>((ptr_fI67807_getpkgfieldopt__apos_2->_vI64773_getpkgfieldopt__apos_2_mv_64773)))).mem_1)==0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",528,9,528,23); // HACK! 
}

//------------------------------
//FUNCTION <88902>: search_and_replace_uncurry: Apply method
_a13708t_107090 search_and_replace_uncurry::apply(_tt107295 const &_arg ){
  vs_uncurry = _arg.mem_0;
  _vI89697_v = _arg.mem_1;
      _vI96098_xs  = vs_uncurry; //init
      _genout_urv96097  = (FLX_NEWP(_fI96099_iterator__apos_2)(FLX_FPAR_PASS this)); //init
      _generator_strings_7324 = _genout_urv96097; //assign simple
    continue__ll_strings_7319_L89698:;
      _vI89688_search_and_replace__apos_2_mv_2301  = (_generator_strings_7324)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some (k_param_std_1958, b_param_std_1959)*/
      if(!andthen(FLX_VNI(_vI89688_search_and_replace__apos_2_mv_2301)==1, (FLX_NEWP(_lam_2304)(FLX_FPAR_PASS this))) ) goto _ml2303_L89699;
      b_param_std_1959 = ((*((_at107092*)FLX_VNP(_vI89688_search_and_replace__apos_2_mv_2301))).data)[1]; //assign simple
      k_param_std_1958 = ((*((_at107092*)FLX_VNP(_vI89688_search_and_replace__apos_2_mv_2301))).data)[0]; //assign simple
      _vI96121_spos  = 0; //init
      _vI96118_m = k_param_std_1958.size(); //assign simple
      _vI96119_o = ::flx::rtl::strutil::substr(_vI89697_v,0,_vI96121_spos); //assign simple
      _vI96120_n = _vI89697_v.find(k_param_std_1958,_vI96121_spos); //assign simple
    continue__ll_strings_7305_L96122:;
      if(FLX_UNLIKELY(!(!((_vI96120_n == ::std::string::npos)) ) )) goto break__ll_strings_7305_L96123;
      {
      _a13708t_107090* _tmp107619 = (_a13708t_107090*)&_vI96119_o;
      _a13708t_107090 _tmp107620 = ::flx::rtl::strutil::substr(_vI89697_v,_vI96121_spos,_vI96120_n) + b_param_std_1959 ;
      ((_tmp107619))->append((_tmp107620));
      }
      _vI96121_spos = _vI96120_n + _vI96118_m ; //assign simple
      _vI96120_n = ((_vI89697_v.find(k_param_std_1958,_vI96121_spos)))/*int.flx: ctor size IDENT*/; //assign simple
      goto continue__ll_strings_7305_L96122;
    break__ll_strings_7305_L96123:;
      {
      _a13708t_107090* _tmp107621 = (_a13708t_107090*)&_vI96119_o;
      _a13708t_107090 _tmp107622 = ::flx::rtl::strutil::substr(_vI89697_v,_vI96121_spos,_vI89697_v.size());
      ((_tmp107621))->append((_tmp107622));
      }
      _vI89697_v = _vI96119_o; //assign simple
      goto continue__ll_strings_7319_L89698;
    _ml2303_L89699:;
/*match case 2:|Some any*/
      if(!andthen(FLX_VNI(_vI89688_search_and_replace__apos_2_mv_2301)==1, (FLX_NEWP(_lam_2306)(FLX_FPAR_PASS this))) ) goto _ml2305_L89700;
      goto continue__ll_strings_7319_L89698;
    _ml2305_L89700:;
/*match case 3:|None*/
      if(!(FLX_VNI(_vI89688_search_and_replace__apos_2_mv_2301)==0) ) goto _ml2307_L89701;
      goto _em2301_L89702;
    _ml2307_L89701:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9);
;
    _em2301_L89702:;
      return _vI89697_v;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",742,3,742,4); // HACK! 
}

//------------------------------
//FUNCTION <65926>: toolchain_gcc_linux::whatami: Apply method
_a13708t_107090 _fI65926_whatami::apply(){
      return ::std::string("toolchain_gcc_linux (version 2)");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",731,3,731,61); // HACK! 
}

//------------------------------
//FUNCTION <96404>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::search_and_replace'2::_lam_2306: Apply method
 ::flx::rtl::cl_t _fI96404__lam_2306::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9); // HACK! 
}

//------------------------------
//FUNCTION <93475>: generic_link_exe_dynamic_uncurry::aux_uncurry: Apply method
void* _fI93475_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93476_inp_uncurry = _arg.data[0];
  _vI93477_out = _arg.data[1];
    start_90421_L93484:;
      _vI93480_aux__apos_2_mv_1322  = _vI93476_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93480_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93479;
      return _vI93477_out;
    _ml1324_L93479:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93480_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93483__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_link_exe_dynamic_uncurry))) ) goto _ml1325_L93478;
      _vI93481_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93480_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93482_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93480_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93477_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93477_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93481_h_param_std_1208) /* apply_stack */))); //init
      _vI93476_inp_uncurry  = _vI93482_t_param_std_1207; //init
      goto start_90421_L93484;
    _ml1325_L93478:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <66302>: toolchain_clang_apple_iPhoneOS_armv7_arm64: Apply method
_art107183 _fI66302_tool_hash_1053775159::apply(_art107173 const &_arg ){
  _vI66304_config = _arg;
      _vI93884_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L93880;
      _vI93885_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp107625 = (int*)&_vI93885_i;
      ++*((_tmp107625));
      }
    redo__ll_lists_4854_L93883:;
      if(FLX_UNLIKELY(!((0 < _vI93885_i)) )) goto _ifdoelse_std_1191_L93880;
      {
      int* _tmp107626 = (int*)&_vI93885_i;
      --*((_tmp107626));
      }
      _vI93884_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93884_o, (_at107092(::std::string("armv7"), ::std::string("arm64")).data)[reinterpret< ::flx::rtl::cl_t>(_vI93885_i)]))); //assign simple
      goto redo__ll_lists_4854_L93883;
    _ifdoelse_std_1191_L93880:;
      return (FLX_NEWP(toolchain_clang_apple_iOS_maker_uncurry)(FLX_FPAR_PASS_ONLY))
      ->apply(_tt107236(::std::string("iphoneos"), _vI93884_o, _vI66304_config));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2196,1,2196,2); // HACK! 
}

//------------------------------
//FUNCTION <96107>: search_and_replace_uncurry::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI96107__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//C PROC <67189>: _pI67189_print_help
void _pI67189_print_help(){
      {
      _a13708t_107090 _tmp107627 = ::std::string("Usage: flx [options] filename[.flx] [args ..]") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107627)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107628 = ::std::string("options:") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107628)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107629 = ::std::string("--cmd=text           : save text to file 'cmd.flx' and process that") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107629)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107630 = ::std::string("--repl               : enter REPL mode saving stuff in session.flx and library.flx") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107630)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107631 = ::std::string("--test               : use felix installation in current directory") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107631)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107632 = ::std::string("--test=dir           : use felix installation in dir") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107632)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107633 = ::std::string("--target-subdir=dir  : subdir of install dir containing target configuration (default 'host')") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107633)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107634 = ::std::string("--target-dir=dir     : dir containing target configuration (default '$FLX_INSTALL_DIR/host')") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107634)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107635 = ::std::string("--pkgconfig-path+=dir: prepend extra flx_pkgconfig search directory to standard path") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107635)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107636 = ::std::string("--toolchain=toolchain: pick a non-default C++ compiler toolchain") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107636)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107637 = ::std::string("--felix=file         : get installation details from file") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107637)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107638 = ::std::string("--where              : print location of felix installation") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107638)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107639 = ::std::string("--show               : print the felix program to stdout") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107639)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107640 = ::std::string("-c                   : compile only, do not run") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107640)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107641 = ::std::string("-o                   : linker output filename") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107641)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107642 = ::std::string("-ox                  : linker output filename (without extension)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107642)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107643 = ::std::string("-od                  : linker output directory") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107643)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107644 = ::std::string("--usage=prototype    : fast compilation at the expense of slower executables") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107644)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107645 = ::std::string("--usage=debugging    : enable debugging aids") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107645)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107646 = ::std::string("--usage=production   : optimised code with run time safety checks retained") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107646)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107647 = ::std::string("--usage=hyperlight   : optimised code without run time safety checks") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107647)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107648 = ::std::string("--static             : make standalone statically linked executable") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107648)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107649 = ::std::string("--staticlib          : make standalone library of static objects") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107649)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107650 = ::std::string("--nofelix            : do not run felix translator, leave C++ outputs alone") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107650)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107651 = ::std::string("--nocc               : do not C/C++ compiler; implies --nolink") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107651)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107652 = ::std::string("--nolink             : do not link object files to an executable") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107652)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107653 = ::std::string("--run-only           : run program without dependency checking or linking") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107653)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107654 = ::std::string("--c++                : Pure C++ build, no Felix code") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107654)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107655 = ::std::string("--ocaml              : Pure Ocaml build, no Felix code") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107655)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107656 = ::std::string("--options            : show option set") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107656)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107657 = ::std::string("--config             : show configuration") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107657)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107658 = ::std::string("--version            : show felix version") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107658)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107659 = ::std::string("--force              : force run Felix compiler") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107659)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107660 = ::std::string("--force-compiler     : force Felix compiler to rebuild everything") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107660)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107661 = ::std::string("--cache-dir=dir      : directory cache output from parser (*.par files), autocreated, default $HOME/.felix/cache") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107661)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107662 = ::std::string("--output-dir=dir     : directory to hold C++ output from translator, autocreated, default $HOME/.felix/cache") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107662)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107663 = ::std::string("                       Felix stored by absolute pathname within directory (tree directory).") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107663)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107664 = ::std::string("--bundle-dir=dir     : directory to hold C++ output from translator, autocreated.") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107664)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107665 = ::std::string("                       Files directly in directory by basename (flat directory).") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107665)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107666 = ::std::string("--clean              : delete the caches first") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107666)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107667 = ::std::string("--help               : show this help") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107667)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107668 = ::std::string("--noinline           : force inlining off, may break things!") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107668)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107669 = ::std::string("--inline             : aggressive inlining") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107669)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107670 = ::std::string("--inline=999         : set inline cap to 999 'instructions'") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107670)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107671 = ::std::string("--echo               : print shell commands before running them") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107671)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107672 = ::std::string("--time               : print target program run time after it finishes") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107672)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107673 = ::std::string("--compile-time       : print time for compiler phases") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107673)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107674 = ::std::string("--nostdlib           : don't load the standard library") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107674)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107675 = ::std::string("--nooptimise         : disable C++ compiler optimisation") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107675)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107676 = ::std::string("--noreduce           : disable reductions (default for compilation speed)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107676)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107677 = ::std::string("--doreduce           : enable reductions (default for performance)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107677)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107678 = ::std::string("--debug              : put debug symbols in generated binaries") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107678)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107679 = ::std::string("--debug-compiler     : make felix compiler print progress diagnostics") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107679)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107680 = ::std::string("--debug-flx          : make flx tool print diagnostics") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107680)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107681 = ::std::string("--stdout=file        : run program with standard output redirected to file") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107681)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107682 = ::std::string("--expect=file        : compare stdout with expect file") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107682)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107683 = ::std::string("--expect             : compare stdout with basename.expect") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107683)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107684 = ::std::string("--input=file         : set standard input") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107684)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107685 = ::std::string("--input              : set standard input to basename.input") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107685)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107686 = ::std::string("--indir=dir          : set directory for regexp search, default current directory") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107686)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107687 = ::std::string("--regex=pattern      : Perl regexp for batch file processing") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107687)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107688 = ::std::string("--nonstop            : don't stop on error in batch processing") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107688)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107689 = ::std::string("--backup             : backup working source tree to dir 'backup'") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107689)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107690 = ::std::string("--import=file        : add an import which is prefixed to all files being translated") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107690)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107691 = ::std::string("--import=@file       : add all the files listed in file as imports (recursive on @)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107691)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107692 = ::std::string("--nostdimport        : don't import the standard imports nugram.flxh and flx.flxh") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107692)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107693 = ::std::string("--compiler-phase     : specify which phase of the compiler to run") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107693)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107694 = ::std::string("-Idir                : add dir to search path for both felix and C++ includes") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107694)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107695 = ::std::string("-Ldir                : add dir to linker search path") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107695)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107696 = ::std::string("-llib                : add dir lib to linker command") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107696)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107697 = ::std::string("-foption             : add switch to compiler command") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107697)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107698 = ::std::string("-Woption             : add switch to compiler command") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107698)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107699 = ::std::string("-O0                  : add switch to compiler command") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107699)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107700 = ::std::string("-O1                  : add switch to compiler command") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107700)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107701 = ::std::string("-O2                  : add switch to compiler command") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107701)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107702 = ::std::string("-O3                  : add switch to compiler command") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107702)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107703 = ::std::string("--cflags=flags       : addd flags to compiler command") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107703)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107704 = ::std::string("-Dmac                : add macro def to C++ compiler command") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107704)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107705 = ::std::string("-DFLX_ENABLE_TRACE   : enable compilation of trace generators (defaults off)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107705)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107706 = ::std::string("-DFLX_CGOTO          : use gcc indirect gotos and use assembler hack for long jumps (default on if config detects support)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107706)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107707 = ::std::string("") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107707)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107708 = ::std::string("*.c *.cc *.cpp *.cxx ") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107708)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107709 = ::std::string("                     : add files to C++ compilation (and linker) steps") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107709)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107710 = ::std::string("*.o *.obj *.lib *.dll *.a *.so") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107710)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107711 = ::std::string("                     : add files to linker steps") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107711)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107712 = ::std::string("* *.flx *.fdoc       : Felix program name, terminates options and starts runtime arguments") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107712)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107713 = ::std::string("") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107713)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107714 = ::std::string("Environment variables") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107714)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107715 = ::std::string("---------------------") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107715)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107716 = ::std::string("Flx build tool") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107716)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107717 = ::std::string("  FLX_INSTALL_DIR=dir     : overrides default installation directory (as if --test=dir)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107717)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107718 = ::std::string("  FLX_SHELL_ECHO=1        : show shell callouts (system,popen)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107718)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107719 = ::std::string("  FLX_FILE_MONITOR=1      : reports on every file open (felix and flxg)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107719)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107720 = ::std::string("  FLX_REPORT_FILECOPY=1   : reports on every file copy (felix)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107720)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107721 = ::std::string("  FLX_DEBUG_FLX=1         : debug flx (as if --debug-flx set)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107721)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107722 = ::std::string("Flxg compiler") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107722)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107723 = ::std::string("  FLX_DEBUG_PARSER=1      : emit debug info from the Felix parser") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107723)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107724 = ::std::string("Run time system (affects flx as well as any binary run)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107724)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107725 = ::std::string("  FLX_DEBUG               : enable debugging traces (default off)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107725)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107726 = ::std::string("  FLX_DEBUG_ALLOCATIONS   : enable debugging allocator (default FLX_DEBUG)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107726)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107727 = ::std::string("  FLX_DEBUG_COLLECTIONS   : enable debugging collector (default FLX_DEBUG)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107727)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107728 = ::std::string("  FLX_REPORT_COLLECTIONS  : report collections (default FLX_DEBUG)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107728)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107729 = ::std::string("  FLX_DEBUG_THREADS       : enable debugging collector (default FLX_DEBUG)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107729)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107730 = ::std::string("  FLX_DEBUG_DRIVER        : enable debugging driver (default FLX_DEBUG)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107730)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107731 = ::std::string("Run time GC tuning (affects flx as well as any binary run)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107731)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107732 = ::std::string("  FLX_FINALISE            : whether to cleanup on termination (default NO)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107732)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107733 = ::std::string("  FLX_GC_FREQ=n           : how often to call garbage collector (default 1000)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107733)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107734 = ::std::string("  FLX_MIN_MEM=n           : initial memory pool n Meg (default 10)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107734)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107735 = ::std::string("  FLX_MAX_MEM=n           : maximum memory n Meg (default -1 = infinite)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107735)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107736 = ::std::string("  FLX_FREE_FACTOR=n.m     : reset FLX_MIN_MEM to actual usage by n.m after gc (default 1.1)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107736)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107737 = ::std::string("  FLX_ALLOW_COLLECTION_ANYWHERE # (default yes)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107737)));
      }
      fflush(stdout);
      return; // proc return from stackable 
}
//------------------------------
//FUNCTION <92365>: mem_uncurry::_lam_1397: Apply method
 ::flx::rtl::cl_t _lam_1397::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",505,7,505,15); // HACK! 
}

//------------------------------

//PROCEDURE <105630:> flx_processing::run_felix_compiler_if_required::_lam_64528: Call method
::flx::rtl::con_t * _lam_64528::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI105631_i = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <105630:> flx_processing::run_felix_compiler_if_required::_lam_64528: Resume method
::flx::rtl::con_t *_lam_64528::resume(){
      {
      _a13708t_107090 _tmp107738 = ::std::string("#include ") + _vI105631_i ;
      ::flx::rtl::ioutil::writeln((ptrrun_felix_compiler_if_required->_vI105629_f),((_tmp107738)));
      }
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <105086>: flx_processing::rfi::iterator'2: Apply method
void* _fI105086_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L105087:;
      _vI105091_iterator__apos_2_mv_1504  = ptrrfi->_vI105085_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI105091_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI105094__lam_1507)(FLX_FPAR_PASS this, ptrrfi, ptrflx_processing))) ) goto _ml1506_L105090;
      _vI105092_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI105091_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI105093_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI105091_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrrfi->_vI105085_xs = _vI105093_t_param_std_1259; //assign simple
      FLX_SET_PC(107739)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI105092_h_param_std_1260));//yield
    FLX_CASE_LABEL(107739)
      goto continue__ll_lists_5177_L105087;
    _ml1506_L105090:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI105091_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L105089;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L105089:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L105087;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <93528>: generic_link_lib_dynamic_uncurry::aux_uncurry: Apply method
void* _fI93528_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93529_inp_uncurry = _arg.data[0];
  _vI93530_out = _arg.data[1];
    start_90421_L93537:;
      _vI93533_aux__apos_2_mv_1322  = _vI93529_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93533_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93532;
      return _vI93530_out;
    _ml1324_L93532:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93533_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93536__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_link_lib_dynamic_uncurry))) ) goto _ml1325_L93531;
      _vI93534_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93533_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93535_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93533_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93530_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93530_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93534_h_param_std_1208) /* apply_stack */))); //init
      _vI93529_inp_uncurry  = _vI93535_t_param_std_1207; //init
      goto start_90421_L93537;
    _ml1325_L93531:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <88907>: join_uncurry: Apply method
void* join_uncurry::apply(_at107115 const &_arg ){
  _vI89111_x_uncurry = _arg.data[0];
  _vI89112_y = _arg.data[1];
      _vI91630_is_empty_mv_1309  = _vI89111_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI91630_is_empty_mv_1309)==0) ) goto _ml1311_L91629;
      _urv91627  = 1; //init
      goto _end_inline_is_empty_91632_L91632;
    _ml1311_L91629:;
/*match case 2:any*/
      _urv91627  = 0; //init
    _end_inline_is_empty_91632_L91632:;
      if(!_urv91627 ) goto _ifdoend_std_1215_L89113;
      return _vI89112_y;
    _ifdoend_std_1215_L89113:;
      *((void**)&z)  = _fI91651_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89111_x_uncurry, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107742 = (void**)&z;
      void** _tmp107743 = (void**)&last;
      _rev_last(((_tmp107742)),((_tmp107743)),(_a13708t_107090*)0);
      }
      {
      void** _tmp107744 = (void**)&last;
      
    { // list splice
      //struct node_t { _a13708t_107090 elt; void *tail; };
      struct node_t { void *tail; _a13708t_107090 elt; };
      void **p = ((_tmp107744));
      while(*p) p = &((node_t*)FLX_VNP(*p))->tail;
      *p = _vI89112_y;
    }
    
      }
      return z;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",405,3,405,4); // HACK! 
}

//------------------------------
//FUNCTION <105234>: flx_processing::cxx_compile_static: Apply method
int cxx_compile_static::apply(_pt107161* const &_arg ){
  _vI105240_ehandler = _arg;
      _vI105235_EXT_STATIC_OBJ = ((ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(ptrflx_processing->_vI105142_dflt_clang_config) /* general apply */.static_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI105441_control.CXXONLY == 0) && ((ptrflx_processing->_vI105441_control.LINKIT == 1) || ((ptrflx_processing->_vI105441_control.OUTPUT_FILENAME_SPECIFIED == 0) && (ptrflx_processing->_vI105441_control.OUTP_hash_48688961 == 0) ) ) ) ) goto _ifdoelse_bootflx_65314_L105243;
      _vI105236_result = cxx_compile_static1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI105240_ehandler, ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string("_static_link_thunk.cpp") , (ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string("_static_link_thunk") ) + _vI105235_EXT_STATIC_OBJ )) /* apply_stack */; //assign simple
      if(!(!((_vI105236_result == 0)) ) ) goto _ifdoelse_bootflx_65314_L105243;
      return _vI105236_result;
    _ifdoelse_bootflx_65314_L105243:;
      _vI105732_xs  = ptrflx_processing->_vI105441_control.cpps; //init
      _genout_urv98856  = (FLX_NEWP(_fI105733_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _generator_flx_2517 = _genout_urv98856; //assign simple
    continue__ll_flx_2505_L105244:;
      cxx_compile_static_mv_65493  = (_generator_flx_2517)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some src_param_bootflx_65318*/
      if(!andthen(FLX_VNI(cxx_compile_static_mv_65493)==1, (FLX_NEWP(_lam_65496)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65495_L105246;
      src_param_bootflx_65318 = *((_a13708t_107090*)FLX_VNP(cxx_compile_static_mv_65493)); //assign simple
      _vI105239_dst = (split_extension(src_param_bootflx_65318).data)[0] + _vI105235_EXT_STATIC_OBJ ; //assign simple
      _vI105236_result = cxx_compile_static1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI105240_ehandler, src_param_bootflx_65318, _vI105239_dst)) /* apply_stack */; //assign simple
      if(!(!((_vI105236_result == 0)) ) ) goto _ifdoend_bootflx_65319_L105245;
      return _vI105236_result;
    _ifdoend_bootflx_65319_L105245:;
      *(&(*(&((_art107120*)&ptrflx_processing->_vI105441_control)->cppos) ))  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*(&(*(&((_art107120*)&ptrflx_processing->_vI105441_control)->cppos) )) , _vI105239_dst)) /* apply_stack */; //assign simple
      goto continue__ll_flx_2505_L105244;
    _ml65495_L105246:;
/*match case 2:|None*/
      if(!(FLX_VNI(cxx_compile_static_mv_65493)==0) ) goto _ml65497_L105247;
      goto _em65493_L105248;
    _ml65497_L105247:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2325,5,2325,9);
;
    _em65493_L105248:;
      if(!((ptrflx_processing->_vI105441_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65321_L105250;
      if(!((ptrflx_processing->_vI105441_control.LINKIT == 0)) ) goto _ifdoend_bootflx_65323_L105249;
      return cxx_compile_static1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI105240_ehandler, ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string(".cpp") , ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME)) /* apply_stack */;
    _ifdoend_bootflx_65323_L105249:;
      return cxx_compile_static1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI105240_ehandler, ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string(".cpp") , ptrflx_processing->_vI105038_dvars.cpp_filebase + _vI105235_EXT_STATIC_OBJ )) /* apply_stack */;
    _ifdoend_bootflx_65321_L105250:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2342,3,2342,4); // HACK! 
}

//------------------------------

//PROCEDURE <68053:> flx_pkgconfig::add_val: Call method
::flx::rtl::con_t * add_val::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  v = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <68053:> flx_pkgconfig::add_val: Resume method
::flx::rtl::con_t *add_val::resume(){
      _vI95797_insert_unique__apos_3_mv_1428  = mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107208((FLX_NEWP(_fI95798__lam_1398)(FLX_FPAR_PASS this, ptrflx_pkgconfig)), ptrflx_pkgconfig->_vI68017_result)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI95797_insert_unique__apos_3_mv_1428%2==1) ) goto _ml1430_L95796;
      _urv95792  = ptrflx_pkgconfig->_vI68017_result; //init
      goto _end_hash_396188315;
    _ml1430_L95796:;
/*match case 2:any*/
      _urv95792  = _fI95810_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI95800_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at107115(ptrflx_pkgconfig->_vI68017_result, (void* /*VR_nullptr*/ )0)) /* apply_stack */, v))), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
    _end_hash_396188315:;
      ptrflx_pkgconfig->_vI68017_result = _urv95792; //assign simple
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <90502>: cat_uncurry::_lam_1386: Apply method
 ::flx::rtl::cl_t _lam_1386::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",469,7,469,23); // HACK! 
}

//------------------------------
//C FUNC <85459>: _fI85459_load__hyphen_plugin__hyphen_func1
_ft107184* _fI85459_load__hyphen_plugin__hyphen_func1(FLX_APAR_DECL  _a13708t_107090 _vI85460_dll__hyphen_name, _a13708t_107090 _vI85461_setup__hyphen_str, _a13708t_107090 _vI85462_entry__hyphen_point){
  _a7338t_107409 _genout_urv94349;
   ::flx::rtl::cl_t _vI94249_load__hyphen_plugin__hyphen_func1_mv_537;
  _a13708t_107090 _urv94247;
  int sresult;
  _a7338t_107409 _vI85484_linst;
  _a13708t_107090 entrypoint;
      _vI94249_load__hyphen_plugin__hyphen_func1_mv_537  = (_vI85462_entry__hyphen_point == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI94249_load__hyphen_plugin__hyphen_func1_mv_537%2==1) ) goto _ml539_L94248;
      _urv94247  = _vI85460_dll__hyphen_name; //init
      goto _end_hash_701856754;
    _ml539_L94248:;
/*match case 2:any*/
      _urv94247  = _vI85462_entry__hyphen_point; //init
    _end_hash_701856754:;
      entrypoint = _urv94247; //assign simple
      _genout_urv94349  = init_lib(FLX_FPAR_PASS _vI85460_dll__hyphen_name); //init
      _vI85484_linst = _genout_urv94349; //assign simple
      sresult = ((FLX_NEWP(func1)(FLX_FPAR_PASS_ONLY))
      ->apply(_tt107410(_vI85484_linst, _vI85460_dll__hyphen_name + ::std::string("_setup") )))->clone()
      ->apply(_vI85461_setup__hyphen_str) /* general apply */; //assign simple
      (void)sresult;
      if(!(!((sresult == 0)) ) ) goto _ifdoelse_std_487_L85480;
      {
      _a13708t_107090 _tmp107746 = (((::std::string("[dynlink] Warning: Plugin Library ") + _vI85460_dll__hyphen_name ) + ::std::string(" set up returned ") ) + ::flx::rtl::strutil::str<int>(sresult) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107746)));
      }
      fflush(stderr);
    _ifdoelse_std_487_L85480:;
      return (FLX_NEWP(_fI85487_func1)(FLX_FPAR_PASS_ONLY))
      ->apply(_tt107410(_vI85484_linst, entrypoint));
}
//------------------------------
//FUNCTION <106124>: flx_processing::system: Apply method
int _fI106124_system::apply(_a13708t_107090 const &_arg ){
  _vI106128_cmd = _arg;
      {
      __timeb64* _tmp107747 = (__timeb64*)&_vI106476_tv;
      _ftime64_s(((_tmp107747)));
      }
      _vI106475__genout_urv95584  = (static_cast<double>((_vI106476_tv.time))) + ((static_cast<double>((_vI106476_tv.millitm))) / 1.0e3 ) ; //init
      _vI106125_now = _vI106475__genout_urv95584; //assign simple
      if(!((ptrflx_processing->_vI106422_control.ECHO == 1)) ) goto _ifdoelse_bootflx_65263_L106130;
      {
      _a13708t_107090 _tmp107748 = _vI106128_cmd + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107748)));
      }
    _ifdoelse_bootflx_65263_L106130:;
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_444_L106478;
      {
      _a13708t_107090 _tmp107749 = (::std::string("[system] ") + _vI106128_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107749)));
      }
      fflush(stderr);
    _ifdoelse_std_444_L106478:;
      _vI106483__genout_urv95601  = ::std::system(((::std::string("\"") + _vI106128_cmd ) + ::std::string("\"") ).c_str()); //init
      _vI106482__genout_urv93142  = _vI106483__genout_urv95601; //init
      _vI106481__genout_urv93134  = _vI106482__genout_urv93142; //init
      _vI106480__genout_urv93129  = _vI106481__genout_urv93134; //init
      _vI106477__genout_urv95592  = _vI106480__genout_urv93129; //init
      _vI106126_result = _vI106477__genout_urv95592; //assign simple
      {
      __timeb64* _tmp107750 = (__timeb64*)&_vI106485_tv;
      _ftime64_s(((_tmp107750)));
      }
      _vI106484__genout_urv95602  = (static_cast<double>((_vI106485_tv.time))) + ((static_cast<double>((_vI106485_tv.millitm))) / 1.0e3 ) ; //init
      _vI106127_elapsed = _vI106484__genout_urv95602 - _vI106125_now ; //assign simple
      if(!((ptrflx_processing->_vI106422_control.ECHO == 1)) ) goto _ifdoelse_bootflx_65265_L106132;
      {
      _a13708t_107090 _tmp107751 = (((::std::string("System:Elapsed: ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106127_elapsed, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(8, 3))))) /* apply_stack */ ) + ::std::string(", Result code ") ) + ::flx::rtl::strutil::str<int>(_vI106126_result) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107751)));
      }
    _ifdoelse_bootflx_65265_L106132:;
      return _vI106126_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2035,3,2035,4); // HACK! 
}

//------------------------------
//FUNCTION <105273>: flx_processing::cxx_link_shared_library: Apply method
int cxx_link_shared_library::apply(_pt107161* const &_arg ){
  _vI105287_ehandler = _arg;
      {
      __timeb64* _tmp107752 = (__timeb64*)&_vI105801_tv;
      _ftime64_s(((_tmp107752)));
      }
      _genout_urv99243  = (static_cast<double>((_vI105801_tv.time))) + ((static_cast<double>((_vI105801_tv.millitm))) / 1.0e3 ) ; //init
      _vI105274_t0 = _genout_urv99243; //assign simple
      pkg_dstrings = (void* /*VR_nullptr*/ )0; //assign simple
      _vI105276_pkgs = ptrflx_processing->_vI105441_control.extra_pkgs; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI105276_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65346_L105291;
      {
      _a13708t_107090 _tmp107753 = (::std::string("[flx:cxx_link_shared_library] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105276_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107753)));
      }
      fflush(stderr);
      _vI105802_r = _fI105803_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107754 = (void**)&_vI105802_r;
      _rev(((_tmp107754)),(_a13708t_107090*)0);
      }
      _vI105279_PKGCONFIG_PATH = _vI105802_r; //assign simple
      _vI105280_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI105279_PKGCONFIG_PATH, ::std::string("-r"))) /* apply_stack */, ::std::string("--field=provides_dlib"))) /* apply_stack */, ::std::string("--field=requires_dlibs"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI105276_pkgs)) /* apply_stack */, ptrflx_processing->_vI105441_control.pkgs)) /* apply_stack */; //assign simple
      _genout_urv99284  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI105280_allargs) /* apply_stack */; //init
      _ds2_65512 = _genout_urv99284; //assign simple
      _vI105282_ret = _ds2_65512.mem_0; //assign simple
      mydstrings = _ds2_65512.mem_1; //assign simple
      if(!(!((_vI105282_ret == 0)) ) ) goto _ifdoelse_bootflx_65348_L105289;
      {
      _a13708t_107090 _tmp107755 = (((::std::string("[flx:cxx_link_shared_library] Error ") + ::flx::rtl::strutil::str<int>(_vI105282_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105280_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107755)));
      }
      fflush(stderr);
      {
      _a6203t_107291 _tmp107756 = (_a6203t_107291)(_vI105287_ehandler);
      throw ((_tmp107756));
      }
    _ifdoelse_bootflx_65348_L105289:;
      pkg_dstrings = mydstrings; //assign simple
    _ifdoelse_bootflx_65346_L105291:;
      _vI105815_cxx_link_shared_library_mv_65514  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105815_cxx_link_shared_library_mv_65514%2==1) ) goto _ml65516_L105816;
      _urv99295  = (FLX_NEWP(echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_926517724;
    _ml65516_L105816:;
/*match case 2:any*/
      _urv99295  = (FLX_NEWP(_pI105442_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_926517724:;
      cxx_link_shared_library_mv_65514  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(cxx_link_shared_library_mv_65514%2==1) ) goto _ml65516_L105820;
      goto _end_hash_66194485;
    _ml65516_L105820:;
/*match case 2:any*/
    _end_hash_66194485:;
      _vI105284_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(ptrflx_processing->_vI105142_dflt_clang_config.ccflags, _urv99295, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.LINK_STRINGS, pkg_dstrings)) /* apply_stack */, ptrflx_processing->_vI105142_dflt_clang_config.header_search_dirs, ptrflx_processing->_vI105142_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI105142_dflt_clang_config.macros, ptrflx_processing->_vI105142_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      _vI105285_EXT_SHARED_OBJ = (_vI105284_tc.dynamic_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI105441_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65349_L105292;
      _vI105286_result = (_vI105284_tc.dynamic_library_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME, _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_processing->_vI105441_control.cppos, ptrflx_processing->_vI105038_dvars.cpp_filebase + _vI105285_EXT_SHARED_OBJ )) /* apply_stack */)) /* general apply */; //assign simple
      goto _ifdoelse_bootflx_65350_L105293;
    _ifdoend_bootflx_65349_L105292:;
      _vI105286_result = (_vI105284_tc.dynamic_library_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME, ptrflx_processing->_vI105441_control.cppos)) /* general apply */; //assign simple
    _ifdoelse_bootflx_65350_L105293:;
      if(!((ptrflx_processing->_vI105441_control.TIME == 1)) ) goto _end_99326_L105829;
      {
      __timeb64* _tmp107757 = (__timeb64*)&_vI105828_tv;
      _ftime64_s(((_tmp107757)));
      }
      _vI105827__genout_urv95543  = (static_cast<double>((_vI105828_tv.time))) + ((static_cast<double>((_vI105828_tv.millitm))) / 1.0e3 ) ; //init
      _vI105822_elapsed = _vI105827__genout_urv95543 - _vI105274_t0 ; //assign simple
      _vI105823_minutes = ::std::floor((_vI105822_elapsed / 60.0 )); //assign simple
      _vI105824_seconds = _vI105822_elapsed - (_vI105823_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp107758 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105823_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105824_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Dynamic link : ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107758)));
      }
      fflush(stdout);
    _end_99326_L105829:;
      if(!(!((_vI105286_result == 0)) ) ) goto _ifdoelse_bootflx_65352_L105295;
      {
      _a13708t_107090 _tmp107759 = ((::std::string("[flx] C++ clink ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107759)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65352_L105295:;
      return _vI105286_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2532,3,2532,4); // HACK! 
}

//------------------------------
//FUNCTION <105753>: flx_processing::ocaml_compile::iterator'2: Apply method
void* _fI105753_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L105754:;
      _vI105758_iterator__apos_2_mv_1504  = ptrocaml_compile->_vI105752_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI105758_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI105761__lam_1507)(FLX_FPAR_PASS this, ptrocaml_compile, ptrflx_processing))) ) goto _ml1506_L105757;
      _vI105759_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI105758_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI105760_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI105758_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrocaml_compile->_vI105752_xs = _vI105760_t_param_std_1259; //assign simple
      FLX_SET_PC(107760)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI105759_h_param_std_1260));//yield
    FLX_CASE_LABEL(107760)
      goto continue__ll_lists_5177_L105754;
    _ml1506_L105757:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI105758_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L105756;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L105756:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L105754;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------

//PROCEDURE <68313:> flx_processing::ehandler: Call method
::flx::rtl::con_t * ehandler::call(::flx::rtl::con_t *_ptr_caller){
  _caller = _ptr_caller;
  INIT_PC
  return this;
}

//PROCEDURE <68313:> flx_processing::ehandler: Resume method
::flx::rtl::con_t *ehandler::resume(){
      {
      _a13708t_107090 _tmp107762 = ::std::string("BOOTFLX: Flx_pkgconfig getpkgfiled1 failed, temporary ehandler invoked") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107762)));
      }
      fflush(stderr);
      ::std::exit(1);
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <66305>: toolchain_clang_apple_iPhoneSimulator: Apply method
_art107183 toolchain_clang_apple_iPhoneSimulator::apply(_art107173 const &_arg ){
  _vI66307_config = _arg;
      _vI94120_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L94116;
      _vI94121_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp107763 = (int*)&_vI94121_i;
      ++*((_tmp107763));
      }
    redo__ll_lists_4854_L94119:;
      if(FLX_UNLIKELY(!((0 < _vI94121_i)) )) goto _ifdoelse_std_1191_L94116;
      {
      int* _tmp107764 = (int*)&_vI94121_i;
      --*((_tmp107764));
      }
      _vI94120_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI94120_o, (_at107092(::std::string("x86_64"), ::std::string("i386")).data)[reinterpret< ::flx::rtl::cl_t>(_vI94121_i)]))); //assign simple
      goto redo__ll_lists_4854_L94119;
    _ifdoelse_std_1191_L94116:;
      return (FLX_NEWP(toolchain_clang_apple_iOS_maker_uncurry)(FLX_FPAR_PASS_ONLY))
      ->apply(_tt107236(::std::string("iphonesimulator"), _vI94120_o, _vI66307_config));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2200,1,2200,2); // HACK! 
}

//------------------------------
//FUNCTION <68039>: flx_pkgconfig::get_variable: Apply method
_at107092 get_variable::apply(_a13708t_107090 const &_arg ){
  _vI68052_line = _arg;
      _vI96061_find_mv_2046  = _vI68052_line.find((::flx::rtl::strutil::subscript(::std::string("="),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI96061_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L96063;
      get_variable_mv_64678  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_96041_L96064;
    _ml2048_L96063:;
/*match case 2:i_param_std_1834*/
      _vI96062_i_param_std_1834 = _vI96061_find_mv_2046; //assign simple
      get_variable_mv_64678  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI96062_i_param_std_1834)); //init
    _end_inline_find_96041_L96064:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(get_variable_mv_64678)==0) ) goto _ml64680_L96059;
      return _at107092(::std::string(""), ::std::string(""));
    _ml64680_L96059:;
/*match case 2:|Some n_param_bootflx_64600*/
      if(!andthen(FLX_VNI(get_variable_mv_64678)==1, (FLX_NEWP(_lam_64695)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64681_L96060;
      n_param_bootflx_64600 = *((_a5038t_107106*)FLX_VNP(get_variable_mv_64678)); //assign simple
      get_variable_mv_64683  = lstrip(rstrip(::flx::rtl::strutil::substr(_vI68052_line,0,n_param_bootflx_64600), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //init
/*begin match*/
/*match case 1:name_param_bootflx_64601*/
      name_param_bootflx_64601 = get_variable_mv_64683; //assign simple
      get_variable_mv_64687  = lstrip(rstrip(::flx::rtl::strutil::substr(_vI68052_line,n_param_bootflx_64600 + 1 ,_vI68052_line.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //init
/*begin match*/
/*match case 1:value_param_bootflx_64602*/
      value_param_bootflx_64602 = get_variable_mv_64687; //assign simple
      get_variable_mv_64691  = check_id(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(name_param_bootflx_64601) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(get_variable_mv_64691%2==1) ) goto _ml64693_L96071;
      return _at107092(name_param_bootflx_64601, value_param_bootflx_64602);
    _ml64693_L96071:;
/*match case 2:any*/
      return _at107092(::std::string(""), ::std::string(""));
    _ml64681_L96060:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",268,9,268,56);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",270,5,270,8); // HACK! 
}

//------------------------------
//FUNCTION <106254>: flx_processing::cxx_link_shared_library: Apply method
int _fI106254_cxx_link_shared_library::apply(_pt107161* const &_arg ){
  _vI106268_ehandler = _arg;
      {
      __timeb64* _tmp107766 = (__timeb64*)&_vI106782_tv;
      _ftime64_s(((_tmp107766)));
      }
      _vI106781__genout_urv99243  = (static_cast<double>((_vI106782_tv.time))) + ((static_cast<double>((_vI106782_tv.millitm))) / 1.0e3 ) ; //init
      _vI106255_t0 = _vI106781__genout_urv99243; //assign simple
      _vI106256_pkg_dstrings = (void* /*VR_nullptr*/ )0; //assign simple
      _vI106257_pkgs = ptrflx_processing->_vI106422_control.extra_pkgs; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI106257_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65346_L106272;
      {
      _a13708t_107090 _tmp107767 = (::std::string("[flx:cxx_link_shared_library] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106257_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107767)));
      }
      fflush(stderr);
      _vI106783_r = _fI106784_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107768 = (void**)&_vI106783_r;
      _rev(((_tmp107768)),(_a13708t_107090*)0);
      }
      _vI106260_PKGCONFIG_PATH = _vI106783_r; //assign simple
      _vI106261_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI106260_PKGCONFIG_PATH, ::std::string("-r"))) /* apply_stack */, ::std::string("--field=provides_dlib"))) /* apply_stack */, ::std::string("--field=requires_dlibs"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI106257_pkgs)) /* apply_stack */, ptrflx_processing->_vI106422_control.pkgs)) /* apply_stack */; //assign simple
      _vI106794__genout_urv99284  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI106261_allargs) /* apply_stack */; //init
      _vI106262__ds2_65512 = _vI106794__genout_urv99284; //assign simple
      _vI106263_ret = _vI106262__ds2_65512.mem_0; //assign simple
      _vI106264_mydstrings = _vI106262__ds2_65512.mem_1; //assign simple
      if(!(!((_vI106263_ret == 0)) ) ) goto _ifdoelse_bootflx_65348_L106270;
      {
      _a13708t_107090 _tmp107769 = (((::std::string("[flx:cxx_link_shared_library] Error ") + ::flx::rtl::strutil::str<int>(_vI106263_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106261_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107769)));
      }
      fflush(stderr);
      {
      _a6203t_107291 _tmp107770 = (_a6203t_107291)(_vI106268_ehandler);
      throw ((_tmp107770));
      }
    _ifdoelse_bootflx_65348_L106270:;
      _vI106256_pkg_dstrings = _vI106264_mydstrings; //assign simple
    _ifdoelse_bootflx_65346_L106272:;
      _vI106796_cxx_link_shared_library_mv_65514  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106796_cxx_link_shared_library_mv_65514%2==1) ) goto _ml65516_L106797;
      _vI106795__urv99295  = (FLX_NEWP(_pI106424_echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_926552837;
    _ml65516_L106797:;
/*match case 2:any*/
      _vI106795__urv99295  = (FLX_NEWP(_pI106423_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_926552837:;
      _vI106800_cxx_link_shared_library_mv_65514  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106800_cxx_link_shared_library_mv_65514%2==1) ) goto _ml65516_L106801;
      goto _end_hash_66230357;
    _ml65516_L106801:;
/*match case 2:any*/
    _end_hash_66230357:;
      _vI106265_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(ptrflx_processing->_vI106123_dflt_clang_config.ccflags, _vI106795__urv99295, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.LINK_STRINGS, _vI106256_pkg_dstrings)) /* apply_stack */, ptrflx_processing->_vI106123_dflt_clang_config.header_search_dirs, ptrflx_processing->_vI106123_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI106123_dflt_clang_config.macros, ptrflx_processing->_vI106123_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      _vI106266_EXT_SHARED_OBJ = (_vI106265_tc.dynamic_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI106422_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65349_L106273;
      _vI106267_result = (_vI106265_tc.dynamic_library_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME, _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_processing->_vI106422_control.cppos, ptrflx_processing->dvars.cpp_filebase + _vI106266_EXT_SHARED_OBJ )) /* apply_stack */)) /* general apply */; //assign simple
      goto _ifdoelse_bootflx_65350_L106274;
    _ifdoend_bootflx_65349_L106273:;
      _vI106267_result = (_vI106265_tc.dynamic_library_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME, ptrflx_processing->_vI106422_control.cppos)) /* general apply */; //assign simple
    _ifdoelse_bootflx_65350_L106274:;
      if(!((ptrflx_processing->_vI106422_control.TIME == 1)) ) goto _end_99326_L106810;
      {
      __timeb64* _tmp107771 = (__timeb64*)&_vI106809_tv;
      _ftime64_s(((_tmp107771)));
      }
      _vI106808__genout_urv95543  = (static_cast<double>((_vI106809_tv.time))) + ((static_cast<double>((_vI106809_tv.millitm))) / 1.0e3 ) ; //init
      _vI106803_elapsed = _vI106808__genout_urv95543 - _vI106255_t0 ; //assign simple
      _vI106804_minutes = ::std::floor((_vI106803_elapsed / 60.0 )); //assign simple
      _vI106805_seconds = _vI106803_elapsed - (_vI106804_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp107772 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106804_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106805_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Dynamic link : ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107772)));
      }
      fflush(stdout);
    _end_99326_L106810:;
      if(!(!((_vI106267_result == 0)) ) ) goto _ifdoelse_bootflx_65352_L106276;
      {
      _a13708t_107090 _tmp107773 = ((::std::string("[flx] C++ clink ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107773)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65352_L106276:;
      return _vI106267_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2532,3,2532,4); // HACK! 
}

//------------------------------
//FUNCTION <97281>: flx_pkgconfig::reattach_drive_letters::_lam_64663: Apply method
 ::flx::rtl::cl_t _lam_64663::apply(){
      return andthen(!!((reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>((ptrreattach_drive_letters->reattach_drive_letters_mv_64655)))).mem_1) , (FLX_NEWP(_lam_64664)(FLX_FPAR_PASS this, ptrreattach_drive_letters, ptrflx_pkgconfig)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",231,9,231,32); // HACK! 
}

//------------------------------
//FUNCTION <107009>: flx_processing::run_program_dynamic::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI107009__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <92852>: generic_cxx_gen_deps_uncurry::aux_uncurry: Apply method
void* _fI92852_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92853_inp_uncurry = _arg.data[0];
  _vI92854_out = _arg.data[1];
    start_90421_L92861:;
      _vI92857_aux__apos_2_mv_1322  = _vI92853_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92857_aux__apos_2_mv_1322)==0) ) goto _ml1324_L92856;
      return _vI92854_out;
    _ml1324_L92856:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI92857_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI92860__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_cxx_gen_deps_uncurry))) ) goto _ml1325_L92855;
      _vI92858_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI92857_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI92859_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI92857_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI92854_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92854_out, mkmac(_vI92858_h_param_std_1208)))); //init
      _vI92853_inp_uncurry  = _vI92859_t_param_std_1207; //init
      goto start_90421_L92861;
    _ml1325_L92855:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <105256>: flx_processing::ocaml_compile: Apply method
int ocaml_compile::apply(_pt107161* const &_arg ){
  _vI105261_ehandler = _arg;
      _vI105257_deps = (void* /*VR_nullptr*/ )0; //assign simple
      _vI105752_xs  = ptrflx_processing->_vI105441_control.ocamls; //init
      _genout_urv98905  = (FLX_NEWP(_fI105753_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _generator_flx_2665 = _genout_urv98905; //assign simple
    continue__ll_flx_2632_L105262:;
      ocaml_compile_mv_65506  = (_generator_flx_2665)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some src_param_bootflx_65336*/
      if(!andthen(FLX_VNI(ocaml_compile_mv_65506)==1, (FLX_NEWP(_lam_65509)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65508_L105270;
      src_param_bootflx_65336 = *((_a13708t_107090*)FLX_VNP(ocaml_compile_mv_65506)); //assign simple
      if(!((::flx::rtl::strutil::substr(src_param_bootflx_65336,- ::std::string(".cmi").size() ,src_param_bootflx_65336.size()) == ::std::string(".cmi")) || (::flx::rtl::strutil::substr(src_param_bootflx_65336,- ::std::string(".cmx").size() ,src_param_bootflx_65336.size()) == ::std::string(".cmx")) ) ) goto _ifdoend_bootflx_65337_L105263;
      *((void**)&_vI105257_deps)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI105257_deps) , src_param_bootflx_65336)) /* apply_stack */; //assign simple
      goto continue__ll_flx_2632_L105262;
    _ifdoend_bootflx_65337_L105263:;
      _genout_urv99055  = (FLX_NEWP(_fI105766_dxqt__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      xqt = _genout_urv99055; //assign simple
      _vI105764_result = (xqt)->clone()
      ->apply(((::std::string("ocamlopt.opt -c ") + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI105257_deps)) /* apply_stack */ ) + ::std::string(" ") ) + src_param_bootflx_65336 ) /* general apply */; //assign simple
      (void)_vI105764_result;
      _vI105260_result = 0; //assign simple
      if(!(!((_vI105260_result == 0)) ) ) goto _ifdoend_bootflx_65339_L105264;
      return _vI105260_result;
    _ifdoend_bootflx_65339_L105264:;
      if(!((::flx::rtl::strutil::substr(src_param_bootflx_65336,- ::std::string(".mli").size() ,src_param_bootflx_65336.size()) == ::std::string(".mli"))) ) goto _ifdoend_bootflx_65341_L105265;
      *((void**)&_vI105257_deps)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI105257_deps) , subscript(FLX_FPAR_PASS_ONLY)
      .apply(_tt107591(src_param_bootflx_65336, ::flx::rtl::_uctor_(3, new(*PTF gcp, int_ptr_map, true) int (-5)))) /* apply_stack */ + ::std::string(".cmi") )) /* apply_stack */; //assign simple
      goto continue__ll_flx_2632_L105262;
    _ifdoend_bootflx_65341_L105265:;
      if(!((::flx::rtl::strutil::substr(src_param_bootflx_65336,- ::std::string(".ml").size() ,src_param_bootflx_65336.size()) == ::std::string(".ml"))) ) goto continue__ll_flx_2632_L105262;
      *((void**)&_vI105257_deps)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI105257_deps) , subscript(FLX_FPAR_PASS_ONLY)
      .apply(_tt107591(src_param_bootflx_65336, ::flx::rtl::_uctor_(3, new(*PTF gcp, int_ptr_map, true) int (-4)))) /* apply_stack */ + ::std::string(".cmi") )) /* apply_stack */; //assign simple
      goto continue__ll_flx_2632_L105262;
      goto continue__ll_flx_2632_L105262;
    _ml65508_L105270:;
/*match case 2:|None*/
      if(!(FLX_VNI(ocaml_compile_mv_65506)==0) ) goto _ml65510_L105271;
      goto _em65506_L105272;
    _ml65510_L105271:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2428,5,2428,9);
;
    _em65506_L105272:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2430,2,2430,3); // HACK! 
}

//------------------------------
//FUNCTION <89214>: toolchain_clang_apple_iOS_maker_uncurry::target_os: Apply method
_a13708t_107090 _fI89214_target_os::apply(){
      return ::std::string("iOS");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1989,3,1989,35); // HACK! 
}

//------------------------------
//FUNCTION <106304>: flx_processing::cxx_link_static_exe::_lam_65525: Apply method
_a13708t_107090 _fI106304__lam_65525::apply(_a13708t_107090 const &_arg ){
  _vI106305_s = _arg;
      return ::std::string("--path+=") + _vI106305_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2623,11,2623,40); // HACK! 
}

//------------------------------
//FUNCTION <66171>: toolchain_clang_linux::static_library_linker: Apply method
int _fI66171_static_library_linker::apply(_art107181 const &_arg ){
  _vI66174_spec = _arg;
      _vI66173_result = generic_static_library_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107227(_art107226(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-rcs")))), ::std::string("ar"), ::std::string(""), ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66174_spec.srcs, _vI66174_spec.dst)) /* apply_stack */; //assign simple
      return _vI66173_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1368,3,1368,4); // HACK! 
}

//------------------------------
//FUNCTION <92201>: toolchain_msvc_win32::checkwarn::_lam_65665: Apply method
 ::flx::rtl::cl_t _lam_65665::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1795,7,1795,11); // HACK! 
}

//------------------------------
//C FUNC <67598>: mkmac
_a13708t_107090 mkmac(_a13708t_107090 _vI67600_s){
      return ::std::string("-D") + _vI67600_s ;
}
//------------------------------
//FUNCTION <66128>: toolchain_clang_linux::pathname_separator: Apply method
_a13708t_107090 _fI66128_pathname_separator::apply(){
      return ::std::string("/");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1225,3,1225,42); // HACK! 
}

//------------------------------
//FUNCTION <93196>: generic_cxx_compile_for_dynamic_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93196__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <66043>: toolchain_gcc_osx::get_base_cxx_compile_flags: Apply method
void* _fI66043_get_base_cxx_compile_flags::apply(){
      return ptrtoolchain_gcc_osx->_vI66016_base_cxx_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",980,3,980,69); // HACK! 
}

//------------------------------
//FUNCTION <66359>: toolchain_clang_osx::dependency_parser: Apply method
void* _fI66359_dependency_parser::apply(_a13708t_107090 const &_arg ){
  _vI66361_data = _arg;
      return generic_dependency_parser(FLX_FPAR_PASS_ONLY)
      .apply(_vI66361_data) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1507,3,1507,4); // HACK! 
}

//------------------------------
//FUNCTION <104403>: gramtime_uncurry::_lam_64494::aux_uncurry: Apply method
_a13708t_107090 _fI104403_aux_uncurry::apply(_tt107116 const &_arg ){
  _vI104404_init_uncurry = _arg.mem_0;
  _vI104405_x = _arg.mem_1;
    start_95154_L104412:;
      _vI104408_aux__apos_2_mv_1297  = _vI104405_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI104408_aux__apos_2_mv_1297)==0) ) goto _ml1299_L104407;
      return _vI104404_init_uncurry;
    _ml1299_L104407:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI104408_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI104411__lam_1301)(FLX_FPAR_PASS this, ptr_lam_64494, ptrgramtime_uncurry))) ) goto _ml1300_L104406;
      _vI104409_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI104408_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI104410_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI104408_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI104405_x  = _vI104410_t_param_std_1199; //init
      _vI104404_init_uncurry  = ((FLX_NEWP(join)(FLX_FPAR_PASS_ONLY))
      ->apply(_vI104404_init_uncurry))->clone()
      ->apply(_vI104409_h_param_std_1200) /* general apply */; //init
      goto start_95154_L104412;
    _ml1300_L104406:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <66327>: toolchain_clang_osx::dependency_extension: Apply method
_a13708t_107090 _fI66327_dependency_extension::apply(){
      return ::std::string(".d");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1460,3,1460,45); // HACK! 
}

//------------------------------
//FUNCTION <105181>: flx_processing::cal_time_from_flxdepfile::maxf::maxf'2: Apply method
double _fI105181_maxf__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI105184_f = _arg;
      if(!((_vI105184_f == ::std::string(""))) ) goto _ifdoend_bootflx_65278_L105185;
      return ptr_fI105180_maxf->_vI105186_x;
    _ifdoend_bootflx_65278_L105185:;
      ext = (split_extension(_vI105184_f).data)[1]; //assign simple
      _vI105543_maxf__apos_2_mv_65448  = !((ext == ::std::string(""))) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105543_maxf__apos_2_mv_65448%2==1) ) goto _ml65450_L105544;
      _urv97847  = dfiletime(_vI105184_f, - 1.0 ); //init
      goto _end_hash_33272701;
    _ml65450_L105544:;
/*match case 2:any*/
      _vI105546_max_mv_106  = (dfiletime(_vI105184_f + ::std::string(".fdoc") , - 1.0 ) < dfiletime(_vI105184_f + ::std::string(".flx") , - 1.0 )); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105546_max_mv_106%2==1) ) goto _ml108_L105545;
      _urv97847  = dfiletime(_vI105184_f + ::std::string(".flx") , - 1.0 ); //init
      goto _end_hash_33272701;
    _ml108_L105545:;
/*match case 2:any*/
      _urv97847  = dfiletime(_vI105184_f + ::std::string(".fdoc") , - 1.0 ); //init
    _end_hash_33272701:;
      ft = _urv97847; //assign simple
      {
        ::flx::rtl::con_t *_p = (ptrcal_time_from_flxdepfile->_vI105190_debugln)->clone()
      ->call(0, ((::std::string("Time ") + _vI105184_f ) + ::std::string(" = ") ) + strfiletime(FLX_FPAR_PASS ft) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      _vI105549_maxf__apos_2_mv_65453  = (ft == - 1.0 ); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105549_maxf__apos_2_mv_65453%2==1) ) goto _ml65455_L105550;
      _urv97892  = static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)); //init
      goto _end_hash_905754283;
    _ml65455_L105550:;
/*match case 2:any*/
      _urv97892  = ft; //init
    _end_hash_905754283:;
      ft = _urv97892; //assign simple
      _vI105553_max_mv_106  = (ptr_fI105180_maxf->_vI105186_x < ft); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105553_max_mv_106%2==1) ) goto _ml108_L105552;
      return ft;
    _ml108_L105552:;
/*match case 2:any*/
      return ptr_fI105180_maxf->_vI105186_x;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2122,5,2122,6); // HACK! 
}

//------------------------------
//FUNCTION <92746>: toolchain_msvc_win32::aux_uncurry: Apply method
void* _fI92746_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92747_inp_uncurry = _arg.data[0];
  _vI92748_out = _arg.data[1];
    start_90421_L92755:;
      _vI92751_aux__apos_2_mv_1322  = _vI92747_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92751_aux__apos_2_mv_1322)==0) ) goto _ml1324_L92750;
      return _vI92748_out;
    _ml1324_L92750:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI92751_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI92754__lam_1326)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32))) ) goto _ml1325_L92749;
      _vI92752_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI92751_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI92753_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI92751_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI92748_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92748_out, fixup(ptrtoolchain_msvc_win32)
      .apply(_vI92752_h_param_std_1208) /* apply_stack */))); //init
      _vI92747_inp_uncurry  = _vI92753_t_param_std_1207; //init
      goto start_90421_L92755;
    _ml1325_L92749:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <96581>: flx_pkgconfig::handle_pkg::_lam_64696::aux_uncurry: Apply method
void* _fI96581_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96582_x_uncurry = _arg.data[0];
  _vI96583_y = _arg.data[1];
    start_91065_L96590:;
      _vI96586_aux__apos_2_mv_1328  = _vI96582_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96586_aux__apos_2_mv_1328)==0) ) goto _ml1330_L96585;
      return _vI96583_y;
    _ml1330_L96585:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI96586_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI96589__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L96584;
      _vI96587_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI96586_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI96588_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI96586_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI96583_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96583_y, _vI96587_h_param_std_1210))); //init
      _vI96582_x_uncurry  = _vI96588_t_param_std_1209; //init
      goto start_91065_L96590;
    _ml1331_L96584:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <93063>: generic_cxx_compile_for_static_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93063__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <96111>: search_and_replace_uncurry::_lam_2304: Apply method
 ::flx::rtl::cl_t _lam_2304::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9); // HACK! 
}

//------------------------------
//FUNCTION <105460>: flx_processing::cxx_compile_static1_uncurry::_lam_65499: Apply method
_a13708t_107090 _lam_65499::apply(_a13708t_107090 const &_arg ){
  _vI105469_s = _arg;
      return ::std::string("--path+=") + _vI105469_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2355,11,2355,40); // HACK! 
}

//------------------------------
//FUNCTION <91489>: +::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI91489__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <105540>: flx_processing::find_cxx_pkgs::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI105540__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <105695>: flx_processing::cxx_compile_static1_uncurry::aux_uncurry: Apply method
void* _fI105695_aux_uncurry::apply(_at107115 const &_arg ){
  _vI105696_inp_uncurry = _arg.data[0];
  _vI105697_out = _arg.data[1];
    start_90421_L105704:;
      _vI105700_aux__apos_2_mv_1322  = _vI105696_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105700_aux__apos_2_mv_1322)==0) ) goto _ml1324_L105699;
      return _vI105697_out;
    _ml1324_L105699:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI105700_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI105703__lam_1326)(FLX_FPAR_PASS this, ptrcxx_compile_static1_uncurry, ptrflx_processing))) ) goto _ml1325_L105698;
      _vI105701_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI105700_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI105702_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI105700_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI105697_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI105697_out, _lam_65499(ptrcxx_compile_static1_uncurry, ptrflx_processing)
      .apply(_vI105701_h_param_std_1208) /* apply_stack */))); //init
      _vI105696_inp_uncurry  = _vI105702_t_param_std_1207; //init
      goto start_90421_L105704;
    _ml1325_L105698:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <97221>: flx_pkgconfig::parse_args::aux_uncurry: Apply method
void* _fI97221_aux_uncurry::apply(_at107115 const &_arg ){
  _vI97222_x_uncurry = _arg.data[0];
  _vI97223_y = _arg.data[1];
    start_91065_L97230:;
      _vI97226_aux__apos_2_mv_1328  = _vI97222_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97226_aux__apos_2_mv_1328)==0) ) goto _ml1330_L97225;
      return _vI97223_y;
    _ml1330_L97225:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI97226_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI97229__lam_1332)(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1331_L97224;
      _vI97227_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI97226_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI97228_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI97226_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI97223_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97223_y, _vI97227_h_param_std_1210))); //init
      _vI97222_x_uncurry  = _vI97228_t_param_std_1209; //init
      goto start_91065_L97230;
    _ml1331_L97224:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <91481>: +::aux_uncurry: Apply method
void* _fI91481_aux_uncurry::apply(_at107115 const &_arg ){
  _vI91482_x_uncurry = _arg.data[0];
  _vI91483_y = _arg.data[1];
    start_91065_L91490:;
      _vI91486_aux__apos_2_mv_1328  = _vI91482_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI91486_aux__apos_2_mv_1328)==0) ) goto _ml1330_L91485;
      return _vI91483_y;
    _ml1330_L91485:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI91486_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI91489__lam_1332)(FLX_FPAR_PASS this, ptr_fI80206___plus_))) ) goto _ml1331_L91484;
      _vI91487_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI91486_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI91488_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI91486_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI91483_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI91483_y, _vI91487_h_param_std_1210))); //init
      _vI91482_x_uncurry  = _vI91488_t_param_std_1209; //init
      goto start_91065_L91490;
    _ml1331_L91484:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <66041>: toolchain_gcc_osx::get_base_c_compile_flags: Apply method
void* _fI66041_get_base_c_compile_flags::apply(){
      return ptrtoolchain_gcc_osx->_vI66015_base_c_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",979,3,979,65); // HACK! 
}

//------------------------------
//FUNCTION <92708>: toolchain_msvc_win32::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI92708__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <105135>: flx_processing::_lam_64452: Apply method
 ::flx::rtl::cl_t _lam_64452::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",3293,9,3293,13); // HACK! 
}

//------------------------------
//FUNCTION <66092>: toolchain_gcc_osx::dynamic_library_linker: Apply method
int _fI66092_dynamic_library_linker::apply(_art107181 const &_arg ){
  _vI66095_spec = _arg;
      _vI66094_result = generic_link_lib_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107231(_art107230(ptrtoolchain_gcc_osx->_vI66014_ccflags_for_dynamic_link, ptrtoolchain_gcc_osx->_vI66013_linker, ::std::string(".dylib"), join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_gcc_osx->_vI66096_config.library_search_dirs, ptrtoolchain_gcc_osx->_vI66096_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66095_spec.srcs, _vI66095_spec.dst)) /* apply_stack */; //assign simple
      return _vI66094_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1170,3,1170,4); // HACK! 
}

//------------------------------
//C FUNC <88912>: map_uncurry
_poly_79881t_107147 map_uncurry(FLX_APAR_DECL  _ft107483* _vI89342__f_uncurry, _poly_82862t_107478 _vI89343_x){
  _a5038t_107106 _vI89351_i;
  _poly_79881t_107147 _vI89350_o;
      _vI89350_o = (_a13708t_107090*)(PTF gcp->collector->create_empty_array(&_a13708t_107090_ptr_map,(PTF gcp->collector->get_used(_vI89343_x)))); //assign simple
      if(!((0 < (PTF gcp->collector->get_used(_vI89343_x)))) ) goto _ifdoelse_std_1657_L89344;
      _vI89351_i = 0; //assign simple
    redo__ll_arrays_6064_L89347:;
      if(FLX_UNLIKELY(!(!(((PTF gcp->collector->get_used(_vI89343_x)) - 1  < _vI89351_i)) ) )) goto _ifdoelse_std_1657_L89344;
      if(!(!(((PTF gcp->collector->get_used(_vI89350_o)) < (PTF gcp->collector->get_count(_vI89350_o)))) ) ) goto _ifdoelse_std_1659_L89348;
      {
      _a13708t_107090 _tmp107782 = (::std::string("insert: attempt to push_back on full varray size ") + ::flx::rtl::strutil::str<_a5038t_107106>((PTF gcp->collector->get_count(_vI89350_o))) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107782)));
      }
      fflush(stderr);
    _ifdoelse_std_1659_L89348:;
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(_vI89351_i)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < (PTF gcp->collector->get_used(_vI89343_x))))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      if(!(!(((PTF gcp->collector->get_used(_vI89350_o)) < (PTF gcp->collector->get_count(_vI89350_o)))) ) ) goto _ifdoelse_std_1642_L91176;
      {
      _a13708t_107090 _tmp107783 = (::std::string("attempt to push_back on full varray size ") + ::flx::rtl::strutil::str<_a5038t_107106>((PTF gcp->collector->get_count(_vI89350_o))) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107783)));
      }
      fflush(stderr);
    _ifdoelse_std_1642_L91176:;
      {
      _a14737t_107477 _tmp107784 = _vI89343_x[(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(_vI89351_i)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)];
      _a13708t_107090 _tmp107785 = (_vI89342__f_uncurry)->clone()
      ->apply((_tmp107784)) /* general apply */;
      
    {
      //_a13708t_107090 * _p = *_vI89350_o;
      size_t n = PTF gcp->collector->get_used(_vI89350_o);
      PTF gcp->collector->incr_used(_vI89350_o,1L);
      new(_vI89350_o+n) _a13708t_107090(((_tmp107785)));
    }
  
      }
      {
      _a5038t_107106* _tmp107786 = (_a5038t_107106*)&_vI89351_i;
      ++*((_tmp107786));
      }
      goto redo__ll_arrays_6064_L89347;
    _ifdoelse_std_1657_L89344:;
      return _vI89350_o;
}
//------------------------------
//FUNCTION <66362>: toolchain_clang_osx::c_static_object_compiler: Apply method
int _fI66362_c_static_object_compiler::apply(_art107177 const &_arg ){
  _vI66365_spec = _arg;
      _vI66364_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_clang_osx->_vI66317_base_c_compile_flags, ptrtoolchain_clang_osx->_vI66313_c_compiler, ptrtoolchain_clang_osx->_vI66398_config.header_search_dirs, ptrtoolchain_clang_osx->_vI66398_config.macros, ::std::string("-o "), ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66365_spec.src, _vI66365_spec.dst)) /* apply_stack */; //assign simple
      return _vI66364_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1524,3,1524,4); // HACK! 
}

//------------------------------
//FUNCTION <97333>: flx_pkgconfig::_lam_64727: Apply method
 ::flx::rtl::cl_t _lam_64727::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",372,9,372,23); // HACK! 
}

//------------------------------
//C FUNC <82543>: split_extension
_at107092 split_extension(_a13708t_107090 _vI82544_s){
  char _vI82605_ch;
  _a5038t_107106 _vI82604_i;
  _a5038t_107106 _vI82603_n;
      _vI82603_n = _vI82544_s.size(); //assign simple
      if(!((0 < _vI82603_n)) ) goto _ifdoelse_std_621_L82596;
      _vI82604_i = _vI82544_s.size() - 1 ; //assign simple
      {
      _a5038t_107106* _tmp107787 = (_a5038t_107106*)&_vI82604_i;
      ++*((_tmp107787));
      }
    redo__ll_filesystem_3673_L82599:;
      if(FLX_UNLIKELY(!((0 < _vI82604_i)) )) goto _ifdoelse_std_621_L82596;
      {
      _a5038t_107106* _tmp107788 = (_a5038t_107106*)&_vI82604_i;
      --*((_tmp107788));
      }
      _vI82605_ch = ::flx::rtl::strutil::subscript(_vI82544_s,_vI82604_i); //assign simple
      if(!((_vI82605_ch == ::flx::rtl::strutil::subscript(::std::string("."),0))) ) goto _ifdoend_std_622_L82602;
      return _at107092(::flx::rtl::strutil::substr(_vI82544_s,0,_vI82604_i), ::flx::rtl::strutil::substr(_vI82544_s,_vI82604_i,_vI82544_s.size()));
    _ifdoend_std_622_L82602:;
      if(!((_vI82605_ch == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto redo__ll_filesystem_3673_L82599;
      return _at107092(_vI82544_s, ::std::string(""));
      goto redo__ll_filesystem_3673_L82599;
    _ifdoelse_std_621_L82596:;
      return _at107092(_vI82544_s, ::std::string(""));
}
//------------------------------
//FUNCTION <88940>: gramtime_uncurry: Apply method
double gramtime_uncurry::apply(_tt107307 const &_arg ){
  _vI89428_debugln_uncurry = _arg.mem_0;
  _vI89421_path = _arg.mem_1;
  _vI89422_s = _arg.mem_2;
      if(!((::flx::rtl::strutil::subscript(_vI89422_s,0) == ::flx::rtl::strutil::subscript(::std::string("@"),0))) ) goto _ifdoend_bootflx_64460_L89425;
      _vI104420_gramtime__apos_2_mv_64485  = lstrip(rstrip(::flx::rtl::strutil::substr(_vI89422_s,1,_vI89422_s.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //init
/*begin match*/
/*match case 1:f_param_bootflx_64462*/
      f_param_bootflx_64462 = _vI104420_gramtime__apos_2_mv_64485; //assign simple
      _vI104422_gramtime__apos_2_mv_64489  = (::flx::rtl::strutil::subscript(f_param_bootflx_64462,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0)) || ((::flx::rtl::strutil::subscript(f_param_bootflx_64462,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0)) && (::flx::rtl::strutil::subscript(f_param_bootflx_64462,2) == ::flx::rtl::strutil::subscript(::std::string("\\"),0)) ) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI104422_gramtime__apos_2_mv_64489%2==1) ) goto _ml64491_L104423;
      _urv104419  = f_param_bootflx_64462; //init
      goto _end_hash_703544906;
    _ml64491_L104423:;
/*match case 2:any*/
      _urv104419  = mk_absolute_filename(_fI82124_join(_vI89421_path, f_param_bootflx_64462)); //init
    _end_hash_703544906:;
      _vI89413_file = _urv104419; //assign simple
      filetime = dfiletime(_vI89413_file, 0.0); //assign simple
      if(!((filetime == 0.0)) ) goto _ifdoelse_bootflx_64464_L89424;
      {
      _a13708t_107090 _tmp107789 = (::std::string("Grammar include file '") + (_vI89413_file + ::std::string("' doesn't exist, exiting") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107789)));
      }
      fflush(stdout);
      ::std::exit(1);
    _ifdoelse_bootflx_64464_L89424:;
      {
        ::flx::rtl::con_t *_p = (_vI89428_debugln_uncurry)->clone()
      ->call(0, ((::std::string("Grammar include file '") + _vI89413_file ) + ::std::string("' time=") ) + strfiletime(FLX_FPAR_PASS filetime) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_573_L104437;
      {
      _a13708t_107090 _tmp107790 = (::std::string("[load] ") + _vI89413_file ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107790)));
      }
      fflush(stderr);
    _ifdoelse_std_573_L104437:;
      filetext = ::flx::rtl::ioutil::load_file(_vI89413_file); //assign simple
      _vI89416_files = split(FLX_FPAR_PASS_ONLY)
      .apply(_at107092(filetext, ::std::string("\n"))) /* apply_stack */; //assign simple
      _vI104443_r = _fI104444_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89416_files, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107791 = (void**)&_vI104443_r;
      _rev(((_tmp107791)),(_a13708t_107090*)0);
      }
      _vI89416_files = _vI104443_r; //assign simple
      _vI89416_files = _fI104460_aux(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89416_files, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      _vI104488_r = _fI104489_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89416_files, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107792 = (void**)&_vI104488_r;
      _rev(((_tmp107792)),(_a13708t_107090*)0);
      }
      _vI89416_files = _vI104488_r; //assign simple
      return _fI104505_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107527(filetime, _vI89416_files)) /* apply_stack */;
    _ifdoend_bootflx_64460_L89425:;
      _vI89413_file = _fI82124_join(_vI89421_path, _vI89422_s); //assign simple
      filetime = dfiletime(_vI89413_file, 0.0); //assign simple
      if(!((filetime == 0.0)) ) goto _ifdoelse_bootflx_64466_L89427;
      {
      _a13708t_107090 _tmp107793 = (::std::string("Grammar file ") + (_vI89413_file + ::std::string(" doesn't exist, exiting") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107793)));
      }
      fflush(stdout);
      ::std::exit(1);
    _ifdoelse_bootflx_64466_L89427:;
      {
        ::flx::rtl::con_t *_p = (_vI89428_debugln_uncurry)->clone()
      ->call(0, ((::std::string("Grammar file ") + _vI89413_file ) + ::std::string(" time=") ) + strfiletime(FLX_FPAR_PASS filetime) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      return filetime;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",116,3,116,4); // HACK! 
}

//------------------------------
//FUNCTION <106633>: flx_processing::cxx_compile_dynamic1_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI106633__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <95818>: flx_pkgconfig::add_val::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI95818__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <66331>: toolchain_clang_osx::static_object_extension: Apply method
_a13708t_107090 _fI66331_static_object_extension::apply(){
      return ::std::string("_static.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1462,3,1462,55); // HACK! 
}

//------------------------------
//FUNCTION <96428>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI96428__lam_1398::apply(_a13708t_107090 const &_arg ){
  _vI96429_x = _arg;
      return eq(_vI96429_x, ptr_lam_64707->_vI68084_key);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <94060>: toolchain_clang_apple_iOS_maker_uncurry::aux_uncurry: Apply method
void* _fI94060_aux_uncurry::apply(_at107115 const &_arg ){
  _vI94061_x_uncurry = _arg.data[0];
  _vI94062_y = _arg.data[1];
    start_91065_L94069:;
      _vI94065_aux__apos_2_mv_1328  = _vI94061_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI94065_aux__apos_2_mv_1328)==0) ) goto _ml1330_L94064;
      return _vI94062_y;
    _ml1330_L94064:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI94065_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI94068__lam_1332)(FLX_FPAR_PASS this, ptrtoolchain_clang_apple_iOS_maker_uncurry))) ) goto _ml1331_L94063;
      _vI94066_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI94065_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI94067_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI94065_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI94062_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI94062_y, _vI94066_h_param_std_1210))); //init
      _vI94061_x_uncurry  = _vI94067_t_param_std_1209; //init
      goto start_91065_L94069;
    _ml1331_L94063:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <106672>: flx_processing::cxx_compile_dynamic::_lam_65491: Apply method
 ::flx::rtl::cl_t _fI106672__lam_65491::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2293,5,2293,9); // HACK! 
}

//------------------------------
//FUNCTION <89417>: gramtime_uncurry::_lam_64493: Apply method
 ::flx::rtl::cl_t _lam_64493::apply(_a13708t_107090 const &_arg ){
  _vI89418_s = _arg;
      return !((_vI89418_s == ::std::string(""))) ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",101,23,101,47); // HACK! 
}

//------------------------------
//FUNCTION <98202>: run_felix_compiler::aux_uncurry: Apply method
void* _fI98202_aux_uncurry::apply(_at107115 const &_arg ){
  _vI98203_inp_uncurry = _arg.data[0];
  _vI98204_out = _arg.data[1];
    start_90421_L98211:;
      _vI98207_aux__apos_2_mv_1322  = _vI98203_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI98207_aux__apos_2_mv_1322)==0) ) goto _ml1324_L98206;
      return _vI98204_out;
    _ml1324_L98206:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI98207_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI98210__lam_1326)(FLX_FPAR_PASS this, ptrrun_felix_compiler))) ) goto _ml1325_L98205;
      _vI98208_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI98207_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI98209_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI98207_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI98204_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI98204_out, _lam_64808(ptrrun_felix_compiler)
      .apply(_vI98208_h_param_std_1208) /* apply_stack */))); //init
      _vI98203_inp_uncurry  = _vI98209_t_param_std_1207; //init
      goto start_90421_L98211;
    _ml1325_L98205:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <106814>: flx_processing::cxx_link_shared_exe::aux_uncurry: Apply method
void* _fI106814_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106815_inp_uncurry = _arg.data[0];
  _vI106816_out = _arg.data[1];
    start_90421_L106823:;
      _vI106819_aux__apos_2_mv_1322  = _vI106815_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106819_aux__apos_2_mv_1322)==0) ) goto _ml1324_L106818;
      return _vI106816_out;
    _ml1324_L106818:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI106819_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI106822__lam_1326)(FLX_FPAR_PASS this, ptr_fI106277_cxx_link_shared_exe, ptrflx_processing))) ) goto _ml1325_L106817;
      _vI106820_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI106819_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI106821_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI106819_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI106816_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106816_out, _fI106281__lam_65518(ptr_fI106277_cxx_link_shared_exe, ptrflx_processing)
      .apply(_vI106820_h_param_std_1208) /* apply_stack */))); //init
      _vI106815_inp_uncurry  = _vI106821_t_param_std_1207; //init
      goto start_90421_L106823;
    _ml1325_L106817:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <65930>: toolchain_gcc_linux::target_os: Apply method
_a13708t_107090 _fI65930_target_os::apply(){
      return ::std::string("LINUX");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",733,3,733,37); // HACK! 
}

//------------------------------
//FUNCTION <105251>: flx_processing::run_cxx_compiler_if_required: Apply method
int run_cxx_compiler_if_required::apply(_pt107161* const &_arg ){
  _vI105253_ehandler = _arg;
      _vI105252_result = 0; //assign simple
      if(!((ptrflx_processing->_vI105441_control.STATIC == 0)) ) goto _ifdoend_bootflx_65333_L105254;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_98894_L105745;
      {
      _a13708t_107090 _tmp107797 = (::std::string("[flx] ") + ::std::string("Dynamic linkage") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107797)));
      }
    _end_98894_L105745:;
      _genout_urv98895  = cxx_compile_dynamic(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105253_ehandler) /* apply_stack */; //init
      _vI105252_result = _genout_urv98895; //assign simple
      goto _ifdoelse_bootflx_65334_L105255;
    _ifdoend_bootflx_65333_L105254:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_98899_L105749;
      {
      _a13708t_107090 _tmp107798 = (::std::string("[flx] ") + ::std::string("Static linkage") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107798)));
      }
    _end_98899_L105749:;
      _genout_urv98900  = cxx_compile_static(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105253_ehandler) /* apply_stack */; //init
      _vI105252_result = _genout_urv98900; //assign simple
    _ifdoelse_bootflx_65334_L105255:;
      return _vI105252_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2403,3,2403,4); // HACK! 
}

//------------------------------
//FUNCTION <94053>: toolchain_clang_apple_iOS_maker_uncurry::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <92468>: toolchain_msvc_win32::static_executable_linker::iterator'2: Apply method
void* _fI92468_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L92469:;
      _vI92473_iterator__apos_2_mv_1504  = ptrstatic_executable_linker->_vI92467_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI92473_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI92476__lam_1507)(FLX_FPAR_PASS this, ptrstatic_executable_linker, ptrtoolchain_msvc_win32))) ) goto _ml1506_L92472;
      _vI92474_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI92473_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI92475_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI92473_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrstatic_executable_linker->_vI92467_xs = _vI92475_t_param_std_1259; //assign simple
      FLX_SET_PC(107799)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI92474_h_param_std_1260));//yield
    FLX_CASE_LABEL(107799)
      goto continue__ll_lists_5177_L92469;
    _ml1506_L92472:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI92473_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L92471;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L92471:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L92469;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <93355>: generic_link_exe_static_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93355__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <92822>: generic_cxx_gen_deps_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI92822__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <67769>: FlxPkgConfigQuery::getpkgfield: Apply method
_ft107164* getpkgfield::apply(_pt107161* const &_arg ){
  _vI67789_ehandler = _arg;
      return (FLX_NEWP(_fI67771_getpkgfield__apos_2)(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",501,5,501,6); // HACK! 
}

//------------------------------
//FUNCTION <106215>: flx_processing::cxx_compile_static: Apply method
int _fI106215_cxx_compile_static::apply(_pt107161* const &_arg ){
  _vI106221_ehandler = _arg;
      _vI106216_EXT_STATIC_OBJ = ((ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(ptrflx_processing->_vI106123_dflt_clang_config) /* general apply */.static_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI106422_control.CXXONLY == 0) && ((ptrflx_processing->_vI106422_control.LINKIT == 1) || ((ptrflx_processing->_vI106422_control.OUTPUT_FILENAME_SPECIFIED == 0) && (ptrflx_processing->_vI106422_control.OUTP_hash_48688961 == 0) ) ) ) ) goto _ifdoelse_bootflx_65314_L106224;
      _vI106217_result = _fI106431_cxx_compile_static1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI106221_ehandler, ptrflx_processing->dvars.cpp_filebase + ::std::string("_static_link_thunk.cpp") , (ptrflx_processing->dvars.cpp_filebase + ::std::string("_static_link_thunk") ) + _vI106216_EXT_STATIC_OBJ )) /* apply_stack */; //assign simple
      if(!(!((_vI106217_result == 0)) ) ) goto _ifdoelse_bootflx_65314_L106224;
      return _vI106217_result;
    _ifdoelse_bootflx_65314_L106224:;
      _vI106713_xs  = ptrflx_processing->_vI106422_control.cpps; //init
      _vI106712__genout_urv98856  = (FLX_NEWP(_fI106714_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _vI106218__generator_flx_2517 = _vI106712__genout_urv98856; //assign simple
    continue__ll_flx_2505_L106225:;
      _vI106121_cxx_compile_static_mv_65493  = (_vI106218__generator_flx_2517)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some src_param_bootflx_65318*/
      if(!andthen(FLX_VNI(_vI106121_cxx_compile_static_mv_65493)==1, (FLX_NEWP(_fI106723__lam_65496)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65495_L106227;
      _vI106219_src_param_bootflx_65318 = *((_a13708t_107090*)FLX_VNP(_vI106121_cxx_compile_static_mv_65493)); //assign simple
      _vI106220_dst = (split_extension(_vI106219_src_param_bootflx_65318).data)[0] + _vI106216_EXT_STATIC_OBJ ; //assign simple
      _vI106217_result = _fI106431_cxx_compile_static1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI106221_ehandler, _vI106219_src_param_bootflx_65318, _vI106220_dst)) /* apply_stack */; //assign simple
      if(!(!((_vI106217_result == 0)) ) ) goto _ifdoend_bootflx_65319_L106226;
      return _vI106217_result;
    _ifdoend_bootflx_65319_L106226:;
      *(&(*(&((_art107120*)&ptrflx_processing->_vI106422_control)->cppos) ))  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*(&(*(&((_art107120*)&ptrflx_processing->_vI106422_control)->cppos) )) , _vI106220_dst)) /* apply_stack */; //assign simple
      goto continue__ll_flx_2505_L106225;
    _ml65495_L106227:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI106121_cxx_compile_static_mv_65493)==0) ) goto _ml65497_L106228;
      goto _em65493_L106229;
    _ml65497_L106228:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2325,5,2325,9);
;
    _em65493_L106229:;
      if(!((ptrflx_processing->_vI106422_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65321_L106231;
      if(!((ptrflx_processing->_vI106422_control.LINKIT == 0)) ) goto _ifdoend_bootflx_65323_L106230;
      return _fI106431_cxx_compile_static1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI106221_ehandler, ptrflx_processing->dvars.cpp_filebase + ::std::string(".cpp") , ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME)) /* apply_stack */;
    _ifdoend_bootflx_65323_L106230:;
      return _fI106431_cxx_compile_static1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI106221_ehandler, ptrflx_processing->dvars.cpp_filebase + ::std::string(".cpp") , ptrflx_processing->dvars.cpp_filebase + _vI106216_EXT_STATIC_OBJ )) /* apply_stack */;
    _ifdoend_bootflx_65321_L106231:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2342,3,2342,4); // HACK! 
}

//------------------------------
//FUNCTION <13829>: subscript: Apply method
_a13708t_107090 subscript::apply(_tt107591 const &_arg ){
  _vI13858_x = _arg.mem_0;
  s = _arg.mem_1;
      subscript_mv_1992  = s; //init
/*begin match*/
/*match case 1:|Slice_all*/
      if(!(subscript_mv_1992.variant==0) ) goto _ml1994_L99203;
      return ::flx::rtl::strutil::substr(_vI13858_x,0,(static_cast<int>((_vI13858_x.size()))/*int.flx: ctor*/));
    _ml1994_L99203:;
/*match case 2:|Slice_from start_param_std_1804*/
      if(!andthen(subscript_mv_1992.variant==1, (FLX_NEWP(_lam_1996)(FLX_FPAR_PASS this))) ) goto _ml1995_L99204;
      start_param_std_1804 = *((int*)subscript_mv_1992.data); //assign simple
      return ::flx::rtl::strutil::substr(_vI13858_x,start_param_std_1804,_vI13858_x.size());
    _ml1995_L99204:;
/*match case 3:|Slice_to_incl end_param_std_1805*/
      if(!andthen(subscript_mv_1992.variant==3, (FLX_NEWP(_lam_1998)(FLX_FPAR_PASS this))) ) goto _ml1997_L99205;
      end_param_std_1805 = *((int*)subscript_mv_1992.data); //assign simple
      return ::flx::rtl::strutil::substr(_vI13858_x,0,end_param_std_1805 + 1 );
    _ml1997_L99205:;
/*match case 4:|Slice_to_excl end_param_std_1806*/
      if(!andthen(subscript_mv_1992.variant==4, (FLX_NEWP(_lam_2000)(FLX_FPAR_PASS this))) ) goto _ml1999_L99206;
      end_param_std_1806 = *((int*)subscript_mv_1992.data); //assign simple
      return ::flx::rtl::strutil::substr(_vI13858_x,0,end_param_std_1806);
    _ml1999_L99206:;
/*match case 5:|Slice_range_incl (start_param_std_1807, end_param_std_1808)*/
      if(!andthen(subscript_mv_1992.variant==5, (FLX_NEWP(_lam_2002)(FLX_FPAR_PASS this))) ) goto _ml2001_L99207;
      end_param_std_1808 = ((*((_at107104*)subscript_mv_1992.data)).data)[1]; //assign simple
      start_param_std_1807 = ((*((_at107104*)subscript_mv_1992.data)).data)[0]; //assign simple
      return ::flx::rtl::strutil::substr(_vI13858_x,start_param_std_1807,end_param_std_1808 + 1 );
    _ml2001_L99207:;
/*match case 6:|Slice_range_excl (start_param_std_1809, end_param_std_1810)*/
      if(!andthen(subscript_mv_1992.variant==6, (FLX_NEWP(_lam_2004)(FLX_FPAR_PASS this))) ) goto _ml2003_L99208;
      end_param_std_1810 = ((*((_at107104*)subscript_mv_1992.data)).data)[1]; //assign simple
      start_param_std_1809 = ((*((_at107104*)subscript_mv_1992.data)).data)[0]; //assign simple
      return ::flx::rtl::strutil::substr(_vI13858_x,start_param_std_1809,end_param_std_1810);
    _ml2003_L99208:;
/*match case 7:|Slice_one index_param_std_1811*/
      if(!andthen(subscript_mv_1992.variant==7, (FLX_NEWP(_lam_2006)(FLX_FPAR_PASS this))) ) goto _ml2005_L99209;
      index_param_std_1811 = *((int*)subscript_mv_1992.data); //assign simple
      return ::std::string("") + ::flx::rtl::strutil::subscript(_vI13858_x,index_param_std_1811) ;
    _ml2005_L99209:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",228,5,228,44);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",230,3,230,4); // HACK! 
}

//------------------------------
//FUNCTION <88914>: FlxPkgConfigQuery::getpkgfield_uncurry: Apply method
void* getpkgfield_uncurry::apply(_tt107292 const &_arg ){
  _vI89607_ehandler_uncurry = _arg.mem_0;
  _vI89599_pkg = _arg.mem_1;
  _vI89600_field = _arg.mem_2;
      _vI104836_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L104832;
      _vI104837_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp107803 = (int*)&_vI104837_i;
      ++*((_tmp107803));
      }
    redo__ll_lists_4854_L104835:;
      if(FLX_UNLIKELY(!((0 < _vI104837_i)) )) goto _ifdoelse_std_1191_L104832;
      {
      int* _tmp107804 = (int*)&_vI104837_i;
      --*((_tmp107804));
      }
      _vI104836_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104836_o, (_at107092(::std::string("--field=") + _vI89600_field , _vI89599_pkg).data)[reinterpret< ::flx::rtl::cl_t>(_vI104837_i)]))); //assign simple
      goto redo__ll_lists_4854_L104835;
    _ifdoelse_std_1191_L104832:;
      _genout_urv104840  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrFlxPkgConfigQuery->paths, _vI104836_o)) /* apply_stack */) /* apply_stack */; //init
      _vI89593__ds2_64761 = _genout_urv104840; //assign simple
      _vI89594_result = _vI89593__ds2_64761.mem_0; //assign simple
      _vI89595_values = _vI89593__ds2_64761.mem_1; //assign simple
      if(!(!((_vI89594_result == 0)) ) ) goto _ifdoelse_bootflx_64734_L89606;
      {
      _a13708t_107090 _tmp107805 = (::std::string("Can't find package ") + _vI89599_pkg ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107805)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107806 = ::std::string("Searching in paths:") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107806)));
      }
      fflush(stdout);
      _vI104855_xs  = ptrFlxPkgConfigQuery->paths; //init
      _genout_urv104854  = (FLX_NEWP(_fI104856_iterator__apos_2)(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery)); //init
      _vI89596__generator_flx_pkgconfig_10992 = _genout_urv104854; //assign simple
    continue__ll_flx_pkgconfig_10986_L89601:;
      _vI89590_getpkgfield__apos_2_mv_64762  = (_vI89596__generator_flx_pkgconfig_10992)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some path_param_bootflx_64736*/
      if(!andthen(FLX_VNI(_vI89590_getpkgfield__apos_2_mv_64762)==1, (FLX_NEWP(_fI104868__lam_64765)(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery))) ) goto _ml64764_L89602;
      _vI89598_path_param_bootflx_64736 = *((_a13708t_107090*)FLX_VNP(_vI89590_getpkgfield__apos_2_mv_64762)); //assign simple
      {
      _a13708t_107090 _tmp107807 = (::std::string("  ") + _vI89598_path_param_bootflx_64736 ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107807)));
      }
      fflush(stdout);
      goto continue__ll_flx_pkgconfig_10986_L89601;
    _ml64764_L89602:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI89590_getpkgfield__apos_2_mv_64762)==0) ) goto _ml64766_L89603;
      goto _em64762_L89604;
    _ml64766_L89603:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",495,9,495,13);
;
    _em64762_L89604:;
      {
      _a6203t_107291 _tmp107809 = (_a6203t_107291)(_vI89607_ehandler_uncurry);
      throw ((_tmp107809));
      }
    _ifdoelse_bootflx_64734_L89606:;
      return _vI89595_values;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",501,5,501,6); // HACK! 
}

//------------------------------
//FUNCTION <65798>: toolchain_msvc_win32::cxx_dependency_generator: Apply method
_tt107175 cxx_dependency_generator::apply(_art107174 const &_arg ){
  _vI65804_spec = _arg;
      _vI65800_cmd = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_msvc_win32->macros, ::std::string("/EHs")))), ::std::string("/c")))), ::std::string("/showIncludes")))), ::std::string("/Zs")))), ::std::string("/MDd")))), ::std::string("/wd4190")))), ::std::string("/nologo")))), ::std::string("cl.exe")))), ptrtoolchain_msvc_win32->include_switches)) /* apply_stack */, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _vI65804_spec.src))))) /* apply_stack */; //assign simple
      _genout_urv92242  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(_vI65800_cmd) /* apply_stack */; //init
      _ds2_65668 = _genout_urv92242; //assign simple
      _vI65802_result = _ds2_65668.mem_0; //assign simple
      _vI65803_text = _ds2_65668.mem_1; //assign simple
      return _tt107175(_vI65802_result, _vI65803_text);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1815,3,1815,4); // HACK! 
}

//------------------------------
//FUNCTION <93347>: generic_link_exe_static_uncurry::aux_uncurry: Apply method
void* _fI93347_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93348_inp_uncurry = _arg.data[0];
  _vI93349_out = _arg.data[1];
    start_90421_L93356:;
      _vI93352_aux__apos_2_mv_1322  = _vI93348_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93352_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93351;
      return _vI93349_out;
    _ml1324_L93351:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93352_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93355__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_link_exe_static_uncurry))) ) goto _ml1325_L93350;
      _vI93353_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93352_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93354_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93352_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93349_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93349_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93353_h_param_std_1208) /* apply_stack */))); //init
      _vI93348_inp_uncurry  = _vI93354_t_param_std_1207; //init
      goto start_90421_L93356;
    _ml1325_L93350:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <68031>: flx_pkgconfig::get_field: Apply method
_at107092 get_field::apply(_a13708t_107090 const &_arg ){
  line = _arg;
      _vI96177_find_mv_2046  = line.find((::flx::rtl::strutil::subscript(::std::string(":"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI96177_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L96179;
      get_field_mv_64672  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_96156_L96180;
    _ml2048_L96179:;
/*match case 2:i_param_std_1834*/
      _vI96178_i_param_std_1834 = _vI96177_find_mv_2046; //assign simple
      get_field_mv_64672  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI96178_i_param_std_1834)); //init
    _end_inline_find_96156_L96180:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(get_field_mv_64672)==0) ) goto _ml64674_L96175;
      return _at107092(::std::string(""), ::std::string(""));
    _ml64674_L96175:;
/*match case 2:|Some n_param_bootflx_64599*/
      if(!andthen(FLX_VNI(get_field_mv_64672)==1, (FLX_NEWP(_lam_64676)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64675_L96176;
      n_param_bootflx_64599 = *((_a5038t_107106*)FLX_VNP(get_field_mv_64672)); //assign simple
      return _at107092(lstrip(rstrip(::flx::rtl::strutil::substr(line,0,n_param_bootflx_64599), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")), lstrip(rstrip(::flx::rtl::strutil::substr(line,n_param_bootflx_64599 + 1 ,line.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")));
    _ml64675_L96176:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",257,9,257,32);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",259,5,259,8); // HACK! 
}

//------------------------------
//FUNCTION <66001>: toolchain_gcc_linux::dynamic_library_linker: Apply method
int _fI66001_dynamic_library_linker::apply(_art107181 const &_arg ){
  _vI66004_spec = _arg;
      _vI66003_result = generic_link_lib_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107231(_art107230(ptrtoolchain_gcc_linux->ccflags_for_dynamic_link, ptrtoolchain_gcc_linux->linker, ::std::string(".so"), join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_gcc_linux->_vI66005_config.library_search_dirs, ptrtoolchain_gcc_linux->_vI66005_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI66004_spec.srcs, _vI66004_spec.dst)) /* apply_stack */; //assign simple
      return _vI66003_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",935,3,935,4); // HACK! 
}

//------------------------------
//FUNCTION <96208>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI96208__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <96533>: flx_pkgconfig::handle_pkg::_lam_64696::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI96533__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <66108>: toolchain_clang_linux::whatami: Apply method
_a13708t_107090 _fI66108_whatami::apply(){
      return ::std::string("toolchain_clang_linux (version 2)");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1214,3,1214,63); // HACK! 
}

//------------------------------
//FUNCTION <89188>: toolchain_clang_apple_iOS_maker_uncurry::get: Apply method
_a13708t_107090 get::apply(_a13708t_107090 const &_arg ){
  _vI89193_s = _arg;
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_448_L93890;
      {
      _a13708t_107090 _tmp107812 = (::std::string("[get_stdout] ") + _vI89193_s ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107812)));
      }
      fflush(stderr);
    _ifdoelse_std_448_L93890:;
      _genout_urv93888  = basic_get_stdout(_vI89193_s); //init
      _ds2_65602 = _genout_urv93888; //assign simple
      _vI89190_err = _ds2_65602.mem_0; //assign simple
      res = _ds2_65602.mem_1; //assign simple
      if(!(!((_vI89190_err == 0)) ) ) goto _ifdoelse_bootflx_65601_L89195;
      msg = ::std::string("Abort: Error executing shell command ") + _vI89193_s ; //assign simple
      {
      _a13708t_107090 _tmp107813 = msg + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107813)));
      }
      fflush(stderr);
      (fprintf(stderr,"Felix code calling abort\n"),::std::abort());
    _ifdoelse_bootflx_65601_L89195:;
      return res;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1949,3,1949,4); // HACK! 
}

//------------------------------
//FUNCTION <67707>: run_felix_compiler: Apply method
int run_felix_compiler::apply(_art107577 const &_arg ){
  _vI67722_spec = _arg;
      FLXFLAGS = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI67722_spec.FLAGS, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("--inline=") + ::flx::rtl::strutil::str<int>(_vI67722_spec.INLINE) ))))) /* apply_stack */; //assign simple
      if(!(!((_vI67722_spec.OUTPUT_DIR == ::std::string(""))) ) ) goto _ifdoelse_bootflx_64787_L67724;
      *((void**)&FLXFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&FLXFLAGS) , ::std::string("--output_dir=") + _vI67722_spec.OUTPUT_DIR )) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64787_L67724:;
      run_felix_compiler_mv_64802  = _vI67722_spec.BUNDLE_DIR; //init
/*begin match*/
/*match case 1:|Some dir_param_bootflx_64789*/
      if(!andthen(FLX_VNI(run_felix_compiler_mv_64802)==1, (FLX_NEWP(_lam_64805)(FLX_FPAR_PASS this))) ) goto _ml64804_L67725;
      dir_param_bootflx_64789 = *((_a13708t_107090*)FLX_VNP(run_felix_compiler_mv_64802)); //assign simple
      *((void**)&FLXFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&FLXFLAGS) , ::std::string("--bundle_dir=") + dir_param_bootflx_64789 )) /* apply_stack */; //assign simple
      goto _em64802_L67727;
    _ml64804_L67725:;
/*match case 2:|None*/
      if(!(FLX_VNI(run_felix_compiler_mv_64802)==0) ) goto _ml64806_L67726;
      goto _em64802_L67727;
    _ml64806_L67726:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",339,5,339,14);
;
    _em64802_L67727:;
      if(!(!((_vI67722_spec.CACHE_DIR == ::std::string(""))) ) ) goto _ifdoelse_bootflx_64791_L67729;
      *((void**)&FLXFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&FLXFLAGS) , ::std::string("--cache_dir=") + _vI67722_spec.CACHE_DIR )) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64791_L67729:;
      if(!(!((_vI67722_spec.COMPILER_PHASE == ::std::string(""))) ) ) goto _ifdoelse_bootflx_64793_L67731;
      *((void**)&FLXFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&FLXFLAGS) , ::std::string("--compiler-phase=") + _vI67722_spec.COMPILER_PHASE )) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64793_L67731:;
      if(!((_vI67722_spec.DOREDUCE == 0)) ) goto _ifdoelse_bootflx_64795_L67733;
      *((void**)&FLXFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&FLXFLAGS) , ::std::string("--no-reduce"))) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64795_L67733:;
      if(!((_vI67722_spec.TIME == 1)) ) goto _ifdoelse_bootflx_64797_L67735;
      *((void**)&FLXFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&FLXFLAGS) , ::std::string("--time"))) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64797_L67735:;
      if(!((_vI67722_spec.FORCE == 1)) ) goto _ifdoelse_bootflx_64799_L67737;
      *((void**)&FLXFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&FLXFLAGS) , ::std::string("--force"))) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64799_L67737:;
      _vI98178_r = _fI98179_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI67722_spec.INCLUDE_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107816 = (void**)&_vI98178_r;
      _rev(((_tmp107816)),(_a13708t_107090*)0);
      }
      _vI98201_r = _fI98202_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI67722_spec.IMPORTS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107817 = (void**)&_vI98201_r;
      _rev(((_tmp107817)),(_a13708t_107090*)0);
      }
      _vI67719_cmd = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI67722_spec.VERBOSE, FLXFLAGS)) /* apply_stack */, _vI98178_r)) /* apply_stack */, ::std::string("--syntax=") + _vI67722_spec.STDGRAMMAR )) /* apply_stack */, ::std::string("--automaton=") + _vI67722_spec.AUTOMATON )) /* apply_stack */, _vI98201_r)) /* apply_stack */, _vI67722_spec.FLXLIBS)) /* apply_stack */, _vI67722_spec.filebase + _vI67722_spec.use_ext )) /* apply_stack */, _vI67722_spec.FLXG))); //assign simple
      _vI98231_r = _fI98232_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI67719_cmd, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107818 = (void**)&_vI98231_r;
      _rev(((_tmp107818)),(_a13708t_107090*)0);
      }
      _vI67720_CMD = cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI98231_r)) /* apply_stack */; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI67722_spec.debugln)->clone()
      ->call(0, ::std::string("Felix command=") + _vI67720_CMD );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_444_L98247;
      {
      _a13708t_107090 _tmp107819 = (::std::string("[system] ") + _vI67720_CMD ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107819)));
      }
      fflush(stderr);
    _ifdoelse_std_444_L98247:;
      _genout_urv98254  = ::std::system(((::std::string("\"") + _vI67720_CMD ) + ::std::string("\"") ).c_str()); //init
      _genout_urv93142  = _genout_urv98254; //init
      _genout_urv93134  = _genout_urv93142; //init
      _genout_urv93129  = _genout_urv93134; //init
      _genout_urv98245  = _genout_urv93129; //init
      _vI67721_result = _genout_urv98245; //assign simple
      if(!(!((_vI67721_result == 0)) ) ) goto _ifdoelse_bootflx_64801_L67739;
      {
      _a13708t_107090 _tmp107820 = ((::std::string("Felix compilation ") + _vI67720_CMD ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107820)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_64801_L67739:;
      return _vI67721_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",375,3,375,4); // HACK! 
}

//------------------------------
//FUNCTION <67713>: run_felix_compiler::_lam_64807: Apply method
_a13708t_107090 _lam_64807::apply(_a13708t_107090 const &_arg ){
  _vI67715_s = _arg;
      return ::std::string("-I") + _vI67715_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",359,12,359,35); // HACK! 
}

//------------------------------
//FUNCTION <93045>: generic_dependency_parser::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93045__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//C FUNC <14342>: rstrip
_a13708t_107090 rstrip( _a13708t_107090 _vI14347_x, _a13708t_107090 _vI14348_e){
  _a5038t_107106 j;
   ::flx::rtl::cl_t _vI14345_found;
  _a5038t_107106 _vI14344_i;
      if(!((0 < _vI14347_x.size())) ) goto _ifdoelse_std_1904_L14359;
      _vI14344_i = _vI14347_x.size() - 1 ; //assign simple
      {
      _a5038t_107106* _tmp107821 = (_a5038t_107106*)&_vI14344_i;
      ++*((_tmp107821));
      }
    redo__ll_strings_7042_L14349:;
      if(FLX_UNLIKELY(!((0 < _vI14344_i)) )) goto _ifdoelse_std_1904_L14359;
      {
      _a5038t_107106* _tmp107822 = (_a5038t_107106*)&_vI14344_i;
      --*((_tmp107822));
      }
      _vI14345_found = 0; //assign simple
      j = 0; //assign simple
    redo__ll_strings_7046_L14350:;
      if(FLX_UNLIKELY(!(!((_vI14348_e.size() - 1  < j)) ) )) goto break__ll_strings_7046_L14354;
      if(!((::flx::rtl::strutil::subscript(_vI14347_x,_vI14344_i) == ::flx::rtl::strutil::subscript(_vI14348_e,j))) ) goto _ifdoelse_std_1906_L14352;
      _vI14345_found = 1; //assign simple
    _ifdoelse_std_1906_L14352:;
      {
      _a5038t_107106* _tmp107823 = (_a5038t_107106*)&j;
      ++*((_tmp107823));
      }
      goto redo__ll_strings_7046_L14350;
    break__ll_strings_7046_L14354:;
      if(_vI14345_found) goto redo__ll_strings_7042_L14349;
      return ::flx::rtl::strutil::substr(_vI14347_x,0,(static_cast<int>(_vI14344_i)/*int.flx: ctor*/) + 1 );
      goto redo__ll_strings_7042_L14349;
    _ifdoelse_std_1904_L14359:;
      return ::std::string("");
}
//------------------------------
//FUNCTION <92289>: split::aux_uncurry: Apply method
void* _fI92289_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92290_x_uncurry = _arg.data[0];
  _vI92291_y = _arg.data[1];
    start_91065_L92298:;
      _vI92294_aux__apos_2_mv_1328  = _vI92290_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92294_aux__apos_2_mv_1328)==0) ) goto _ml1330_L92293;
      return _vI92291_y;
    _ml1330_L92293:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI92294_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI92297__lam_1332)(FLX_FPAR_PASS this, ptrsplit))) ) goto _ml1331_L92292;
      _vI92295_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI92294_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI92296_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI92294_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI92291_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92291_y, _vI92295_h_param_std_1210))); //init
      _vI92290_x_uncurry  = _vI92296_t_param_std_1209; //init
      goto start_91065_L92298;
    _ml1331_L92292:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <89244>: toolchain_clang_apple_iOS_maker_uncurry::cxx_static_object_compiler: Apply method
int _fI89244_cxx_static_object_compiler::apply(_art107177 const &_arg ){
  _vI89246_spec = _arg;
      _vI89245_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89211_base_cxx_compile_flags, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89202_cxx_compiler, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.header_search_dirs, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.macros, ::std::string("-o "), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89246_spec.src, _vI89246_spec.dst)) /* apply_stack */; //assign simple
      return _vI89245_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2091,3,2091,4); // HACK! 
}

//------------------------------
//FUNCTION <93037>: generic_dependency_parser::aux_uncurry: Apply method
void* _fI93037_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93038_inp_uncurry = _arg.data[0];
  _vI93039_out = _arg.data[1];
    start_90421_L93046:;
      _vI93042_aux__apos_2_mv_1322  = _vI93038_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93042_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93041;
      return _vI93039_out;
    _ml1324_L93041:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93042_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93045__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_dependency_parser))) ) goto _ml1325_L93040;
      _vI93043_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93042_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93044_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93042_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93039_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93039_out, mk_absolute_filename(_vI93043_h_param_std_1208)))); //init
      _vI93038_inp_uncurry  = _vI93044_t_param_std_1207; //init
      goto start_90421_L93046;
    _ml1325_L93040:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <66130>: toolchain_clang_linux::debug_flags: Apply method
void* _fI66130_debug_flags::apply(){
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-g"))));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1226,3,1226,49); // HACK! 
}

//------------------------------
//FUNCTION <66064>: toolchain_gcc_osx::c_dynamic_object_compiler: Apply method
int _fI66064_c_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI66067_spec = _arg;
      _vI66066_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_osx->_vI66015_base_c_compile_flags, ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_gcc_osx->_vI66011_c_compiler, ptrtoolchain_gcc_osx->_vI66096_config.header_search_dirs, ptrtoolchain_gcc_osx->_vI66096_config.macros, ::std::string("-o "), ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66067_spec.src, _vI66067_spec.dst)) /* apply_stack */; //assign simple
      return _vI66066_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1052,3,1052,4); // HACK! 
}

//------------------------------
//C PROC <16850>: set_libs_and_rtls
void set_libs_and_rtls(FLX_APAR_DECL _art107117* _vI16852_x){
  int _vI90852_i;
  void* _vI90851_o;
  int _vI90818_i;
  void* _vI90817_o;
      _vI90817_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L90813;
      _vI90818_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp107826 = (int*)&_vI90818_i;
      ++*((_tmp107826));
      }
    redo__ll_lists_4854_L90816:;
      if(FLX_UNLIKELY(!((0 < _vI90818_i)) )) goto _ifdoelse_std_1191_L90813;
      {
      int* _tmp107827 = (int*)&_vI90818_i;
      --*((_tmp107827));
      }
      _vI90817_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI90817_o, (_at107092(_fI82124_join((*_vI16852_x).FLX_SHARE_DIR, ::std::string("lib")), _fI82124_join((*_vI16852_x).FLX_TARGET_DIR, ::std::string("lib"))).data)[reinterpret< ::flx::rtl::cl_t>(_vI90818_i)]))); //assign simple
      goto redo__ll_lists_4854_L90816;
    _ifdoelse_std_1191_L90813:;
      *(&_vI16852_x->FLX_LIB_DIRS)  = _vI90817_o; //assign simple
      _vI90851_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L90847;
      _vI90852_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp107828 = (int*)&_vI90852_i;
      ++*((_tmp107828));
      }
    redo__ll_lists_4854_L90850:;
      if(FLX_UNLIKELY(!((0 < _vI90852_i)) )) goto _ifdoelse_std_1191_L90847;
      {
      int* _tmp107829 = (int*)&_vI90852_i;
      --*((_tmp107829));
      }
      _vI90851_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI90851_o, (_at107092(_fI82124_join(_fI82124_join((*_vI16852_x).FLX_SHARE_DIR, ::std::string("lib")), ::std::string("rtl")), _fI82124_join(_fI82124_join((*_vI16852_x).FLX_TARGET_DIR, ::std::string("lib")), ::std::string("rtl"))).data)[reinterpret< ::flx::rtl::cl_t>(_vI90852_i)]))); //assign simple
      goto redo__ll_lists_4854_L90850;
    _ifdoelse_std_1191_L90847:;
      *(&_vI16852_x->FLX_RTL_DIRS)  = _vI90851_o; //assign simple
      return; // proc return from stackable 
}
//------------------------------
//FUNCTION <66424>: cxx_depcheck::maxf::maxf'2: Apply method
double _fI66424_maxf__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI66426_f = _arg;
      max_mv_106  = (ptrmaxf->_vI66427_t < dfiletime(_vI66426_f, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)))); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(max_mv_106%2==1) ) goto _ml108_L98516;
      return dfiletime(_vI66426_f, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)));
    _ml108_L98516:;
/*match case 2:any*/
      return ptrmaxf->_vI66427_t;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",401,5,401,95); // HACK! 
}

//------------------------------
//FUNCTION <92391>: toolchain_msvc_win32::dependency_parser::aux_uncurry: Apply method
void* _fI92391_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92392_x_uncurry = _arg.data[0];
  _vI92393_y = _arg.data[1];
    start_91065_L92400:;
      _vI92396_aux__apos_2_mv_1328  = _vI92392_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92396_aux__apos_2_mv_1328)==0) ) goto _ml1330_L92395;
      return _vI92393_y;
    _ml1330_L92395:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI92396_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI92399__lam_1332)(FLX_FPAR_PASS this, ptrdependency_parser, ptrtoolchain_msvc_win32))) ) goto _ml1331_L92394;
      _vI92397_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI92396_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI92398_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI92396_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI92393_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92393_y, _vI92397_h_param_std_1210))); //init
      _vI92392_x_uncurry  = _vI92398_t_param_std_1209; //init
      goto start_91065_L92400;
    _ml1331_L92394:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <92860>: generic_cxx_gen_deps_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI92860__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <68001>: flx_pkgconfig::reattach_drive_letters: Apply method
void* reattach_drive_letters::apply(void* const &_arg ){
  _a = _arg;
      reattach_drive_letters_mv_64655  = _a; //init
/*begin match*/
/*match case 1:|Cons (a_param_bootflx_64593, |Cons (b_param_bootflx_64594, tail_param_bootflx_64595))*/
      if(!andthen(!!reattach_drive_letters_mv_64655 , (FLX_NEWP(_lam_64663)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64657_L97280;
      tail_param_bootflx_64595 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(((reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(reattach_drive_letters_mv_64655))).mem_1)))).mem_1; //assign simple
      b_param_bootflx_64594 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(((reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(reattach_drive_letters_mv_64655))).mem_1)))).mem_0; //assign simple
      a_param_bootflx_64593 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(reattach_drive_letters_mv_64655))).mem_0; //assign simple
      reattach_drive_letters_mv_64659  = ((a_param_bootflx_64593.size() == (static_cast<_a5038t_107106>(1)/*int.flx: ctor size from _a5038t_107106*/)) && (!!isalpha((::flx::rtl::strutil::subscript(a_param_bootflx_64593,0)))) ) && (::flx::rtl::strutil::substr(b_param_bootflx_64594,0,::std::string("\\").size()) == ::std::string("\\")) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(reattach_drive_letters_mv_64659%2==1) ) goto _ml64661_L97284;
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(reattach_drive_letters(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(tail_param_bootflx_64595) /* apply_stack */, (a_param_bootflx_64593 + ::std::string(":") ) + b_param_bootflx_64594 )));
    _ml64661_L97284:;
/*match case 2:any*/
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(reattach_drive_letters(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(tail_param_bootflx_64595, b_param_bootflx_64594)))) /* apply_stack */, a_param_bootflx_64593)));
    _ml64657_L97280:;
/*match case 2:other_param_bootflx_64596*/
      other_param_bootflx_64596 = reattach_drive_letters_mv_64655; //assign simple
      return other_param_bootflx_64596;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",238,5,238,6); // HACK! 
}

//------------------------------
//FUNCTION <104864>: FlxPkgConfigQuery::getpkgfield_uncurry::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI104864__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <65932>: toolchain_gcc_linux::cxx_compiler_vendor: Apply method
_a13708t_107090 _fI65932_cxx_compiler_vendor::apply(){
      return ::std::string("GNU");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",734,3,734,45); // HACK! 
}

//------------------------------
//FUNCTION <106400>: flx_processing::runit: Apply method
int _fI106400_runit::apply(_pt107161* const &_arg ){
  _vI106402_ehandler = _arg;
      _vI106401_result = 0; //assign simple
      if(!((ptrflx_processing->_vI106422_control.FELIX == 1)) ) goto _ifdoend_bootflx_65405_L106404;
      _vI107062__genout_urv99971  = _fI106185_run_felix_compiler_if_required(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106402_ehandler) /* apply_stack */; //init
      _vI106401_result = _vI107062__genout_urv99971; //assign simple
      if(!(!((_vI106401_result == 0)) ) ) goto _ifdoelse_bootflx_65406_L106405;
      return _vI106401_result;
      goto _ifdoelse_bootflx_65406_L106405;
    _ifdoend_bootflx_65405_L106404:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65406_L106405;
      {
      _a13708t_107090 _tmp107831 = (::std::string("[flx] ") + ::std::string("Felix compilation skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107831)));
      }
    _ifdoelse_bootflx_65406_L106405:;
      {
      _pI106134_calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI106402_ehandler);
      }
      if(!(!((ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65410_L106407;
      _vI107066_dirname_mv_671  = split1(FLX_FPAR_PASS_ONLY)
      .apply(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME) /* apply_stack */; //init
/*begin match*/
/*match case 1:(d_param_std_617, any)*/
      _vI107067_d_param_std_617 = (_vI107066_dirname_mv_671.data)[0]; //assign simple
  mkdirs(FLX_FPAR_PASS _vI107067_d_param_std_617);
    _ifdoelse_bootflx_65410_L106407:;
      if(!((ptrflx_processing->_vI106422_control.CCOMPILEIT == 1)) ) goto _ifdoend_bootflx_65411_L106409;
      _vI107068__genout_urv100011  = _fI106232_run_cxx_compiler_if_required(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106402_ehandler) /* apply_stack */; //init
      _vI106401_result = _vI107068__genout_urv100011; //assign simple
      if(!(!((_vI106401_result == 0)) ) ) goto _ifdoelse_bootflx_65412_L106410;
      return _vI106401_result;
      goto _ifdoelse_bootflx_65412_L106410;
    _ifdoend_bootflx_65411_L106409:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65412_L106410;
      {
      _a13708t_107090 _tmp107833 = (::std::string("[flx] ") + ::std::string("C++ compilation (and linking and running) skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107833)));
      }
    _ifdoelse_bootflx_65412_L106410:;
      if(!((ptrflx_processing->_vI106422_control.CCOMPILEIT == 1)) ) goto _ifdoend_bootflx_65415_L106411;
      _vI107072__genout_urv100022  = _fI106237_ocaml_compile(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106402_ehandler) /* apply_stack */; //init
      _vI106401_result = _vI107072__genout_urv100022; //assign simple
      goto _ifdoelse_bootflx_65416_L106412;
    _ifdoend_bootflx_65415_L106411:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65416_L106412;
      {
      _a13708t_107090 _tmp107834 = (::std::string("[flx] ") + ::std::string("Ocaml compilation skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107834)));
      }
    _ifdoelse_bootflx_65416_L106412:;
      if(!((ptrflx_processing->_vI106422_control.LINKIT == 1)) ) goto _ifdoend_bootflx_65417_L106414;
      _vI107076__genout_urv100030  = _fI106347_run_linker_if_required(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106402_ehandler) /* apply_stack */; //init
      _vI106401_result = _vI107076__genout_urv100030; //assign simple
      if(!(!((_vI106401_result == 0)) ) ) goto _ifdoelse_bootflx_65418_L106415;
      return _vI106401_result;
      goto _ifdoelse_bootflx_65418_L106415;
    _ifdoend_bootflx_65417_L106414:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65418_L106415;
      {
      _a13708t_107090 _tmp107835 = (::std::string("[flx] ") + ::std::string("Link step skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107835)));
      }
    _ifdoelse_bootflx_65418_L106415:;
      if(!((ptrflx_processing->_vI106422_control.RUNIT == 1)) ) goto _ifdoend_bootflx_65421_L106417;
      _vI107080__genout_urv100041  = _fI106382_run_program_if_required(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106402_ehandler) /* apply_stack */; //init
      _vI106401_result = _vI107080__genout_urv100041; //assign simple
      if(!(!((_vI106401_result == 0)) ) ) goto _ifdoelse_bootflx_65422_L106418;
      return _vI106401_result;
      goto _ifdoelse_bootflx_65422_L106418;
    _ifdoend_bootflx_65421_L106417:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65422_L106418;
      {
      _a13708t_107090 _tmp107836 = (::std::string("[flx] ") + ::std::string("Running program skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107836)));
      }
    _ifdoelse_bootflx_65422_L106418:;
      if(!(!((ptrflx_processing->_vI106422_control.EXPECT == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65426_L106421;
      _vI107084__genout_urv100058  = _fI106387_check_output_if_required(ptrflx_processing)
      .apply() /* apply_stack */; //init
      _vI106401_result = _vI107084__genout_urv100058; //assign simple
      if(!(!((_vI106401_result == 0)) ) ) goto _ifdoelse_bootflx_65426_L106421;
      return _vI106401_result;
    _ifdoelse_bootflx_65426_L106421:;
      return _vI106401_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2958,3,2958,4); // HACK! 
}

//------------------------------
//FUNCTION <98232>: run_felix_compiler::aux_uncurry: Apply method
void* _fI98232_aux_uncurry::apply(_at107115 const &_arg ){
  _vI98233_inp_uncurry = _arg.data[0];
  _vI98234_out = _arg.data[1];
    start_90421_L98241:;
      _vI98237_aux__apos_2_mv_1322  = _vI98233_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI98237_aux__apos_2_mv_1322)==0) ) goto _ml1324_L98236;
      return _vI98234_out;
    _ml1324_L98236:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI98237_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI98240__lam_1326)(FLX_FPAR_PASS this, ptrrun_felix_compiler))) ) goto _ml1325_L98235;
      _vI98238_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI98237_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI98239_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI98237_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI98234_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI98234_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI98238_h_param_std_1208) /* apply_stack */))); //init
      _vI98233_inp_uncurry  = _vI98239_t_param_std_1207; //init
      goto start_90421_L98241;
    _ml1325_L98235:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <97491>: map_package_requirements_uncurry::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI97491__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <98585>: cxx_depcheck::aux::_lam_1421: Apply method
 ::flx::rtl::cl_t _fI98585__lam_1421::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",547,9,547,17); // HACK! 
}

//------------------------------
//FUNCTION <106504>: flx_processing::find_cxx_pkgs::iterator'2: Apply method
void* _fI106504_iterator__apos_2::apply(){
      _vI106509__genout_urv97724  = ::flx::rtl::ioutil::readln((ptr_fI106140_find_cxx_pkgs->_vI106143_f)); //init
      _vI106508__genout_urv97710  = _vI106509__genout_urv97724; //init
      _vI106506_iterator__apos_2_mv_577  = _vI106508__genout_urv97710; //init
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == _vI106506_iterator__apos_2_mv_577)) ) goto _ml579_L106505;
      return (void* /*VR_nullptr*/ )0;
    _ml579_L106505:;
/*match case 2:text_param_std_563*/
      _vI106507_text_param_std_563 = _vI106506_iterator__apos_2_mv_577; //assign simple
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (rstrip(_vI106507_text_param_std_563, ::std::string(" \x09\n\x0D\x0C\x0B"))));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/io.fdoc",340,3,340,4); // HACK! 
}

//------------------------------
//FUNCTION <102611>: +::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI102611__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <65695>: toolchain_msvc_win32: Apply method
_art107183 toolchain_msvc_win32::apply(_art107173 const &_arg ){
  config = _arg;
      base_c_compile_flags = (void* /*VR_nullptr*/ )0; //assign simple
      base_cxx_compile_flags = (void* /*VR_nullptr*/ )0; //assign simple
      _vI92623_r = _fI92624_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(config.header_search_dirs, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107838 = (void**)&_vI92623_r;
      _rev(((_tmp107838)),(_a13708t_107090*)0);
      }
      include_switches = _vI92623_r; //assign simple
      include_switches = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(include_switches, _fI92692_aux(FLX_FPAR_PASS this)
      .apply(_at107115(config.ccflags, (void* /*VR_nullptr*/ )0)) /* apply_stack */)) /* apply_stack */; //assign simple
      _vI92726_r = _fI92727_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(config.macros, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107839 = (void**)&_vI92726_r;
      _rev(((_tmp107839)),(_a13708t_107090*)0);
      }
      macros = _vI92726_r; //assign simple
      _vI92745_r = _fI92746_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(config.library_search_dirs, config.static_libraries)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107840 = (void**)&_vI92745_r;
      _rev(((_tmp107840)),(_a13708t_107090*)0);
      }
      static_link_strings = _vI92745_r; //assign simple
      r = _fI92764_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(config.library_search_dirs, config.dynamic_libraries)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107841 = (void**)&r;
      _rev(((_tmp107841)),(_a13708t_107090*)0);
      }
      dynamic_link_strings = r; //assign simple
      return _art107183((FLX_NEWP(c_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(c_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(c_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(cxx_compiler_vendor)(FLX_FPAR_PASS this)), (FLX_NEWP(cxx_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(cxx_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(cxx_static_library_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(cxx_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(debug_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(dependency_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(dependency_parser)(FLX_FPAR_PASS this)), (FLX_NEWP(dynamic_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(dynamic_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(dynamic_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(dynamic_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(executable_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(get_base_c_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(get_base_cxx_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(host_os)(FLX_FPAR_PASS this)), (FLX_NEWP(pathname_separator)(FLX_FPAR_PASS this)), (FLX_NEWP(static_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(static_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(static_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(static_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(target_os)(FLX_FPAR_PASS this)), (FLX_NEWP(whatami)(FLX_FPAR_PASS this)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1927,1,1927,2); // HACK! 
}

//------------------------------
//FUNCTION <102469>: exts::aux_uncurry: Apply method
void* _fI102469_aux_uncurry::apply(_tt107283 const &_arg ){
  _vI102470_inp_uncurry = _arg.mem_0;
  _vI102471_out = _arg.mem_1;
    start_102429_L102478:;
      _vI102474_aux__apos_2_mv_1322  = _vI102470_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102474_aux__apos_2_mv_1322)==0) ) goto _ml1324_L102473;
      return _vI102471_out;
    _ml1324_L102473:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI102474_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI102477__lam_1326)(FLX_FPAR_PASS this, ptrexts))) ) goto _ml1325_L102472;
      _vI102475_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI102474_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI102476_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI102474_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI102471_out  = FLX_VNR(1, new(*PTF gcp, _tt107274_ptr_map, true) _tt107274 (_tt107274(_vI102471_out, _lam_65071(ptrexts)
      .apply(_vI102475_h_param_std_1208) /* apply_stack */))); //init
      _vI102470_inp_uncurry  = _vI102476_t_param_std_1207; //init
      goto start_102429_L102478;
    _ml1325_L102472:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <106684>: flx_processing::cxx_compile_static1_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI106684__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <67716>: run_felix_compiler::_lam_64808: Apply method
_a13708t_107090 _lam_64808::apply(_a13708t_107090 const &_arg ){
  _vI67718_s = _arg;
      return ::std::string("--import=") + _vI67718_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",362,12,362,42); // HACK! 
}

//------------------------------
//FUNCTION <92161>: toolchain_msvc_win32::checkwarn::aux: Apply method
void* _fI92161_aux::apply(_tt107116 const &_arg ){
  _vI92162_x = _arg.mem_0;
  _vI92163_y = _arg.mem_1;
    start_91026_L92173:;
      _vI92168_find_mv_2046  = _vI92162_x.find((::flx::rtl::strutil::subscript(::std::string("\n"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI92168_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L92170;
      _vI92164_aux_mv_2226  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_90996_L92171;
    _ml2048_L92170:;
/*match case 2:i_param_std_1834*/
      _vI92169_i_param_std_1834 = _vI92168_find_mv_2046; //assign simple
      _vI92164_aux_mv_2226  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI92169_i_param_std_1834)); //init
    _end_inline_find_90996_L92171:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(_vI92164_aux_mv_2226)==0) ) goto _ml2228_L92166;
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92163_y, _vI92162_x)));
    _ml2228_L92166:;
/*match case 2:|Some n_param_std_1909*/
      if(!andthen(FLX_VNI(_vI92164_aux_mv_2226)==1, (FLX_NEWP(_fI92172__lam_2230)(FLX_FPAR_PASS this, ptrcheckwarn, ptrtoolchain_msvc_win32))) ) goto _ml2229_L92167;
      _vI92165_n_param_std_1909 = *((_a5038t_107106*)FLX_VNP(_vI92164_aux_mv_2226)); //assign simple
/*parallel assignment*/
      _vI92163_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92163_y, ::flx::rtl::strutil::substr(_vI92162_x,0,_vI92165_n_param_std_1909)))); //init
      _vI92162_x  = ::flx::rtl::strutil::substr(_vI92162_x,_vI92165_n_param_std_1909 + 1 ,_vI92162_x.size()); //init
      goto start_91026_L92173;
    _ml2229_L92167:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,7,478,61);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",480,5,480,6); // HACK! 
}

//------------------------------
//FUNCTION <91111>: process_config_text_uncurry::iterator'2: Apply method
void* _fI91111_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L91112:;
      _vI91116_iterator__apos_2_mv_1504  = ptrprocess_config_text_uncurry->_vI91110_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI91116_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI91119__lam_1507)(FLX_FPAR_PASS this, ptrprocess_config_text_uncurry))) ) goto _ml1506_L91115;
      _vI91117_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI91116_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI91118_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI91116_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrprocess_config_text_uncurry->_vI91110_xs = _vI91118_t_param_std_1259; //assign simple
      FLX_SET_PC(107844)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI91117_h_param_std_1260));//yield
    FLX_CASE_LABEL(107844)
      goto continue__ll_lists_5177_L91112;
    _ml1506_L91115:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI91116_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L91114;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L91114:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L91112;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <89221>: toolchain_clang_apple_iOS_maker_uncurry::dynamic_library_extension: Apply method
_a13708t_107090 _fI89221_dynamic_library_extension::apply(){
      return ::std::string(".dylib");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1997,3,1997,54); // HACK! 
}

//------------------------------
//FUNCTION <97403>: map_package_requirements_uncurry::_lam_64522::_lam_64522'2::aux: Apply method
void* _fI97403_aux::apply(_tt107116 const &_arg ){
  _vI97404_x = _arg.mem_0;
  _vI97405_y = _arg.mem_1;
    start_91026_L97415:;
      _vI97410_find_mv_2046  = _vI97404_x.find((::flx::rtl::strutil::subscript(::std::string("="),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI97410_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L97412;
      _vI97406_aux_mv_2226  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_90996_L97413;
    _ml2048_L97412:;
/*match case 2:i_param_std_1834*/
      _vI97411_i_param_std_1834 = _vI97410_find_mv_2046; //assign simple
      _vI97406_aux_mv_2226  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI97411_i_param_std_1834)); //init
    _end_inline_find_90996_L97413:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(_vI97406_aux_mv_2226)==0) ) goto _ml2228_L97408;
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97405_y, _vI97404_x)));
    _ml2228_L97408:;
/*match case 2:|Some n_param_std_1909*/
      if(!andthen(FLX_VNI(_vI97406_aux_mv_2226)==1, (FLX_NEWP(_fI97414__lam_2230)(FLX_FPAR_PASS this, ptr_fI89746__lam_64522__apos_2, ptr_lam_64522, ptrmap_package_requirements_uncurry))) ) goto _ml2229_L97409;
      _vI97407_n_param_std_1909 = *((_a5038t_107106*)FLX_VNP(_vI97406_aux_mv_2226)); //assign simple
/*parallel assignment*/
      _vI97405_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97405_y, ::flx::rtl::strutil::substr(_vI97404_x,0,_vI97407_n_param_std_1909)))); //init
      _vI97404_x  = ::flx::rtl::strutil::substr(_vI97404_x,_vI97407_n_param_std_1909 + 1 ,_vI97404_x.size()); //init
      goto start_91026_L97415;
    _ml2229_L97409:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,7,478,61);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",480,5,480,6); // HACK! 
}

//------------------------------
//FUNCTION <90391>: _init_::aux_uncurry: Apply method
void* aux_uncurry::apply(_tt107100 const &_arg ){
  inp_uncurry = _arg.mem_0;
  out = _arg.mem_1;
    start_90354_L90400:;
      _vI90396_aux__apos_2_mv_1322  = inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI90396_aux__apos_2_mv_1322)==0) ) goto _ml1324_L90395;
      return out;
    _ml1324_L90395:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI90396_aux__apos_2_mv_1322)==1, (FLX_NEWP(_lam_1326)(FLX_FPAR_PASS this, ptr_init_))) ) goto _ml1325_L90394;
      h_param_std_1208 = (*((_tt107098*)FLX_VNP(_vI90396_aux__apos_2_mv_1322))).mem_1; //assign simple
      t_param_std_1207 = (*((_tt107098*)FLX_VNP(_vI90396_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(out, _a90238_argv(FLX_FPAR_PASS h_param_std_1208)))); //init
      inp_uncurry  = t_param_std_1207; //init
      goto start_90354_L90400;
    _ml1325_L90394:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <93055>: generic_cxx_compile_for_static_uncurry::aux_uncurry: Apply method
void* _fI93055_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93056_inp_uncurry = _arg.data[0];
  _vI93057_out = _arg.data[1];
    start_90421_L93064:;
      _vI93060_aux__apos_2_mv_1322  = _vI93056_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93060_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93059;
      return _vI93057_out;
    _ml1324_L93059:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93060_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93063__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_cxx_compile_for_static_uncurry))) ) goto _ml1325_L93058;
      _vI93061_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93060_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93062_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93060_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93057_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93057_out, mkinc(_vI93061_h_param_std_1208)))); //init
      _vI93056_inp_uncurry  = _vI93062_t_param_std_1207; //init
      goto start_90421_L93064;
    _ml1325_L93058:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <103002>: print_options::_lam_1014: Apply method
 ::flx::rtl::cl_t _lam_1014::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/core_type_constructors.fdoc",122,9,122,14); // HACK! 
}

//------------------------------
//C PROC <16468>: mkdirs
void mkdirs(FLX_APAR_DECL _a13708t_107090 _vI16470_s){
  int _genout_urv100009;
  _a13708t_107090 _vI100006_d_param_std_617;
  _at107092 _vI100005_dirname_mv_671;
      if(!((((_vI16470_s == ::std::string("")) || (_vI16470_s == ::std::string(".")) ) || (_vI16470_s == ::std::string("..")) ) || (::flx::rtl::strutil::subscript(_vI16470_s,-1) == ::flx::rtl::strutil::subscript(::std::string("\\"),0)) ) ) goto _ifdoend_std_2794_L16471;
      return; // proc return from stackable 
    _ifdoend_std_2794_L16471:;
      _vI100005_dirname_mv_671  = split1(FLX_FPAR_PASS_ONLY)
      .apply(_vI16470_s) /* apply_stack */; //init
/*begin match*/
/*match case 1:(d_param_std_617, any)*/
      _vI100006_d_param_std_617 = (_vI100005_dirname_mv_671.data)[0]; //assign simple
  mkdirs(FLX_FPAR_PASS _vI100006_d_param_std_617);
      _genout_urv100009  = _mkdir(_vI16470_s.c_str()); //init
      (void)_genout_urv100009;
      return; // proc return from stackable 
}
//------------------------------
//FUNCTION <67743>: FlxPkgConfigQuery: Apply method
_art107171 FlxPkgConfigQuery::apply(void* const &_arg ){
  path = _arg;
      FlxPkgConfigQuery_mv_64745  = path; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(FlxPkgConfigQuery_mv_64745)==0) ) goto _ml64747_L104975;
      _urv104971  = (void* /*VR_nullptr*/ )0; //init
      goto _end_hash_545860317;
    _ml64747_L104975:;
/*match case 2:|Cons (h_param_bootflx_64728, t_param_bootflx_64729)*/
      if(!andthen(!!FlxPkgConfigQuery_mv_64745 , (FLX_NEWP(_lam_64756)(FLX_FPAR_PASS this))) ) goto _ml64748_L104976;
      t_param_bootflx_64729 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(FlxPkgConfigQuery_mv_64745))).mem_1; //assign simple
      h_param_bootflx_64728 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(FlxPkgConfigQuery_mv_64745))).mem_0; //assign simple
      _urv104971  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI104978_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(t_param_bootflx_64729, (void* /*VR_nullptr*/ )0)) /* apply_stack */, ::std::string("--path=") + h_param_bootflx_64728 ))); //init
      goto _end_hash_545860317;
    _ml64748_L104976:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",478,7,478,44);
;
    _end_hash_545860317:;
      paths = _urv104971; //assign simple
      FlxPkgConfigQuery_mv_64757  = path; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(FlxPkgConfigQuery_mv_64757)==0) ) goto _em64757_L67846;
      {if(FLX_UNLIKELY(!(0)))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",480,33,480,45);}
      goto _em64757_L67846;
/*match case 2:any*/
    _em64757_L67846:;
      return _art107171((FLX_NEWP(getclosure)(FLX_FPAR_PASS this)), (FLX_NEWP(getpkgfield)(FLX_FPAR_PASS this)), (FLX_NEWP(getpkgfield1)(FLX_FPAR_PASS this)), (FLX_NEWP(getpkgfielddflt)(FLX_FPAR_PASS this)), (FLX_NEWP(getpkgfieldopt)(FLX_FPAR_PASS this)), (FLX_NEWP(query)(FLX_FPAR_PASS this)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",560,3,560,4); // HACK! 
}

//------------------------------
//FUNCTION <89241>: toolchain_clang_apple_iOS_maker_uncurry::c_dynamic_object_compiler: Apply method
int _fI89241_c_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI89243_spec = _arg;
      _vI89242_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89210_base_c_compile_flags, ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89201_c_compiler, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.header_search_dirs, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.macros, ::std::string("-o "), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89243_spec.src, _vI89243_spec.dst)) /* apply_stack */; //assign simple
      return _vI89242_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2073,3,2073,4); // HACK! 
}

//------------------------------
//FUNCTION <96325>: flx_pkgconfig::lexstr::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI96325__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <79967>: fmt: Apply method
_a13708t_107090 fmt::apply(_tt107311 const &_arg ){
  _vI79968_v = _arg.mem_0;
  _vI79969_m = _arg.mem_1;
      fmt_mv_224  = _vI79969_m; //init
/*begin match*/
/*match case 1:|default (w_param_std_211, p_param_std_212)*/
      if(!andthen(FLX_VI(fmt_mv_224)==0, (FLX_NEWP(_lam_227)(FLX_FPAR_PASS this))) ) goto _ml226_L95568;
      p_param_std_212 = ((*((_at107104*)FLX_VP(fmt_mv_224))).data)[1]; //assign simple
      w_param_std_211 = ((*((_at107104*)FLX_VP(fmt_mv_224))).data)[0]; //assign simple
      return ::flx::rtl::strutil::fmt_default(_vI79968_v, w_param_std_211, p_param_std_212);
    _ml226_L95568:;
/*match case 2:|fixed (w_param_std_213, p_param_std_214)*/
      if(!andthen(FLX_VI(fmt_mv_224)==1, (FLX_NEWP(_lam_229)(FLX_FPAR_PASS this))) ) goto _ml228_L95567;
      p_param_std_214 = ((*((_at107104*)FLX_VP(fmt_mv_224))).data)[1]; //assign simple
      w_param_std_213 = ((*((_at107104*)FLX_VP(fmt_mv_224))).data)[0]; //assign simple
      return ::flx::rtl::strutil::fmt_fixed(_vI79968_v, w_param_std_213, p_param_std_214);
    _ml228_L95567:;
/*match case 3:|scientific (w_param_std_215, p_param_std_216)*/
      if(!andthen(FLX_VI(fmt_mv_224)==2, (FLX_NEWP(_lam_231)(FLX_FPAR_PASS this))) ) goto _ml230_L95566;
      p_param_std_216 = ((*((_at107104*)FLX_VP(fmt_mv_224))).data)[1]; //assign simple
      w_param_std_215 = ((*((_at107104*)FLX_VP(fmt_mv_224))).data)[0]; //assign simple
      return ::flx::rtl::strutil::fmt_scientific(_vI79968_v, w_param_std_215, p_param_std_216);
    _ml230_L95566:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/numbers.fdoc",215,5,215,47);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/numbers.fdoc",217,3,217,4); // HACK! 
}

//------------------------------
//FUNCTION <93377>: generic_link_exe_static_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93377__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <96375>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::search_and_replace'2: Apply method
_a13708t_107090 _fI96375_search_and_replace__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI96379_v = _arg;
      _vI96387_xs  = ptrhandle_pkg->variables; //init
      _genout_urv96334  = (FLX_NEWP(_fI96388_iterator__apos_2)(FLX_FPAR_PASS this, ptr_lam_64707, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig)); //init
      _vI96376__generator_strings_7324 = _genout_urv96334; //assign simple
    continue__ll_strings_7319_L96380:;
      _vI96374_search_and_replace__apos_2_mv_2301  = (_vI96376__generator_strings_7324)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some (k_param_std_1958, b_param_std_1959)*/
      if(!andthen(FLX_VNI(_vI96374_search_and_replace__apos_2_mv_2301)==1, (FLX_NEWP(_fI96397__lam_2304)(FLX_FPAR_PASS this, ptr_lam_64707, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml2303_L96381;
      _vI96377_b_param_std_1959 = ((*((_at107092*)FLX_VNP(_vI96374_search_and_replace__apos_2_mv_2301))).data)[1]; //assign simple
      _vI96378_k_param_std_1958 = ((*((_at107092*)FLX_VNP(_vI96374_search_and_replace__apos_2_mv_2301))).data)[0]; //assign simple
      _vI96401_spos  = 0; //init
      _vI96398_m = _vI96378_k_param_std_1958.size(); //assign simple
      _vI96399_o = ::flx::rtl::strutil::substr(_vI96379_v,0,_vI96401_spos); //assign simple
      _vI96400_n = _vI96379_v.find(_vI96378_k_param_std_1958,_vI96401_spos); //assign simple
    continue__ll_strings_7305_L96402:;
      if(FLX_UNLIKELY(!(!((_vI96400_n == ::std::string::npos)) ) )) goto break__ll_strings_7305_L96403;
      {
      _a13708t_107090* _tmp107851 = (_a13708t_107090*)&_vI96399_o;
      _a13708t_107090 _tmp107852 = ::flx::rtl::strutil::substr(_vI96379_v,_vI96401_spos,_vI96400_n) + _vI96377_b_param_std_1959 ;
      ((_tmp107851))->append((_tmp107852));
      }
      _vI96401_spos = _vI96400_n + _vI96398_m ; //assign simple
      _vI96400_n = ((_vI96379_v.find(_vI96378_k_param_std_1958,_vI96401_spos)))/*int.flx: ctor size IDENT*/; //assign simple
      goto continue__ll_strings_7305_L96402;
    break__ll_strings_7305_L96403:;
      {
      _a13708t_107090* _tmp107853 = (_a13708t_107090*)&_vI96399_o;
      _a13708t_107090 _tmp107854 = ::flx::rtl::strutil::substr(_vI96379_v,_vI96401_spos,_vI96379_v.size());
      ((_tmp107853))->append((_tmp107854));
      }
      _vI96379_v = _vI96399_o; //assign simple
      goto continue__ll_strings_7319_L96380;
    _ml2303_L96381:;
/*match case 2:|Some any*/
      if(!andthen(FLX_VNI(_vI96374_search_and_replace__apos_2_mv_2301)==1, (FLX_NEWP(_fI96404__lam_2306)(FLX_FPAR_PASS this, ptr_lam_64707, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml2305_L96382;
      goto continue__ll_strings_7319_L96380;
    _ml2305_L96382:;
/*match case 3:|None*/
      if(!(FLX_VNI(_vI96374_search_and_replace__apos_2_mv_2301)==0) ) goto _ml2307_L96383;
      goto _em2301_L96384;
    _ml2307_L96383:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9);
;
    _em2301_L96384:;
      return _vI96379_v;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",742,3,742,4); // HACK! 
}

//------------------------------
//FUNCTION <88868>: get_dflt_uncurry: Apply method
_a5050t_107416 get_dflt_uncurry::apply(_tt107472 const &_arg ){
  x_uncurry = _arg.mem_0;
  _vI89665_key = _arg.mem_1;
  dflt = _arg.mem_2;
      _vI94336_key  = _vI89665_key; //init
      {
      char* _tmp107856 = ((char*)((_a13708t_107090*)&_vI94336_key)->c_str());
      JError_t* _tmp107857 = (JError_t*)&_vI94337_err;
      _a13298t_107433** _tmp107858 = (_a13298t_107433**)((_a5050t_107416***)&_vI94338_slot);
      *((_tmp107858))=(Word_t*)JudySLGet(*x_uncurry,(unsigned char*)((_tmp107856)),((_tmp107857)));
      }
      _vI94340_get__apos_2_mv_1761  = (0==_vI94338_slot); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI94340_get__apos_2_mv_1761%2==1) ) goto _ml1763_L94339;
      _vI94334_get_dflt__apos_2_mv_1766  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_get_uncurry_94323_L94341;
    _ml1763_L94339:;
/*match case 2:any*/
      _vI94334_get_dflt__apos_2_mv_1766  = FLX_VNR(1, new(*PTF gcp, _a5050t_107416_ptr_map, true) _a5050t_107416 (*(*_vI94338_slot ) )); //init
    _end_inline_get_uncurry_94323_L94341:;
/*begin match*/
/*match case 1:|Some v_param_std_1729*/
      if(!andthen(FLX_VNI(_vI94334_get_dflt__apos_2_mv_1766)==1, (FLX_NEWP(_lam_1769)(FLX_FPAR_PASS this))) ) goto _ml1768_L94333;
      v_param_std_1729 = *((_a5050t_107416*)FLX_VNP(_vI94334_get_dflt__apos_2_mv_1766)); //assign simple
      return v_param_std_1729;
    _ml1768_L94333:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI94334_get_dflt__apos_2_mv_1766)==0) ) goto _ml1770_L94332;
      return dflt;
    _ml1770_L94332:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/trees.fdoc",1275,5,1275,20);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/trees.fdoc",1277,3,1277,4); // HACK! 
}

//------------------------------
//FUNCTION <97158>: flx_pkgconfig::parse_args::aux: Apply method
void* _fI97158_aux::apply(_at107115 const &_arg ){
  _vI97159_inp = _arg.data[0];
  _vI97160_out = _arg.data[1];
    start_95901_L97179:;
      _vI97163_aux_mv_1434  = _vI97159_inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97163_aux_mv_1434)==0) ) goto _ml1436_L97162;
      return _fI97166_aux_uncurry(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97160_out, ::std::string("Requires")))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1436_L97162:;
/*match case 2:|Snoc (t_param_std_1242, h_param_std_1243)*/
      if(!andthen(FLX_VNI(_vI97163_aux_mv_1434)==1, (FLX_NEWP(_fI97176__lam_1443)(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1437_L97161;
      _vI97164_h_param_std_1243 = (*((_tt107095*)FLX_VNP(_vI97163_aux_mv_1434))).mem_1; //assign simple
      _vI97165_t_param_std_1242 = (*((_tt107095*)FLX_VNP(_vI97163_aux_mv_1434))).mem_0; //assign simple
      _vI97178_aux_mv_1439  = !eq(_vI97164_h_param_std_1243, ::std::string("Requires")) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI97178_aux_mv_1439%2==1) ) goto _ml1441_L97177;
/*parallel assignment*/
      _vI97160_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97160_out, _vI97164_h_param_std_1243))); //init
      _vI97159_inp  = _vI97165_t_param_std_1242; //init
      goto start_95901_L97179;
    _ml1441_L97177:;
/*match case 2:any*/
/*parallel assignment*/
      _vI97159_inp  = _vI97165_t_param_std_1242; //init
      goto start_95901_L97179;
    _ml1437_L97161:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",582,7,582,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",584,5,584,6); // HACK! 
}

//------------------------------
//FUNCTION <89247>: toolchain_clang_apple_iOS_maker_uncurry::cxx_static_library_object_compiler: Apply method
int _fI89247_cxx_static_library_object_compiler::apply(_art107177 const &_arg ){
  _vI89249_spec = _arg;
      _vI89248_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89211_base_cxx_compile_flags, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89202_cxx_compiler, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.header_search_dirs, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.macros, ::std::string("FLX_STATIC_LINK")))), ::std::string("-o "), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89249_spec.src, _vI89249_spec.dst)) /* apply_stack */; //assign simple
      return _vI89248_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2108,3,2108,4); // HACK! 
}

//------------------------------
//FUNCTION <66151>: toolchain_clang_linux::c_static_object_compiler: Apply method
int _fI66151_c_static_object_compiler::apply(_art107177 const &_arg ){
  _vI66154_spec = _arg;
      _vI66153_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_clang_linux->_vI66107_base_c_compile_flags, ptrtoolchain_clang_linux->_vI66102_c_compiler, ptrtoolchain_clang_linux->_vI66187_config.header_search_dirs, ptrtoolchain_clang_linux->_vI66187_config.macros, ::std::string("-o "), ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66154_spec.src, _vI66154_spec.dst)) /* apply_stack */; //assign simple
      return _vI66153_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1283,3,1283,4); // HACK! 
}

//------------------------------

//PROCEDURE <88908:> process_config_text_uncurry: Call method
void process_config_text_uncurry::stack_call(_tt107132 const &_arg){
  ::flx::rtl::con_t *cc = call(0,_arg);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * process_config_text_uncurry::call(::flx::rtl::con_t *_ptr_caller, _tt107132 const &_arg){
  _caller = _ptr_caller;
  cfg_uncurry = _arg.mem_0;
  _vI89157_text = _arg.mem_1;
  INIT_PC
  return this;
}

//PROCEDURE <88908:> process_config_text_uncurry: Resume method
::flx::rtl::con_t *process_config_text_uncurry::resume(){
      _genout_urv90970  = ::std::shared_ptr< ::re2::RE2>(new RE2((::std::string("([-a-zA-Z_]+) *: *(.*)")))); //init
      _vI89145_re = _genout_urv90970; //assign simple
      FLX_INSTALL_DIR = ::std::string(""); //assign simple
      _vI89147_lines = _fI91096_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(aux(FLX_FPAR_PASS this)
      .apply(_tt107116(_vI89157_text, (void* /*VR_nullptr*/ )0)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      _vI91110_xs  = _vI89147_lines; //init
      _genout_urv91109  = (FLX_NEWP(_fI91111_iterator__apos_2)(FLX_FPAR_PASS this)); //init
      _generator_flx_9834 = _genout_urv91109; //assign simple
    continue__ll_flx_9785_L89158:;
      _vI89127_process_config_text__apos_2_mv_2893  = (_generator_flx_9834)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some line_param_std_2870*/
      if(!andthen(FLX_VNI(_vI89127_process_config_text__apos_2_mv_2893)==1, (FLX_NEWP(_lam_2916)(FLX_FPAR_PASS this))) ) goto _ml2895_L89176;
      line_param_std_2870 = *((_a13708t_107090*)FLX_VNP(_vI89127_process_config_text__apos_2_mv_2893)); //assign simple
      _genout_urv91237  = Match(FLX_FPAR_PASS _vI89145_re, line_param_std_2870); //init
      _vI89151_found = _genout_urv91237; //assign simple
      _vI89130_process_config_text__apos_2_mv_2896  = _vI89151_found; //init
/*begin match*/
/*match case 1:(|Some v_param_std_2872_param_std_2878 when (== ((int (len v_param_std_2872_param_std_2878)), 3)))*/
      if(!andthen(andthen(FLX_VNI(_vI89130_process_config_text__apos_2_mv_2896)==1, (FLX_NEWP(_lam_2913)(FLX_FPAR_PASS this))), (FLX_NEWP(_lam_2914)(FLX_FPAR_PASS this))) ) goto _ml2898_L89173;
      v_param_std_2872_param_std_2878 = *((_poly_79881t_107147*)FLX_VNP(_vI89130_process_config_text__apos_2_mv_2896)); //assign simple
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(1)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < (PTF gcp->collector->get_used(v_param_std_2872_param_std_2878))))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      p = v_param_std_2872_param_std_2878[(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(1)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)]; //assign simple
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(2)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < (PTF gcp->collector->get_used(v_param_std_2872_param_std_2878))))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      _vI89156_a = lstrip(rstrip(v_param_std_2872_param_std_2878[(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(2)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)], ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //assign simple
      _vI89133_process_config_text__apos_2_mv_2899  = p; //init
/*begin match*/
/*match case 1:"FLX_INSTALL_DIR"*/
      if(!((::std::string("FLX_INSTALL_DIR") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2901_L89159;
      FLX_INSTALL_DIR = _vI89156_a; //assign simple
      *(&cfg_uncurry->FLX_TARGET_DIR)  = _fI82124_join(_vI89156_a, ::std::string("host")); //assign simple
      *(&cfg_uncurry->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(_fI82124_join(_vI89156_a, ::std::string("host")), ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS cfg_uncurry);
      *(&cfg_uncurry->FLX_SHARE_DIR)  = _fI82124_join(_vI89156_a, ::std::string("share")); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS cfg_uncurry);
      goto continue__ll_flx_9785_L89158;
    _ml2901_L89159:;
/*match case 2:"FLX_TARGET_SUBDIR"*/
      if(!((::std::string("FLX_TARGET_SUBDIR") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2902_L89162;
      if(!(!((FLX_INSTALL_DIR == ::std::string(""))) ) ) goto _ifdoend_std_2874_L89160;
      *(&cfg_uncurry->FLX_TARGET_DIR)  = _fI82124_join(FLX_INSTALL_DIR, _vI89156_a); //assign simple
      *(&cfg_uncurry->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(_fI82124_join(FLX_INSTALL_DIR, _vI89156_a), ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS cfg_uncurry);
      goto continue__ll_flx_9785_L89158;
    _ifdoend_std_2874_L89160:;
      {
      _a13708t_107090 _tmp107861 = ::std::string("Cannot set FLX_TARGET_SUBDIR without setting FLX_INSTALL_DIR") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107861)));
      }
      fflush(stderr);
      ::std::exit(1);
      goto continue__ll_flx_9785_L89158;
    _ml2902_L89162:;
/*match case 3:"FLX_SHARE_DIR"*/
      if(!((::std::string("FLX_SHARE_DIR") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2903_L89163;
      *(&cfg_uncurry->FLX_SHARE_DIR)  = _vI89156_a; //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS cfg_uncurry);
      goto continue__ll_flx_9785_L89158;
    _ml2903_L89163:;
/*match case 4:"FLX_TARGET_DIR"*/
      if(!((::std::string("FLX_TARGET_DIR") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2904_L89164;
      *(&cfg_uncurry->FLX_TARGET_DIR)  = _vI89156_a; //assign simple
      *(&cfg_uncurry->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(_vI89156_a, ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS cfg_uncurry);
      goto continue__ll_flx_9785_L89158;
    _ml2904_L89164:;
/*match case 5:"FLX_HOME_DIR"*/
      if(!((::std::string("FLX_HOME_DIR") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2905_L89165;
      *(&cfg_uncurry->FLX_HOME_DIR)  = _vI89156_a; //assign simple
      *(&cfg_uncurry->FLX_PROFILE_DIR)  = _fI82124_join(_vI89156_a, ::std::string("config")); //assign simple
      *(&cfg_uncurry->FLX_CACHE_DIR)  = _fI82124_join(_fI82124_join(_vI89156_a, ::std::string("cache")), ::std::string("binary")); //assign simple
      *(&cfg_uncurry->FLX_OUTPUT_DIR)  = _fI82124_join(_fI82124_join(_vI89156_a, ::std::string("cache")), ::std::string("text")); //assign simple
      goto continue__ll_flx_9785_L89158;
    _ml2905_L89165:;
/*match case 6:"FLX_PROFILE_DIR"*/
      if(!((::std::string("FLX_PROFILE_DIR") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2906_L89166;
      *(&cfg_uncurry->FLX_PROFILE_DIR)  = _vI89156_a; //assign simple
      goto continue__ll_flx_9785_L89158;
    _ml2906_L89166:;
/*match case 7:"FLX_CONFIG_DIRS"*/
      if(!((::std::string("FLX_CONFIG_DIRS") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2907_L89167;
      _vI91688_state = respectful_parse_uncurry_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107142(_art107141(/*VR_int*/1, /*VR_int*/1, /*VR_int*/1), _art107137(::std::string(""), /*VR_int*/1, (void* /*VR_nullptr*/ )0), _vI89156_a)) /* apply_stack */; //assign simple
      _vI91687_respectful_split__apos_2_mv_2297  = _vI91688_state.mode; //init
/*begin match*/
/*match case 1:|skipping*/
      if(!(_vI91687_respectful_split__apos_2_mv_2297%7==1) ) goto _ml2299_L91689;
      goto _em2297_L91690;
    _ml2299_L91689:;
/*match case 2:any*/
      _vI91688_state.parsed = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI91688_state.parsed, _vI91688_state.current)) /* apply_stack */; //assign simple
    _em2297_L91690:;
      *(&cfg_uncurry->FLX_CONFIG_DIRS)  = _vI91688_state.parsed; //assign simple
      goto continue__ll_flx_9785_L89158;
    _ml2907_L89167:;
/*match case 8:"FLX_CACHE_DIR"*/
      if(!((::std::string("FLX_CACHE_DIR") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2908_L89168;
      *(&cfg_uncurry->FLX_CACHE_DIR)  = _vI89156_a; //assign simple
      goto continue__ll_flx_9785_L89158;
    _ml2908_L89168:;
/*match case 9:"FLX_OUTPUT_DIR"*/
      if(!((::std::string("FLX_OUTPUT_DIR") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2909_L89169;
      *(&cfg_uncurry->FLX_OUTPUT_DIR)  = _vI89156_a; //assign simple
      goto continue__ll_flx_9785_L89158;
    _ml2909_L89169:;
/*match case 10:"FLX_LIB_DIRS"*/
      if(!((::std::string("FLX_LIB_DIRS") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto _ml2910_L89170;
      _vI91705_state = respectful_parse_uncurry_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107142(_art107141(/*VR_int*/1, /*VR_int*/1, /*VR_int*/1), _art107137(::std::string(""), /*VR_int*/1, (void* /*VR_nullptr*/ )0), _vI89156_a)) /* apply_stack */; //assign simple
      _vI91704_respectful_split__apos_2_mv_2297  = _vI91705_state.mode; //init
/*begin match*/
/*match case 1:|skipping*/
      if(!(_vI91704_respectful_split__apos_2_mv_2297%7==1) ) goto _ml2299_L91706;
      goto _em2297_L91707;
    _ml2299_L91706:;
/*match case 2:any*/
      _vI91705_state.parsed = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI91705_state.parsed, _vI91705_state.current)) /* apply_stack */; //assign simple
    _em2297_L91707:;
      *(&cfg_uncurry->FLX_LIB_DIRS)  = _vI91705_state.parsed; //assign simple
      goto continue__ll_flx_9785_L89158;
    _ml2910_L89170:;
/*match case 11:"FLX_RTL_DIRS"*/
      if(!((::std::string("FLX_RTL_DIRS") == _vI89133_process_config_text__apos_2_mv_2899)) ) goto continue__ll_flx_9785_L89158;
      _vI91716_state = respectful_parse_uncurry_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107142(_art107141(/*VR_int*/1, /*VR_int*/1, /*VR_int*/1), _art107137(::std::string(""), /*VR_int*/1, (void* /*VR_nullptr*/ )0), _vI89156_a)) /* apply_stack */; //assign simple
      _vI91715_respectful_split__apos_2_mv_2297  = _vI91716_state.mode; //init
/*begin match*/
/*match case 1:|skipping*/
      if(!(_vI91715_respectful_split__apos_2_mv_2297%7==1) ) goto _ml2299_L91717;
      goto _em2297_L91718;
    _ml2299_L91717:;
/*match case 2:any*/
      _vI91716_state.parsed = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI91716_state.parsed, _vI91716_state.current)) /* apply_stack */; //assign simple
    _em2297_L91718:;
      *(&cfg_uncurry->FLX_RTL_DIRS)  = _vI91716_state.parsed; //assign simple
      goto continue__ll_flx_9785_L89158;
/*match case 12:any*/
      goto continue__ll_flx_9785_L89158;
      goto continue__ll_flx_9785_L89158;
    _ml2898_L89173:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI89130_process_config_text__apos_2_mv_2896)==0) ) goto _ml2915_L89174;
      goto continue__ll_flx_9785_L89158;
    _ml2915_L89174:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",566,7,566,16);
;
      goto continue__ll_flx_9785_L89158;
    _ml2895_L89176:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI89127_process_config_text__apos_2_mv_2893)==0) ) goto _ml2917_L89177;
      FLX_RETURN // procedure return
    _ml2917_L89177:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",567,5,567,9);
;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <97589>: map_package_requirements_uncurry::aux_uncurry: Apply method
_a13708t_107090 _fI97589_aux_uncurry::apply(_tt107116 const &_arg ){
  _vI97590_init_uncurry = _arg.mem_0;
  _vI97591_x = _arg.mem_1;
    start_95154_L97598:;
      _vI97594_aux__apos_2_mv_1297  = _vI97591_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97594_aux__apos_2_mv_1297)==0) ) goto _ml1299_L97593;
      return _vI97590_init_uncurry;
    _ml1299_L97593:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI97594_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI97597__lam_1301)(FLX_FPAR_PASS this, ptrmap_package_requirements_uncurry))) ) goto _ml1300_L97592;
      _vI97595_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI97594_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI97596_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI97594_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI97591_x  = _vI97596_t_param_std_1199; //init
      _vI97590_init_uncurry  = ((FLX_NEWP(join)(FLX_FPAR_PASS_ONLY))
      ->apply(_vI97590_init_uncurry))->clone()
      ->apply(_vI97595_h_param_std_1200) /* general apply */; //init
      goto start_95154_L97598;
    _ml1300_L97592:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <96065>: flx_pkgconfig::get_variable::_lam_64695: Apply method
 ::flx::rtl::cl_t _lam_64695::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",265,11,265,16); // HACK! 
}

//------------------------------
//FUNCTION <66076>: toolchain_gcc_osx::cxx_dynamic_object_compiler: Apply method
int _fI66076_cxx_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI66079_spec = _arg;
      _vI66078_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_osx->_vI66016_base_cxx_compile_flags, ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_gcc_osx->_vI66013_linker, ptrtoolchain_gcc_osx->_vI66096_config.header_search_dirs, ptrtoolchain_gcc_osx->_vI66096_config.macros, ::std::string("-o "), ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66079_spec.src, _vI66079_spec.dst)) /* apply_stack */; //assign simple
      return _vI66078_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1105,3,1105,4); // HACK! 
}

//------------------------------
//FUNCTION <105113>: flx_processing::aux_uncurry::_lam_1280: Apply method
 ::flx::rtl::cl_t _fI105113__lam_1280::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",202,11,202,19); // HACK! 
}

//------------------------------
//FUNCTION <106335>: flx_processing::check_binary_uptodate::maxf::maxf'2: Apply method
double _fI106335_maxf__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI106336_f = _arg;
      _vI106886_max_mv_106  = (ptr_fI106334_maxf->_vI106337_t < dfiletime(_vI106336_f, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)))); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106886_max_mv_106%2==1) ) goto _ml108_L106885;
      return dfiletime(_vI106336_f, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)));
    _ml108_L106885:;
/*match case 2:any*/
      return ptr_fI106334_maxf->_vI106337_t;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2723,5,2723,95); // HACK! 
}

//------------------------------
//FUNCTION <105796>: flx_processing::ocaml_compile::dxqt'2::_lam_65434: Apply method
 ::flx::rtl::cl_t _fI105796__lam_65434::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1949,9,1949,14); // HACK! 
}

//------------------------------
//FUNCTION <92303>: toolchain_msvc_win32::dependency_parser::iterator'2: Apply method
void* _fI92303_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L92304:;
      _vI92308_iterator__apos_2_mv_1504  = ptrdependency_parser->_vI92302_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI92308_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI92311__lam_1507)(FLX_FPAR_PASS this, ptrdependency_parser, ptrtoolchain_msvc_win32))) ) goto _ml1506_L92307;
      _vI92309_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI92308_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI92310_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI92308_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrdependency_parser->_vI92302_xs = _vI92310_t_param_std_1259; //assign simple
      FLX_SET_PC(107865)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI92309_h_param_std_1260));//yield
    FLX_CASE_LABEL(107865)
      goto continue__ll_lists_5177_L92304;
    _ml1506_L92307:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI92308_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L92306;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L92306:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L92304;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <89259>: toolchain_clang_apple_iOS_maker_uncurry::dynamic_executable_linker: Apply method
int _fI89259_dynamic_executable_linker::apply(_art107181 const &_arg ){
  _vI89261_spec = _arg;
      _vI89260_result = generic_link_exe_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89203_linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.library_search_dirs, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89261_spec.srcs, _vI89261_spec.dst)) /* apply_stack */; //assign simple
      return _vI89260_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2173,3,2173,4); // HACK! 
}

//------------------------------
//FUNCTION <65718>: toolchain_msvc_win32::static_library_extension: Apply method
_a13708t_107090 static_library_extension::apply(){
      return ::std::string(".lib");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1739,3,1739,51); // HACK! 
}

//------------------------------
//FUNCTION <105296>: flx_processing::cxx_link_shared_exe: Apply method
int cxx_link_shared_exe::apply(_pt107161* const &_arg ){
  _vI105310_ehandler = _arg;
      {
      __timeb64* _tmp107867 = (__timeb64*)&_vI105831_tv;
      _ftime64_s(((_tmp107867)));
      }
      _genout_urv99344  = (static_cast<double>((_vI105831_tv.time))) + ((static_cast<double>((_vI105831_tv.millitm))) / 1.0e3 ) ; //init
      _vI105297_t0 = _genout_urv99344; //assign simple
      _vI105298_pkg_dstrings = (void* /*VR_nullptr*/ )0; //assign simple
      _vI105299_pkgs = ptrflx_processing->_vI105441_control.extra_pkgs; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI105299_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65354_L105314;
      {
      _a13708t_107090 _tmp107868 = (::std::string("[flx:cxx_link_shared_exe] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105299_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107868)));
      }
      fflush(stderr);
      _vI105832_r = _fI105833_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107869 = (void**)&_vI105832_r;
      _rev(((_tmp107869)),(_a13708t_107090*)0);
      }
      _vI105302_PKGCONFIG_PATH = _vI105832_r; //assign simple
      _vI105303_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI105302_PKGCONFIG_PATH, ::std::string("-r"))) /* apply_stack */, ::std::string("--field=provides_dlib"))) /* apply_stack */, ::std::string("--field=requires_dlibs"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI105299_pkgs)) /* apply_stack */, ptrflx_processing->_vI105441_control.pkgs)) /* apply_stack */; //assign simple
      _genout_urv99385  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI105303_allargs) /* apply_stack */; //init
      _ds2_65519 = _genout_urv99385; //assign simple
      _vI105305_ret = _ds2_65519.mem_0; //assign simple
      _vI105306_mydstrings = _ds2_65519.mem_1; //assign simple
      if(!(!((_vI105305_ret == 0)) ) ) goto _ifdoelse_bootflx_65356_L105312;
      {
      _a13708t_107090 _tmp107870 = (((::std::string("[flx:cxx_link_shared_exe] Error ") + ::flx::rtl::strutil::str<int>(_vI105305_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105303_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107870)));
      }
      fflush(stderr);
      {
      _a6203t_107291 _tmp107871 = (_a6203t_107291)(_vI105310_ehandler);
      throw ((_tmp107871));
      }
    _ifdoelse_bootflx_65356_L105312:;
      _vI105298_pkg_dstrings = _vI105306_mydstrings; //assign simple
    _ifdoelse_bootflx_65354_L105314:;
      _vI105845_cxx_link_shared_exe_mv_65521  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105845_cxx_link_shared_exe_mv_65521%2==1) ) goto _ml65523_L105846;
      _urv99396  = (FLX_NEWP(echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_719281519;
    _ml65523_L105846:;
/*match case 2:any*/
      _urv99396  = (FLX_NEWP(_pI105442_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_719281519:;
      cxx_link_shared_exe_mv_65521  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(cxx_link_shared_exe_mv_65521%2==1) ) goto _ml65523_L105850;
      goto _end_hash_593956258;
    _ml65523_L105850:;
/*match case 2:any*/
    _end_hash_593956258:;
      _vI105307_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(ptrflx_processing->_vI105142_dflt_clang_config.ccflags, _urv99396, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.LINK_STRINGS, _vI105298_pkg_dstrings)) /* apply_stack */, ptrflx_processing->_vI105142_dflt_clang_config.header_search_dirs, ptrflx_processing->_vI105142_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI105142_dflt_clang_config.macros, ptrflx_processing->_vI105142_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      {
      _a13708t_107090 _tmp107872 = (::std::string("Toolchain loaded ") + (_vI105307_tc.whatami)->clone()
      ->apply() /* general apply */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107872)));
      }
      fflush(stdout);
      EXT_DYNAMIC_OBJ = (_vI105307_tc.dynamic_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI105441_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65357_L105315;
      _vI105309_result = (_vI105307_tc.dynamic_executable_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME, _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.DRIVER_OBJS, ptrflx_processing->_vI105441_control.cppos)) /* apply_stack */, (ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string("_static_link_thunk") ) + EXT_DYNAMIC_OBJ )) /* apply_stack */, ptrflx_processing->_vI105038_dvars.cpp_filebase + EXT_DYNAMIC_OBJ )) /* apply_stack */)) /* general apply */; //assign simple
      goto _ifdoelse_bootflx_65358_L105316;
    _ifdoend_bootflx_65357_L105315:;
      _vI105309_result = (_vI105307_tc.dynamic_executable_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME, ptrflx_processing->_vI105441_control.cppos)) /* general apply */; //assign simple
    _ifdoelse_bootflx_65358_L105316:;
      if(!((ptrflx_processing->_vI105441_control.TIME == 1)) ) goto _end_99435_L105859;
      {
      __timeb64* _tmp107873 = (__timeb64*)&_vI105858_tv;
      _ftime64_s(((_tmp107873)));
      }
      _vI105857__genout_urv95543  = (static_cast<double>((_vI105858_tv.time))) + ((static_cast<double>((_vI105858_tv.millitm))) / 1.0e3 ) ; //init
      _vI105852_elapsed = _vI105857__genout_urv95543 - _vI105297_t0 ; //assign simple
      _vI105853_minutes = ::std::floor((_vI105852_elapsed / 60.0 )); //assign simple
      _vI105854_seconds = _vI105852_elapsed - (_vI105853_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp107874 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105853_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105854_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Dynamic executable link  : ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107874)));
      }
      fflush(stdout);
    _end_99435_L105859:;
      if(!(!((_vI105309_result == 0)) ) ) goto _ifdoelse_bootflx_65360_L105318;
      {
      _a13708t_107090 _tmp107875 = ((::std::string("[flx] C++ dynamic executable link ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107875)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65360_L105318:;
      return _vI105309_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2604,3,2604,4); // HACK! 
}

//------------------------------
//FUNCTION <66163>: toolchain_clang_linux::cxx_static_library_object_compiler: Apply method
int _fI66163_cxx_static_library_object_compiler::apply(_art107177 const &_arg ){
  _vI66166_spec = _arg;
      _vI66165_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_clang_linux->_vI66106_base_cxx_compile_flags, ptrtoolchain_clang_linux->_vI66103_cxx_compiler, ptrtoolchain_clang_linux->_vI66187_config.header_search_dirs, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_linux->_vI66187_config.macros, ::std::string("FLX_STATIC_LINK")))), ::std::string("-o "), ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66166_spec.src, _vI66166_spec.dst)) /* apply_stack */; //assign simple
      return _vI66165_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1335,3,1335,4); // HACK! 
}

//------------------------------
//FUNCTION <105106>: flx_processing::aux_uncurry: Apply method
_a5038t_107106 _fI105106_aux_uncurry::apply(_tt107146 const &_arg ){
  _vI105107_acc_uncurry = _arg.mem_0;
  _vI105108_x = _arg.mem_1;
    start_94672_L105114:;
      _vI105111_aux__apos_2_mv_1276  = _vI105108_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105111_aux__apos_2_mv_1276)==0) ) goto _ml1278_L105110;
      return _vI105107_acc_uncurry;
    _ml1278_L105110:;
/*match case 2:|Snoc (t_param_std_1193, any)*/
      if(!andthen(FLX_VNI(_vI105111_aux__apos_2_mv_1276)==1, (FLX_NEWP(_fI105113__lam_1280)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml1279_L105109;
      _vI105112_t_param_std_1193 = (*((_tt107095*)FLX_VNP(_vI105111_aux__apos_2_mv_1276))).mem_0; //assign simple
/*parallel assignment*/
      _vI105108_x  = _vI105112_t_param_std_1193; //init
      _vI105107_acc_uncurry  = _vI105107_acc_uncurry + 1 ; //init
      goto start_94672_L105114;
    _ml1279_L105109:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",202,9,202,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",204,7,204,8); // HACK! 
}

//------------------------------
//FUNCTION <92315>: toolchain_msvc_win32::dependency_parser::_lam_65672: Apply method
 ::flx::rtl::cl_t _lam_65672::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1831,4,1831,8); // HACK! 
}

//------------------------------
//FUNCTION <83466>: split1: Apply method
_at107092 split1::apply(_a13708t_107090 const &_arg ){
  _vI83468_s = _arg;
      find_last_of_mv_2146  = _vI83468_s.find_last_of((::std::string("\\"))); //init
/*begin match*/
/*match case 1:(i_param_std_1873 when (== (i_param_std_1873, stl_npos)))*/
      if(!((find_last_of_mv_2146 == ::std::string::npos)) ) goto _ml2148_L94795;
      split1_mv_627  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_last_of_94772_L94796;
    _ml2148_L94795:;
/*match case 2:i_param_std_1874*/
      i_param_std_1874 = find_last_of_mv_2146; //assign simple
      split1_mv_627  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (i_param_std_1874)); //init
    _end_inline_find_last_of_94772_L94796:;
/*begin match*/
/*match case 1:|Some pos_param_std_613*/
      if(!andthen(FLX_VNI(split1_mv_627)==1, (FLX_NEWP(_lam_635)(FLX_FPAR_PASS this))) ) goto _ml629_L94790;
      pos_param_std_613 = *((_a5038t_107106*)FLX_VNP(split1_mv_627)); //assign simple
      split1_mv_631  = (pos_param_std_613 == 0); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(split1_mv_631%2==1) ) goto _ml633_L94799;
      _urv94777  = ::std::string("\\"); //init
      goto _end_inline_split1_mf_630_94781_L94801;
    _ml633_L94799:;
/*match case 2:any*/
      _urv94777  = ::flx::rtl::strutil::substr(_vI83468_s,0,pos_param_std_613); //init
    _end_inline_split1_mf_630_94781_L94801:;
      return _at107092(_urv94777, ::flx::rtl::strutil::substr(_vI83468_s,pos_param_std_613 + ::std::string("\\").size() ,_vI83468_s.size()));
    _ml629_L94790:;
/*match case 2:|None*/
      if(!(FLX_VNI(split1_mv_627)==0) ) goto _ml636_L94789;
      return _at107092(::std::string(""), _vI83468_s);
    _ml636_L94789:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",45,26,45,20);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",47,3,47,4); // HACK! 
}

//------------------------------
//FUNCTION <96419>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI96419__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <97441>: map_package_requirements_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI97441__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <105559>: flx_processing::cal_time_from_flxdepfile::aux_uncurry: Apply method
double _fI105559_aux_uncurry::apply(_tt107527 const &_arg ){
  _vI105560_init_uncurry = _arg.mem_0;
  _vI105561_x = _arg.mem_1;
    start_97926_L105568:;
      _vI105564_aux__apos_2_mv_1297  = _vI105561_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105564_aux__apos_2_mv_1297)==0) ) goto _ml1299_L105563;
      return _vI105560_init_uncurry;
    _ml1299_L105563:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI105564_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI105567__lam_1301)(FLX_FPAR_PASS this, ptrcal_time_from_flxdepfile, ptrflx_processing))) ) goto _ml1300_L105562;
      _vI105565_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI105564_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI105566_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI105564_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI105561_x  = _vI105566_t_param_std_1199; //init
      _vI105560_init_uncurry  = ((FLX_NEWP(_fI105180_maxf)(FLX_FPAR_PASS ptrcal_time_from_flxdepfile, ptrflx_processing))
      ->apply(_vI105560_init_uncurry))->clone()
      ->apply(_vI105565_h_param_std_1200) /* general apply */; //init
      goto start_97926_L105568;
    _ml1300_L105562:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <105083>: flx_processing::rfi::_lam_816: Apply method
 ::flx::rtl::cl_t _lam_816::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",587,9,587,18); // HACK! 
}

//------------------------------
//C FUNC <82374>: basic_get_stdout
_tt107175 basic_get_stdout(_a13708t_107090 _vI82375_cmd){
  _a16509t_107390 _genout_urv92109;
  _a13708t_107090 _genout_urv92108;
   ::flx::rtl::cl_t _genout_urv92107;
  _a7856t_107294 _genout_urv92106;
  _a16509t_107390 _genout_urv92085;
  _a13708t_107090 _genout_urv92084;
   ::flx::rtl::cl_t _genout_urv92083;
  _a7856t_107294 _genout_urv92082;
  _a16509t_107390 _vI92098_result;
  _a13708t_107090 _vI92097_output;
  _a7856t_107294 fout;
      _genout_urv92106  = _popen(((::std::string("\"") + _vI82375_cmd ) + ::std::string("\"") ).c_str(), "r"); //init
      _genout_urv92082  = _genout_urv92106; //init
      fout = _genout_urv92082; //assign simple
      _genout_urv92107  = fout!=(FILE*)0; //init
      _genout_urv92083  = _genout_urv92107; //init
      if(!_genout_urv92083 ) goto _ifdoend_std_2736_L92100;
      _genout_urv92108  = ::flx::rtl::ioutil::load_file(fout); //init
      _genout_urv92084  = _genout_urv92108; //init
      _vI92097_output = _genout_urv92084; //assign simple
      _genout_urv92109  = _pclose(fout); //init
      _genout_urv92085  = _genout_urv92109; //init
      _vI92098_result = _genout_urv92085; //assign simple
      return _tt107175((int)_vI92098_result , _vI92097_output);
    _ifdoend_std_2736_L92100:;
      {
      _a13708t_107090 _tmp107879 = (::std::string("Unable to run command '") + (((::std::string("\"") + _vI82375_cmd ) + ::std::string("\"") ) + ::std::string("'") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107879)));
      }
      fflush(stdout);
      return _tt107175(-1, ::std::string(""));
}
//------------------------------
//FUNCTION <66341>: toolchain_clang_osx::debug_flags: Apply method
void* _fI66341_debug_flags::apply(){
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-g"))));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1467,3,1467,49); // HACK! 
}

//------------------------------
//FUNCTION <67446>: exts::_lam_65071: Apply method
_at107092 _lam_65071::apply(_a13708t_107090 const &_arg ){
  _vI67448_s = _arg;
      return _at107092(_vI67448_s, ::std::string("compile"));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1379,10,1379,38); // HACK! 
}

//------------------------------
//FUNCTION <105300>: flx_processing::cxx_link_shared_exe::_lam_65518: Apply method
_a13708t_107090 _lam_65518::apply(_a13708t_107090 const &_arg ){
  _vI105301_s = _arg;
      return ::std::string("--path+=") + _vI105301_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2551,11,2551,40); // HACK! 
}

//------------------------------
//FUNCTION <96198>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI96198__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <66132>: toolchain_clang_linux::get_base_c_compile_flags: Apply method
void* _fI66132_get_base_c_compile_flags::apply(){
      return ptrtoolchain_clang_linux->_vI66107_base_c_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1227,3,1227,65); // HACK! 
}

//------------------------------
//FUNCTION <106009>: flx_processing::run_program_dynamic::aux_uncurry: Apply method
void* _fI106009_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106010_inp_uncurry = _arg.data[0];
  _vI106011_out = _arg.data[1];
    start_90421_L106018:;
      _vI106014_aux__apos_2_mv_1322  = _vI106010_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106014_aux__apos_2_mv_1322)==0) ) goto _ml1324_L106013;
      return _vI106011_out;
    _ml1324_L106013:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI106014_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI106017__lam_1326)(FLX_FPAR_PASS this, ptrrun_program_dynamic, ptrflx_processing))) ) goto _ml1325_L106012;
      _vI106015_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI106014_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI106016_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI106014_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI106011_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106011_out, _fI14710_str(_vI106015_h_param_std_1208)))); //init
      _vI106010_inp_uncurry  = _vI106016_t_param_std_1207; //init
      goto start_90421_L106018;
    _ml1325_L106012:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <104868>: FlxPkgConfigQuery::getpkgfield_uncurry::_lam_64765: Apply method
 ::flx::rtl::cl_t _fI104868__lam_64765::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",495,9,495,13); // HACK! 
}

//------------------------------
//FUNCTION <88881>: generic_cxx_compile_for_static_uncurry: Apply method
int generic_cxx_compile_for_static_uncurry::apply(_tt107223 const &_arg ){
  spec_uncurry = _arg.mem_0;
  _vI89848_src = _arg.mem_1;
  _vI89849_dst = _arg.mem_2;
      _vI93054_r = _fI93055_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(spec_uncurry.INCLUDE_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107881 = (void**)&_vI93054_r;
      _rev(((_tmp107881)),(_a13708t_107090*)0);
      }
      _vI93075_r = _fI93076_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(spec_uncurry.MACROS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107882 = (void**)&_vI93075_r;
      _rev(((_tmp107882)),(_a13708t_107090*)0);
      }
      _vI89845_cmd = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(spec_uncurry.CCFLAGS, _vI93054_r)) /* apply_stack */, _vI93075_r)) /* apply_stack */, _vI89848_src)) /* apply_stack */, spec_uncurry.CCOBJ_STATIC_LIB))); //assign simple
      _vI93098_r = _fI93099_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89845_cmd, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107883 = (void**)&_vI93098_r;
      _rev(((_tmp107883)),(_a13708t_107090*)0);
      }
      _vI89846_CMD = (cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93098_r)) /* apply_stack */ + ::std::string(" ") ) + (spec_uncurry.SPEC_OBJ_FILENAME + ((::std::string("\"") + _vI89849_dst ) + ::std::string("\"") ) ) ; //assign simple
      {
        ::flx::rtl::con_t *_p = (spec_uncurry.debugln)->clone()
      ->call(0, ::std::string("C++ command=") + _vI89846_CMD );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_444_L93146;
      {
      _a13708t_107090 _tmp107884 = (::std::string("[system] ") + _vI89846_CMD ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107884)));
      }
      fflush(stderr);
    _ifdoelse_std_444_L93146:;
      _genout_urv93153  = ::std::system(((::std::string("\"") + _vI89846_CMD ) + ::std::string("\"") ).c_str()); //init
      _vI93150__genout_urv93142  = _genout_urv93153; //init
      _vI93149__genout_urv93134  = _vI93150__genout_urv93142; //init
      _vI93148__genout_urv93129  = _vI93149__genout_urv93134; //init
      _genout_urv93144  = _vI93148__genout_urv93129; //init
      _vI89847_result = _genout_urv93144; //assign simple
      if(!(!((_vI89847_result == 0)) ) ) goto _ifdoelse_bootflx_64815_L89851;
      {
      _a13708t_107090 _tmp107885 = ((::std::string("C++ compilation ") + _vI89848_src ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107885)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_64815_L89851:;
      return _vI89847_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",226,3,226,4); // HACK! 
}

//------------------------------
//FUNCTION <65952>: toolchain_gcc_linux::get_base_cxx_compile_flags: Apply method
void* _fI65952_get_base_cxx_compile_flags::apply(){
      return ptrtoolchain_gcc_linux->_vI65925_base_cxx_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",745,3,745,69); // HACK! 
}

//------------------------------
//FUNCTION <105863>: flx_processing::cxx_link_static_exe::aux_uncurry: Apply method
void* _fI105863_aux_uncurry::apply(_at107115 const &_arg ){
  _vI105864_inp_uncurry = _arg.data[0];
  _vI105865_out = _arg.data[1];
    start_90421_L105872:;
      _vI105868_aux__apos_2_mv_1322  = _vI105864_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105868_aux__apos_2_mv_1322)==0) ) goto _ml1324_L105867;
      return _vI105865_out;
    _ml1324_L105867:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI105868_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI105871__lam_1326)(FLX_FPAR_PASS this, ptrcxx_link_static_exe, ptrflx_processing))) ) goto _ml1325_L105866;
      _vI105869_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI105868_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI105870_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI105868_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI105865_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI105865_out, _lam_65525(ptrcxx_link_static_exe, ptrflx_processing)
      .apply(_vI105869_h_param_std_1208) /* apply_stack */))); //init
      _vI105864_inp_uncurry  = _vI105870_t_param_std_1207; //init
      goto start_90421_L105872;
    _ml1325_L105866:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <66321>: toolchain_clang_osx::host_os: Apply method
_a13708t_107090 _fI66321_host_os::apply(){
      return ::std::string("OSX");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1456,3,1456,33); // HACK! 
}

//------------------------------
//FUNCTION <65985>: toolchain_gcc_linux::cxx_dynamic_object_compiler: Apply method
int _fI65985_cxx_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI65988_spec = _arg;
      _vI65987_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_linux->_vI65925_base_cxx_compile_flags, ::std::string("-D_GLIBCXX_USE_CXX11_ABI=1")))), ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_gcc_linux->linker, ptrtoolchain_gcc_linux->_vI66005_config.header_search_dirs, ptrtoolchain_gcc_linux->_vI66005_config.macros, ::std::string("-o "), ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI65988_spec.src, _vI65988_spec.dst)) /* apply_stack */; //assign simple
      return _vI65987_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",871,3,871,4); // HACK! 
}

//------------------------------
//FUNCTION <66394>: toolchain_clang_osx::dynamic_library_linker: Apply method
int _fI66394_dynamic_library_linker::apply(_art107181 const &_arg ){
  _vI66397_spec = _arg;
      _vI66396_result = generic_link_lib_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107231(_art107230(ptrtoolchain_clang_osx->_vI66316_ccflags_for_dynamic_link, ptrtoolchain_clang_osx->_vI66315_linker, ::std::string(".dylib"), join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_clang_osx->_vI66398_config.library_search_dirs, ptrtoolchain_clang_osx->_vI66398_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66397_spec.srcs, _vI66397_spec.dst)) /* apply_stack */; //assign simple
      return _vI66396_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1659,3,1659,4); // HACK! 
}

//------------------------------
//FUNCTION <92189>: toolchain_msvc_win32::checkwarn::iterator'2: Apply method
void* _fI92189_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L92190:;
      _vI92194_iterator__apos_2_mv_1504  = ptrcheckwarn->xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI92194_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI92197__lam_1507)(FLX_FPAR_PASS this, ptrcheckwarn, ptrtoolchain_msvc_win32))) ) goto _ml1506_L92193;
      _vI92195_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI92194_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI92196_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI92194_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrcheckwarn->xs = _vI92196_t_param_std_1259; //assign simple
      FLX_SET_PC(107887)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI92195_h_param_std_1260));//yield
    FLX_CASE_LABEL(107887)
      goto continue__ll_lists_5177_L92190;
    _ml1506_L92193:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI92194_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L92192;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L92192:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L92190;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <105451>: flx_processing::cxx_compile_dynamic1_uncurry: Apply method
int cxx_compile_dynamic1_uncurry::apply(_tt107292 const &_arg ){
  _vI105493_ehandler_uncurry = _arg.mem_0;
  _vI105486_src = _arg.mem_1;
  _vI105487_dst = _arg.mem_2;
      {
      __timeb64* _tmp107889 = (__timeb64*)&_vI105642_tv;
      _ftime64_s(((_tmp107889)));
      }
      _genout_urv98327  = (static_cast<double>((_vI105642_tv.time))) + ((static_cast<double>((_vI105642_tv.millitm))) / 1.0e3 ) ; //init
      _vI105474_t0 = _genout_urv98327; //assign simple
      _vI105475_pkgs = find_cxx_pkgs(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105486_src) /* apply_stack */; //assign simple
      *(&((_art107120*)&ptrflx_processing->_vI105441_control)->extra_pkgs)  = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.extra_pkgs, _vI105475_pkgs)) /* apply_stack */; //assign simple
      _vI105476_pkg_cflags = (void* /*VR_nullptr*/ )0; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI105475_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65292_L105491;
      {
      _a13708t_107090 _tmp107890 = (::std::string("[flx:cxx_compile_dynamic1] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105475_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107890)));
      }
      fflush(stderr);
      _vI105643_r = _fI105644_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107891 = (void**)&_vI105643_r;
      _rev(((_tmp107891)),(_a13708t_107090*)0);
      }
      _vI105479_PKGCONFIG_PATH = _vI105643_r; //assign simple
      _vI105480_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI105479_PKGCONFIG_PATH, ::std::string("--field=cflags"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI105475_pkgs)) /* apply_stack */, ptrflx_processing->_vI105441_control.pkgs)) /* apply_stack */; //assign simple
      _genout_urv98374  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI105480_allargs) /* apply_stack */; //init
      _ds2_65482 = _genout_urv98374; //assign simple
      _vI105482_ret = _ds2_65482.mem_0; //assign simple
      _vI105483_mycflags = _ds2_65482.mem_1; //assign simple
      if(!(!((_vI105482_ret == 0)) ) ) goto _ifdoelse_bootflx_65294_L105489;
      {
      _a13708t_107090 _tmp107892 = (((::std::string("[flx:cxx_compile_dynamic1] Error ") + ::flx::rtl::strutil::str<int>(_vI105482_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105480_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107892)));
      }
      fflush(stderr);
      {
      _a6203t_107291 _tmp107893 = (_a6203t_107291)(_vI105493_ehandler_uncurry);
      throw ((_tmp107893));
      }
    _ifdoelse_bootflx_65294_L105489:;
      _vI105476_pkg_cflags = _vI105483_mycflags; //assign simple
    _ifdoelse_bootflx_65292_L105491:;
      _vI105656_cxx_compile_dynamic1__apos_2_mv_65484  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105656_cxx_compile_dynamic1__apos_2_mv_65484%2==1) ) goto _ml65486_L105657;
      goto _end_hash_640050368;
    _ml65486_L105657:;
/*match case 2:any*/
    _end_hash_640050368:;
      _vI105660_cxx_compile_dynamic1__apos_2_mv_65484  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105660_cxx_compile_dynamic1__apos_2_mv_65484%2==1) ) goto _ml65486_L105661;
      _urv98408  = (FLX_NEWP(echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_768191441;
    _ml65486_L105661:;
/*match case 2:any*/
      _urv98408  = (FLX_NEWP(_pI105442_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_768191441:;
      _vI105664_cxx_compile_dynamic1__apos_2_mv_65484  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105664_cxx_compile_dynamic1__apos_2_mv_65484%2==1) ) goto _ml65486_L105665;
      goto _end_hash_557588646;
    _ml65486_L105665:;
/*match case 2:any*/
    _end_hash_557588646:;
      _vI105668_cxx_compile_dynamic1__apos_2_mv_65484  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105668_cxx_compile_dynamic1__apos_2_mv_65484%2==1) ) goto _ml65486_L105669;
      goto _end_hash_199045719;
    _ml65486_L105669:;
/*match case 2:any*/
    _end_hash_199045719:;
      _vI105484_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.CCFLAGS, _vI105476_pkg_cflags)) /* apply_stack */, _urv98408, ptrflx_processing->_vI105142_dflt_clang_config.dynamic_libraries, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_RTL_DIRS, ptrflx_processing->_vI105441_control.EXTRA_INCLUDE_DIRS)) /* apply_stack */, ptrflx_processing->_vI105142_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI105441_control.MACROS, ptrflx_processing->_vI105142_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      _genout_urv98630  = cxx_depcheck(FLX_FPAR_PASS_ONLY)
      .apply(_tt107593(_vI105484_tc, _vI105486_src, _vI105487_dst)) /* apply_stack */; //init
      if(!((ptrflx_processing->_vI105441_control.RECOMPILE == 1) || !_genout_urv98630  ) ) goto _ifdoend_bootflx_65295_L105492;
      _vI105485_result = (_vI105484_tc.cxx_dynamic_object_compiler)->clone()
      ->apply(_art107177(_vI105487_dst, _vI105486_src)) /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI105441_control.TIME == 1)) ) goto _end_98640_L105679;
      {
      __timeb64* _tmp107894 = (__timeb64*)&_vI105678_tv;
      _ftime64_s(((_tmp107894)));
      }
      _vI105677__genout_urv95543  = (static_cast<double>((_vI105678_tv.time))) + ((static_cast<double>((_vI105678_tv.millitm))) / 1.0e3 ) ; //init
      _vI105672_elapsed = _vI105677__genout_urv95543 - _vI105474_t0 ; //assign simple
      _vI105673_minutes = ::std::floor((_vI105672_elapsed / 60.0 )); //assign simple
      _vI105674_seconds = _vI105672_elapsed - (_vI105673_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp107895 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105673_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105674_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Dynamic c++  : ") + _vI105486_src ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107895)));
      }
      fflush(stdout);
    _end_98640_L105679:;
      return _vI105485_result;
    _ifdoend_bootflx_65295_L105492:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2257,3,2257,4); // HACK! 
}

//------------------------------

//PROCEDURE <105443:> flx_processing::echoln: Call method
::flx::rtl::con_t * echoln::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI105444_x = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <105443:> flx_processing::echoln: Resume method
::flx::rtl::con_t *echoln::resume(){
      if(!((ptrflx_processing->_vI105441_control.ECHO == 1)) ) goto _ifdoelse_bootflx_65259_L105445;
      {
      _a13708t_107090 _tmp107896 = (::std::string("[flx] ") + _vI105444_x ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107896)));
      }
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_65259_L105445:;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <105652>: flx_processing::cxx_compile_dynamic1_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI105652__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <65950>: toolchain_gcc_linux::get_base_c_compile_flags: Apply method
void* _fI65950_get_base_c_compile_flags::apply(){
      return ptrtoolchain_gcc_linux->_vI65924_base_c_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",744,3,744,65); // HACK! 
}

//------------------------------
//FUNCTION <66019>: toolchain_gcc_osx::host_os: Apply method
_a13708t_107090 _fI66019_host_os::apply(){
      return ::std::string("OSX");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",967,3,967,33); // HACK! 
}

//------------------------------
//FUNCTION <65728>: toolchain_msvc_win32::get_base_cxx_compile_flags: Apply method
void* get_base_cxx_compile_flags::apply(){
      return ptrtoolchain_msvc_win32->base_cxx_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1744,3,1744,69); // HACK! 
}

//------------------------------
//FUNCTION <94045>: toolchain_clang_apple_iOS_maker_uncurry::aux_uncurry: Apply method
void* _fI94045_aux_uncurry::apply(_at107115 const &_arg ){
  init_uncurry = _arg.data[0];
  _vI94047_x = _arg.data[1];
    start_94039_L94054:;
      _vI94050_aux__apos_2_mv_1297  = _vI94047_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI94050_aux__apos_2_mv_1297)==0) ) goto _ml1299_L94049;
      return init_uncurry;
    _ml1299_L94049:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI94050_aux__apos_2_mv_1297)==1, (FLX_NEWP(_lam_1301)(FLX_FPAR_PASS this, ptrtoolchain_clang_apple_iOS_maker_uncurry))) ) goto _ml1300_L94048;
      h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI94050_aux__apos_2_mv_1297))).mem_1; //assign simple
      t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI94050_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI94047_x  = t_param_std_1199; //init
      init_uncurry  = ((FLX_NEWP(_lam_65603)(FLX_FPAR_PASS ptrtoolchain_clang_apple_iOS_maker_uncurry))
      ->apply(init_uncurry))->clone()
      ->apply(h_param_std_1200) /* general apply */; //init
      goto start_94039_L94054;
    _ml1300_L94048:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <89250>: toolchain_clang_apple_iOS_maker_uncurry::cxx_dynamic_object_compiler: Apply method
int _fI89250_cxx_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI89252_spec = _arg;
      _vI89251_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89211_base_cxx_compile_flags, ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89203_linker, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.header_search_dirs, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.macros, ::std::string("-o "), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89252_spec.src, _vI89252_spec.dst)) /* apply_stack */; //assign simple
      return _vI89251_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2126,3,2126,4); // HACK! 
}

//------------------------------
//C FUNC <14710>: _fI14710_str
_a13708t_107090 _fI14710_str(_a13708t_107090 _vI14712_s){
      return _vI14712_s;
}
//------------------------------
//FUNCTION <98179>: run_felix_compiler::aux_uncurry: Apply method
void* _fI98179_aux_uncurry::apply(_at107115 const &_arg ){
  _vI98180_inp_uncurry = _arg.data[0];
  _vI98181_out = _arg.data[1];
    start_90421_L98188:;
      _vI98184_aux__apos_2_mv_1322  = _vI98180_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI98184_aux__apos_2_mv_1322)==0) ) goto _ml1324_L98183;
      return _vI98181_out;
    _ml1324_L98183:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI98184_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI98187__lam_1326)(FLX_FPAR_PASS this, ptrrun_felix_compiler))) ) goto _ml1325_L98182;
      _vI98185_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI98184_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI98186_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI98184_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI98181_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI98181_out, _lam_64807(ptrrun_felix_compiler)
      .apply(_vI98185_h_param_std_1208) /* apply_stack */))); //init
      _vI98180_inp_uncurry  = _vI98186_t_param_std_1207; //init
      goto start_90421_L98188;
    _ml1325_L98182:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <104800>: FlxPkgConfigQuery::getpkgfield::getpkgfield'2::iterator'2: Apply method
void* _fI104800_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L104801:;
      _vI104805_iterator__apos_2_mv_1504  = ptr_fI67771_getpkgfield__apos_2->_vI104799_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI104805_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI104808__lam_1507)(FLX_FPAR_PASS this, ptr_fI67771_getpkgfield__apos_2, ptrgetpkgfield, ptrFlxPkgConfigQuery))) ) goto _ml1506_L104804;
      _vI104806_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI104805_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI104807_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI104805_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptr_fI67771_getpkgfield__apos_2->_vI104799_xs = _vI104807_t_param_std_1259; //assign simple
      FLX_SET_PC(107899)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI104806_h_param_std_1260));//yield
    FLX_CASE_LABEL(107899)
      goto continue__ll_lists_5177_L104801;
    _ml1506_L104804:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI104805_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L104803;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L104803:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L104801;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <66339>: toolchain_clang_osx::pathname_separator: Apply method
_a13708t_107090 _fI66339_pathname_separator::apply(){
      return ::std::string("/");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1466,3,1466,42); // HACK! 
}

//------------------------------
//FUNCTION <106300>: flx_processing::cxx_link_static_exe: Apply method
int _fI106300_cxx_link_static_exe::apply(_pt107161* const &_arg ){
  _vI106314_ehandler = _arg;
      {
      __timeb64* _tmp107901 = (__timeb64*)&_vI106842_tv;
      _ftime64_s(((_tmp107901)));
      }
      _vI106841__genout_urv99453  = (static_cast<double>((_vI106842_tv.time))) + ((static_cast<double>((_vI106842_tv.millitm))) / 1.0e3 ) ; //init
      _vI106301_t0 = _vI106841__genout_urv99453; //assign simple
      _vI106302_pkg_sstrings = (void* /*VR_nullptr*/ )0; //assign simple
      _vI106303_pkgs = ptrflx_processing->_vI106422_control.extra_pkgs; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI106303_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65362_L106318;
      {
      _a13708t_107090 _tmp107902 = (::std::string("[flx:cxx_link_static] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106303_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107902)));
      }
      fflush(stderr);
      _vI106843_r = _fI106844_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107903 = (void**)&_vI106843_r;
      _rev(((_tmp107903)),(_a13708t_107090*)0);
      }
      _vI106306_PKGCONFIG_PATH = _vI106843_r; //assign simple
      _vI106307_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI106306_PKGCONFIG_PATH, ::std::string("-r"))) /* apply_stack */, ::std::string("--field=provides_slib"))) /* apply_stack */, ::std::string("--field=requires_slibs"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI106303_pkgs)) /* apply_stack */, ptrflx_processing->_vI106422_control.pkgs)) /* apply_stack */; //assign simple
      _vI106854__genout_urv99494  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI106307_allargs) /* apply_stack */; //init
      _vI106308__ds2_65526 = _vI106854__genout_urv99494; //assign simple
      _vI106309_ret = _vI106308__ds2_65526.mem_0; //assign simple
      _vI106310_mysstrings = _vI106308__ds2_65526.mem_1; //assign simple
      if(!(!((_vI106309_ret == 0)) ) ) goto _ifdoelse_bootflx_65364_L106316;
      {
      _a13708t_107090 _tmp107904 = (((::std::string("[flx:cxx_link_static] Error ") + ::flx::rtl::strutil::str<int>(_vI106309_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106307_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107904)));
      }
      fflush(stderr);
      {
      _a6203t_107291 _tmp107905 = (_a6203t_107291)(_vI106314_ehandler);
      throw ((_tmp107905));
      }
    _ifdoelse_bootflx_65364_L106316:;
      _vI106302_pkg_sstrings = _vI106310_mysstrings; //assign simple
    _ifdoelse_bootflx_65362_L106318:;
      _vI106856_cxx_link_static_exe_mv_65528  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106856_cxx_link_static_exe_mv_65528%2==1) ) goto _ml65530_L106857;
      _vI106855__urv99505  = (FLX_NEWP(_pI106424_echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_597771626;
    _ml65530_L106857:;
/*match case 2:any*/
      _vI106855__urv99505  = (FLX_NEWP(_pI106423_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_597771626:;
      _vI106860_cxx_link_static_exe_mv_65528  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106860_cxx_link_static_exe_mv_65528%2==1) ) goto _ml65530_L106861;
      goto _end_hash_324506210;
    _ml65530_L106861:;
/*match case 2:any*/
    _end_hash_324506210:;
      _vI106311_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(ptrflx_processing->_vI106123_dflt_clang_config.ccflags, _vI106855__urv99505, ptrflx_processing->_vI106123_dflt_clang_config.dynamic_libraries, ptrflx_processing->_vI106123_dflt_clang_config.header_search_dirs, ptrflx_processing->_vI106123_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI106123_dflt_clang_config.macros, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.LINK_STRINGS, _vI106302_pkg_sstrings)) /* apply_stack */)) /* general apply */; //assign simple
      _vI106312_EXT_STATIC_OBJ = (_vI106311_tc.static_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI106422_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65365_L106319;
      _vI106313_result = (_vI106311_tc.static_executable_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME, _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.DRIVER_OBJS, ptrflx_processing->_vI106422_control.cppos)) /* apply_stack */, (ptrflx_processing->dvars.cpp_filebase + ::std::string("_static_link_thunk") ) + _vI106312_EXT_STATIC_OBJ )) /* apply_stack */, ptrflx_processing->dvars.cpp_filebase + _vI106312_EXT_STATIC_OBJ )) /* apply_stack */)) /* general apply */; //assign simple
      goto _ifdoelse_bootflx_65366_L106320;
    _ifdoend_bootflx_65365_L106319:;
      _vI106313_result = (_vI106311_tc.static_executable_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME, ptrflx_processing->_vI106422_control.cppos)) /* general apply */; //assign simple
    _ifdoelse_bootflx_65366_L106320:;
      if(!((ptrflx_processing->_vI106422_control.TIME == 1)) ) goto _end_99542_L106870;
      {
      __timeb64* _tmp107906 = (__timeb64*)&_vI106869_tv;
      _ftime64_s(((_tmp107906)));
      }
      _vI106868__genout_urv95543  = (static_cast<double>((_vI106869_tv.time))) + ((static_cast<double>((_vI106869_tv.millitm))) / 1.0e3 ) ; //init
      _vI106863_elapsed = _vI106868__genout_urv95543 - _vI106301_t0 ; //assign simple
      _vI106864_minutes = ::std::floor((_vI106863_elapsed / 60.0 )); //assign simple
      _vI106865_seconds = _vI106863_elapsed - (_vI106864_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp107907 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106864_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106865_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Static executable link  : ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107907)));
      }
      fflush(stdout);
    _end_99542_L106870:;
      if(!(!((_vI106313_result == 0)) ) ) goto _ifdoelse_bootflx_65368_L106322;
      {
      _a13708t_107090 _tmp107908 = ((::std::string("[flx] C++ static executable link ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107908)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65368_L106322:;
      return _vI106313_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2671,3,2671,4); // HACK! 
}

//------------------------------

//PROCEDURE <67932:> flx_pkgconfig::parse_args: Call method
void parse_args::stack_call(void* const &_arg){
  ::flx::rtl::con_t *cc = call(0,_arg);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * parse_args::call(::flx::rtl::con_t *_ptr_caller, void* const &_arg){
  _caller = _ptr_caller;
  _vI67999_args = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <67932:> flx_pkgconfig::parse_args: Resume method
::flx::rtl::con_t *parse_args::resume(){
      parse_args_mv_64642  = _vI67999_args; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(parse_args_mv_64642)==0) ) goto _ml64644_L97029;
      FLX_RETURN // procedure return
    _ml64644_L97029:;
/*match case 2:|Cons (arg_param_bootflx_64545, tail_param_bootflx_64546)*/
      if(!andthen(!!parse_args_mv_64642 , (FLX_NEWP(_lam_64653)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64646_L97030;
      tail_param_bootflx_64546 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(parse_args_mv_64642))).mem_1; //assign simple
      arg_param_bootflx_64545 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(parse_args_mv_64642))).mem_0; //assign simple
      if(!((::std::string("--hide") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,::std::string("--hide").size()))) ) goto _ifdoend_bootflx_64547_L97112;
      ptrflx_pkgconfig->hide = 1; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64547_L97112:;
      if(!((::std::string("--backwards") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,::std::string("--backwards").size()))) ) goto _ifdoend_bootflx_64549_L97113;
      ptrflx_pkgconfig->backwards = 1; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64549_L97113:;
      if(!((::std::string("--list") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,::std::string("--list").size()))) ) goto _ifdoend_bootflx_64551_L97114;
      ptrflx_pkgconfig->dolist = 1; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64551_L97114:;
      if(!((::std::string("--missing") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,::std::string("--missing").size()))) ) goto _ifdoend_bootflx_64553_L97115;
      ptrflx_pkgconfig->missing = 1; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64553_L97115:;
      if(!((::std::string("--noerror") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,::std::string("--noerror").size()))) ) goto _ifdoend_bootflx_64555_L97116;
      ptrflx_pkgconfig->require_pkg_exists = 0; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64555_L97116:;
      if(!((::std::string("--keeprightmost") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,::std::string("--keeprightmost").size()))) ) goto _ifdoend_bootflx_64557_L97117;
      ptrflx_pkgconfig->keep = /*VR_int*/2; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64557_L97117:;
      if(!((::std::string("--keepleftmost") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,::std::string("--keepleftmost").size()))) ) goto _ifdoend_bootflx_64559_L97118;
      ptrflx_pkgconfig->keep = /*VR_int*/1; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64559_L97118:;
      if(!((::std::string("--keepall") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,::std::string("--keepall").size()))) ) goto _ifdoend_bootflx_64561_L97119;
      ptrflx_pkgconfig->keep = /*VR_int*/0; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64561_L97119:;
      if(!((::std::string("--field") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,7))) ) goto _ifdoend_bootflx_64563_L97120;
      ptrflx_pkgconfig->fields = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_pkgconfig->fields, ::flx::rtl::strutil::substr(arg_param_bootflx_64545,8,arg_param_bootflx_64545.size()))) /* apply_stack */; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64563_L97120:;
      if(!((::std::string("--extension") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,11))) ) goto _ifdoend_bootflx_64565_L97121;
      ptrflx_pkgconfig->extension = ::flx::rtl::strutil::substr(arg_param_bootflx_64545,12,arg_param_bootflx_64545.size()); //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64565_L97121:;
      if(!((::std::string("-") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,1)) && !((::std::string("-") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,1,2)))  ) ) goto _ifdoend_bootflx_64567_L97130;
      _vI97108_flags = ::flx::rtl::strutil::substr(arg_param_bootflx_64545,1,arg_param_bootflx_64545.size()); //assign simple
      if(!xfind(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_at107092(_vI97108_flags, ::std::string("r"))) /* apply_stack */ ) goto _ifdoelse_bootflx_64570_L97123;
      ptrflx_pkgconfig->recfields = _fI97158_aux(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at107115(ptrflx_pkgconfig->recfields, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64570_L97123:;
      if(!xfind(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_at107092(_vI97108_flags, ::std::string("h"))) /* apply_stack */ ) goto _ifdoelse_bootflx_64572_L97125;
      ptrflx_pkgconfig->hide = 1; //assign simple
    _ifdoelse_bootflx_64572_L97125:;
      if(!xfind(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_at107092(_vI97108_flags, ::std::string("b"))) /* apply_stack */ ) goto _ifdoelse_bootflx_64574_L97127;
      ptrflx_pkgconfig->backwards = 1; //assign simple
    _ifdoelse_bootflx_64574_L97127:;
      if(!xfind(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_at107092(_vI97108_flags, ::std::string("l"))) /* apply_stack */ ) goto _ifdoelse_bootflx_64548_L97157;
      ptrflx_pkgconfig->dolist = 1; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64567_L97130:;
      if(!((::std::string("--rec") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,5))) ) goto _ifdoend_bootflx_64577_L97131;
      fld = ::flx::rtl::strutil::substr(arg_param_bootflx_64545,6,arg_param_bootflx_64545.size()); //assign simple
      _lam_64647_mv_64649  = (fld == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_lam_64647_mv_64649%2==1) ) goto _ml64651_L97182;
      _urv96803  = ::std::string("Requires"); //init
      goto _end_hash_719549046;
    _ml64651_L97182:;
/*match case 2:any*/
      _urv96803  = fld; //init
    _end_hash_719549046:;
      fld = _urv96803; //assign simple
      ptrflx_pkgconfig->recfields = _fI97184_aux(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at107115(ptrflx_pkgconfig->recfields, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64577_L97131:;
      if(!((::std::string("--path+") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,7))) ) goto _ifdoend_bootflx_64579_L97134;
      _vI97110_x = ::flx::rtl::strutil::substr(arg_param_bootflx_64545,8,arg_param_bootflx_64545.size()); //assign simple
      if(!(!((ptrflx_pkgconfig->_vI67899_path == ::std::string(""))) ) ) goto _ifdoend_bootflx_64581_L97132;
      ptrflx_pkgconfig->_vI67899_path = (ptrflx_pkgconfig->_vI67899_path + ::std::string(":") ) + _vI97110_x ; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64581_L97132:;
      ptrflx_pkgconfig->_vI67899_path = _vI97110_x; //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64579_L97134:;
      if(!((::std::string("--path") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,6))) ) goto _ifdoend_bootflx_64583_L97135;
      ptrflx_pkgconfig->_vI67899_path = ::flx::rtl::strutil::substr(arg_param_bootflx_64545,7,arg_param_bootflx_64545.size()); //assign simple
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64583_L97135:;
      if(!((::std::string("--help") == arg_param_bootflx_64545)) ) goto _ifdoend_bootflx_64585_L97136;
      {
      print_help(ptrflx_pkgconfig)
      .stack_call();
      }
      ::std::exit(0);
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64585_L97136:;
      if(!((::std::string("@") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,1))) ) goto _ifdoend_bootflx_64587_L97137;
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_573_L97207;
      {
      _a13708t_107090 _tmp107911 = (::std::string("[load] ") + lstrip(rstrip(::flx::rtl::strutil::substr(arg_param_bootflx_64545,1,arg_param_bootflx_64545.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107911)));
      }
      fflush(stderr);
    _ifdoelse_std_573_L97207:;
      _vI97111_data = ::flx::rtl::ioutil::load_file((lstrip(rstrip(::flx::rtl::strutil::substr(arg_param_bootflx_64545,1,arg_param_bootflx_64545.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")))); //assign simple
      {
      void* _tmp107912 = _fI97221_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at107115(_fI97208_aux(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_tt107116(_vI97111_data, (void* /*VR_nullptr*/ )0)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
      parse_args(FLX_FPAR_PASS ptrflx_pkgconfig)
      .stack_call((_tmp107912));
      }
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64587_L97137:;
      if(!((::std::string("-") == ::flx::rtl::strutil::substr(arg_param_bootflx_64545,0,1))) ) goto _ifdoend_bootflx_64589_L97138;
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64589_L97138:;
      if(!((::std::string("") == arg_param_bootflx_64545)) ) goto _ifdoend_bootflx_64591_L97139;
      goto _ifdoelse_bootflx_64548_L97157;
    _ifdoend_bootflx_64591_L97139:;
      ptrflx_pkgconfig->pkgs = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_pkgconfig->pkgs, arg_param_bootflx_64545)) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64548_L97157:;
      {
      parse_args(FLX_FPAR_PASS ptrflx_pkgconfig)
      .stack_call(tail_param_bootflx_64546);
      }
      FLX_RETURN // procedure return
    _ml64646_L97030:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",221,7,221,10);
;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <105204>: flx_processing::run_felix_compiler_if_required: Apply method
int run_felix_compiler_if_required::apply(_pt107161* const &_arg ){
  _vI105208_ehandler = _arg;
      _vI105205_result = 0; //assign simple
      _genout_urv98062  = check_cxx_uptodate(FLX_FPAR_PASS ptrflx_processing)
      .apply() /* apply_stack */; //init
      uptodate = _genout_urv98062; //assign simple
      _vI105598_str_mv_152  = uptodate; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105598_str_mv_152%2==1) ) goto _ml154_L105599;
      _urv98063  = ::std::string("true"); //init
      goto _end_inline_str_98068_L105600;
    _ml154_L105599:;
/*match case 2:any*/
      _urv98063  = ::std::string("false"); //init
    _end_inline_str_98068_L105600:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_98072_L105603;
      {
      _a13708t_107090 _tmp107916 = (::std::string("[flx] ") + (::std::string("[run_felix_compiler_if_required] Uptodate=") + _urv98063 ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107916)));
      }
    _end_98072_L105603:;
      if(uptodate) goto _ifdoend_bootflx_65287_L105211;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_98076_L105606;
      {
      _a13708t_107090 _tmp107917 = (::std::string("[flx] ") + ::std::string("Running flxg because target is not uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107917)));
      }
    _end_98076_L105606:;
      {
      __timeb64* _tmp107918 = (__timeb64*)&_vI105608_tv;
      _ftime64_s(((_tmp107918)));
      }
      _genout_urv98077  = (static_cast<double>((_vI105608_tv.time))) + ((static_cast<double>((_vI105608_tv.millitm))) / 1.0e3 ) ; //init
      t0 = _genout_urv98077; //assign simple
      run_felix_compiler_if_required_mv_65472  = (ptrflx_processing->_vI105441_control.FLXG_OPTIMISE == 0); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(run_felix_compiler_if_required_mv_65472%2==1) ) goto _ml65474_L105611;
      _urv98081  = (void* /*VR_nullptr*/ )0; //init
      goto _end_hash_332426441;
    _ml65474_L105611:;
/*match case 2:any*/
      _urv98081  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("--optimise")))); //init
    _end_hash_332426441:;
      run_felix_compiler_if_required_mv_65477  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(run_felix_compiler_if_required_mv_65477%2==1) ) goto _ml65479_L105615;
      _urv98092  = (FLX_NEWP(echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_34445652;
    _ml65479_L105615:;
/*match case 2:any*/
      _urv98092  = (FLX_NEWP(_pI105442_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_34445652:;
      _genout_urv98264  = run_felix_compiler(FLX_FPAR_PASS_ONLY)
      .apply(_art107577(ptrflx_processing->_vI105441_control.AUTOMATON, ptrflx_processing->_vI105441_control.BUNDLE_DIR, (*ptrflx_processing->_vI68366_config ).FLX_CACHE_DIR, ptrflx_processing->_vI105441_control.COMPILER_PHASE, ptrflx_processing->_vI105441_control.DOREDUCE, _urv98081, ptrflx_processing->_vI105441_control.FLXG, ptrflx_processing->_vI105038_dvars.FLX_STD_LIBS, ptrflx_processing->_vI105441_control.FLXG_FORCE, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrflx_processing->_vI105441_control.IMPORTS, ptrflx_processing->_vI105441_control.STDIMPORT))), (*ptrflx_processing->_vI68366_config ).FLX_LIB_DIRS, ptrflx_processing->_vI105441_control.INLINE, (*ptrflx_processing->_vI68366_config ).FLX_OUTPUT_DIR, ::std::string("@") + ptrflx_processing->_vI105441_control.STDGRAMMAR , ptrflx_processing->_vI105441_control.COMPILER_TIME, ptrflx_processing->_vI105038_dvars.VERBOSE, _urv98092, ptrflx_processing->_vI105038_dvars.filebase, ptrflx_processing->_vI105038_dvars.use_ext)) /* apply_stack */; //init
      _vI105205_result = _genout_urv98264; //assign simple
      if(!((ptrflx_processing->_vI105441_control.TIME == 1)) ) goto _end_98274_L105625;
      {
      __timeb64* _tmp107919 = (__timeb64*)&_vI105624_tv;
      _ftime64_s(((_tmp107919)));
      }
      _genout_urv95543  = (static_cast<double>((_vI105624_tv.time))) + ((static_cast<double>((_vI105624_tv.millitm))) / 1.0e3 ) ; //init
      _vI105618_elapsed = _genout_urv95543 - t0 ; //assign simple
      minutes = ::std::floor((_vI105618_elapsed / 60.0 )); //assign simple
      seconds = _vI105618_elapsed - (minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp107920 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Felix flxg   : ") + ptrflx_processing->_vI105038_dvars.cpp_filebase ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107920)));
      }
      fflush(stdout);
    _end_98274_L105625:;
      if(!((_vI105205_result == 0)) ) goto _ifdoelse_bootflx_65288_L105212;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_98279_L105628;
      {
      _a13708t_107090 _tmp107921 = (::std::string("[flx] ") + ::std::string("Felix compilation succeeded") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107921)));
      }
    _end_98279_L105628:;
      {
      calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI105208_ehandler);
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_565_L105633;
      {
      _a13708t_107090 _tmp107923 = (::std::string("[Open_output] ") + (ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string(".includes") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107923)));
      }
      fflush(stderr);
    _ifdoelse_std_565_L105633:;
      _genout_urv98312  = fopen((ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string(".includes") ).c_str(),"wb"); //init
      _genout_urv98298  = _genout_urv98312; //init
      _vI105635__genout_urv98289  = _genout_urv98298; //init
      _genout_urv98291  = _vI105635__genout_urv98289; //init
      _vI105629_f = _genout_urv98291; //assign simple
      //run procedure directcall iter_uncurry<88913>directproc (_lam_64528<105630>closure, apply((prj24:record(AUTOMATON:(string),BUNDLE_DIR:(opt),CCFLAGS:(list),CCOMPILEIT:(int),CHECK_DEPENDENCIES:(int),CHECK_EXPECT:(int),CLEAR_CACHE:(int),CMDLINE_INPUT:(bool),COMPILER_PHASE:(string),COMPILER_TIME:(int),CXXONLY:(int),CXX_INTERFACE_FILENAME:(string),DEBUG:(int),DEBUG_COMPILER:(int),DEBUG_FLX:(bool),DIST_ROOT:(string),DLINK_STRINGS:(list),DOREDUCE:(int),DRIVER_EXE:(string),DRIVER_OBJS:(list),ECHO:(int),EXPECT:(string),EXTRA_CCFLAGS:(list),EXTRA_INCLUDE_DIRS:(list),EXTRA_INCLUDE_FILES:(list),EXTRA_PACKAGES:(list),FELIX:(int),FLXG:(string),FLXG_FORCE:(int),FLXG_OPTIMISE:(int),FLXRUN:(list),FLX_INSTALL_DIR:(string),FLX_INTERFACE_FILENAME:(string),FLX_STD_LIBS:(list),FLX_TARGET_SUBDIR:(string),FLX_TOOLCHAIN:(string),GRAMMAR_DIR:(string),IMPORTS:(list),INDIR:(string),INLINE:(int),INREGEX:(string),LINKER_OUTPUT_FILENAME:(string),LINKER_SWITCHES:(list),LINKEXE:(int),LINKIT:(int),LINK_STRINGS:(list),MACROS:(list),NONSTOP:(int),NOOPTIMISE:(int),NOSTDLIB:(int),OCAMLONLY:(int),OPTIMISE:(list),OUTPUT_DIRECTORY_SPECIFIED:(int),OUTPUT_FILENAME_SPECIFIED:(int),OUTPUT_FILENAME_WITHOUT_EXTENSION_SPECIFIED:(int),PRINT_HELP:(int),RECOMPILE:(int),REPL_MODE:(bool),RUNIT:(int),RUNONLY:(int),SET_STDIN:(int),SHOWCODE:(int),SLINK_STRINGS:(list),STANDARD_INCLUDE_FILES:(list),STATIC:(int),STATICLIB:(int),STDGRAMMAR:(string),STDIMPORT:(string),STDIN:(string),STDOUT:(string),TIME:(int),TIMECMD:(string),USAGE:(string),USER_ARGS:(list),VALIDATE_CACHE:(int),cache_time:(double),cppos:(list),cpps:(list),extra_pkgs:(list),ocamls:(list),pkgs:(list)) -> list), control<105441>varname));
      {
      _pt107148* _tmp107924 = (FLX_NEWP(_lam_64528)(FLX_FPAR_PASS this, ptrflx_processing));
        ::flx::rtl::con_t *_p =
          (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
          ->call(0, _tt107149((_tmp107924), ptrflx_processing->_vI105441_control.EXTRA_INCLUDE_FILES));
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            fprintf(stderr,"Caller run_felix_compiler_if_required\n");
            fprintf(stderr,"Calls  iter_uncurry\n");
            abort();
          }
          _p=_p->resume();
        }
      }
      (void)fclose(_vI105629_f);
      goto _ifdoelse_bootflx_65288_L105212;
      goto _ifdoelse_bootflx_65288_L105212;
    _ifdoend_bootflx_65287_L105211:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65288_L105212;
      {
      _a13708t_107090 _tmp107926 = (::std::string("[flx] ") + ::std::string("skipping flxg because output is uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107926)));
      }
    _ifdoelse_bootflx_65288_L105212:;
      return _vI105205_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2212,3,2212,4); // HACK! 
}

//------------------------------
//FUNCTION <106458>: flx_processing::cxx_compile_dynamic1_uncurry::_lam_65481: Apply method
_a13708t_107090 _fI106458__lam_65481::apply(_a13708t_107090 const &_arg ){
  _vI106459_s = _arg;
      return ::std::string("--path+=") + _vI106459_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2227,11,2227,40); // HACK! 
}

//------------------------------
//FUNCTION <106714>: flx_processing::cxx_compile_static::iterator'2: Apply method
void* _fI106714_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L106715:;
      _vI106719_iterator__apos_2_mv_1504  = ptr_fI106215_cxx_compile_static->_vI106713_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI106719_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI106722__lam_1507)(FLX_FPAR_PASS this, ptr_fI106215_cxx_compile_static, ptrflx_processing))) ) goto _ml1506_L106718;
      _vI106720_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI106719_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI106721_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI106719_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptr_fI106215_cxx_compile_static->_vI106713_xs = _vI106721_t_param_std_1259; //assign simple
      FLX_SET_PC(107927)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI106720_h_param_std_1260));//yield
    FLX_CASE_LABEL(107927)
      goto continue__ll_lists_5177_L106715;
    _ml1506_L106718:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI106719_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L106717;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L106717:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L106715;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <95578>: fmt::_lam_231: Apply method
 ::flx::rtl::cl_t _lam_231::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/numbers.fdoc",215,7,215,21); // HACK! 
}

//------------------------------
//FUNCTION <90492>: cat_uncurry::_lam_1375: Apply method
 ::flx::rtl::cl_t _lam_1375::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",464,5,464,38); // HACK! 
}

//------------------------------
//FUNCTION <85487>: func1: Apply method
_ft107184* _fI85487_func1::apply(_tt107410 const &_arg ){
  _vI85488_linst = _arg.mem_0;
  _vI85489_sym = _arg.mem_1;
      _vI85491__ds2_521 = flx_dlsym(FLX_FPAR_PASS _vI85488_linst, _vI85489_sym); //assign simple
      _vI85492_s = _vI85491__ds2_521.mem_0; //assign simple
      _vI85493_tf = _vI85491__ds2_521.mem_1; //assign simple
      return (FLX_NEWP(_lam_522)(FLX_FPAR_PASS this));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",1119,3,1119,4); // HACK! 
}

//------------------------------
//FUNCTION <66175>: toolchain_clang_linux::static_executable_linker: Apply method
int _fI66175_static_executable_linker::apply(_art107181 const &_arg ){
  _vI66178_spec = _arg;
      _vI66177_result = generic_link_exe_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_clang_linux->_vI66104_linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_clang_linux->_vI66187_config.library_search_dirs, ptrtoolchain_clang_linux->_vI66187_config.static_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66178_spec.srcs, _vI66178_spec.dst)) /* apply_stack */; //assign simple
      return _vI66177_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1384,3,1384,4); // HACK! 
}

//------------------------------
//FUNCTION <91083>: process_config_text_uncurry::aux: Apply method
void* aux::apply(_tt107116 const &_arg ){
  _vI91084_x = _arg.mem_0;
  _vI91085_y = _arg.mem_1;
    start_91026_L91095:;
      _vI91090_find_mv_2046  = _vI91084_x.find((::flx::rtl::strutil::subscript(::std::string("\n"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI91090_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L91092;
      aux_mv_2226  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_90996_L91093;
    _ml2048_L91092:;
/*match case 2:i_param_std_1834*/
      _vI91091_i_param_std_1834 = _vI91090_find_mv_2046; //assign simple
      aux_mv_2226  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI91091_i_param_std_1834)); //init
    _end_inline_find_90996_L91093:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(aux_mv_2226)==0) ) goto _ml2228_L91088;
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI91085_y, _vI91084_x)));
    _ml2228_L91088:;
/*match case 2:|Some n_param_std_1909*/
      if(!andthen(FLX_VNI(aux_mv_2226)==1, (FLX_NEWP(_lam_2230)(FLX_FPAR_PASS this, ptrprocess_config_text_uncurry))) ) goto _ml2229_L91089;
      n_param_std_1909 = *((_a5038t_107106*)FLX_VNP(aux_mv_2226)); //assign simple
/*parallel assignment*/
      _vI91085_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI91085_y, ::flx::rtl::strutil::substr(_vI91084_x,0,n_param_std_1909)))); //init
      _vI91084_x  = ::flx::rtl::strutil::substr(_vI91084_x,n_param_std_1909 + 1 ,_vI91084_x.size()); //init
      goto start_91026_L91095;
    _ml2229_L91089:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,7,478,61);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",480,5,480,6); // HACK! 
}

//------------------------------
//FUNCTION <66183>: toolchain_clang_linux::dynamic_library_linker: Apply method
int _fI66183_dynamic_library_linker::apply(_art107181 const &_arg ){
  _vI66186_spec = _arg;
      _vI66185_result = generic_link_lib_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107231(_art107230(ptrtoolchain_clang_linux->_vI66105_ccflags_for_dynamic_link, ptrtoolchain_clang_linux->_vI66104_linker, ::std::string(".so"), join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_clang_linux->_vI66187_config.library_search_dirs, ptrtoolchain_clang_linux->_vI66187_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66186_spec.srcs, _vI66186_spec.dst)) /* apply_stack */; //assign simple
      return _vI66185_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1418,3,1418,4); // HACK! 
}

//------------------------------

//PROCEDURE <67856:> flx_pkgconfig::print_help: Call method
void print_help::stack_call(){
      {
      _a13708t_107090 _tmp107930 = ::std::string("flx_pkgconfig [options] pkg pkg ...") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107930)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107931 = ::std::string("  returns code 1 if any packages are missing unless --noerror is specified") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107931)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107932 = ::std::string("  prints package or field list to standard output on one line") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107932)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107933 = ::std::string("options: (follows GNU conventions)") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107933)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107934 = ::std::string("  --path=dirname        set database directory name") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107934)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107935 = ::std::string("  --path+=dirname       append database directory name") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107935)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107936 = ::std::string("  --extension=fpc       set resource descriptor extensions,") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107936)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107937 = ::std::string("                          default 'fpc' use 'pc' for pkgconfig databases") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107937)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107938 = ::std::string("  -h") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107938)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107939 = ::std::string("  --hide                only process first package in path with a given name") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107939)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107940 = ::std::string("                          default, process all occurences") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107940)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107941 = ::std::string("  --list                list available packages from specified set") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107941)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107942 = ::std::string("  --missing             list missing packages from specified set") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107942)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107943 = ::std::string("  --noerror             do not return 1 because of missing packages") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107943)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107944 = ::std::string("  -r") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107944)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107945 = ::std::string("  --rec                 form transitive closure of specified set based on Requires field") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107945)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107946 = ::std::string("  --rec=field           form transitive closure of specified set based on specified field") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107946)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107947 = ::std::string("  -b") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107947)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107948 = ::std::string("  --backwards           process specified packages in reverse order") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107948)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107949 = ::std::string("  --field=field         collate values of field in package set") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107949)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107950 = ::std::string("  --keepleftmost        remove duplicate values in output keeping only leftmost occurrence") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107950)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107951 = ::std::string("  --keeprightmost       remove duplicate values in output keeping only rightmost occurrence") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107951)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107952 = ::std::string("  --keepall             keep duplicate values in output") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107952)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp107953 = ::std::string("  @filename             Replace with arguments from filename, one line per argument") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107953)));
      }
      fflush(stdout);
      return; // proc return from stackable 

}
//------------------------------
//FUNCTION <95188>: str::_lam_1520: Apply method
 ::flx::rtl::cl_t _lam_1520::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",704,9,704,18); // HACK! 
}

//------------------------------
//FUNCTION <65714>: toolchain_msvc_win32::static_object_extension: Apply method
_a13708t_107090 static_object_extension::apply(){
      return ::std::string("_static.obj");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1737,3,1737,57); // HACK! 
}

//------------------------------
//FUNCTION <66114>: toolchain_clang_linux::cxx_compiler_vendor: Apply method
_a13708t_107090 _fI66114_cxx_compiler_vendor::apply(){
      return ::std::string("clang");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1217,3,1217,47); // HACK! 
}

//------------------------------
//FUNCTION <96190>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::aux_uncurry: Apply method
void* _fI96190_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96191_x_uncurry = _arg.data[0];
  _vI96192_y = _arg.data[1];
    start_91065_L96199:;
      _vI96195_aux__apos_2_mv_1328  = _vI96191_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96195_aux__apos_2_mv_1328)==0) ) goto _ml1330_L96194;
      return _vI96192_y;
    _ml1330_L96194:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI96195_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI96198__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64707, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L96193;
      _vI96196_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI96195_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI96197_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI96195_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI96192_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96192_y, _vI96196_h_param_std_1210))); //init
      _vI96191_x_uncurry  = _vI96197_t_param_std_1209; //init
      goto start_91065_L96199;
    _ml1331_L96193:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <104986>: FlxPkgConfigQuery::aux_uncurry::aux_uncurry: Apply method
void* _fI104986_aux_uncurry::apply(_at107115 const &_arg ){
  _vI104987_x_uncurry = _arg.data[0];
  _vI104988_y = _arg.data[1];
    start_91065_L104995:;
      _vI104991_aux__apos_2_mv_1328  = _vI104987_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI104991_aux__apos_2_mv_1328)==0) ) goto _ml1330_L104990;
      return _vI104988_y;
    _ml1330_L104990:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI104991_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI104994__lam_1332)(FLX_FPAR_PASS this, ptr_fI104978_aux_uncurry, ptrFlxPkgConfigQuery))) ) goto _ml1331_L104989;
      _vI104992_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI104991_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI104993_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI104991_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI104988_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104988_y, _vI104992_h_param_std_1210))); //init
      _vI104987_x_uncurry  = _vI104993_t_param_std_1209; //init
      goto start_91065_L104995;
    _ml1331_L104989:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <66309>: toolchain_clang_osx: Apply method
_art107183 toolchain_clang_osx::apply(_art107173 const &_arg ){
  _vI66398_config = _arg;
      _vI94190_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 4)) ) goto _ifdoelse_std_1191_L94186;
      _vI94191_i = (static_cast<int>(4)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp107956 = (int*)&_vI94191_i;
      ++*((_tmp107956));
      }
    redo__ll_lists_4854_L94189:;
      if(FLX_UNLIKELY(!((0 < _vI94191_i)) )) goto _ifdoelse_std_1191_L94186;
      {
      int* _tmp107957 = (int*)&_vI94191_i;
      --*((_tmp107957));
      }
      _vI94190_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI94190_o, (_at107238(::std::string("-w"), ::std::string("-Wfatal-errors"), ::std::string("-Wno-return-type-c-linkage"), ::std::string("-Wno-invalid-offsetof")).data)[reinterpret< ::flx::rtl::cl_t>(_vI94191_i)]))); //assign simple
      goto redo__ll_lists_4854_L94189;
    _ifdoelse_std_1191_L94186:;
      _vI66311_cxx_compile_warning_flags = _vI94190_o; //assign simple
      _vI94200_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 3)) ) goto _ifdoelse_std_1191_L94196;
      _vI94201_i = (static_cast<int>(3)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp107958 = (int*)&_vI94201_i;
      ++*((_tmp107958));
      }
    redo__ll_lists_4854_L94199:;
      if(FLX_UNLIKELY(!((0 < _vI94201_i)) )) goto _ifdoelse_std_1191_L94196;
      {
      int* _tmp107959 = (int*)&_vI94201_i;
      --*((_tmp107959));
      }
      _vI94200_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI94200_o, (_at107185(::std::string("-w"), ::std::string("-Wfatal-errors"), ::std::string("-Wno-array-bounds")).data)[reinterpret< ::flx::rtl::cl_t>(_vI94201_i)]))); //assign simple
      goto redo__ll_lists_4854_L94199;
    _ifdoelse_std_1191_L94196:;
      _vI66312_c_compile_warning_flags = _vI94200_o; //assign simple
      _vI66313_c_compiler = ::std::string("clang"); //assign simple
      _vI66314_cxx_compiler = ::std::string("clang++"); //assign simple
      _vI66315_linker = ::std::string("clang++"); //assign simple
      _vI66316_ccflags_for_dynamic_link = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-dynamiclib")))); //assign simple
      _vI66317_base_c_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI66312_c_compile_warning_flags, _vI66398_config.ccflags)) /* apply_stack */, ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), ::std::string("-c")))), ::std::string("-g")))); //assign simple
      _vI66318_base_cxx_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI66311_cxx_compile_warning_flags, _vI66398_config.ccflags)) /* apply_stack */, ::std::string("-std=c++11")))), ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), ::std::string("-c")))), ::std::string("-g")))); //assign simple
      return _art107183((FLX_NEWP(_fI66347_c_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66366_c_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66362_c_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66325_cxx_compiler_vendor)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66353_cxx_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66378_cxx_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66374_cxx_static_library_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66370_cxx_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66341_debug_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66327_dependency_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66359_dependency_parser)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66390_dynamic_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66337_dynamic_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66394_dynamic_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66333_dynamic_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66329_executable_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66343_get_base_c_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66345_get_base_cxx_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66321_host_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66339_pathname_separator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66386_static_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66335_static_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66382_static_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66331_static_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66323_target_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66319_whatami)(FLX_FPAR_PASS this)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1660,1,1660,2); // HACK! 
}

//------------------------------
//FUNCTION <104996>: FlxPkgConfigQuery::aux_uncurry::_lam_64755: Apply method
 ::flx::rtl::cl_t _lam_64755::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",475,13,475,22); // HACK! 
}

//------------------------------
//FUNCTION <65938>: toolchain_gcc_linux::static_object_extension: Apply method
_a13708t_107090 _fI65938_static_object_extension::apply(){
      return ::std::string("_static.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",738,3,738,55); // HACK! 
}

//------------------------------
//FUNCTION <66060>: toolchain_gcc_osx::c_static_object_compiler: Apply method
int _fI66060_c_static_object_compiler::apply(_art107177 const &_arg ){
  _vI66063_spec = _arg;
      _vI66062_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_gcc_osx->_vI66015_base_c_compile_flags, ptrtoolchain_gcc_osx->_vI66011_c_compiler, ptrtoolchain_gcc_osx->_vI66096_config.header_search_dirs, ptrtoolchain_gcc_osx->_vI66096_config.macros, ::std::string("-o "), ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66063_spec.src, _vI66063_spec.dst)) /* apply_stack */; //assign simple
      return _vI66062_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1035,3,1035,4); // HACK! 
}

//------------------------------
//FUNCTION <66167>: toolchain_clang_linux::cxx_dynamic_object_compiler: Apply method
int _fI66167_cxx_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI66170_spec = _arg;
      _vI66169_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_linux->_vI66106_base_cxx_compile_flags, ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_clang_linux->_vI66104_linker, ptrtoolchain_clang_linux->_vI66187_config.header_search_dirs, ptrtoolchain_clang_linux->_vI66187_config.macros, ::std::string("-o "), ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66170_spec.src, _vI66170_spec.dst)) /* apply_stack */; //assign simple
      return _vI66169_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1353,3,1353,4); // HACK! 
}

//------------------------------
//FUNCTION <105094>: flx_processing::rfi::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI105094__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <95679>: list_eq::_lam_1502: Apply method
 ::flx::rtl::cl_t _lam_1502::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",640,20,640,30); // HACK! 
}

//------------------------------
//FUNCTION <106822>: flx_processing::cxx_link_shared_exe::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI106822__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <66148>: toolchain_clang_linux::dependency_parser: Apply method
void* _fI66148_dependency_parser::apply(_a13708t_107090 const &_arg ){
  _vI66150_data = _arg;
      return generic_dependency_parser(FLX_FPAR_PASS_ONLY)
      .apply(_vI66150_data) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1266,3,1266,4); // HACK! 
}

//------------------------------
//FUNCTION <104513>: gramtime_uncurry::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI104513__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <93558>: generic_link_lib_dynamic_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93558__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <106784>: flx_processing::cxx_link_shared_library::aux_uncurry: Apply method
void* _fI106784_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106785_inp_uncurry = _arg.data[0];
  _vI106786_out = _arg.data[1];
    start_90421_L106793:;
      _vI106789_aux__apos_2_mv_1322  = _vI106785_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106789_aux__apos_2_mv_1322)==0) ) goto _ml1324_L106788;
      return _vI106786_out;
    _ml1324_L106788:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI106789_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI106792__lam_1326)(FLX_FPAR_PASS this, ptr_fI106254_cxx_link_shared_library, ptrflx_processing))) ) goto _ml1325_L106787;
      _vI106790_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI106789_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI106791_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI106789_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI106786_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106786_out, _fI106258__lam_65511(ptr_fI106254_cxx_link_shared_library, ptrflx_processing)
      .apply(_vI106790_h_param_std_1208) /* apply_stack */))); //init
      _vI106785_inp_uncurry  = _vI106791_t_param_std_1207; //init
      goto start_90421_L106793;
    _ml1325_L106787:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------

//PROCEDURE <68077:> flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707: Call method
::flx::rtl::con_t * _lam_64707::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI68100_line = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <68077:> flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707: Resume method
::flx::rtl::con_t *_lam_64707::resume(){
  FLX_START_SWITCH
      _ds2_64708 = get_variable(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_vI68100_line) /* apply_stack */; //assign simple
      variable = (_ds2_64708.data)[0]; //assign simple
      vval = (_ds2_64708.data)[1]; //assign simple
      if(!(!((variable == ::std::string(""))) ) ) goto _ifdoend_bootflx_64613_L68101;
      bdy = search_and_replace_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107295(ptrhandle_pkg->variables, vval)) /* apply_stack */; //assign simple
      ptrhandle_pkg->variables = FLX_VNR(1, new(*PTF gcp, _tt107274_ptr_map, true) _tt107274 (_tt107274(ptrhandle_pkg->variables, _at107092((::std::string("${") + variable ) + ::std::string("}") , bdy)))); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64613_L68101:;
      _ds2_64709 = get_field(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(_vI68100_line) /* apply_stack */; //assign simple
      _vI68084_key = (_ds2_64709.data)[0]; //assign simple
      value = (_ds2_64709.data)[1]; //assign simple
      if(!ptrflx_pkgconfig->listkeys ) goto _ifdoelse_bootflx_64616_L68103;
      _vI96187_insert_unique__apos_3_mv_1428  = mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107208((FLX_NEWP(_fI96188__lam_1398)(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig)), ptrflx_pkgconfig->_vI68017_result)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI96187_insert_unique__apos_3_mv_1428%2==1) ) goto _ml1430_L96186;
      _vI96185__urv95792  = ptrflx_pkgconfig->_vI68017_result; //init
      goto _end_hash_396217683;
    _ml1430_L96186:;
/*match case 2:any*/
      _vI96185__urv95792  = _fI96200_aux_uncurry(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI96190_aux_uncurry(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at107115(ptrflx_pkgconfig->_vI68017_result, (void* /*VR_nullptr*/ )0)) /* apply_stack */, _vI68084_key))), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
    _end_hash_396217683:;
      ptrflx_pkgconfig->_vI68017_result = _vI96185__urv95792; //assign simple
    _ifdoelse_bootflx_64616_L68103:;
      _vI68086_values = lexstr(FLX_FPAR_PASS ptrflx_pkgconfig)
      .apply(value) /* apply_stack */; //assign simple
      _vI96410_r = _fI96411_aux_uncurry(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at107115(_vI68086_values, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp107961 = (void**)&_vI96410_r;
      _rev(((_tmp107961)),(_a13708t_107090*)0);
      }
      _vI68086_values = _vI96410_r; //assign simple
      if(!mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107208((FLX_NEWP(_fI96428__lam_1398)(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig)), ptrflx_pkgconfig->fields)) /* apply_stack */ ) goto _ifdoelse_bootflx_64618_L68105;
      _lam_64707_mv_64711  = ptrflx_pkgconfig->keep; //init
/*begin match*/
/*match case 1:|keepleftmost*/
      if(!(_lam_64707_mv_64711%3==1) ) goto _ml64713_L96437;
      {
      _pt107148* _tmp107962 = (FLX_NEWP(add_val)(FLX_FPAR_PASS ptrflx_pkgconfig));
      FLX_SET_PC(107963)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt107149((_tmp107962), _vI68086_values));
      }
    FLX_CASE_LABEL(107963)
      goto _ifdoelse_bootflx_64618_L68105;
    _ml64713_L96437:;
/*match case 2:|keeprightmost*/
      if(!(_lam_64707_mv_64711%3==2) ) goto _ml64715_L96438;
      {
      _pt107148* _tmp107964 = (FLX_NEWP(tail_val)(FLX_FPAR_PASS ptrflx_pkgconfig));
      FLX_SET_PC(107965)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt107149((_tmp107964), _vI68086_values));
      }
    FLX_CASE_LABEL(107965)
      goto _ifdoelse_bootflx_64618_L68105;
    _ml64715_L96438:;
/*match case 3:|keepall*/
      if(!(_lam_64707_mv_64711%3==0) ) goto _ml64717_L96439;
      {
      _pt107148* _tmp107966 = (FLX_NEWP(keep_val)(FLX_FPAR_PASS ptrflx_pkgconfig));
      FLX_SET_PC(107967)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt107149((_tmp107966), _vI68086_values));
      }
    FLX_CASE_LABEL(107967)
      goto _ifdoelse_bootflx_64618_L68105;
    _ml64717_L96439:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",335,18,335,57);
;
    _ifdoelse_bootflx_64618_L68105:;
      if(!mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107208((FLX_NEWP(_fI96449__lam_1398)(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig)), ptrflx_pkgconfig->recfields)) /* apply_stack */ ) goto _ifdoelse_bootflx_64614_L68108;
      {
      _pt107148* _tmp107969 = (FLX_NEWP(_lam_64719)(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig));
      ::flx::rtl::con_t *tmp = _caller;
      _caller = 0;
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(tmp, _tt107149((_tmp107969), _vI68086_values));
      }
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_64614_L68108:;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------
//FUNCTION <105761>: flx_processing::ocaml_compile::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI105761__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <106510>: flx_processing::find_cxx_pkgs::_lam_65445: Apply method
 ::flx::rtl::cl_t _fI106510__lam_65445::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2093,7,2093,11); // HACK! 
}

//------------------------------
//FUNCTION <65850>: toolchain_msvc_win32::cxx_dynamic_object_compiler: Apply method
int cxx_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI65855_spec = _arg;
      _genout_urv92453  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_msvc_win32->macros, ::std::string("/EHs")))), ::std::string("/c")))), ::std::string("/Zi")))), ::std::string("/MDd")))), ::std::string("/wd4190")))), ::std::string("/nologo")))), ::std::string("cl.exe")))), ptrtoolchain_msvc_win32->include_switches)) /* apply_stack */, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("/Fo") + _vI65855_spec.dst ))), _vI65855_spec.src))))) /* apply_stack */) /* apply_stack */; //init
      _ds2_65678 = _genout_urv92453; //assign simple
      _vI65853_result = _ds2_65678.mem_0; //assign simple
      _vI65854_text = _ds2_65678.mem_1; //assign simple
      {
      checkwarn(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .stack_call(_tt107175(_vI65853_result, _vI65854_text));
      }
      return _vI65853_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1874,3,1874,4); // HACK! 
}

//------------------------------
//FUNCTION <105126>: flx_processing::iterator'2: Apply method
void* _fI105126_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L105127:;
      _vI105131_iterator__apos_2_mv_1504  = ptrflx_processing->_vI105125_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI105131_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI105134__lam_1507)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml1506_L105130;
      _vI105132_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI105131_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI105133_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI105131_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrflx_processing->_vI105125_xs = _vI105133_t_param_std_1259; //assign simple
      FLX_SET_PC(107972)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI105132_h_param_std_1260));//yield
    FLX_CASE_LABEL(107972)
      goto continue__ll_lists_5177_L105127;
    _ml1506_L105130:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI105131_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L105129;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L105129:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L105127;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <67792>: FlxPkgConfigQuery::getpkgfield1::getpkgfield1'2: Apply method
_a13708t_107090 _fI67792_getpkgfield1__apos_2::apply(_at107092 const &_arg ){
  _vI67798_pkg = _arg.data[0];
  _vI67799_field = _arg.data[1];
      _vI67794_values = getpkgfield_uncurry(FLX_FPAR_PASS ptrFlxPkgConfigQuery)
      .apply(_tt107292(ptrgetpkgfield1->_vI67804_ehandler, _vI67798_pkg, _vI67799_field)) /* apply_stack */; //assign simple
      _vI64767_getpkgfield1__apos_2_mv_64767  = _vI67794_values; //init
/*begin match*/
/*match case 1:|Cons (h_param_bootflx_64738, |Empty)*/
      if(!andthen(!!_vI64767_getpkgfield1__apos_2_mv_64767 , (FLX_NEWP(_lam_64770)(FLX_FPAR_PASS this, ptrgetpkgfield1, ptrFlxPkgConfigQuery))) ) goto _ml64769_L67800;
      h_param_bootflx_64738 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(_vI64767_getpkgfield1__apos_2_mv_64767))).mem_0; //assign simple
      return h_param_bootflx_64738;
    _ml64769_L67800:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI64767_getpkgfield1__apos_2_mv_64767)==0) ) goto _ml64771_L67801;
      {
      _a13708t_107090 _tmp107974 = (((::std::string("Required field ") + _vI67799_field ) + ::std::string(" not found in package ") ) + _vI67798_pkg ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107974)));
      }
      fflush(stdout);
      {
      _a6203t_107291 _tmp107975 = (_a6203t_107291)(ptrgetpkgfield1->_vI67804_ehandler);
      throw ((_tmp107975));
      }
      FLX_HALT("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",509,9,509,14,"HALT: Jump to end of function");
    _ml64771_L67801:;
/*match case 3:any*/
      {
      _a13708t_107090 _tmp107976 = (((((::std::string("Multiple values for field ") + _vI67799_field ) + ::std::string(" in ") ) + _vI67798_pkg ) + ::std::string(" not allowed, got") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67794_values) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107976)));
      }
      fflush(stdout);
      {
      _a6203t_107291 _tmp107977 = (_a6203t_107291)(ptrgetpkgfield1->_vI67804_ehandler);
      throw ((_tmp107977));
      }
      FLX_HALT("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",515,9,515,9,"HALT: Jump to end of function");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",521,5,521,6); // HACK! 
}

//------------------------------
//FUNCTION <96128>: search_and_replace_uncurry::_lam_2306: Apply method
 ::flx::rtl::cl_t _lam_2306::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9); // HACK! 
}

//------------------------------
//FUNCTION <91494>: +::aux_uncurry: Apply method
void* _fI91494_aux_uncurry::apply(_at107115 const &_arg ){
  _vI91495_x_uncurry = _arg.data[0];
  _vI91496_y = _arg.data[1];
    start_91065_L91503:;
      _vI91499_aux__apos_2_mv_1328  = _vI91495_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI91499_aux__apos_2_mv_1328)==0) ) goto _ml1330_L91498;
      return _vI91496_y;
    _ml1330_L91498:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI91499_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI91502__lam_1332)(FLX_FPAR_PASS this, ptr_fI80206___plus_))) ) goto _ml1331_L91497;
      _vI91500_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI91499_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI91501_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI91499_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI91496_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI91496_y, _vI91500_h_param_std_1210))); //init
      _vI91495_x_uncurry  = _vI91501_t_param_std_1209; //init
      goto start_91065_L91503;
    _ml1331_L91497:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <97229>: flx_pkgconfig::parse_args::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI97229__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <65844>: toolchain_msvc_win32::cxx_static_library_object_compiler: Apply method
int cxx_static_library_object_compiler::apply(_art107177 const &_arg ){
  _vI65849_spec = _arg;
      _genout_urv92439  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_msvc_win32->macros, ::std::string("/EHs")))), ::std::string("/c")))), ::std::string("/Zi")))), ::std::string("/MDd")))), ::std::string("/DFLX_STATIC_LINK")))), ::std::string("/wd4190")))), ::std::string("/nologo")))), ::std::string("cl.exe")))), ptrtoolchain_msvc_win32->include_switches)) /* apply_stack */, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("/Fo") + _vI65849_spec.dst ))), _vI65849_spec.src))))) /* apply_stack */) /* apply_stack */; //init
      _ds2_65677 = _genout_urv92439; //assign simple
      _vI65847_result = _ds2_65677.mem_0; //assign simple
      _vI65848_text = _ds2_65677.mem_1; //assign simple
      {
      checkwarn(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .stack_call(_tt107175(_vI65847_result, _vI65848_text));
      }
      return _vI65847_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1866,3,1866,4); // HACK! 
}

//------------------------------
//FUNCTION <98187>: run_felix_compiler::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI98187__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <104489>: gramtime_uncurry::aux_uncurry: Apply method
void* _fI104489_aux_uncurry::apply(_at107115 const &_arg ){
  _vI104490_inp_uncurry = _arg.data[0];
  _vI104491_out = _arg.data[1];
    start_90421_L104498:;
      _vI104494_aux__apos_2_mv_1322  = _vI104490_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI104494_aux__apos_2_mv_1322)==0) ) goto _ml1324_L104493;
      return _vI104491_out;
    _ml1324_L104493:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI104494_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI104497__lam_1326)(FLX_FPAR_PASS this, ptrgramtime_uncurry))) ) goto _ml1325_L104492;
      _vI104495_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI104494_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI104496_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI104494_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI104491_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104491_out, _lam_64494(FLX_FPAR_PASS ptrgramtime_uncurry)
      .apply(_vI104495_h_param_std_1208) /* apply_stack */))); //init
      _vI104490_inp_uncurry  = _vI104496_t_param_std_1207; //init
      goto start_90421_L104498;
    _ml1325_L104492:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <106028>: flx_processing::run_program_dynamic::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI106028__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <67822>: FlxPkgConfigQuery::getpkgfielddflt::getpkgfielddflt'2: Apply method
_a13708t_107090 _fI67822_getpkgfielddflt__apos_2::apply(_at107092 const &_arg ){
  _vI67829_pkg = _arg.data[0];
  _vI67830_field = _arg.data[1];
      _vI104938_getpkgfielddflt__apos_2_mv_64780  = getpkgfieldopt_uncurry(FLX_FPAR_PASS ptrFlxPkgConfigQuery)
      .apply(_tt107292(ptrgetpkgfielddflt->_vI67831_ehandler, _vI67829_pkg, _vI67830_field)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|Some h_param_bootflx_64741*/
      if(!andthen(FLX_VNI(_vI104938_getpkgfielddflt__apos_2_mv_64780)==1, (FLX_NEWP(_lam_64783)(FLX_FPAR_PASS this, ptrgetpkgfielddflt, ptrFlxPkgConfigQuery))) ) goto _ml64782_L104940;
      h_param_bootflx_64741 = *((_a13708t_107090*)FLX_VNP(_vI104938_getpkgfielddflt__apos_2_mv_64780)); //assign simple
      return h_param_bootflx_64741;
    _ml64782_L104940:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI104938_getpkgfielddflt__apos_2_mv_64780)==0) ) goto _ml64784_L104941;
      return ::std::string("");
    _ml64784_L104941:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",541,7,541,20);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",543,5,543,6); // HACK! 
}

//------------------------------
//FUNCTION <92297>: split::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI92297__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <105871>: flx_processing::cxx_link_static_exe::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI105871__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <106548>: flx_processing::cal_time_from_flxdepfile::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI106548__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <68306>: flx_processing: Apply method
int flx_processing::apply(_tt107125 const &_arg ){
  _vI68366_config = _arg.mem_0;
  _vI68367_control = _arg.mem_1;
  _vI68368_loopctl = _arg.mem_2;
  _vI68369_args = _arg.mem_3;
      _vI68308_result = 0; //assign simple
      _vI102076_n = ((_fI102084_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107146(0, _vI68369_args)) /* apply_stack */))/*int.flx: ctor size IDENT*/; //assign simple
      _vI102077_a = (_a13708t_107090*)(PTF gcp->collector->create_empty_array(&_a13708t_107090_ptr_map,_vI102076_n)); //assign simple
      //run procedure directcall iter_uncurry<88913>directproc (_lam_1669<102078>closure, args<68369>varname);
      {
      _pt107148* _tmp107982 = (FLX_NEWP(_lam_1669)(FLX_FPAR_PASS this));
        ::flx::rtl::con_t *_p =
          (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
          ->call(0, _tt107149((_tmp107982), _vI68369_args));
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            fprintf(stderr,"Caller flx_processing\n");
            fprintf(stderr,"Calls  iter_uncurry\n");
            abort();
          }
          _p=_p->resume();
        }
      }
      //run procedure directcall processing_stage1<67504>directproc (config<68366>varname, control<68367>varname, loopctl<68368>varname, a<102077>varname);
      {
        ::flx::rtl::con_t *_p =
          (FLX_NEWP(processing_stage1)(FLX_FPAR_PASS_ONLY))
          ->call(0, _tt107150(_vI68366_config, _vI68367_control, _vI68368_loopctl, _vI102077_a));
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            fprintf(stderr,"Caller flx_processing\n");
            fprintf(stderr,"Calls  processing_stage1\n");
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(((*_vI68367_control).VALIDATE_CACHE == 1)) ) goto _ifdoelse_bootflx_64412_L68371;
      _genout_urv104337  = (FLX_NEWP(_fI104635_dxqt__apos_2)(FLX_FPAR_PASS this)); //init
      _genout_urv104587  = validate_cache(FLX_FPAR_PASS _art107154((*_vI68367_control).AUTOMATON, (*_vI68366_config).FLX_CACHE_DIR, (*_vI68367_control).CLEAR_CACHE, (*_vI68367_control).FLXG, (*_vI68366_config).FLX_SHARE_DIR, (*_vI68367_control).GRAMMAR_DIR, (*_vI68366_config).FLX_OUTPUT_DIR, (*_vI68367_control).STDGRAMMAR, (FLX_NEWP(_pI104629_xdebugln__apos_2)(FLX_FPAR_PASS this)), (FLX_NEWP(quote_arg)(FLX_FPAR_PASS_ONLY)), _genout_urv104337)); //init
      _ds1_65436 = _genout_urv104587; //assign simple
      (*_vI68367_control).CLEAR_CACHE = _ds1_65436.mem_0; //assign simple
      (*_vI68367_control).cache_time = _ds1_65436.mem_1; //assign simple
    _ifdoelse_bootflx_64412_L68371:;
      if(!(((*_vI68368_loopctl).base == ::std::string("")) && ((*_vI68367_control).INREGEX == ::std::string("")) ) ) goto _ifdoelse_bootflx_64414_L68375;
      if(!(!(((*_vI68367_control).CLEAR_CACHE == 1)) ) ) goto _ifdoelse_bootflx_64416_L68373;
      {
      _a13708t_107090 _tmp107985 = ::std::string("usage: flx [options] filename") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107985)));
      }
      fflush(stdout);
      ::std::exit(1);
    _ifdoelse_bootflx_64416_L68373:;
      ::std::exit(0);
    _ifdoelse_bootflx_64414_L68375:;
      dbdir = _fI82124_join((*_vI68366_config).FLX_TARGET_DIR, ::std::string("config")); //assign simple
      pkgconfig = (FLX_NEWP(FlxPkgConfigQuery)(FLX_FPAR_PASS_ONLY))
      ->apply(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, dbdir)))); //assign simple
      flx_processing_mv_64429  = ((*_vI68367_control).FLX_TOOLCHAIN == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(flx_processing_mv_64429%2==1) ) goto _ml64431_L105006;
      _urv105004  = ((pkgconfig.getpkgfield1)->clone()
      ->apply((FLX_NEWP(ehandler)(FLX_FPAR_PASS this))) /* general apply */)->clone()
      ->apply(_at107092(::std::string("toolchain"), ::std::string("toolchain"))) /* general apply */; //init
      goto _end_hash_261487964;
    _ml64431_L105006:;
/*match case 2:any*/
      _urv105004  = (*_vI68367_control).FLX_TOOLCHAIN; //init
    _end_hash_261487964:;
      toolchain_name = _urv105004; //assign simple
      flx_processing_mv_64434  = toolchain_name; //init
/*begin match*/
/*match case 1:"toolchain_clang_osx"*/
      if(!((::std::string("toolchain_clang_osx") == flx_processing_mv_64434)) ) goto _ml64436_L105012;
      _urv105009  = (FLX_NEWP(toolchain_clang_osx)(FLX_FPAR_PASS_ONLY)); //init
      goto _end_hash_100570056;
    _ml64436_L105012:;
/*match case 2:"toolchain_iphoneos"*/
      if(!((::std::string("toolchain_iphoneos") == flx_processing_mv_64434)) ) goto _ml64437_L105013;
      _urv105009  = (FLX_NEWP(_fI66302_tool_hash_1053775159)(FLX_FPAR_PASS_ONLY)); //init
      goto _end_hash_100570056;
    _ml64437_L105013:;
/*match case 3:"toolchain_iphonesimulator"*/
      if(!((::std::string("toolchain_iphonesimulator") == flx_processing_mv_64434)) ) goto _ml64438_L105014;
      _urv105009  = (FLX_NEWP(toolchain_clang_apple_iPhoneSimulator)(FLX_FPAR_PASS_ONLY)); //init
      goto _end_hash_100570056;
    _ml64438_L105014:;
/*match case 4:"toolchain_clang_linux"*/
      if(!((::std::string("toolchain_clang_linux") == flx_processing_mv_64434)) ) goto _ml64439_L105015;
      _urv105009  = (FLX_NEWP(toolchain_clang_linux)(FLX_FPAR_PASS_ONLY)); //init
      goto _end_hash_100570056;
    _ml64439_L105015:;
/*match case 5:"toolchain_gcc_osx"*/
      if(!((::std::string("toolchain_gcc_osx") == flx_processing_mv_64434)) ) goto _ml64440_L105016;
      _urv105009  = (FLX_NEWP(toolchain_gcc_osx)(FLX_FPAR_PASS_ONLY)); //init
      goto _end_hash_100570056;
    _ml64440_L105016:;
/*match case 6:"toolchain_gcc_linux"*/
      if(!((::std::string("toolchain_gcc_linux") == flx_processing_mv_64434)) ) goto _ml64441_L105017;
      _urv105009  = (FLX_NEWP(toolchain_gcc_linux)(FLX_FPAR_PASS_ONLY)); //init
      goto _end_hash_100570056;
    _ml64441_L105017:;
/*match case 7:"toolchain_msvc_win32"*/
      if(!((::std::string("toolchain_msvc_win32") == flx_processing_mv_64434)) ) goto _ml64442_L105018;
      _urv105009  = (FLX_NEWP(toolchain_msvc_win32)(FLX_FPAR_PASS_ONLY)); //init
      goto _end_hash_100570056;
    _ml64442_L105018:;
/*match case 8:x_param_bootflx_64417*/
      x_param_bootflx_64417 = flx_processing_mv_64434; //assign simple
      _urv105009  = _fI85459_load__hyphen_plugin__hyphen_func1(FLX_FPAR_PASS x_param_bootflx_64417, ::std::string(""), ::std::string("")); //init
    _end_hash_100570056:;
      _vI68330_toolchain = _urv105009; //assign simple
      if(!(!(((*_vI68367_control).INREGEX == ::std::string(""))) ) ) goto _ifdoend_bootflx_64418_L68376;
      *(&_vI68367_control->USER_ARGS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((*_vI68367_control).USER_ARGS, ((::std::string("\"") + (*_vI68368_loopctl).progname ) + ::std::string("\"") ) + ::std::string(" ") ))); //assign simple
      if(!(((*_vI68367_control).INDIR == ::std::string(""))) ) goto _ifdoelse_bootflx_64421_L105042;
      *(&_vI68367_control->INDIR)  = ::std::string("."); //assign simple
    _ifdoelse_bootflx_64421_L105042:;
      _genout_urv106105  = ::std::shared_ptr< ::re2::RE2>(new RE2(((*_vI68367_control).INREGEX))); //init
      _genout_urv94433  = _genout_urv106105; //init
      regex = _genout_urv94433; //assign simple
      if(regex->ok()) goto _ifdoend_bootflx_64422_L105043;
      {
      _a13708t_107090 _tmp107986 = (::std::string("Malformed regex ") + (*_vI68367_control).INREGEX ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107986)));
      }
      fflush(stderr);
      _vI68308_result = 1; //assign simple
      goto endoff_L68378;
    _ifdoend_bootflx_64422_L105043:;
      foundfiles = (void* /*VR_nullptr*/ )0; //assign simple
      {
      rfi(FLX_FPAR_PASS this)
      .stack_call(::std::string(""));
      }
      _vI105030_files = _fI105096_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(foundfiles, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      _vI105031_n = static_cast<int>((_fI105106_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107146(0, _vI105030_files)) /* apply_stack */))/*int.flx: ctor*/; //assign simple
      {
      _a13708t_107090 _tmp107988 = ((::std::string("Processing ") + ::flx::rtl::strutil::str<_a5038t_107106>(_fI105115_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107146(0, _vI105030_files)) /* apply_stack */) ) + ::std::string(" files") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107988)));
      }
      fflush(stdout);
      _vI105032_i = 1; //assign simple
      _vI105125_xs  = _vI105030_files; //init
      _genout_urv94702  = (FLX_NEWP(_fI105126_iterator__apos_2)(FLX_FPAR_PASS this)); //init
      _generator_flx_233 = _genout_urv94702; //assign simple
    continue__ll_flx_208_L105044:;
      _lam_64444_mv_64445  = (_generator_flx_233)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some file_param_bootflx_64425*/
      if(!andthen(FLX_VNI(_lam_64444_mv_64445)==1, (FLX_NEWP(_lam_64452)(FLX_FPAR_PASS this))) ) goto _ml64447_L105045;
      file_param_bootflx_64425 = *((_a13708t_107090*)FLX_VNP(_lam_64444_mv_64445)); //assign simple
      _vI105035_arg = _fI82124_join((*_vI68367_control).INDIR, file_param_bootflx_64425); //assign simple
      _ds1_64448 = split_extension(_vI105035_arg); //assign simple
      (*_vI68368_loopctl).path = (_ds1_64448.data)[0]; //assign simple
      (*_vI68368_loopctl).ext = (_ds1_64448.data)[1]; //assign simple
      _ds1_64449 = split1(FLX_FPAR_PASS_ONLY)
      .apply((*_vI68368_loopctl).path) /* apply_stack */; //assign simple
      (*_vI68368_loopctl).dir = (_ds1_64449.data)[0]; //assign simple
      (*_vI68368_loopctl).base = (_ds1_64449.data)[1]; //assign simple
      *(&_vI68367_control->LINKER_OUTPUT_FILENAME)  = ::std::string(""); //assign simple
      *(&_vI68367_control->STDOUT)  = ::std::string(""); //assign simple
      *(&_vI68367_control->EXPECT)  = ::std::string(""); //assign simple
      _genout_urv95539  = cal_depvars(FLX_FPAR_PASS_ONLY)
      .apply(_tt107194(_vI68330_toolchain, *_vI68366_config , _vI68367_control, *_vI68368_loopctl )) /* apply_stack */; //init
      _vI105038_dvars = _genout_urv95539; //assign simple
      {
      _a13708t_107090 _tmp107989 = ::flx::rtl::strutil::flx_asprintf("Processing [%02d/%02d]: %s",_vI105032_i,_vI105031_n,file_param_bootflx_64425.c_str()) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107989)));
      }
      fflush(stdout);
      _vI105441_control  = *_vI68367_control ; //init
      _vI105142_dflt_clang_config = _art107173((void* /*VR_nullptr*/ )0, (FLX_NEWP(_pI105442_debugln)(FLX_FPAR_PASS this)), (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0); //assign simple
      _vI105152_calpackages_run = 0; //assign simple
      _vI105040_pe = _art107198((FLX_NEWP(runit)(FLX_FPAR_PASS this)), (FLX_NEWP(system)(FLX_FPAR_PASS this))); //assign simple
      _vI68308_result = (_vI105040_pe.runit)->clone()
      ->apply((FLX_NEWP(ehandler)(FLX_FPAR_PASS this))) /* general apply */; //assign simple
      if(!((_vI68308_result == 0)) ) goto endoff_L68378;
      {
      int* _tmp107990 = (int*)&_vI105032_i;
      ++*((_tmp107990));
      }
      goto continue__ll_flx_208_L105044;
    _ml64447_L105045:;
/*match case 2:|None*/
      if(!(FLX_VNI(_lam_64444_mv_64445)==0) ) goto _ml64453_L105046;
      goto endoff_L68378;
    _ml64453_L105046:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",3293,9,3293,13);
;
      goto endoff_L68378;
    _ifdoend_bootflx_64418_L68376:;
      if(!(((*_vI68367_control).SHOWCODE == 1)) ) goto _ifdoelse_bootflx_64427_L106110;
      _lam_64454_mv_64456  = (dvars.use_ext == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_lam_64454_mv_64456%2==1) ) goto _ml64458_L106113;
      _urv101060  = (::std::string("// No file ") + dvars.filebase ) + ::std::string(".(flx|fdoc) found") ; //init
      goto _end_hash_398550228;
    _ml64458_L106113:;
/*match case 2:any*/
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_573_L106115;
      {
      _a13708t_107090 _tmp107992 = (::std::string("[load] ") + ((dvars.filebase + ::std::string(".") ) + dvars.use_ext ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp107992)));
      }
      fflush(stderr);
    _ifdoelse_std_573_L106115:;
      _urv101060  = ::flx::rtl::ioutil::load_file(((dvars.filebase + ::std::string(".") ) + dvars.use_ext )); //init
    _end_hash_398550228:;
      prg = _urv101060; //assign simple
      ::flx::rtl::ioutil::write(stdout,prg);
    _ifdoelse_bootflx_64427_L106110:;
      _genout_urv101069  = cal_depvars(FLX_FPAR_PASS_ONLY)
      .apply(_tt107194(_vI68330_toolchain, *_vI68366_config , _vI68367_control, *_vI68368_loopctl )) /* apply_stack */; //init
      dvars = _genout_urv101069; //assign simple
      _vI106422_control  = *_vI68367_control ; //init
      _vI106123_dflt_clang_config = _art107173((void* /*VR_nullptr*/ )0, (FLX_NEWP(_pI106423_debugln)(FLX_FPAR_PASS this)), (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0); //assign simple
      calpackages_run = 0; //assign simple
      pe = _art107198((FLX_NEWP(_fI106400_runit)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI106124_system)(FLX_FPAR_PASS this))); //assign simple
      _vI68308_result = (pe.runit)->clone()
      ->apply((FLX_NEWP(ehandler)(FLX_FPAR_PASS this))) /* general apply */; //assign simple
    endoff_L68378:;
      return _vI68308_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",3311,3,3311,4); // HACK! 
}

//------------------------------
//FUNCTION <65954>: toolchain_gcc_linux::c_dependency_generator: Apply method
_tt107175 _fI65954_c_dependency_generator::apply(_art107174 const &_arg ){
  _vI65959_spec = _arg;
      _ds2_65610 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_gcc_linux->c_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_linux->_vI66005_config.ccflags, ::std::string("-D_POSIX")))), ::std::string("-MM")))), ptrtoolchain_gcc_linux->_vI66005_config.header_search_dirs, ptrtoolchain_gcc_linux->_vI66005_config.macros, ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI65959_spec.src)) /* apply_stack */; //assign simple
      _vI65957_result = _ds2_65610.mem_0; //assign simple
      _vI65958_data = _ds2_65610.mem_1; //assign simple
      return _tt107175(_vI65957_result, _vI65958_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",763,3,763,4); // HACK! 
}

//------------------------------
//FUNCTION <14402>: split: Apply method
void* split::apply(_at107092 const &_arg ){
  _vI14404_x = _arg.data[0];
  d = _arg.data[1];
      pos  = 0; //init
      y  = (void* /*VR_nullptr*/ )0; //init
    start_92266_L92284:;
      aux_mv_2232  = _vI14404_x.find_first_of(d,pos); //init
/*begin match*/
/*match case 1:(_sypv_1910_param_std_1911 when (== (_sypv_1910_param_std_1911, stl_npos)))*/
      if(!((aux_mv_2232 == ::std::string::npos)) ) goto _ml2234_L92283;
      _urv92276  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(y, ::flx::rtl::strutil::substr(_vI14404_x,pos,_vI14404_x.size())))); //init
      goto _end_inline_rev_split_92287_L92287;
    _ml2234_L92283:;
/*match case 2:n_param_std_1912*/
      n_param_std_1912 = aux_mv_2232; //assign simple
/*parallel assignment*/
      y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(y, ::flx::rtl::strutil::substr(_vI14404_x,pos,n_param_std_1912)))); //init
      pos  = n_param_std_1912 + 1 ; //init
      goto start_92266_L92284;
    _end_inline_rev_split_92287_L92287:;
      return _fI92289_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_urv92276, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",484,3,484,84); // HACK! 
}

//------------------------------
//FUNCTION <107034>: flx_processing::run_program_static::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI107034__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <66366>: toolchain_clang_osx::c_dynamic_object_compiler: Apply method
int _fI66366_c_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI66369_spec = _arg;
      _vI66368_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_osx->_vI66317_base_c_compile_flags, ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_clang_osx->_vI66313_c_compiler, ptrtoolchain_clang_osx->_vI66398_config.header_search_dirs, ptrtoolchain_clang_osx->_vI66398_config.macros, ::std::string("-o "), ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66369_spec.src, _vI66369_spec.dst)) /* apply_stack */; //assign simple
      return _vI66368_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1541,3,1541,4); // HACK! 
}

//------------------------------
//C PROC <16941>: config_env_overrides
void config_env_overrides(FLX_APAR_DECL _art107117* cfg){
  _art107137 _vI91861_state;
  int _vI91860_respectful_split__apos_2_mv_2297;
   ::flx::rtl::cl_t _vI91851_getenv_mv_553;
  _a13708t_107090 _vI91849_result_param_std_546;
  _a13708t_107090 _vI91848_getenv_mv_549;
  _art107137 _vI91841_state;
  int _vI91840_respectful_split__apos_2_mv_2297;
   ::flx::rtl::cl_t _vI91831_getenv_mv_553;
  _a13708t_107090 _vI91829_result_param_std_546;
  _a13708t_107090 _vI91828_getenv_mv_549;
  _art107137 _vI91821_state;
  int _vI91820_respectful_split__apos_2_mv_2297;
   ::flx::rtl::cl_t _vI91811_getenv_mv_553;
  _a13708t_107090 _vI91809_result_param_std_546;
  _a13708t_107090 _vI91808_getenv_mv_549;
   ::flx::rtl::cl_t _vI91795_getenv_mv_553;
  _a13708t_107090 _vI91793_result_param_std_546;
  _a13708t_107090 _vI91792_getenv_mv_549;
   ::flx::rtl::cl_t _vI91779_getenv_mv_553;
  _a13708t_107090 _vI91777_result_param_std_546;
  _a13708t_107090 _vI91776_getenv_mv_549;
   ::flx::rtl::cl_t getenv_mv_553;
  _a13708t_107090 result_param_std_546;
  _a13708t_107090 getenv_mv_549;
  _a13708t_107090 x_param_std_2892;
  _a13708t_107090 x_param_std_2890;
  _a13708t_107090 x_param_std_2888;
  _a13708t_107090 x_param_std_2886;
  _a13708t_107090 x_param_std_2884;
  _a13708t_107090 x_param_std_2882;
  _a13708t_107090 config_env_overrides_mv_2938;
  _a13708t_107090 config_env_overrides_mv_2934;
  _a13708t_107090 config_env_overrides_mv_2930;
  _a13708t_107090 config_env_overrides_mv_2926;
  _a13708t_107090 config_env_overrides_mv_2922;
  _a13708t_107090 config_env_overrides_mv_2918;
      getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_INSTALL_DIR")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      result_param_std_546 = getenv_mv_549; //assign simple
      getenv_mv_553  = !((result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(getenv_mv_553%2==1) ) goto _ml555_L91762;
      config_env_overrides_mv_2918  = result_param_std_546; //init
      goto _end_inline_getenv_91766_L91766;
    _ml555_L91762:;
/*match case 2:any*/
      config_env_overrides_mv_2918  = ::std::string(""); //init
    _end_inline_getenv_91766_L91766:;
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == config_env_overrides_mv_2918)) ) goto _ml2920_L16950;
      goto _em2918_L16952;
    _ml2920_L16950:;
/*match case 2:x_param_std_2882*/
      x_param_std_2882 = config_env_overrides_mv_2918; //assign simple
      *(&cfg->FLX_TARGET_DIR)  = _fI82124_join(x_param_std_2882, ::std::string("host")); //assign simple
      *(&cfg->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(_fI82124_join(x_param_std_2882, ::std::string("host")), ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS cfg);
      *(&cfg->FLX_SHARE_DIR)  = _fI82124_join(x_param_std_2882, ::std::string("share")); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS cfg);
    _em2918_L16952:;
      _vI91776_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHARE_DIR")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI91777_result_param_std_546 = _vI91776_getenv_mv_549; //assign simple
      _vI91779_getenv_mv_553  = !((_vI91777_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI91779_getenv_mv_553%2==1) ) goto _ml555_L91778;
      config_env_overrides_mv_2922  = _vI91777_result_param_std_546; //init
      goto _end_inline_getenv_91782_L91782;
    _ml555_L91778:;
/*match case 2:any*/
      config_env_overrides_mv_2922  = ::std::string(""); //init
    _end_inline_getenv_91782_L91782:;
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == config_env_overrides_mv_2922)) ) goto _ml2924_L16953;
      goto _em2922_L16955;
    _ml2924_L16953:;
/*match case 2:x_param_std_2884*/
      x_param_std_2884 = config_env_overrides_mv_2922; //assign simple
      *(&cfg->FLX_SHARE_DIR)  = x_param_std_2884; //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS cfg);
    _em2922_L16955:;
      _vI91792_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_TARGET_DIR")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI91793_result_param_std_546 = _vI91792_getenv_mv_549; //assign simple
      _vI91795_getenv_mv_553  = !((_vI91793_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI91795_getenv_mv_553%2==1) ) goto _ml555_L91794;
      config_env_overrides_mv_2926  = _vI91793_result_param_std_546; //init
      goto _end_inline_getenv_91798_L91798;
    _ml555_L91794:;
/*match case 2:any*/
      config_env_overrides_mv_2926  = ::std::string(""); //init
    _end_inline_getenv_91798_L91798:;
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == config_env_overrides_mv_2926)) ) goto _ml2928_L16956;
      goto _em2926_L16958;
    _ml2928_L16956:;
/*match case 2:x_param_std_2886*/
      x_param_std_2886 = config_env_overrides_mv_2926; //assign simple
      *(&cfg->FLX_TARGET_DIR)  = x_param_std_2886; //assign simple
      *(&cfg->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(x_param_std_2886, ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS cfg);
    _em2926_L16958:;
      _vI91808_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_CONFIG_DIRS")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI91809_result_param_std_546 = _vI91808_getenv_mv_549; //assign simple
      _vI91811_getenv_mv_553  = !((_vI91809_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI91811_getenv_mv_553%2==1) ) goto _ml555_L91810;
      config_env_overrides_mv_2930  = _vI91809_result_param_std_546; //init
      goto _end_inline_getenv_91814_L91814;
    _ml555_L91810:;
/*match case 2:any*/
      config_env_overrides_mv_2930  = ::std::string(""); //init
    _end_inline_getenv_91814_L91814:;
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == config_env_overrides_mv_2930)) ) goto _ml2932_L16959;
      goto _em2930_L16961;
    _ml2932_L16959:;
/*match case 2:x_param_std_2888*/
      x_param_std_2888 = config_env_overrides_mv_2930; //assign simple
      _vI91821_state = respectful_parse_uncurry_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107142(_art107141(/*VR_int*/1, /*VR_int*/1, /*VR_int*/1), _art107137(::std::string(""), /*VR_int*/1, (void* /*VR_nullptr*/ )0), x_param_std_2888)) /* apply_stack */; //assign simple
      _vI91820_respectful_split__apos_2_mv_2297  = _vI91821_state.mode; //init
/*begin match*/
/*match case 1:|skipping*/
      if(!(_vI91820_respectful_split__apos_2_mv_2297%7==1) ) goto _ml2299_L91822;
      goto _em2297_L91823;
    _ml2299_L91822:;
/*match case 2:any*/
      _vI91821_state.parsed = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI91821_state.parsed, _vI91821_state.current)) /* apply_stack */; //assign simple
    _em2297_L91823:;
      *(&cfg->FLX_CONFIG_DIRS)  = _vI91821_state.parsed; //assign simple
    _em2930_L16961:;
      _vI91828_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_LIB_DIRS")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI91829_result_param_std_546 = _vI91828_getenv_mv_549; //assign simple
      _vI91831_getenv_mv_553  = !((_vI91829_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI91831_getenv_mv_553%2==1) ) goto _ml555_L91830;
      config_env_overrides_mv_2934  = _vI91829_result_param_std_546; //init
      goto _end_inline_getenv_91834_L91834;
    _ml555_L91830:;
/*match case 2:any*/
      config_env_overrides_mv_2934  = ::std::string(""); //init
    _end_inline_getenv_91834_L91834:;
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == config_env_overrides_mv_2934)) ) goto _ml2936_L16962;
      goto _em2934_L16964;
    _ml2936_L16962:;
/*match case 2:x_param_std_2890*/
      x_param_std_2890 = config_env_overrides_mv_2934; //assign simple
      _vI91841_state = respectful_parse_uncurry_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107142(_art107141(/*VR_int*/1, /*VR_int*/1, /*VR_int*/1), _art107137(::std::string(""), /*VR_int*/1, (void* /*VR_nullptr*/ )0), x_param_std_2890)) /* apply_stack */; //assign simple
      _vI91840_respectful_split__apos_2_mv_2297  = _vI91841_state.mode; //init
/*begin match*/
/*match case 1:|skipping*/
      if(!(_vI91840_respectful_split__apos_2_mv_2297%7==1) ) goto _ml2299_L91842;
      goto _em2297_L91843;
    _ml2299_L91842:;
/*match case 2:any*/
      _vI91841_state.parsed = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI91841_state.parsed, _vI91841_state.current)) /* apply_stack */; //assign simple
    _em2297_L91843:;
      *(&cfg->FLX_LIB_DIRS)  = _vI91841_state.parsed; //assign simple
    _em2934_L16964:;
      _vI91848_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_RTL_DIRS")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI91849_result_param_std_546 = _vI91848_getenv_mv_549; //assign simple
      _vI91851_getenv_mv_553  = !((_vI91849_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI91851_getenv_mv_553%2==1) ) goto _ml555_L91850;
      config_env_overrides_mv_2938  = _vI91849_result_param_std_546; //init
      goto _end_inline_getenv_91854_L91854;
    _ml555_L91850:;
/*match case 2:any*/
      config_env_overrides_mv_2938  = ::std::string(""); //init
    _end_inline_getenv_91854_L91854:;
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == config_env_overrides_mv_2938)) ) goto _ml2940_L16965;
      return; // proc return from stackable 
    _ml2940_L16965:;
/*match case 2:x_param_std_2892*/
      x_param_std_2892 = config_env_overrides_mv_2938; //assign simple
      _vI91861_state = respectful_parse_uncurry_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107142(_art107141(/*VR_int*/1, /*VR_int*/1, /*VR_int*/1), _art107137(::std::string(""), /*VR_int*/1, (void* /*VR_nullptr*/ )0), x_param_std_2892)) /* apply_stack */; //assign simple
      _vI91860_respectful_split__apos_2_mv_2297  = _vI91861_state.mode; //init
/*begin match*/
/*match case 1:|skipping*/
      if(!(_vI91860_respectful_split__apos_2_mv_2297%7==1) ) goto _ml2299_L91862;
      goto _em2297_L91863;
    _ml2299_L91862:;
/*match case 2:any*/
      _vI91861_state.parsed = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI91861_state.parsed, _vI91861_state.current)) /* apply_stack */; //assign simple
    _em2297_L91863:;
      *(&cfg->FLX_RTL_DIRS)  = _vI91861_state.parsed; //assign simple
      return; // proc return from stackable 
      return; // proc return from stackable 
}
//------------------------------
//FUNCTION <105180>: flx_processing::cal_time_from_flxdepfile::maxf: Apply method
_ft107543* _fI105180_maxf::apply(double const &_arg ){
  _vI105186_x = _arg;
      return (FLX_NEWP(_fI105181_maxf__apos_2)(FLX_FPAR_PASS this, ptrcal_time_from_flxdepfile, ptrflx_processing));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2122,5,2122,6); // HACK! 
}

//------------------------------
//FUNCTION <93219>: generic_cxx_compile_for_dynamic_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93219__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//C FUNC <5149>: andthen
 ::flx::rtl::cl_t andthen(  ::flx::rtl::cl_t _vI5153_x, _ft107191* _vI5154_y){
   ::flx::rtl::cl_t andthen_mv_147;
      andthen_mv_147  = _vI5153_x; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(andthen_mv_147%2==1) ) goto _ml149_L90335;
      return (_vI5154_y)->clone()
      ->apply() /* general apply */;
    _ml149_L90335:;
/*match case 2:any*/
      return 0;
}
//------------------------------
//FUNCTION <93387>: generic_link_exe_static_uncurry::aux_uncurry: Apply method
void* _fI93387_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93388_inp_uncurry = _arg.data[0];
  _vI93389_out = _arg.data[1];
    start_90421_L93396:;
      _vI93392_aux__apos_2_mv_1322  = _vI93388_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93392_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93391;
      return _vI93389_out;
    _ml1324_L93391:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93392_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93395__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_link_exe_static_uncurry))) ) goto _ml1325_L93390;
      _vI93393_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93392_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93394_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93392_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93389_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93389_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93393_h_param_std_1208) /* apply_stack */))); //init
      _vI93388_inp_uncurry  = _vI93394_t_param_std_1207; //init
      goto start_90421_L93396;
    _ml1325_L93390:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <99212>: subscript::_lam_2000: Apply method
 ::flx::rtl::cl_t _lam_2000::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",225,7,225,25); // HACK! 
}

//------------------------------
//FUNCTION <106521>: flx_processing::find_cxx_pkgs::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI106521__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <66025>: toolchain_gcc_osx::dependency_extension: Apply method
_a13708t_107090 _fI66025_dependency_extension::apply(){
      return ::std::string(".d");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",971,3,971,45); // HACK! 
}

//------------------------------
//FUNCTION <97539>: map_package_requirements_uncurry::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI97539__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <89722>: map_package_requirements_uncurry::_lam_64520: Apply method
_a13708t_107090 _lam_64520::apply(_a13708t_107090 const &_arg ){
  _vI89723_s = _arg;
      return ::std::string("--path+=") + _vI89723_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",712,9,712,38); // HACK! 
}

//------------------------------
//FUNCTION <92476>: toolchain_msvc_win32::static_executable_linker::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI92476__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <89220>: toolchain_clang_apple_iOS_maker_uncurry::static_library_extension: Apply method
_a13708t_107090 _fI89220_static_library_extension::apply(){
      return ::std::string(".a");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1996,3,1996,49); // HACK! 
}

//------------------------------
//FUNCTION <67834>: FlxPkgConfigQuery::getclosure::getclosure'2: Apply method
void* _fI67834_getclosure__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI67839_pkg = _arg;
      _genout_urv104946  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrFlxPkgConfigQuery->paths, ::std::string("--keeprightmost"))) /* apply_stack */, ::std::string("--rec"))) /* apply_stack */, ::std::string("--list"))) /* apply_stack */, _vI67839_pkg)) /* apply_stack */) /* apply_stack */; //init
      _ds2_64785 = _genout_urv104946; //assign simple
      _vI67837_result = _ds2_64785.mem_0; //assign simple
      _vI67838_values = _ds2_64785.mem_1; //assign simple
      if(!(!((_vI67837_result == 0)) ) ) goto _ifdoelse_bootflx_64743_L67841;
      {
      _a13708t_107090 _tmp107994 = (::std::string("missing package for closure of ") + _vI67839_pkg ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp107994)));
      }
      fflush(stdout);
      {
      _a6203t_107291 _tmp107995 = (_a6203t_107291)(ptrgetclosure->_vI67842_ehandler);
      throw ((_tmp107995));
      }
    _ifdoelse_bootflx_64743_L67841:;
      return _fI104958_aux_uncurry(FLX_FPAR_PASS this, ptrgetclosure, ptrFlxPkgConfigQuery)
      .apply(_at107115(_vI67838_values, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",559,5,559,6); // HACK! 
}

//------------------------------
//FUNCTION <102477>: exts::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI102477__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <93369>: generic_link_exe_static_uncurry::aux_uncurry: Apply method
void* _fI93369_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93370_inp_uncurry = _arg.data[0];
  _vI93371_out = _arg.data[1];
    start_90421_L93378:;
      _vI93374_aux__apos_2_mv_1322  = _vI93370_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93374_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93373;
      return _vI93371_out;
    _ml1324_L93373:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93374_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93377__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_link_exe_static_uncurry))) ) goto _ml1325_L93372;
      _vI93375_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93374_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93376_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93374_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93371_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93371_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93375_h_param_std_1208) /* apply_stack */))); //init
      _vI93370_inp_uncurry  = _vI93376_t_param_std_1207; //init
      goto start_90421_L93378;
    _ml1325_L93372:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <92546>: toolchain_msvc_win32::dynamic_executable_linker::iterator'2: Apply method
void* _fI92546_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L92547:;
      _vI92551_iterator__apos_2_mv_1504  = ptrdynamic_executable_linker->_vI92545_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI92551_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI92554__lam_1507)(FLX_FPAR_PASS this, ptrdynamic_executable_linker, ptrtoolchain_msvc_win32))) ) goto _ml1506_L92550;
      _vI92552_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI92551_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI92553_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI92551_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrdynamic_executable_linker->_vI92545_xs = _vI92553_t_param_std_1259; //assign simple
      FLX_SET_PC(107997)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI92552_h_param_std_1260));//yield
    FLX_CASE_LABEL(107997)
      goto continue__ll_lists_5177_L92547;
    _ml1506_L92550:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI92551_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L92549;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L92549:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L92547;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <103087>: setup-from-file_uncurry::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI103087__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <66136>: toolchain_clang_linux::c_dependency_generator: Apply method
_tt107175 _fI66136_c_dependency_generator::apply(_art107174 const &_arg ){
  _vI66141_spec = _arg;
      _ds2_65606 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_clang_linux->_vI66102_c_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_linux->_vI66187_config.ccflags, ::std::string("-MM")))), ptrtoolchain_clang_linux->_vI66187_config.header_search_dirs, ptrtoolchain_clang_linux->_vI66187_config.macros, ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66141_spec.src)) /* apply_stack */; //assign simple
      _vI66139_result = _ds2_65606.mem_0; //assign simple
      _vI66140_data = _ds2_65606.mem_1; //assign simple
      return _tt107175(_vI66139_result, _vI66140_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1246,3,1246,4); // HACK! 
}

//------------------------------
//FUNCTION <97424>: map_package_requirements_uncurry::_lam_64522::_lam_64522'2::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI97424__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <65716>: toolchain_msvc_win32::dynamic_object_extension: Apply method
_a13708t_107090 dynamic_object_extension::apply(){
      return ::std::string("_dynamic.obj");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1738,3,1738,59); // HACK! 
}

//------------------------------
//FUNCTION <97483>: map_package_requirements_uncurry::aux_uncurry: Apply method
_a13708t_107090 _fI97483_aux_uncurry::apply(_tt107116 const &_arg ){
  _vI97484_init_uncurry = _arg.mem_0;
  _vI97485_x = _arg.mem_1;
    start_95154_L97492:;
      _vI97488_aux__apos_2_mv_1297  = _vI97485_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97488_aux__apos_2_mv_1297)==0) ) goto _ml1299_L97487;
      return _vI97484_init_uncurry;
    _ml1299_L97487:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI97488_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI97491__lam_1301)(FLX_FPAR_PASS this, ptrmap_package_requirements_uncurry))) ) goto _ml1300_L97486;
      _vI97489_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI97488_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI97490_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI97488_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI97485_x  = _vI97490_t_param_std_1199; //init
      _vI97484_init_uncurry  = ((FLX_NEWP(join)(FLX_FPAR_PASS_ONLY))
      ->apply(_vI97484_init_uncurry))->clone()
      ->apply(_vI97489_h_param_std_1200) /* general apply */; //init
      goto start_95154_L97492;
    _ml1300_L97486:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <95961>: flx_pkgconfig::check_id::iterator'2: Apply method
void* _fI95961_iterator__apos_2::apply(){
  FLX_START_SWITCH
      _vI95962_i = 0; //assign simple
    redo__ll_strings_6968_L95963:;
      if(FLX_UNLIKELY(!(!(((static_cast<int>((ptrcheck_id->_vI95965_x.size()))/*int.flx: ctor*/) - 1  < _vI95962_i)) ) )) goto break__ll_strings_6968_L95964;
      FLX_SET_PC(108000)
      return FLX_VNR(1, new(*PTF gcp, char_ptr_map, true) char (::flx::rtl::strutil::subscript(ptrcheck_id->_vI95965_x,_vI95962_i)));//yield
    FLX_CASE_LABEL(108000)
      {
      int* _tmp108001 = (int*)&_vI95962_i;
      ++*((_tmp108001));
      }
      goto redo__ll_strings_6968_L95963;
    break__ll_strings_6968_L95964:;
      return (void* /*VR_nullptr*/ )0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",365,5,365,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <89225>: toolchain_clang_apple_iOS_maker_uncurry::get_base_cxx_compile_flags: Apply method
void* _fI89225_get_base_cxx_compile_flags::apply(){
      return ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89211_base_cxx_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2001,3,2001,69); // HACK! 
}

//------------------------------
//C FUNC <14324>: lstrip
_a13708t_107090 lstrip( _a13708t_107090 _vI14329_x, _a13708t_107090 _vI14330_e){
  _a5038t_107106 _vI14328_j;
   ::flx::rtl::cl_t _vI14327_found;
  _a5038t_107106 _vI14326_i;
      if(!((0 < _vI14329_x.size())) ) goto _ifdoelse_std_1898_L14341;
      _vI14326_i = 0; //assign simple
    redo__ll_strings_7002_L14331:;
      if(FLX_UNLIKELY(!(!((_vI14329_x.size() - 1  < _vI14326_i)) ) )) goto _ifdoelse_std_1898_L14341;
      _vI14327_found = 0; //assign simple
      _vI14328_j = 0; //assign simple
    redo__ll_strings_7008_L14332:;
      if(FLX_UNLIKELY(!(!((_vI14330_e.size() - 1  < _vI14328_j)) ) )) goto break__ll_strings_7008_L14336;
      if(!((::flx::rtl::strutil::subscript(_vI14329_x,_vI14326_i) == ::flx::rtl::strutil::subscript(_vI14330_e,_vI14328_j))) ) goto _ifdoelse_std_1900_L14334;
      _vI14327_found = 1; //assign simple
    _ifdoelse_std_1900_L14334:;
      {
      _a5038t_107106* _tmp108002 = (_a5038t_107106*)&_vI14328_j;
      ++*((_tmp108002));
      }
      goto redo__ll_strings_7008_L14332;
    break__ll_strings_7008_L14336:;
      if(_vI14327_found) goto _ifdoend_std_1901_L14337;
      return ::flx::rtl::strutil::substr(_vI14329_x,_vI14326_i,_vI14329_x.size());
    _ifdoend_std_1901_L14337:;
      {
      _a5038t_107106* _tmp108003 = (_a5038t_107106*)&_vI14326_i;
      ++*((_tmp108003));
      }
      goto redo__ll_strings_7002_L14331;
    _ifdoelse_std_1898_L14341:;
      return ::std::string("");
}
//------------------------------
//FUNCTION <106258>: flx_processing::cxx_link_shared_library::_lam_65511: Apply method
_a13708t_107090 _fI106258__lam_65511::apply(_a13708t_107090 const &_arg ){
  _vI106259_s = _arg;
      return ::std::string("--path+=") + _vI106259_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2488,11,2488,40); // HACK! 
}

//------------------------------
//FUNCTION <97597>: map_package_requirements_uncurry::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI97597__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------

//PROCEDURE <67245:> handle_switch: Call method
::flx::rtl::con_t * handle_switch::call(::flx::rtl::con_t *_ptr_caller, _tt107270 const &_arg){
  _caller = _ptr_caller;
  _vI67271_config = _arg.mem_0;
  _vI67272_control = _arg.mem_1;
  arg = _arg.mem_2;
  INIT_PC
  return this;
}

//PROCEDURE <67245:> handle_switch: Resume method
::flx::rtl::con_t *handle_switch::resume(){
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--cmd=").size()) == ::std::string("--cmd="))) ) goto _ifdoend_bootflx_64851_L67274;
      _vI102787_text = ::flx::rtl::strutil::substr(arg,6,arg.size()); //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_565_L102790;
      {
      _a13708t_107090 _tmp108004 = (::std::string("[Open_output] ") + ::std::string("cmd.flx") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108004)));
      }
      fflush(stderr);
    _ifdoelse_std_565_L102790:;
      _genout_urv102799  = fopen((::std::string("cmd.flx")).c_str(),"wb"); //init
      _genout_urv102743  = _genout_urv102799; //init
      _genout_urv102731  = _genout_urv102743; //init
      _vI102792__genout_urv98289  = _genout_urv102731; //init
      _genout_urv102724  = _vI102792__genout_urv98289; //init
      _vI102788_f = _genout_urv102724; //assign simple
      {
      _a13708t_107090 _tmp108005 = _vI102787_text + ::std::string(";\n") ;
      ::flx::rtl::ioutil::write(_vI102788_f,((_tmp108005)));
      }
      (void)fclose(_vI102788_f);
      *(&_vI67272_control->CMDLINE_INPUT)  = 1; //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _ifdoelse_bootflx_64852_L67409;
      {
      _a13708t_107090 _tmp108006 = (::std::string("[flx] ") + ((::std::string("Running command '") + _vI102787_text ) + ::std::string(";'") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108006)));
      }
      FLX_RETURN // procedure return
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64851_L67274:;
      if(!((arg == ::std::string("--repl"))) ) goto _ifdoend_bootflx_64853_L67275;
      *(&_vI67272_control->REPL_MODE)  = 1; //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _ifdoelse_bootflx_64852_L67409;
      {
      _a13708t_107090 _tmp108007 = (::std::string("[flx] ") + ::std::string("Set REPL mode") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108007)));
      }
      FLX_RETURN // procedure return
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64853_L67275:;
      if(!((arg == ::std::string("--nostdimport"))) ) goto _ifdoend_bootflx_64855_L67276;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_102807_L102807;
      {
      _a13708t_107090 _tmp108008 = (::std::string("[flx] ") + ::std::string("No standard library import") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108008)));
      }
    _end_102807_L102807:;
      *(&_vI67272_control->STDIMPORT)  = ::std::string(""); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64855_L67276:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--import=").size()) == ::std::string("--import="))) ) goto _ifdoend_bootflx_64857_L67277;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_102817_L102817;
      {
      _a13708t_107090 _tmp108009 = (::std::string("[flx] ") + ::std::string("Add import") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108009)));
      }
    _end_102817_L102817:;
      *(&_vI67272_control->IMPORTS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67272_control).IMPORTS, ::flx::rtl::strutil::substr(arg,9,arg.size()))) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64857_L67277:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--felix=").size()) == ::std::string("--felix="))) ) goto _ifdoend_bootflx_64859_L67278;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_102827_L102827;
      {
      _a13708t_107090 _tmp108010 = (::std::string("[flx] ") + ::std::string("Set install details") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108010)));
      }
    _end_102827_L102827:;
      {
      _pt107148* _tmp108011 = (FLX_NEWP(_pI87817_debugln)(FLX_FPAR_PASS this));
      _a13708t_107090 _tmp108012 = ::flx::rtl::strutil::substr(arg,8,arg.size());
      ::flx::rtl::con_t *tmp = _caller;
      _caller = 0;
      return (FLX_NEWP(_pI88880_setup__hyphen_from__hyphen_file_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(tmp, _tt107271((_tmp108011), _vI67271_config, _vI67272_control, (_tmp108012)));
      }
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64859_L67278:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--target-subdir=").size()) == ::std::string("--target-subdir="))) ) goto _ifdoend_bootflx_64861_L67279;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_102761_L103193;
      {
      _a13708t_107090 _tmp108014 = (::std::string("[flx] ") + ::std::string("Set target subdirectory") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108014)));
      }
    _end_102761_L103193:;
      _vI103190_a = ::flx::rtl::strutil::substr(arg,16,arg.size()); //assign simple
      *(&_vI67272_control->FLX_TARGET_SUBDIR)  = _vI103190_a; //assign simple
      *(&_vI67271_config->FLX_TARGET_DIR)  = _fI82124_join((*_vI67272_control).FLX_INSTALL_DIR, (*_vI67272_control).FLX_TARGET_SUBDIR); //assign simple
      *(&_vI67271_config->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(_fI82124_join((*_vI67272_control).FLX_INSTALL_DIR, (*_vI67272_control).FLX_TARGET_SUBDIR), ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS _vI67271_config);
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64861_L67279:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--target-dir=").size()) == ::std::string("--target-dir="))) ) goto _ifdoend_bootflx_64863_L67280;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103204_L103204;
      {
      _a13708t_107090 _tmp108015 = (::std::string("[flx] ") + ::std::string("Set target configuration directory") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108015)));
      }
    _end_103204_L103204:;
      *(&_vI67271_config->FLX_TARGET_DIR)  = ::flx::rtl::strutil::substr(arg,13,arg.size()); //assign simple
      *(&_vI67271_config->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(::flx::rtl::strutil::substr(arg,13,arg.size()), ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS _vI67271_config);
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64863_L67280:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--pkgconfig-path+=").size()) == ::std::string("--pkgconfig-path+="))) ) goto _ifdoend_bootflx_64865_L67281;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103218_L103218;
      {
      _a13708t_107090 _tmp108016 = (::std::string("[flx] ") + ::std::string("Prepend extra flx_pkgconfig directory to standard path") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108016)));
      }
    _end_103218_L103218:;
      *(&_vI67271_config->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((*_vI67271_config).FLX_CONFIG_DIRS, ::flx::rtl::strutil::substr(arg,18,arg.size())))); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64865_L67281:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--toolchain=").size()) == ::std::string("--toolchain="))) ) goto _ifdoend_bootflx_64867_L67282;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103234_L103234;
      {
      _a13708t_107090 _tmp108017 = (::std::string("[flx] ") + ::std::string("Set toolchain") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108017)));
      }
    _end_103234_L103234:;
      *(&_vI67272_control->FLX_TOOLCHAIN)  = ::flx::rtl::strutil::substr(arg,12,arg.size()); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64867_L67282:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--test=").size()) == ::std::string("--test="))) ) goto _ifdoend_bootflx_64869_L67283;
      _vI67264_a = ::flx::rtl::strutil::substr(arg,7,arg.size()); //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103244_L103244;
      {
      _a13708t_107090 _tmp108018 = (::std::string("[flx] ") + ::std::string("Set test directory") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108018)));
      }
    _end_103244_L103244:;
      *(&_vI67271_config->FLX_TARGET_DIR)  = _fI82124_join(_vI67264_a, ::std::string("host")); //assign simple
      *(&_vI67271_config->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(_fI82124_join(_vI67264_a, ::std::string("host")), ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS _vI67271_config);
      *(&_vI67271_config->FLX_SHARE_DIR)  = _fI82124_join(_vI67264_a, ::std::string("share")); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS _vI67271_config);
      *(&_vI67272_control->FLX_INSTALL_DIR)  = _vI67264_a; //assign simple
      *(&_vI67272_control->FLX_TARGET_SUBDIR)  = ::std::string("host"); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64869_L67283:;
      if(!((arg == ::std::string("--test"))) ) goto _ifdoend_bootflx_64871_L67284;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_102770_L103251;
      {
      _a13708t_107090 _tmp108019 = (::std::string("[flx] ") + ::std::string("Set test directory") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108019)));
      }
    _end_102770_L103251:;
      _vI67264_a = ::std::string("."); //assign simple
      *(&_vI67271_config->FLX_TARGET_DIR)  = _fI82124_join(_vI67264_a, ::std::string("host")); //assign simple
      *(&_vI67271_config->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(_fI82124_join(_vI67264_a, ::std::string("host")), ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS _vI67271_config);
      *(&_vI67271_config->FLX_SHARE_DIR)  = _fI82124_join(_vI67264_a, ::std::string("share")); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS _vI67271_config);
      *(&_vI67272_control->FLX_INSTALL_DIR)  = _vI67264_a; //assign simple
      *(&_vI67272_control->FLX_TARGET_SUBDIR)  = ::std::string("host"); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64871_L67284:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--stdout=").size()) == ::std::string("--stdout="))) ) goto _ifdoend_bootflx_64873_L67285;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103262_L103262;
      {
      _a13708t_107090 _tmp108020 = (::std::string("[flx] ") + ::std::string("Redirect standard output") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108020)));
      }
    _end_103262_L103262:;
      *(&_vI67272_control->STDOUT)  = ::flx::rtl::strutil::substr(arg,9,arg.size()); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64873_L67285:;
      if(!((arg == ::std::string("--expect"))) ) goto _ifdoend_bootflx_64875_L67286;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103266_L103266;
      {
      _a13708t_107090 _tmp108021 = (::std::string("[flx] ") + ::std::string("compare stdout with expect file (default name)") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108021)));
      }
    _end_103266_L103266:;
      *(&_vI67272_control->CHECK_EXPECT)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64875_L67286:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--expect=").size()) == ::std::string("--expect="))) ) goto _ifdoend_bootflx_64877_L67287;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103276_L103276;
      {
      _a13708t_107090 _tmp108022 = (::std::string("[flx] ") + ::std::string("compare stdout with expect file") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108022)));
      }
    _end_103276_L103276:;
      *(&_vI67272_control->EXPECT)  = ::flx::rtl::strutil::substr(arg,9,arg.size()); //assign simple
      *(&_vI67272_control->CHECK_EXPECT)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64877_L67287:;
      if(!((arg == ::std::string("--input"))) ) goto _ifdoend_bootflx_64879_L67288;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103280_L103280;
      {
      _a13708t_107090 _tmp108023 = (::std::string("[flx] ") + ::std::string("redirect stdin to (default name)") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108023)));
      }
    _end_103280_L103280:;
      *(&_vI67272_control->SET_STDIN)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64879_L67288:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--input=").size()) == ::std::string("--input="))) ) goto _ifdoend_bootflx_64881_L67289;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103290_L103290;
      {
      _a13708t_107090 _tmp108024 = (::std::string("[flx] ") + ::std::string("redirect stdin to file") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108024)));
      }
    _end_103290_L103290:;
      *(&_vI67272_control->STDIN)  = ::flx::rtl::strutil::substr(arg,8,arg.size()); //assign simple
      *(&_vI67272_control->SET_STDIN)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64881_L67289:;
      if(!((arg == ::std::string("--show"))) ) goto _ifdoend_bootflx_64883_L67290;
      *(&_vI67272_control->SHOWCODE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64883_L67290:;
      if(!((arg == ::std::string("--clean"))) ) goto _ifdoend_bootflx_64885_L67291;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103294_L103294;
      {
      _a13708t_107090 _tmp108025 = (::std::string("[flx] ") + ::std::string("Clear caches") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108025)));
      }
    _end_103294_L103294:;
      *(&_vI67272_control->CLEAR_CACHE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64885_L67291:;
      if(!((arg == ::std::string("--force"))) ) goto _ifdoend_bootflx_64887_L67292;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103298_L103298;
      {
      _a13708t_107090 _tmp108026 = (::std::string("[flx] ") + ::std::string("Force recompilation") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108026)));
      }
    _end_103298_L103298:;
      *(&_vI67272_control->RECOMPILE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64887_L67292:;
      if(!((arg == ::std::string("--force-compiler"))) ) goto _ifdoend_bootflx_64889_L67293;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103302_L103302;
      {
      _a13708t_107090 _tmp108027 = (::std::string("[flx] ") + ::std::string("Force flxg compiler to rebuild everything") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108027)));
      }
    _end_103302_L103302:;
      *(&_vI67272_control->RECOMPILE)  = 1; //assign simple
      *(&_vI67272_control->FLXG_FORCE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64889_L67293:;
      if(!((arg == ::std::string("--debug-flx"))) ) goto _ifdoend_bootflx_64891_L67294;
      *(&_vI67272_control->DEBUG_FLX)  = 1; //assign simple
      *(&_vI67272_control->ECHO)  = 1; //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103306_L103306;
      {
      _a13708t_107090 _tmp108028 = (::std::string("[flx] ") + ::std::string("debug flx tool ON") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108028)));
      }
    _end_103306_L103306:;
      *(&_vI67272_control->DEBUG)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64891_L67294:;
      if(!((arg == ::std::string("--debug"))) ) goto _ifdoend_bootflx_64893_L67295;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103310_L103310;
      {
      _a13708t_107090 _tmp108029 = (::std::string("[flx] ") + ::std::string("Enable runtime debugging") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108029)));
      }
    _end_103310_L103310:;
      *(&_vI67272_control->DEBUG)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64893_L67295:;
      if(!((arg == ::std::string("--debug-compiler"))) ) goto _ifdoend_bootflx_64895_L67296;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103314_L103314;
      {
      _a13708t_107090 _tmp108030 = (::std::string("[flx] ") + ::std::string("Enable compiler debugging") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108030)));
      }
    _end_103314_L103314:;
      *(&_vI67272_control->DEBUG_COMPILER)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64895_L67296:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--compiler-phase=").size()) == ::std::string("--compiler-phase="))) ) goto _ifdoend_bootflx_64897_L67297;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103324_L103324;
      {
      _a13708t_107090 _tmp108031 = (::std::string("[flx] ") + ::std::string("Change the compiler phase") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108031)));
      }
    _end_103324_L103324:;
      *(&_vI67272_control->COMPILER_PHASE)  = ::flx::rtl::strutil::substr(arg,::std::string("--compiler-phase=").size(),arg.size()); //assign simple
      *(&_vI67272_control->RUNIT)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64897_L67297:;
      if(!((arg == ::std::string("--nooptimise"))) ) goto _ifdoend_bootflx_64899_L67298;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103328_L103328;
      {
      _a13708t_107090 _tmp108032 = (::std::string("[flx] ") + ::std::string("Disable optimisation") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108032)));
      }
    _end_103328_L103328:;
      *(&_vI67272_control->NOOPTIMISE)  = 1; //assign simple
      *(&_vI67272_control->DOREDUCE)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64899_L67298:;
      _vI103399_n = 2; //assign simple
      if(!((0 < _vI103399_n)) ) goto _ifdoelse_std_1567_L103394;
      _vI103400_i = 0; //assign simple
    redo__ll_arrays_5385_L103397:;
      if(FLX_UNLIKELY(!(!((_vI103399_n - 1  < _vI103400_i)) ) )) goto _ifdoelse_std_1567_L103394;
      (_vI103401_a.data)[0] = ::std::string("--compiler-optimise"); //assign simple
      (_vI103401_a.data)[1] = ::std::string("--compiler-optimize"); //assign simple
      if(!(((_vI103401_a.data)[reinterpret< ::flx::rtl::cl_t>(_vI103400_i)] == arg)) ) goto _ifdoend_std_1568_L103398;
      _urv103391  = 1; //init
      goto _end_inline___bsol_in_103404_L103404;
    _ifdoend_std_1568_L103398:;
      {
      _a5038t_107106* _tmp108033 = (_a5038t_107106*)&_vI103400_i;
      ++*((_tmp108033));
      }
      goto redo__ll_arrays_5385_L103397;
    _ifdoelse_std_1567_L103394:;
      _urv103391  = 0; //init
    _end_inline___bsol_in_103404_L103404:;
      if(!_urv103391 ) goto _ifdoend_bootflx_64901_L67299;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103408_L103408;
      {
      _a13708t_107090 _tmp108034 = (::std::string("[flx] ") + ::std::string("Enable heavy flxg optimisation") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108034)));
      }
    _end_103408_L103408:;
      *(&_vI67272_control->FLXG_OPTIMISE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64901_L67299:;
      if(!((arg == ::std::string("--nostdlib"))) ) goto _ifdoend_bootflx_64903_L67300;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103412_L103412;
      {
      _a13708t_107090 _tmp108035 = (::std::string("[flx] ") + ::std::string("Do not load standard library") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108035)));
      }
    _end_103412_L103412:;
      *(&_vI67272_control->NOSTDLIB)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64903_L67300:;
      if(!((arg == ::std::string("--echo"))) ) goto _ifdoend_bootflx_64905_L67301;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103416_L103416;
      {
      _a13708t_107090 _tmp108036 = (::std::string("[flx] ") + ::std::string("Echo commands sent to system") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108036)));
      }
    _end_103416_L103416:;
      *(&_vI67272_control->ECHO)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64905_L67301:;
      if(!((arg == ::std::string("--noreduce"))) ) goto _ifdoend_bootflx_64907_L67302;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103420_L103420;
      {
      _a13708t_107090 _tmp108037 = (::std::string("[flx] ") + ::std::string("do not perform reductions") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108037)));
      }
    _end_103420_L103420:;
      *(&_vI67272_control->DOREDUCE)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64907_L67302:;
      if(!((arg == ::std::string("--doreduce"))) ) goto _ifdoend_bootflx_64909_L67303;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103424_L103424;
      {
      _a13708t_107090 _tmp108038 = (::std::string("[flx] ") + ::std::string("do perform reductions") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108038)));
      }
    _end_103424_L103424:;
      *(&_vI67272_control->DOREDUCE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64909_L67303:;
      if(!((arg == ::std::string("--static"))) ) goto _ifdoend_bootflx_64911_L67304;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103428_L103428;
      {
      _a13708t_107090 _tmp108039 = (::std::string("[flx] ") + ::std::string("Compile a statically linked program") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108039)));
      }
    _end_103428_L103428:;
      *(&_vI67272_control->STATIC)  = 1; //assign simple
      *(&_vI67272_control->LINKEXE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64911_L67304:;
      if(!((arg == ::std::string("--staticlib"))) ) goto _ifdoend_bootflx_64913_L67305;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103432_L103432;
      {
      _a13708t_107090 _tmp108040 = (::std::string("[flx] ") + ::std::string("make a static link library (instead of a program)") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108040)));
      }
    _end_103432_L103432:;
      *(&_vI67272_control->STATIC)  = 1; //assign simple
      *(&_vI67272_control->STATICLIB)  = 1; //assign simple
      *(&_vI67272_control->RUNIT)  = 0; //assign simple
      *(&_vI67272_control->LINKEXE)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64913_L67305:;
      if(!((arg == ::std::string("--exe"))) ) goto _ifdoend_bootflx_64915_L67306;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103436_L103436;
      {
      _a13708t_107090 _tmp108041 = (::std::string("[flx] ") + ::std::string("make an executable") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108041)));
      }
    _end_103436_L103436:;
      *(&_vI67272_control->LINKEXE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64915_L67306:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--inline=").size()) == ::std::string("--inline="))) ) goto _ifdoend_bootflx_64917_L67307;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103446_L103446;
      {
      _a13708t_107090 _tmp108042 = (::std::string("[flx] ") + ::std::string("Set inline aggressiveness") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108042)));
      }
    _end_103446_L103446:;
      *(&_vI67272_control->INLINE)  = static_cast<int>(::std::atoi((::flx::rtl::strutil::substr(arg,9,arg.size())).c_str())); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64917_L67307:;
      if(!((arg == ::std::string("--inline"))) ) goto _ifdoend_bootflx_64919_L67308;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103450_L103450;
      {
      _a13708t_107090 _tmp108043 = (::std::string("[flx] ") + ::std::string("Set inline aggressiveness") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108043)));
      }
    _end_103450_L103450:;
      *(&_vI67272_control->INLINE)  = 100; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64919_L67308:;
      if(!((arg == ::std::string("--noinline"))) ) goto _ifdoend_bootflx_64921_L67309;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103454_L103454;
      {
      _a13708t_107090 _tmp108044 = (::std::string("[flx] ") + ::std::string("Disable inlining (NOT RECOMMENDED)") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108044)));
      }
    _end_103454_L103454:;
      *(&_vI67272_control->INLINE)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64921_L67309:;
      if(!((arg == ::std::string("--version"))) ) goto _ifdoend_bootflx_64923_L67310;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103458_L103458;
      {
      _a13708t_107090 _tmp108045 = (::std::string("[flx] ") + ::std::string("Print Felix version and exit") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108045)));
      }
    _end_103458_L103458:;
      ::flx::rtl::ioutil::write(stdout,(::std::string("version ")));
      {
      _a13708t_107090 _tmp108046 = ::std::string("2016.07.12-rc1") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108046)));
      }
      fflush(stdout);
      ::std::exit(0);
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64923_L67310:;
      if(!((arg == ::std::string("--config"))) ) goto _ifdoend_bootflx_64925_L67311;
      _vI103476_s = ::std::string(""); //assign simple
      {
      _a13708t_107090* _tmp108047 = (_a13708t_107090*)&_vI103476_s;
      ((_tmp108047))->reserve(1000);
      }
      {
      _a13708t_107090* _tmp108048 = (_a13708t_107090*)&_vI103476_s;
      _a13708t_107090 _tmp108049 = (::std::string("(FLX_SHARE_DIR=") + (*_vI67271_config ).FLX_SHARE_DIR ) + ::std::string(",\n") ;
      ((_tmp108048))->append((_tmp108049));
      }
      {
      _a13708t_107090* _tmp108050 = (_a13708t_107090*)&_vI103476_s;
      _a13708t_107090 _tmp108051 = (::std::string("FLX_TARGET_DIR=") + (*_vI67271_config ).FLX_TARGET_DIR ) + ::std::string(",\n") ;
      ((_tmp108050))->append((_tmp108051));
      }
      {
      _a13708t_107090* _tmp108052 = (_a13708t_107090*)&_vI103476_s;
      _a13708t_107090 _tmp108053 = (::std::string("FLX_HOME_DIR=") + (*_vI67271_config ).FLX_HOME_DIR ) + ::std::string(",\n") ;
      ((_tmp108052))->append((_tmp108053));
      }
      {
      _a13708t_107090* _tmp108054 = (_a13708t_107090*)&_vI103476_s;
      _a13708t_107090 _tmp108055 = (::std::string("FLX_PROFILE_DIR=") + (*_vI67271_config ).FLX_PROFILE_DIR ) + ::std::string(",\n") ;
      ((_tmp108054))->append((_tmp108055));
      }
      {
      _a13708t_107090* _tmp108056 = (_a13708t_107090*)&_vI103476_s;
      _a13708t_107090 _tmp108057 = (::std::string("FLX_CACHE_DIR=") + (*_vI67271_config ).FLX_CACHE_DIR ) + ::std::string(",\n") ;
      ((_tmp108056))->append((_tmp108057));
      }
      {
      _a13708t_107090* _tmp108058 = (_a13708t_107090*)&_vI103476_s;
      _a13708t_107090 _tmp108059 = (::std::string("FLX_OUTPUT_DIR=") + (*_vI67271_config ).FLX_OUTPUT_DIR ) + ::std::string(",\n") ;
      ((_tmp108058))->append((_tmp108059));
      }
      {
      _a13708t_107090* _tmp108060 = (_a13708t_107090*)&_vI103476_s;
      _a13708t_107090 _tmp108061 = (::std::string("FLX_LIB_DIRS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67271_config ).FLX_LIB_DIRS) /* apply_stack */ ) + ::std::string(",\n") ;
      ((_tmp108060))->append((_tmp108061));
      }
      {
      _a13708t_107090* _tmp108062 = (_a13708t_107090*)&_vI103476_s;
      _a13708t_107090 _tmp108063 = (::std::string("FLX_CONFIG_DIRS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67271_config ).FLX_CONFIG_DIRS) /* apply_stack */ ) + ::std::string(",\n") ;
      ((_tmp108062))->append((_tmp108063));
      }
      {
      _a13708t_107090* _tmp108064 = (_a13708t_107090*)&_vI103476_s;
      _a13708t_107090 _tmp108065 = (::std::string("FLX_RTL_DIRS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67271_config ).FLX_RTL_DIRS) /* apply_stack */ ) + ::std::string(")\n") ;
      ((_tmp108064))->append((_tmp108065));
      }
      {
      _a13708t_107090 _tmp108066 = _vI103476_s + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108066)));
      }
      fflush(stdout);
      ::std::exit(0);
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64925_L67311:;
      if(!((arg == ::std::string("--options"))) ) goto _ifdoend_bootflx_64927_L67312;
      {
      _art107120 _tmp108067 = *_vI67272_control ;
      print_options(FLX_FPAR_PASS_ONLY)
      .stack_call((_tmp108067));
      }
      ::std::exit(0);
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64927_L67312:;
      if(!((arg == ::std::string("--where"))) ) goto _ifdoend_bootflx_64929_L67313;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103481_L103481;
      {
      _a13708t_107090 _tmp108069 = (::std::string("[flx] ") + ::std::string("Print location of install directory and exit") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108069)));
      }
    _end_103481_L103481:;
      {
      _a13708t_107090 _tmp108070 = (*_vI67272_control).FLX_INSTALL_DIR + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108070)));
      }
      fflush(stdout);
      ::std::exit(0);
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64929_L67313:;
      if(!((arg == ::std::string("--time"))) ) goto _ifdoend_bootflx_64931_L67314;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103487_L103487;
      {
      _a13708t_107090 _tmp108071 = (::std::string("[flx] ") + ::std::string("Time program execution and print after running") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108071)));
      }
    _end_103487_L103487:;
      *(&_vI67272_control->TIME)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64931_L67314:;
      if(!((arg == ::std::string("--compile-time"))) ) goto _ifdoend_bootflx_64933_L67315;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103491_L103491;
      {
      _a13708t_107090 _tmp108072 = (::std::string("[flx] ") + ::std::string("Print time of Felix compiler phases") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108072)));
      }
    _end_103491_L103491:;
      *(&_vI67272_control->COMPILER_TIME)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64933_L67315:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--output_dir=").size()) == ::std::string("--output_dir=")) || (::flx::rtl::strutil::substr(arg,0,::std::string("--output-dir=").size()) == ::std::string("--output-dir=")) ) ) goto _ifdoend_bootflx_64935_L67316;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103507_L103507;
      {
      _a13708t_107090 _tmp108073 = (::std::string("[flx] ") + ::std::string("Set the directory for compiler generated C++ files") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108073)));
      }
    _end_103507_L103507:;
      *(&_vI67271_config->FLX_OUTPUT_DIR)  = ::flx::rtl::strutil::substr(arg,13,arg.size()); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64935_L67316:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--bundle_dir=").size()) == ::std::string("--bundle_dir=")) || (::flx::rtl::strutil::substr(arg,0,::std::string("--bundle-dir=").size()) == ::std::string("--bundle-dir=")) ) ) goto _ifdoend_bootflx_64937_L67317;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103523_L103523;
      {
      _a13708t_107090 _tmp108074 = (::std::string("[flx] ") + ::std::string("Output files needed for C++ compilation into this folder (directly by basename)") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108074)));
      }
    _end_103523_L103523:;
      *(&_vI67272_control->BUNDLE_DIR)  = FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (::flx::rtl::strutil::substr(arg,13,arg.size()))); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64937_L67317:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--cache_dir=").size()) == ::std::string("--cache_dir=")) || (::flx::rtl::strutil::substr(arg,0,::std::string("--cache-dir=").size()) == ::std::string("--cache-dir=")) ) ) goto _ifdoend_bootflx_64939_L67318;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103539_L103539;
      {
      _a13708t_107090 _tmp108075 = (::std::string("[flx] ") + ::std::string("Set the directory for compiler generated *.par files") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108075)));
      }
    _end_103539_L103539:;
      *(&_vI67271_config->FLX_CACHE_DIR)  = ::flx::rtl::strutil::substr(arg,12,arg.size()); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64939_L67318:;
      if(!((arg == ::std::string("--usage=prototype"))) ) goto _ifdoend_bootflx_64941_L67319;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103543_L103543;
      {
      _a13708t_107090 _tmp108076 = (::std::string("[flx] ") + ::std::string("Set usage prototyping") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108076)));
      }
    _end_103543_L103543:;
      *(&_vI67272_control->USAGE)  = ::std::string("prototype"); //assign simple
      *(&_vI67272_control->NOOPTIMISE)  = 1; //assign simple
      *(&_vI67272_control->OPTIMISE)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-O1")))); //assign simple
      *(&_vI67272_control->DOREDUCE)  = 0; //assign simple
      *(&_vI67272_control->INLINE)  = 5; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64941_L67319:;
      _vI103556_n = 2; //assign simple
      if(!((0 < _vI103556_n)) ) goto _ifdoelse_std_1567_L103551;
      _vI103557_i = 0; //assign simple
    redo__ll_arrays_5385_L103554:;
      if(FLX_UNLIKELY(!(!((_vI103556_n - 1  < _vI103557_i)) ) )) goto _ifdoelse_std_1567_L103551;
      (_vI103558_a.data)[0] = ::std::string("--usage=debugging"); //assign simple
      (_vI103558_a.data)[1] = ::std::string("--usage=debug"); //assign simple
      if(!(((_vI103558_a.data)[reinterpret< ::flx::rtl::cl_t>(_vI103557_i)] == arg)) ) goto _ifdoend_std_1568_L103555;
      _urv103548  = 1; //init
      goto _end_inline___bsol_in_103561_L103561;
    _ifdoend_std_1568_L103555:;
      {
      _a5038t_107106* _tmp108077 = (_a5038t_107106*)&_vI103557_i;
      ++*((_tmp108077));
      }
      goto redo__ll_arrays_5385_L103554;
    _ifdoelse_std_1567_L103551:;
      _urv103548  = 0; //init
    _end_inline___bsol_in_103561_L103561:;
      if(!_urv103548 ) goto _ifdoend_bootflx_64943_L67320;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103565_L103565;
      {
      _a13708t_107090 _tmp108078 = (::std::string("[flx] ") + ::std::string("Set usage debugging") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108078)));
      }
    _end_103565_L103565:;
      *(&_vI67272_control->USAGE)  = ::std::string("debugging"); //assign simple
      *(&_vI67272_control->NOOPTIMISE)  = 1; //assign simple
      *(&_vI67272_control->DEBUG)  = 1; //assign simple
      *(&_vI67272_control->DOREDUCE)  = 0; //assign simple
      *(&_vI67272_control->OPTIMISE)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-O0")))); //assign simple
      *(&_vI67272_control->INLINE)  = 5; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64943_L67320:;
      if(!((arg == ::std::string("--usage=production"))) ) goto _ifdoend_bootflx_64945_L67321;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103573_L103573;
      {
      _a13708t_107090 _tmp108079 = (::std::string("[flx] ") + ::std::string("Set usage production") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108079)));
      }
    _end_103573_L103573:;
      *(&_vI67272_control->USAGE)  = ::std::string("production"); //assign simple
      *(&_vI67272_control->DOREDUCE)  = 1; //assign simple
      *(&_vI67272_control->OPTIMISE)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-O2")))); //assign simple
      *(&_vI67272_control->INLINE)  = 25; //assign simple
      *(&_vI67272_control->FLXG_OPTIMISE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64945_L67321:;
      if(!((arg == ::std::string("--usage=hyperlight"))) ) goto _ifdoend_bootflx_64947_L67322;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103581_L103581;
      {
      _a13708t_107090 _tmp108080 = (::std::string("[flx] ") + ::std::string("Set usage hyperlight") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108080)));
      }
    _end_103581_L103581:;
      *(&_vI67272_control->USAGE)  = ::std::string("hyperlight"); //assign simple
      *(&_vI67272_control->DOREDUCE)  = 1; //assign simple
      *(&_vI67272_control->OPTIMISE)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-O2")))); //assign simple
      *(&_vI67272_control->INLINE)  = 100; //assign simple
      *(&_vI67272_control->FLXG_OPTIMISE)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64947_L67322:;
      if(!((arg == ::std::string("--help"))) ) goto _ifdoend_bootflx_64949_L67323;
      *(&_vI67272_control->PRINT_HELP)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64949_L67323:;
      if(!((arg == ::std::string("-c"))) ) goto _ifdoend_bootflx_64951_L67324;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103589_L103589;
      {
      _a13708t_107090 _tmp108081 = (::std::string("[flx] ") + ::std::string("Compile program but do not run it") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108081)));
      }
    _end_103589_L103589:;
      *(&_vI67272_control->RUNIT)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64951_L67324:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("-I").size()) == ::std::string("-I"))) ) goto _ifdoend_bootflx_64953_L67325;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103599_L103599;
      {
      _a13708t_107090 _tmp108082 = (::std::string("[flx] ") + ::std::string("Set include directories for both Felix and C/C++") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108082)));
      }
    _end_103599_L103599:;
      *(&_vI67271_config->FLX_LIB_DIRS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67271_config).FLX_LIB_DIRS, ::flx::rtl::strutil::substr(arg,2,arg.size()))) /* apply_stack */; //assign simple
      *(&_vI67271_config->FLX_RTL_DIRS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67271_config).FLX_RTL_DIRS, ::flx::rtl::strutil::substr(arg,2,arg.size()))) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64953_L67325:;
      if(!((arg == ::std::string("--nofelix"))) ) goto _ifdoend_bootflx_64955_L67326;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103603_L103603;
      {
      _a13708t_107090 _tmp108083 = (::std::string("[flx] ") + ::std::string("Do not translate Felix code, just compile generated C++ (used to debug at C++ level)") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108083)));
      }
    _end_103603_L103603:;
      *(&_vI67272_control->FELIX)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64955_L67326:;
      if(!((arg == ::std::string("--nocc"))) ) goto _ifdoend_bootflx_64957_L67327;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103607_L103607;
      {
      _a13708t_107090 _tmp108084 = (::std::string("[flx] ") + ::std::string("Do not run the C/C++ compiler, just generate C++ source code and exit; implies -c and --nolink") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108084)));
      }
    _end_103607_L103607:;
      *(&_vI67272_control->CCOMPILEIT)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64957_L67327:;
      if(!((arg == ::std::string("--nolink"))) ) goto _ifdoend_bootflx_64959_L67328;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103611_L103611;
      {
      _a13708t_107090 _tmp108085 = (::std::string("[flx] ") + ::std::string("Do not link object code to an executable, just generate and compile the C++ source code; implies -c") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108085)));
      }
    _end_103611_L103611:;
      *(&_vI67272_control->LINKIT)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64959_L67328:;
      if(!((arg == ::std::string("--run-only"))) ) goto _ifdoend_bootflx_64961_L67329;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103615_L103615;
      {
      _a13708t_107090 _tmp108086 = (::std::string("[flx] ") + ::std::string("Run the binary executable without any compilation. Must exist!") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108086)));
      }
    _end_103615_L103615:;
      *(&_vI67272_control->FELIX)  = 0; //assign simple
      *(&_vI67272_control->CCOMPILEIT)  = 0; //assign simple
      *(&_vI67272_control->LINKIT)  = 0; //assign simple
      *(&_vI67272_control->LINKEXE)  = 0; //assign simple
      *(&_vI67272_control->RUNIT)  = 1; //assign simple
      *(&_vI67272_control->VALIDATE_CACHE)  = 0; //assign simple
      *(&_vI67272_control->CHECK_DEPENDENCIES)  = 0; //assign simple
      *(&_vI67272_control->RUNONLY)  = 1; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64961_L67329:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("-l").size()) == ::std::string("-l")) || (::flx::rtl::strutil::substr(arg,0,::std::string("-L").size()) == ::std::string("-L")) ) ) goto _ifdoend_bootflx_64963_L67330;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103631_L103631;
      {
      _a13708t_107090 _tmp108087 = (::std::string("[flx] ") + ::std::string("Set extra switched for linker") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108087)));
      }
    _end_103631_L103631:;
      *(&_vI67272_control->LINKER_SWITCHES)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67272_control).LINKER_SWITCHES, arg)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64963_L67330:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("-D").size()) == ::std::string("-D"))) ) goto _ifdoend_bootflx_64965_L67331;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103641_L103641;
      {
      _a13708t_107090 _tmp108088 = (::std::string("[flx] ") + ::std::string("Set extra macros for C++ compilation") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108088)));
      }
    _end_103641_L103641:;
      *(&_vI67272_control->MACROS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67272_control).MACROS, arg)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64965_L67331:;
      n = 4; //assign simple
      if(!((0 < n)) ) goto _ifdoelse_std_1567_L103707;
      _vI103713_i = 0; //assign simple
    redo__ll_arrays_5385_L103710:;
      if(FLX_UNLIKELY(!(!((n - 1  < _vI103713_i)) ) )) goto _ifdoelse_std_1567_L103707;
      (_vI103714_a.data)[0] = ::std::string("-O0"); //assign simple
      (_vI103714_a.data)[1] = ::std::string("-O1"); //assign simple
      (_vI103714_a.data)[2] = ::std::string("-O2"); //assign simple
      (_vI103714_a.data)[3] = ::std::string("-O3"); //assign simple
      if(!(((_vI103714_a.data)[reinterpret< ::flx::rtl::cl_t>(_vI103713_i)] == arg)) ) goto _ifdoend_std_1568_L103711;
      _urv103704  = 1; //init
      goto _end_inline___bsol_in_103717_L103717;
    _ifdoend_std_1568_L103711:;
      {
      _a5038t_107106* _tmp108089 = (_a5038t_107106*)&_vI103713_i;
      ++*((_tmp108089));
      }
      goto redo__ll_arrays_5385_L103710;
    _ifdoelse_std_1567_L103707:;
      _urv103704  = 0; //init
    _end_inline___bsol_in_103717_L103717:;
      if(!_urv103704 ) goto _ifdoend_bootflx_64967_L67332;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103721_L103721;
      {
      _a13708t_107090 _tmp108090 = (::std::string("[flx] ") + (::std::string("Set C++ compilation optimisation ") + arg ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108090)));
      }
    _end_103721_L103721:;
      *(&_vI67272_control->OPTIMISE)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, arg))); //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64967_L67332:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("-f").size()) == ::std::string("-f"))) ) goto _ifdoend_bootflx_64969_L67333;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103735_L103735;
      {
      _a13708t_107090 _tmp108091 = (::std::string("[flx] ") + (::std::string("Set C++ compilation switch ") + arg ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108091)));
      }
    _end_103735_L103735:;
      *(&_vI67272_control->EXTRA_CCFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67272_control).EXTRA_CCFLAGS, arg)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64969_L67333:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--cflags=").size()) == ::std::string("--cflags="))) ) goto _ifdoend_bootflx_64971_L67334;
      flags = ::flx::rtl::strutil::substr(arg,9,arg.size()); //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_102779_L103745;
      {
      _a13708t_107090 _tmp108092 = (::std::string("[flx] ") + (::std::string("Set C++ compilation switch ") + flags ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108092)));
      }
    _end_102779_L103745:;
      *(&_vI67272_control->EXTRA_CCFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67272_control).EXTRA_CCFLAGS, flags)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64971_L67334:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("-W").size()) == ::std::string("-W"))) ) goto _ifdoend_bootflx_64973_L67335;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103756_L103756;
      {
      _a13708t_107090 _tmp108093 = (::std::string("[flx] ") + (::std::string("Set C++ warning switch ") + arg ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108093)));
      }
    _end_103756_L103756:;
      *(&_vI67272_control->EXTRA_CCFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67272_control).EXTRA_CCFLAGS, arg)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64973_L67335:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--pkg=").size()) == ::std::string("--pkg="))) ) goto _ifdoend_bootflx_64975_L67336;
      if(!(*_vI67272_control).DEBUG_FLX ) goto _end_103766_L103766;
      {
      _a13708t_107090 _tmp108094 = (::std::string("[flx] ") + ::std::string("Add pkgconfig package to link") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108094)));
      }
    _end_103766_L103766:;
      *(&_vI67272_control->pkgs)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67272_control).pkgs, ::flx::rtl::strutil::substr(arg,6,arg.size()))) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64975_L67336:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--indir=").size()) == ::std::string("--indir="))) ) goto _ifdoend_bootflx_64977_L67337;
      *(&_vI67272_control->INDIR)  = ::flx::rtl::strutil::substr(arg,8,arg.size()); //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _ifdoelse_bootflx_64852_L67409;
      {
      _a13708t_107090 _tmp108095 = (::std::string("[flx] ") + (::std::string("Set input directory for regexp to ") + (*_vI67272_control).INDIR ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108095)));
      }
      FLX_RETURN // procedure return
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64977_L67337:;
      if(!((::flx::rtl::strutil::substr(arg,0,::std::string("--regex=").size()) == ::std::string("--regex="))) ) goto _ifdoend_bootflx_64979_L67338;
      *(&_vI67272_control->INREGEX)  = ::flx::rtl::strutil::substr(arg,8,arg.size()); //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _ifdoelse_bootflx_64852_L67409;
      {
      _a13708t_107090 _tmp108096 = (::std::string("[flx] ") + (::std::string("Set input regex to ") + (*_vI67272_control).INREGEX ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108096)));
      }
      FLX_RETURN // procedure return
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64979_L67338:;
      if(!((arg == ::std::string("--nonstop"))) ) goto _ifdoend_bootflx_64981_L67339;
      *(&_vI67272_control->NONSTOP)  = 1; //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _ifdoelse_bootflx_64852_L67409;
      {
      _a13708t_107090 _tmp108097 = (::std::string("[flx] ") + (::std::string("Set batch processing mode to nonstop ") + ::flx::rtl::strutil::str<int>((*_vI67272_control).NONSTOP) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108097)));
      }
      FLX_RETURN // procedure return
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64981_L67339:;
      if(!((arg == ::std::string("--c++"))) ) goto _ifdoend_bootflx_64983_L67340;
      *(&_vI67272_control->CXXONLY)  = 1; //assign simple
      *(&_vI67272_control->FELIX)  = 0; //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _ifdoelse_bootflx_64852_L67409;
      {
      _a13708t_107090 _tmp108098 = (::std::string("[flx] ") + ::std::string("C++ only, no Felix") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108098)));
      }
      FLX_RETURN // procedure return
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64983_L67340:;
      if(!((arg == ::std::string("--ocaml"))) ) goto _ifdoend_bootflx_64985_L67341;
      *(&_vI67272_control->OCAMLONLY)  = 1; //assign simple
      *(&_vI67272_control->FELIX)  = 0; //assign simple
      if(!(*_vI67272_control).DEBUG_FLX ) goto _ifdoelse_bootflx_64852_L67409;
      {
      _a13708t_107090 _tmp108099 = (::std::string("[flx] ") + ::std::string("Ocaml only, no Felix") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108099)));
      }
      FLX_RETURN // procedure return
      FLX_RETURN // procedure return
    _ifdoend_bootflx_64985_L67341:;
      {
      _a13708t_107090 _tmp108100 = ((::std::string("Unknown switch '") + arg ) + ::std::string("'") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108100)));
      }
      fflush(stderr);
      ::std::exit(1);
    _ifdoelse_bootflx_64852_L67409:;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <65724>: toolchain_msvc_win32::debug_flags: Apply method
void* debug_flags::apply(){
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-g"))));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1742,3,1742,49); // HACK! 
}

//------------------------------
//FUNCTION <89223>: toolchain_clang_apple_iOS_maker_uncurry::debug_flags: Apply method
void* _fI89223_debug_flags::apply(){
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-g"))));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1999,3,1999,49); // HACK! 
}

//------------------------------
//FUNCTION <92710>: toolchain_msvc_win32::aux::_lam_1421: Apply method
 ::flx::rtl::cl_t _lam_1421::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",547,9,547,17); // HACK! 
}

//------------------------------
//FUNCTION <105406>: flx_processing::check_output_if_required: Apply method
int check_output_if_required::apply(){
      _vI105407_result = 0; //assign simple
      expected = ptrflx_processing->_vI105441_control.EXPECT; //assign simple
      _vI105409_output = ptrflx_processing->_vI105441_control.STDOUT; //assign simple
      if(!((_vI105409_output == ::std::string(""))) ) goto _ifdoend_bootflx_65399_L105413;
      {
      _a13708t_107090 _tmp108101 = ::std::string("[flx] No output file given??") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108101)));
      }
      fflush(stderr);
      _vI105407_result = 1; //assign simple
      goto _ifdoelse_bootflx_65400_L105418;
    _ifdoend_bootflx_65399_L105413:;
      if(!((expected == ::std::string(""))) ) goto _ifdoend_bootflx_65401_L105414;
      {
      _a13708t_107090 _tmp108102 = ::std::string("[flx] No expect file given??") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108102)));
      }
      fflush(stderr);
      _vI105407_result = 1; //assign simple
      goto _ifdoelse_bootflx_65400_L105418;
    _ifdoend_bootflx_65401_L105414:;
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_575_L106078;
      {
      _a13708t_107090 _tmp108103 = (::std::string("[load_text] ") + _vI105409_output ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108103)));
      }
      fflush(stderr);
    _ifdoelse_std_575_L106078:;
      output_text = ::flx::rtl::ioutil::load_text_file(_vI105409_output); //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_575_L106080;
      {
      _a13708t_107090 _tmp108104 = (::std::string("[load_text] ") + expected ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108104)));
      }
      fflush(stderr);
    _ifdoelse_std_575_L106080:;
      expected_text = ::flx::rtl::ioutil::load_text_file(expected); //assign simple
      bresult = (output_text == expected_text); //assign simple
      if(bresult) goto _ifdoelse_bootflx_65400_L105418;
      {
      _a13708t_107090 _tmp108105 = (((::std::string("[flx] Output ") + _vI105409_output ) + ::std::string(" doesn't match expected ") ) + expected ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108105)));
      }
      fflush(stderr);
      _vI105407_result = 1; //assign simple
    _ifdoelse_bootflx_65400_L105418:;
      return _vI105407_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2903,3,2903,4); // HACK! 
}

//------------------------------
//FUNCTION <104808>: FlxPkgConfigQuery::getpkgfield::getpkgfield'2::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI104808__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <99214>: subscript::_lam_2004: Apply method
 ::flx::rtl::cl_t _lam_2004::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",227,7,227,35); // HACK! 
}

//------------------------------
//FUNCTION <93175>: generic_cxx_compile_for_dynamic_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93175__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------

//PROCEDURE <106423:> flx_processing::debugln: Call method
::flx::rtl::con_t * _pI106423_debugln::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI106428_x = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <106423:> flx_processing::debugln: Resume method
::flx::rtl::con_t *_pI106423_debugln::resume(){
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65257_L106429;
      {
      _a13708t_107090 _tmp108106 = (::std::string("[flx] ") + _vI106428_x ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108106)));
      }
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_65257_L106429:;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <91651>: join_uncurry::aux_uncurry: Apply method
void* _fI91651_aux_uncurry::apply(_at107115 const &_arg ){
  _vI91652_x_uncurry = _arg.data[0];
  _vI91653_y = _arg.data[1];
    start_91065_L91660:;
      _vI91656_aux__apos_2_mv_1328  = _vI91652_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI91656_aux__apos_2_mv_1328)==0) ) goto _ml1330_L91655;
      return _vI91653_y;
    _ml1330_L91655:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI91656_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI91659__lam_1332)(FLX_FPAR_PASS this, ptrjoin_uncurry))) ) goto _ml1331_L91654;
      _vI91657_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI91656_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI91658_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI91656_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI91653_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI91653_y, _vI91657_h_param_std_1210))); //init
      _vI91652_x_uncurry  = _vI91658_t_param_std_1209; //init
      goto start_91065_L91660;
    _ml1331_L91654:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//C FUNC <80578>: eq
 ::flx::rtl::cl_t eq( _a13708t_107090 _vI81096_x, _a13708t_107090 _vI81097_y){
      return (_vI81096_x == _vI81097_y);
}
//------------------------------
//FUNCTION <97305>: flx_pkgconfig::aux::_lam_2230: Apply method
 ::flx::rtl::cl_t _fI97305__lam_2230::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,9,478,14); // HACK! 
}

//------------------------------
//FUNCTION <66390>: toolchain_clang_osx::dynamic_executable_linker: Apply method
int _fI66390_dynamic_executable_linker::apply(_art107181 const &_arg ){
  _vI66393_spec = _arg;
      _vI66392_result = generic_link_exe_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_clang_osx->_vI66315_linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_clang_osx->_vI66398_config.library_search_dirs, ptrtoolchain_clang_osx->_vI66398_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66393_spec.srcs, _vI66393_spec.dst)) /* apply_stack */; //assign simple
      return _vI66392_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1641,3,1641,4); // HACK! 
}

//------------------------------
//FUNCTION <102535>: join_uncurry::aux_uncurry: Apply method
void* _fI102535_aux_uncurry::apply(_at107285 const &_arg ){
  _vI102536_x_uncurry = _arg.data[0];
  _vI102537_y = _arg.data[1];
    start_102515_L102544:;
      _vI102540_aux__apos_2_mv_1328  = _vI102536_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102540_aux__apos_2_mv_1328)==0) ) goto _ml1330_L102539;
      return _vI102537_y;
    _ml1330_L102539:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI102540_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI102543__lam_1332)(FLX_FPAR_PASS this, ptr_fI88950_join_uncurry))) ) goto _ml1331_L102538;
      _vI102541_h_param_std_1210 = (*((_tt107274*)FLX_VNP(_vI102540_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI102542_t_param_std_1209 = (*((_tt107274*)FLX_VNP(_vI102540_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI102537_y  = FLX_VNR(1, new(*PTF gcp, _tt107274_ptr_map, true) _tt107274 (_tt107274(_vI102537_y, _vI102541_h_param_std_1210))); //init
      _vI102536_x_uncurry  = _vI102542_t_param_std_1209; //init
      goto start_102515_L102544;
    _ml1331_L102538:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <92624>: toolchain_msvc_win32::aux_uncurry: Apply method
void* _fI92624_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92625_inp_uncurry = _arg.data[0];
  _vI92626_out = _arg.data[1];
    start_90421_L92633:;
      _vI92629_aux__apos_2_mv_1322  = _vI92625_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92629_aux__apos_2_mv_1322)==0) ) goto _ml1324_L92628;
      return _vI92626_out;
    _ml1324_L92628:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI92629_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI92632__lam_1326)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32))) ) goto _ml1325_L92627;
      _vI92630_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI92629_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI92631_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI92629_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI92626_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92626_out, _lam_65646(ptrtoolchain_msvc_win32)
      .apply(_vI92630_h_param_std_1208) /* apply_stack */))); //init
      _vI92625_inp_uncurry  = _vI92631_t_param_std_1207; //init
      goto start_90421_L92633;
    _ml1325_L92627:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <66027>: toolchain_gcc_osx::executable_extension: Apply method
_a13708t_107090 _fI66027_executable_extension::apply(){
      return ::std::string("");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",972,3,972,43); // HACK! 
}

//------------------------------
//FUNCTION <105933>: flx_processing::check_binary_uptodate::aux_uncurry: Apply method
double _fI105933_aux_uncurry::apply(_tt107527 const &_arg ){
  _vI105934_init_uncurry = _arg.mem_0;
  _vI105935_x = _arg.mem_1;
    start_97926_L105942:;
      _vI105938_aux__apos_2_mv_1297  = _vI105935_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105938_aux__apos_2_mv_1297)==0) ) goto _ml1299_L105937;
      return _vI105934_init_uncurry;
    _ml1299_L105937:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI105938_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI105941__lam_1301)(FLX_FPAR_PASS this, ptrcheck_binary_uptodate, ptrflx_processing))) ) goto _ml1300_L105936;
      _vI105939_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI105938_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI105940_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI105938_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI105935_x  = _vI105940_t_param_std_1199; //init
      _vI105934_init_uncurry  = ((FLX_NEWP(_fI105353_maxf)(FLX_FPAR_PASS ptrcheck_binary_uptodate, ptrflx_processing))
      ->apply(_vI105934_init_uncurry))->clone()
      ->apply(_vI105939_h_param_std_1200) /* general apply */; //init
      goto start_97926_L105942;
    _ml1300_L105936:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <98127>: run_felix_compiler::_lam_64805: Apply method
 ::flx::rtl::cl_t _lam_64805::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",336,7,336,14); // HACK! 
}

//------------------------------

//PROCEDURE <106424:> flx_processing::echoln: Call method
::flx::rtl::con_t * _pI106424_echoln::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI106425_x = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <106424:> flx_processing::echoln: Resume method
::flx::rtl::con_t *_pI106424_echoln::resume(){
      if(!((ptrflx_processing->_vI106422_control.ECHO == 1)) ) goto _ifdoelse_bootflx_65259_L106426;
      {
      _a13708t_107090 _tmp108111 = (::std::string("[flx] ") + _vI106425_x ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108111)));
      }
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_65259_L106426:;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <94797>: split1::_lam_635: Apply method
 ::flx::rtl::cl_t _lam_635::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",42,7,42,14); // HACK! 
}

//------------------------------
//FUNCTION <66323>: toolchain_clang_osx::target_os: Apply method
_a13708t_107090 _fI66323_target_os::apply(){
      return ::std::string("OSX");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1457,3,1457,35); // HACK! 
}

//------------------------------
//FUNCTION <66159>: toolchain_clang_linux::cxx_static_object_compiler: Apply method
int _fI66159_cxx_static_object_compiler::apply(_art107177 const &_arg ){
  _vI66162_spec = _arg;
      _vI66161_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_clang_linux->_vI66106_base_cxx_compile_flags, ptrtoolchain_clang_linux->_vI66103_cxx_compiler, ptrtoolchain_clang_linux->_vI66187_config.header_search_dirs, ptrtoolchain_clang_linux->_vI66187_config.macros, ::std::string("-o "), ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66162_spec.src, _vI66162_spec.dst)) /* apply_stack */; //assign simple
      return _vI66161_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1318,3,1318,4); // HACK! 
}

//------------------------------
//FUNCTION <92197>: toolchain_msvc_win32::checkwarn::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI92197__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <88899>: FlxPkgConfigQuery::getpkgfieldopt_uncurry: Apply method
void* getpkgfieldopt_uncurry::apply(_tt107292 const &_arg ){
  ehandler_uncurry = _arg.mem_0;
  _vI89327_pkg = _arg.mem_1;
  _vI89328_field = _arg.mem_2;
      _vI89324_values = getpkgfield_uncurry(FLX_FPAR_PASS ptrFlxPkgConfigQuery)
      .apply(_tt107292(ehandler_uncurry, _vI89327_pkg, _vI89328_field)) /* apply_stack */; //assign simple
      _vI89321_getpkgfieldopt__apos_2_mv_64773  = _vI89324_values; //init
/*begin match*/
/*match case 1:|Cons (h_param_bootflx_64740, |Empty)*/
      if(!andthen(!!_vI89321_getpkgfieldopt__apos_2_mv_64773 , (FLX_NEWP(_fI104919__lam_64776)(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery))) ) goto _ml64775_L89329;
      _vI89326_h_param_bootflx_64740 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(_vI89321_getpkgfieldopt__apos_2_mv_64773))).mem_0; //assign simple
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI89326_h_param_bootflx_64740));
    _ml64775_L89329:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI89321_getpkgfieldopt__apos_2_mv_64773)==0) ) goto _ml64777_L89330;
      return (void* /*VR_nullptr*/ )0;
    _ml64777_L89330:;
/*match case 3:any*/
      {
      _a13708t_107090 _tmp108112 = (((((::std::string("Multiple values for field ") + _vI89328_field ) + ::std::string(" in ") ) + _vI89327_pkg ) + ::std::string(" not allowed, got") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI89324_values) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108112)));
      }
      fflush(stdout);
      {
      _a6203t_107291 _tmp108113 = (_a6203t_107291)(ehandler_uncurry);
      throw ((_tmp108113));
      }
      FLX_HALT("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",530,9,530,9,"HALT: Jump to end of function");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",536,5,536,6); // HACK! 
}

//------------------------------
//FUNCTION <106742>: flx_processing::ocaml_compile::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI106742__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <66370>: toolchain_clang_osx::cxx_static_object_compiler: Apply method
int _fI66370_cxx_static_object_compiler::apply(_art107177 const &_arg ){
  _vI66373_spec = _arg;
      _vI66372_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_clang_osx->_vI66318_base_cxx_compile_flags, ptrtoolchain_clang_osx->_vI66314_cxx_compiler, ptrtoolchain_clang_osx->_vI66398_config.header_search_dirs, ptrtoolchain_clang_osx->_vI66398_config.macros, ::std::string("-o "), ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66373_spec.src, _vI66373_spec.dst)) /* apply_stack */; //assign simple
      return _vI66372_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1559,3,1559,4); // HACK! 
}

//------------------------------
//FUNCTION <66406>: cxx_depcheck::==: Apply method
 ::flx::rtl::cl_t _fI66406___equals___equals_::apply(_at107115 const &_arg ){
  a = _arg.data[0];
  b = _arg.data[1];
    start_98510_L98510:;
      (_vI65564___equals___equals__mv_65564.data)[0] = a; //assign simple
      (_vI65564___equals___equals__mv_65564.data)[1] = b; //assign simple
/*begin match*/
/*match case 1:(|Empty, |Empty)*/
      if(!(FLX_VNI((_vI65564___equals___equals__mv_65564.data)[0])==0 && FLX_VNI((_vI65564___equals___equals__mv_65564.data)[1])==0 ) ) goto _ml65566_L66418;
      return 1;
    _ml65566_L66418:;
/*match case 2:(|Cons (h1_param_bootflx_65543, t1_param_bootflx_65544), |Cons (h2_param_bootflx_65545, t2_param_bootflx_65546))*/
      if(!(andthen(!!((_vI65564___equals___equals__mv_65564.data)[0]) , (FLX_NEWP(_lam_65568)(FLX_FPAR_PASS this, ptrcxx_depcheck))) && andthen(!!((_vI65564___equals___equals__mv_65564.data)[1]) , (FLX_NEWP(_lam_65569)(FLX_FPAR_PASS this, ptrcxx_depcheck))) ) ) goto _ml65567_L66420;
      t2_param_bootflx_65546 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(((_vI65564___equals___equals__mv_65564.data)[1])))).mem_1; //assign simple
      h2_param_bootflx_65545 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(((_vI65564___equals___equals__mv_65564.data)[1])))).mem_0; //assign simple
      t1_param_bootflx_65544 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(((_vI65564___equals___equals__mv_65564.data)[0])))).mem_1; //assign simple
      h1_param_bootflx_65543 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(((_vI65564___equals___equals__mv_65564.data)[0])))).mem_0; //assign simple
      if(!(!((h1_param_bootflx_65543 == h2_param_bootflx_65545)) ) ) goto _ifdoend_bootflx_65547_L66419;
      return 0;
    _ifdoend_bootflx_65547_L66419:;
/*parallel assignment*/
      b  = t2_param_bootflx_65546; //init
      a  = t1_param_bootflx_65544; //init
      goto start_98510_L98510;
    _ml65567_L66420:;
/*match case 3:any*/
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",399,5,399,6); // HACK! 
}

//------------------------------
//FUNCTION <102452>: exts::aux_uncurry: Apply method
void* _fI102452_aux_uncurry::apply(_tt107283 const &_arg ){
  _vI102453_inp_uncurry = _arg.mem_0;
  _vI102454_out = _arg.mem_1;
    start_102429_L102461:;
      _vI102457_aux__apos_2_mv_1322  = _vI102453_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102457_aux__apos_2_mv_1322)==0) ) goto _ml1324_L102456;
      return _vI102454_out;
    _ml1324_L102456:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI102457_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI102460__lam_1326)(FLX_FPAR_PASS this, ptrexts))) ) goto _ml1325_L102455;
      _vI102458_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI102457_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI102459_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI102457_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI102454_out  = FLX_VNR(1, new(*PTF gcp, _tt107274_ptr_map, true) _tt107274 (_tt107274(_vI102454_out, _lam_65070(ptrexts)
      .apply(_vI102458_h_param_std_1208) /* apply_stack */))); //init
      _vI102453_inp_uncurry  = _vI102459_t_param_std_1207; //init
      goto start_102429_L102461;
    _ml1325_L102455:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <104880>: FlxPkgConfigQuery::getpkgfield1::getpkgfield1'2::_lam_64770: Apply method
 ::flx::rtl::cl_t _lam_64770::apply(){
      return FLX_VNI((reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>((ptr_fI67792_getpkgfield1__apos_2->_vI64767_getpkgfield1__apos_2_mv_64767)))).mem_1)==0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",508,9,508,23); // HACK! 
}

//------------------------------
//C FUNC <85490>: flx_dlsym
_tt107426 flx_dlsym(FLX_APAR_DECL  _a7338t_107409 _vI85496_linst, _a13708t_107090 _vI85497_sym){
  _cft107425* typed_sym;
  _a5050t_107416 raw_sym;
  _a5050t_107416 _vI85501_tf;
  _a7265t_107411 dlibrary;
      dlibrary = _vI85496_linst->lib; //assign simple
      _vI85501_tf = (void*)_vI85496_linst->thread_frame; //assign simple
      raw_sym = find_sym(FLX_FPAR_PASS_ONLY)
      .apply(_tt107429(dlibrary, _vI85497_sym)) /* apply_stack */; //assign simple
      if(!(0==raw_sym) ) goto _ifdoelse_std_483_L85498;
      {
      _a13708t_107090 _tmp108115 = (((::std::string("Unable to load symbol ") + _vI85497_sym ) + ::std::string(" from library ") ) + ::std::string(_vI85496_linst->lib->filename) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108115)));
      }
      fflush(stderr);
      {
      _a7258t_107430 _tmp108116 = ::flx::rtl::flx_link_failure_t((::std::string(_vI85496_linst->lib->filename)),(::std::string("dlsym")),(::std::string("Cannot find symbol ") + _vI85497_sym ));
      (throw ((_tmp108116)));
      }
    _ifdoelse_std_483_L85498:;
      typed_sym = (_cft107425*)(raw_sym); //assign simple
      return _tt107426(typed_sym, _vI85501_tf);
}
//------------------------------
//FUNCTION <83798>: join: Apply method
_ft107152* join::apply(_a13708t_107090 const &_arg ){
  _vI83799_x = _arg;
      return (FLX_NEWP(_fI83800_join__apos_2)(FLX_FPAR_PASS this));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",95,3,95,45); // HACK! 
}

//------------------------------
//FUNCTION <97202>: flx_pkgconfig::parse_args::aux::_lam_1443: Apply method
 ::flx::rtl::cl_t _fI97202__lam_1443::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",579,9,579,17); // HACK! 
}

//------------------------------
//FUNCTION <67854>: flx_pkgconfig: Apply method
_tt107169 flx_pkgconfig::apply(void* const &_arg ){
  _vI68148_args = _arg;
      _vI67899_path = ::flx::rtl::strutil::atostr(std::getenv((::std::string("PKG_CONFIG_PATH")).c_str())); //assign simple
      fields = (void* /*VR_nullptr*/ )0; //assign simple
      pkgs = (void* /*VR_nullptr*/ )0; //assign simple
      hide = 0; //assign simple
      require_pkg_exists = 1; //assign simple
      missing = 0; //assign simple
      recfields = (void* /*VR_nullptr*/ )0; //assign simple
      dolist = 0; //assign simple
      listkeys = 0; //assign simple
      return_code = 0; //assign simple
      backwards = 0; //assign simple
      keep = /*VR_int*/1; //assign simple
      extension = ::std::string("fpc"); //assign simple
      {
      parse_args(FLX_FPAR_PASS this)
      .stack_call(_vI68148_args);
      }
      dirs = reattach_drive_letters(FLX_FPAR_PASS this)
      .apply(_fI97307_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_fI97294_aux(FLX_FPAR_PASS this)
      .apply(_tt107116(_vI67899_path, (void* /*VR_nullptr*/ )0)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */) /* apply_stack */; //assign simple
      _vI68017_result = (void* /*VR_nullptr*/ )0; //assign simple
    continue__ll_flx_pkgconfig_10930_L68149:;
      is_empty_mv_1309  = pkgs; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(is_empty_mv_1309)==0) ) goto _ml1311_L97322;
      _urv97320  = 1; //init
      goto _end_inline_is_empty_97325_L97325;
    _ml1311_L97322:;
/*match case 2:any*/
      _urv97320  = 0; //init
    _end_inline_is_empty_97325_L97325:;
      if(FLX_UNLIKELY(_urv97320)) goto break__ll_flx_pkgconfig_10930_L68150;
      flx_pkgconfig_mv_64721  = pkgs; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(flx_pkgconfig_mv_64721)==0) ) goto _ml64723_L97331;
      goto continue__ll_flx_pkgconfig_10930_L68149;
    _ml64723_L97331:;
/*match case 2:|Cons (pkg_param_bootflx_64628, tail_param_bootflx_64629)*/
      if(!andthen(!!flx_pkgconfig_mv_64721 , (FLX_NEWP(_lam_64727)(FLX_FPAR_PASS this))) ) goto _ml64725_L97332;
      tail_param_bootflx_64629 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(flx_pkgconfig_mv_64721))).mem_1; //assign simple
      pkg_param_bootflx_64628 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(flx_pkgconfig_mv_64721))).mem_0; //assign simple
      pkgs = tail_param_bootflx_64629; //assign simple
      //run procedure directcall handle_pkg<68065>directproc (pkg_param_bootflx_64628<97329>varname, Empty<79804>varname);
      {
        ::flx::rtl::con_t *_p =
          (FLX_NEWP(handle_pkg)(FLX_FPAR_PASS this))
          ->call(0, _tt107116(pkg_param_bootflx_64628, (void* /*VR_nullptr*/ )0));
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            fprintf(stderr,"Caller flx_pkgconfig\n");
            fprintf(stderr,"Calls  handle_pkg\n");
            abort();
          }
          _p=_p->resume();
        }
      }
      goto continue__ll_flx_pkgconfig_10930_L68149;
    _ml64725_L97332:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",378,7,378,10);
;
      goto continue__ll_flx_pkgconfig_10930_L68149;
    break__ll_flx_pkgconfig_10930_L68150:;
      return _tt107169(return_code, _vI68017_result);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",385,3,385,4); // HACK! 
}

//------------------------------
//FUNCTION <99215>: subscript::_lam_2006: Apply method
 ::flx::rtl::cl_t _lam_2006::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",228,7,228,23); // HACK! 
}

//------------------------------
//FUNCTION <97433>: map_package_requirements_uncurry::aux_uncurry: Apply method
void* _fI97433_aux_uncurry::apply(_at107115 const &_arg ){
  _vI97434_inp_uncurry = _arg.data[0];
  _vI97435_out = _arg.data[1];
    start_90421_L97442:;
      _vI97438_aux__apos_2_mv_1322  = _vI97434_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97438_aux__apos_2_mv_1322)==0) ) goto _ml1324_L97437;
      return _vI97435_out;
    _ml1324_L97437:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI97438_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI97441__lam_1326)(FLX_FPAR_PASS this, ptrmap_package_requirements_uncurry))) ) goto _ml1325_L97436;
      _vI97439_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI97438_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI97440_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI97438_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI97435_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97435_out, _lam_64520(ptrmap_package_requirements_uncurry)
      .apply(_vI97439_h_param_std_1208) /* apply_stack */))); //init
      _vI97434_inp_uncurry  = _vI97440_t_param_std_1207; //init
      goto start_90421_L97442;
    _ml1325_L97436:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <98583>: cxx_depcheck::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI98583__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <106382>: flx_processing::run_program_if_required: Apply method
int _fI106382_run_program_if_required::apply(_pt107161* const &_arg ){
  _vI106384_ehandler = _arg;
      _vI106383_result = 0; //assign simple
      if(!((ptrflx_processing->_vI106422_control.STATIC == 0)) ) goto _ifdoend_bootflx_65397_L106385;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99941_L107052;
      {
      _a13708t_107090 _tmp108121 = (::std::string("[flx] ") + ::std::string("Running dynamic program") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108121)));
      }
    _end_99941_L107052:;
      {
      _pI106134_calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI106384_ehandler);
      }
      _vI107053__genout_urv99942  = _fI106361_run_program_dynamic(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106384_ehandler) /* apply_stack */; //init
      _vI106383_result = _vI107053__genout_urv99942; //assign simple
      goto _ifdoelse_bootflx_65398_L106386;
    _ifdoend_bootflx_65397_L106385:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99949_L107056;
      {
      _a13708t_107090 _tmp108123 = (::std::string("[flx] ") + ::std::string("Running static program") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108123)));
      }
    _end_99949_L107056:;
      _vI107057__genout_urv99950  = _fI106373_run_program_static(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106384_ehandler) /* apply_stack */; //init
      _vI106383_result = _vI107057__genout_urv99950; //assign simple
    _ifdoelse_bootflx_65398_L106386:;
      return _vI106383_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2872,3,2872,4); // HACK! 
}

//------------------------------
//FUNCTION <66333>: toolchain_clang_osx::dynamic_object_extension: Apply method
_a13708t_107090 _fI66333_dynamic_object_extension::apply(){
      return ::std::string("_dynamic.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1463,3,1463,57); // HACK! 
}

//------------------------------
//FUNCTION <105841>: flx_processing::cxx_link_shared_exe::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI105841__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <93188>: generic_cxx_compile_for_dynamic_uncurry::aux_uncurry: Apply method
void* _fI93188_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93189_inp_uncurry = _arg.data[0];
  _vI93190_out = _arg.data[1];
    start_90421_L93197:;
      _vI93193_aux__apos_2_mv_1322  = _vI93189_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93193_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93192;
      return _vI93190_out;
    _ml1324_L93192:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93193_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93196__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_cxx_compile_for_dynamic_uncurry))) ) goto _ml1325_L93191;
      _vI93194_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93193_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93195_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93193_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93190_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93190_out, mkmac(_vI93194_h_param_std_1208)))); //init
      _vI93189_inp_uncurry  = _vI93195_t_param_std_1207; //init
      goto start_90421_L93197;
    _ml1325_L93191:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <105923>: flx_processing::check_binary_uptodate::aux_uncurry: Apply method
double _fI105923_aux_uncurry::apply(_tt107527 const &_arg ){
  _vI105924_init_uncurry = _arg.mem_0;
  _vI105925_x = _arg.mem_1;
    start_97926_L105932:;
      _vI105928_aux__apos_2_mv_1297  = _vI105925_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105928_aux__apos_2_mv_1297)==0) ) goto _ml1299_L105927;
      return _vI105924_init_uncurry;
    _ml1299_L105927:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI105928_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI105931__lam_1301)(FLX_FPAR_PASS this, ptrcheck_binary_uptodate, ptrflx_processing))) ) goto _ml1300_L105926;
      _vI105929_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI105928_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI105930_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI105928_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI105925_x  = _vI105930_t_param_std_1199; //init
      _vI105924_init_uncurry  = ((FLX_NEWP(_fI105353_maxf)(FLX_FPAR_PASS ptrcheck_binary_uptodate, ptrflx_processing))
      ->apply(_vI105924_init_uncurry))->clone()
      ->apply(_vI105929_h_param_std_1200) /* general apply */; //init
      goto start_97926_L105932;
    _ml1300_L105926:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <66072>: toolchain_gcc_osx::cxx_static_library_object_compiler: Apply method
int _fI66072_cxx_static_library_object_compiler::apply(_art107177 const &_arg ){
  _vI66075_spec = _arg;
      _vI66074_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_gcc_osx->_vI66016_base_cxx_compile_flags, ptrtoolchain_gcc_osx->_vI66012_cxx_compiler, ptrtoolchain_gcc_osx->_vI66096_config.header_search_dirs, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_osx->_vI66096_config.macros, ::std::string("FLX_STATIC_LINK")))), ::std::string("-o "), ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66075_spec.src, _vI66075_spec.dst)) /* apply_stack */; //assign simple
      return _vI66074_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1087,3,1087,4); // HACK! 
}

//------------------------------
//FUNCTION <96491>: flx_pkgconfig::handle_pkg::_lam_64696::aux_uncurry: Apply method
void* _fI96491_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96492_x_uncurry = _arg.data[0];
  _vI96493_y = _arg.data[1];
    start_91065_L96500:;
      _vI96496_aux__apos_2_mv_1328  = _vI96492_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96496_aux__apos_2_mv_1328)==0) ) goto _ml1330_L96495;
      return _vI96493_y;
    _ml1330_L96495:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI96496_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI96499__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L96494;
      _vI96497_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI96496_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI96498_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI96496_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI96493_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96493_y, _vI96497_h_param_std_1210))); //init
      _vI96492_x_uncurry  = _vI96498_t_param_std_1209; //init
      goto start_91065_L96500;
    _ml1331_L96494:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <65862>: toolchain_msvc_win32::static_executable_linker: Apply method
int static_executable_linker::apply(_art107181 const &_arg ){
  _vI65873_spec = _arg;
      link_specs = (void* /*VR_nullptr*/ )0; //assign simple
      obj_specs = (void* /*VR_nullptr*/ )0; //assign simple
      _vI92467_xs  = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI65873_spec.srcs, ptrtoolchain_msvc_win32->static_link_strings)) /* apply_stack */; //init
      _genout_urv92466  = (FLX_NEWP(_fI92468_iterator__apos_2)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)); //init
      _generator_toolchain_4165 = _genout_urv92466; //assign simple
    continue__ll_toolchain_4142_L65874:;
      static_executable_linker_mv_65680  = (_generator_toolchain_4165)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some term_param_bootflx_65631*/
      if(!andthen(FLX_VNI(static_executable_linker_mv_65680)==1, (FLX_NEWP(_lam_65683)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32))) ) goto _ml65682_L65881;
      term_param_bootflx_65631 = *((_a13708t_107090*)FLX_VNP(static_executable_linker_mv_65680)); //assign simple
      if(!((::flx::rtl::strutil::substr(term_param_bootflx_65631,0,::std::string("/DEFAULTLIB:").size()) == ::std::string("/DEFAULTLIB:"))) ) goto _ifdoend_bootflx_65632_L65875;
      *((void**)&link_specs)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&link_specs) , term_param_bootflx_65631)) /* apply_stack */; //assign simple
      goto continue__ll_toolchain_4142_L65874;
    _ifdoend_bootflx_65632_L65875:;
      if(!((::flx::rtl::strutil::substr(term_param_bootflx_65631,0,::std::string("/LIBPATH:").size()) == ::std::string("/LIBPATH:"))) ) goto _ifdoend_bootflx_65634_L65876;
      *((void**)&link_specs)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&link_specs) , term_param_bootflx_65631)) /* apply_stack */; //assign simple
      goto continue__ll_toolchain_4142_L65874;
    _ifdoend_bootflx_65634_L65876:;
      if(!((::flx::rtl::strutil::substr(term_param_bootflx_65631,- ::std::string(".obj").size() ,term_param_bootflx_65631.size()) == ::std::string(".obj")) || (::flx::rtl::strutil::substr(term_param_bootflx_65631,- ::std::string(".obj").size() ,term_param_bootflx_65631.size()) == ::std::string(".obj")) ) ) goto _ifdoend_bootflx_65636_L65877;
      *((void**)&obj_specs)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&obj_specs) , term_param_bootflx_65631)) /* apply_stack */; //assign simple
      goto continue__ll_toolchain_4142_L65874;
    _ifdoend_bootflx_65636_L65877:;
      *((void**)&obj_specs)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&obj_specs) , term_param_bootflx_65631)) /* apply_stack */; //assign simple
      goto continue__ll_toolchain_4142_L65874;
    _ml65682_L65881:;
/*match case 2:|None*/
      if(!(FLX_VNI(static_executable_linker_mv_65680)==0) ) goto _ml65684_L65882;
      goto _em65680_L65883;
    _ml65684_L65882:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1896,5,1896,9);
;
    _em65680_L65883:;
      _genout_urv92533  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(obj_specs, ::std::string("/Fe") + _vI65873_spec.dst )) /* apply_stack */, ::std::string("/link"))) /* apply_stack */, link_specs)) /* apply_stack */, ::std::string("/MDd")))), ::std::string("/DFLX_STATIC_LINK")))), ::std::string("/nologo")))), ::std::string("cl.exe"))))) /* apply_stack */; //init
      _ds2_65685 = _genout_urv92533; //assign simple
      _vI65871_result = _ds2_65685.mem_0; //assign simple
      _vI65872_text = _ds2_65685.mem_1; //assign simple
      {
      checkwarn(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .stack_call(_tt107175(_vI65871_result, _vI65872_text));
      }
      return _vI65871_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1900,3,1900,4); // HACK! 
}

//------------------------------
//FUNCTION <67882>: flx_pkgconfig::lexstr: Apply method
void* lexstr::apply(_a13708t_107090 const &_arg ){
  _vI67896_s__apos_ = _arg;
      _vI67884_s = _vI67896_s__apos_; //assign simple
      first = _vI67884_s.c_str(); //assign simple
      _vI67886_finish = _vI67884_s.c_str()+_vI67884_s.size(); //assign simple
      _vI67887_current = first; //assign simple
      words = (void* /*VR_nullptr*/ )0; //assign simple
    continue__ll_flx_pkgconfig_10580_L67897:;
      if(FLX_UNLIKELY(!(!((_vI67887_current == _vI67886_finish)) ) )) goto break__ll_flx_pkgconfig_10580_L67898;
      lexstr_mv_64631  = lexit(ptrflx_pkgconfig)
      .apply(_at107297(_vI67887_current, _vI67886_finish)) /* apply_stack */; //init
/*begin match*/
/*match case 1:(next_param_bootflx_64541, lexeme_param_bootflx_64542)*/
      lexeme_param_bootflx_64542 = lexstr_mv_64631.mem_1; //assign simple
      next_param_bootflx_64541 = lexstr_mv_64631.mem_0; //assign simple
      _vI67887_current = next_param_bootflx_64541; //assign simple
      if(!(!((lexeme_param_bootflx_64542 == ::std::string(""))) ) ) goto continue__ll_flx_pkgconfig_10580_L67897;
      words = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(words, lexeme_param_bootflx_64542))); //assign simple
      goto continue__ll_flx_pkgconfig_10580_L67897;
      goto continue__ll_flx_pkgconfig_10580_L67897;
      goto continue__ll_flx_pkgconfig_10580_L67897;
    break__ll_flx_pkgconfig_10580_L67898:;
      return _fI96317_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at107115(words, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",118,5,118,6); // HACK! 
}

//------------------------------
//FUNCTION <91104>: process_config_text_uncurry::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <66120>: toolchain_clang_linux::static_object_extension: Apply method
_a13708t_107090 _fI66120_static_object_extension::apply(){
      return ::std::string("_static.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1221,3,1221,55); // HACK! 
}

//------------------------------
//FUNCTION <89226>: toolchain_clang_apple_iOS_maker_uncurry::c_dependency_generator: Apply method
_tt107175 _fI89226_c_dependency_generator::apply(_art107174 const &_arg ){
  _vI89230_spec = _arg;
      _ds2_65604 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89201_c_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.ccflags, ::std::string("-MM")))), ptrtoolchain_clang_apple_iOS_maker_uncurry->sdk))), ::std::string("-isysroot")))), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.header_search_dirs, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.macros, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89230_spec.src)) /* apply_stack */; //assign simple
      _vI89228_result = _ds2_65604.mem_0; //assign simple
      _vI89229_data = _ds2_65604.mem_1; //assign simple
      return _tt107175(_vI89228_result, _vI89229_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2019,3,2019,4); // HACK! 
}

//------------------------------
//FUNCTION <96489>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI96489__lam_1398::apply(_a13708t_107090 const &_arg ){
  _vI96490_x = _arg;
      return eq(_vI96490_x, ptrhandle_pkg->_vI68127_pkg);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <65737>: toolchain_msvc_win32::_lam_65648: Apply method
_a13708t_107090 _lam_65648::apply(_a13708t_107090 const &_arg ){
  _vI65739_s = _arg;
      return ::std::string("/D") + _vI65739_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1752,21,1752,44); // HACK! 
}

//------------------------------
//FUNCTION <106431>: flx_processing::cxx_compile_static1_uncurry: Apply method
int _fI106431_cxx_compile_static1_uncurry::apply(_tt107292 const &_arg ){
  _vI106436_ehandler_uncurry = _arg.mem_0;
  _vI106446_src = _arg.mem_1;
  _vI106435_dst = _arg.mem_2;
      {
      __timeb64* _tmp108129 = (__timeb64*)&_vI106674_tv;
      _ftime64_s(((_tmp108129)));
      }
      _vI106673__genout_urv98705  = (static_cast<double>((_vI106674_tv.time))) + ((static_cast<double>((_vI106674_tv.millitm))) / 1.0e3 ) ; //init
      _vI106452_t0 = _vI106673__genout_urv98705; //assign simple
      _vI106438_pkgs = _fI106140_find_cxx_pkgs(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106446_src) /* apply_stack */; //assign simple
      *(&((_art107120*)&ptrflx_processing->_vI106422_control)->extra_pkgs)  = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.extra_pkgs, _vI106438_pkgs)) /* apply_stack */; //assign simple
      _vI106454_pkg_cflags = (void* /*VR_nullptr*/ )0; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI106438_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65326_L106444;
      {
      _a13708t_107090 _tmp108130 = (::std::string("[flx:cxx_compile_static1] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106438_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108130)));
      }
      fflush(stderr);
      _vI106675_r = _fI106676_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108131 = (void**)&_vI106675_r;
      _rev(((_tmp108131)),(_a13708t_107090*)0);
      }
      _vI106445_PKGCONFIG_PATH = _vI106675_r; //assign simple
      _vI106442_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI106445_PKGCONFIG_PATH, ::std::string("--field=cflags"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI106438_pkgs)) /* apply_stack */, ptrflx_processing->_vI106422_control.pkgs)) /* apply_stack */; //assign simple
      _vI106686__genout_urv98752  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI106442_allargs) /* apply_stack */; //init
      _vI106433__ds2_65500 = _vI106686__genout_urv98752; //assign simple
      _vI106447_ret = _vI106433__ds2_65500.mem_0; //assign simple
      _vI106448_mycflags = _vI106433__ds2_65500.mem_1; //assign simple
      if(!(!((_vI106447_ret == 0)) ) ) goto _ifdoelse_bootflx_65328_L106453;
      {
      _a13708t_107090 _tmp108132 = (((::std::string("[flx:cxx_compile_static1] Error ") + ::flx::rtl::strutil::str<int>(_vI106447_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106442_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108132)));
      }
      fflush(stderr);
      ::std::exit(1);
    _ifdoelse_bootflx_65328_L106453:;
      _vI106454_pkg_cflags = _vI106448_mycflags; //assign simple
    _ifdoelse_bootflx_65326_L106444:;
      _vI106688_cxx_compile_static1__apos_2_mv_65502  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106688_cxx_compile_static1__apos_2_mv_65502%2==1) ) goto _ml65504_L106689;
      goto _end_hash_1056176400;
    _ml65504_L106689:;
/*match case 2:any*/
    _end_hash_1056176400:;
      _vI106692_cxx_compile_static1__apos_2_mv_65502  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106692_cxx_compile_static1__apos_2_mv_65502%2==1) ) goto _ml65504_L106693;
      _vI106691__urv98784  = (FLX_NEWP(_pI106424_echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_845573605;
    _ml65504_L106693:;
/*match case 2:any*/
      _vI106691__urv98784  = (FLX_NEWP(_pI106423_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_845573605:;
      _vI106696_cxx_compile_static1__apos_2_mv_65502  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106696_cxx_compile_static1__apos_2_mv_65502%2==1) ) goto _ml65504_L106697;
      goto _end_hash_973714655;
    _ml65504_L106697:;
/*match case 2:any*/
    _end_hash_973714655:;
      _vI106700_cxx_compile_static1__apos_2_mv_65502  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106700_cxx_compile_static1__apos_2_mv_65502%2==1) ) goto _ml65504_L106701;
      goto _end_hash_615172487;
    _ml65504_L106701:;
/*match case 2:any*/
    _end_hash_615172487:;
      _vI106437_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.CCFLAGS, _vI106454_pkg_cflags)) /* apply_stack */, _vI106691__urv98784, ptrflx_processing->_vI106123_dflt_clang_config.dynamic_libraries, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_RTL_DIRS, ptrflx_processing->_vI106422_control.EXTRA_INCLUDE_DIRS)) /* apply_stack */, ptrflx_processing->_vI106123_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI106422_control.MACROS, ptrflx_processing->_vI106123_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      _vI106703__genout_urv98829  = cxx_depcheck(FLX_FPAR_PASS_ONLY)
      .apply(_tt107593(_vI106437_tc, _vI106446_src, _vI106435_dst)) /* apply_stack */; //init
      if(!((ptrflx_processing->_vI106422_control.RECOMPILE == 1) || !_vI106703__genout_urv98829  ) ) goto _ifdoend_bootflx_65329_L106451;
      _vI106440_result = (_vI106437_tc.cxx_static_object_compiler)->clone()
      ->apply(_art107177(_vI106435_dst, _vI106446_src)) /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI106422_control.TIME == 1)) ) goto _end_98839_L106711;
      {
      __timeb64* _tmp108133 = (__timeb64*)&_vI106710_tv;
      _ftime64_s(((_tmp108133)));
      }
      _vI106709__genout_urv95543  = (static_cast<double>((_vI106710_tv.time))) + ((static_cast<double>((_vI106710_tv.millitm))) / 1.0e3 ) ; //init
      _vI106704_elapsed = _vI106709__genout_urv95543 - _vI106452_t0 ; //assign simple
      _vI106705_minutes = ::std::floor((_vI106704_elapsed / 60.0 )); //assign simple
      _vI106706_seconds = _vI106704_elapsed - (_vI106705_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108134 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106705_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106706_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Static c++   : ") + _vI106446_src ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108134)));
      }
      fflush(stdout);
    _end_98839_L106711:;
      if(!(!((_vI106440_result == 0)) ) ) goto _ifdoelse_bootflx_65332_L106449;
      {
      _a13708t_107090 _tmp108135 = ((::std::string("[flx] C++ compilation ") + _vI106446_src ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108135)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65332_L106449:;
      return _vI106440_result;
    _ifdoend_bootflx_65329_L106451:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2389,3,2389,4); // HACK! 
}

//------------------------------
//FUNCTION <65944>: toolchain_gcc_linux::dynamic_library_extension: Apply method
_a13708t_107090 _fI65944_dynamic_library_extension::apply(){
      return ::std::string(".so");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",741,3,741,51); // HACK! 
}

//------------------------------
//FUNCTION <104444>: gramtime_uncurry::aux_uncurry: Apply method
void* _fI104444_aux_uncurry::apply(_at107115 const &_arg ){
  _vI104445_inp_uncurry = _arg.data[0];
  _vI104446_out = _arg.data[1];
    start_90421_L104453:;
      _vI104449_aux__apos_2_mv_1322  = _vI104445_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI104449_aux__apos_2_mv_1322)==0) ) goto _ml1324_L104448;
      return _vI104446_out;
    _ml1324_L104448:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI104449_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI104452__lam_1326)(FLX_FPAR_PASS this, ptrgramtime_uncurry))) ) goto _ml1325_L104447;
      _vI104450_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI104449_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI104451_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI104449_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI104446_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104446_out, strip(_vI104450_h_param_std_1208)))); //init
      _vI104445_inp_uncurry  = _vI104451_t_param_std_1207; //init
      goto start_90421_L104453;
    _ml1325_L104447:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//C FUNC <16443>: file_type
int file_type(_a16417t_107248* _vI16451_s){
   ::flx::rtl::cl_t file_type_mv_2790;
   ::flx::rtl::cl_t file_type_mv_2785;
  _a16416t_107387 m_param_std_2779;
  _a16416t_107387 file_type_mv_2781;
      file_type_mv_2781  = (_vI16451_s->st_mode) & (_S_IFMT) ; //init
/*begin match*/
/*match case 1:m_param_std_2779*/
      m_param_std_2779 = file_type_mv_2781; //assign simple
      file_type_mv_2785  = (m_param_std_2779 == (_S_IFDIR)); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(file_type_mv_2785%2==1) ) goto _ml2787_L94544;
      return /*VR_int*/2;
    _ml2787_L94544:;
/*match case 2:any*/
      file_type_mv_2790  = (m_param_std_2779 == (_S_IFREG)); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(file_type_mv_2790%2==1) ) goto _ml2792_L94546;
      return /*VR_int*/4;
    _ml2792_L94546:;
/*match case 2:any*/
      return /*VR_int*/7;
}
//------------------------------

//PROCEDURE <106134:> flx_processing::calpackages: Call method
void _pI106134_calpackages::stack_call(_pt107161* const &_arg){
  _vI106137_ehandler = _arg;
      _vI106487_str_mv_152  = ptrflx_processing->calpackages_run; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106487_str_mv_152%2==1) ) goto _ml154_L106488;
      _vI106486__urv95620  = ::std::string("true"); //init
      goto _end_inline_str_95625_L106489;
    _ml154_L106488:;
/*match case 2:any*/
      _vI106486__urv95620  = ::std::string("false"); //init
    _end_inline_str_95625_L106489:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_95638_L106492;
      {
      _a13708t_107090 _tmp108137 = (::std::string("[flx] ") + ((::std::string("[flx:calpackages] Calculating package requirements (calpackages_run=") + _vI106486__urv95620 ) + ::std::string(")") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108137)));
      }
    _end_95638_L106492:;
      if(ptrflx_processing->calpackages_run) goto _ifdoelse_bootflx_65267_L106139;
      _vI106135_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(ptrflx_processing->_vI106123_dflt_clang_config) /* general apply */; //assign simple
      _vI106136_x = map_package_requirements_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107570(_vI106137_ehandler, _art107569(ptrflx_processing->_vI106422_control.DLINK_STRINGS, ptrflx_processing->_vI106422_control.pkgs, (_vI106135_tc.dynamic_object_extension)->clone()
      ->apply() /* general apply */, (_vI106135_tc.executable_extension)->clone()
      ->apply() /* general apply */, (_vI106135_tc.static_object_extension)->clone()
      ->apply() /* general apply */, (*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (*ptrflx_processing->_vI68366_config ).FLX_TARGET_DIR, ptrflx_processing->_vI106422_control.LINKER_SWITCHES, ptrflx_processing->_vI106422_control.LINKEXE, ptrflx_processing->_vI106422_control.SLINK_STRINGS, ptrflx_processing->_vI106422_control.STATIC, ptrflx_processing->dvars.cpp_filebase))) /* apply_stack */; //assign simple
      ptrflx_processing->_vI106422_control.CCFLAGS = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.CCFLAGS, _vI106136_x.CFLAGS)) /* apply_stack */; //assign simple
      ptrflx_processing->_vI106422_control.EXTRA_INCLUDE_FILES = _vI106136_x.INCLUDE_FILES; //assign simple
      ptrflx_processing->_vI106422_control.DRIVER_EXE = _vI106136_x.DRIVER_EXE; //assign simple
      ptrflx_processing->_vI106422_control.DRIVER_OBJS = _vI106136_x.DRIVER_OBJS; //assign simple
      ptrflx_processing->_vI106422_control.LINK_STRINGS = _vI106136_x.LINK_STRINGS; //assign simple
      ptrflx_processing->calpackages_run = 1; //assign simple
      return; // proc return from stackable 
    _ifdoelse_bootflx_65267_L106139:;
      return; // proc return from stackable 

}
//------------------------------
//FUNCTION <102616>: +::aux_uncurry: Apply method
void* _fI102616_aux_uncurry::apply(_at107285 const &_arg ){
  _vI102617_x_uncurry = _arg.data[0];
  _vI102618_y = _arg.data[1];
    start_102515_L102625:;
      _vI102621_aux__apos_2_mv_1328  = _vI102617_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102621_aux__apos_2_mv_1328)==0) ) goto _ml1330_L102620;
      return _vI102618_y;
    _ml1330_L102620:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI102621_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI102624__lam_1332)(FLX_FPAR_PASS this, ptr_fI88545___plus_))) ) goto _ml1331_L102619;
      _vI102622_h_param_std_1210 = (*((_tt107274*)FLX_VNP(_vI102621_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI102623_t_param_std_1209 = (*((_tt107274*)FLX_VNP(_vI102621_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI102618_y  = FLX_VNR(1, new(*PTF gcp, _tt107274_ptr_map, true) _tt107274 (_tt107274(_vI102618_y, _vI102622_h_param_std_1210))); //init
      _vI102617_x_uncurry  = _vI102623_t_param_std_1209; //init
      goto start_102515_L102625;
    _ml1331_L102619:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <89256>: toolchain_clang_apple_iOS_maker_uncurry::static_executable_linker: Apply method
int _fI89256_static_executable_linker::apply(_art107181 const &_arg ){
  _vI89258_spec = _arg;
      _vI89257_result = generic_link_exe_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89203_linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.library_search_dirs, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.static_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89258_spec.srcs, _vI89258_spec.dst)) /* apply_stack */; //assign simple
      return _vI89257_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2157,3,2157,4); // HACK! 
}

//------------------------------
//FUNCTION <96200>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::aux_uncurry: Apply method
void* _fI96200_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96201_x_uncurry = _arg.data[0];
  _vI96202_y = _arg.data[1];
    start_91065_L96209:;
      _vI96205_aux__apos_2_mv_1328  = _vI96201_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96205_aux__apos_2_mv_1328)==0) ) goto _ml1330_L96204;
      return _vI96202_y;
    _ml1330_L96204:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI96205_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI96208__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64707, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L96203;
      _vI96206_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI96205_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI96207_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI96205_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI96202_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96202_y, _vI96206_h_param_std_1210))); //init
      _vI96201_x_uncurry  = _vI96207_t_param_std_1209; //init
      goto start_91065_L96209;
    _ml1331_L96203:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <65973>: toolchain_gcc_linux::c_dynamic_object_compiler: Apply method
int _fI65973_c_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI65976_spec = _arg;
      _vI65975_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_linux->_vI65924_base_c_compile_flags, ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_gcc_linux->c_compiler, ptrtoolchain_gcc_linux->_vI66005_config.header_search_dirs, ptrtoolchain_gcc_linux->_vI66005_config.macros, ::std::string("-o "), ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI65976_spec.src, _vI65976_spec.dst)) /* apply_stack */; //assign simple
      return _vI65975_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",817,3,817,4); // HACK! 
}

//------------------------------
//FUNCTION <66029>: toolchain_gcc_osx::static_object_extension: Apply method
_a13708t_107090 _fI66029_static_object_extension::apply(){
      return ::std::string("_static.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",973,3,973,55); // HACK! 
}

//------------------------------
//FUNCTION <16342>: quote_arg: Apply method
_a13708t_107090 quote_arg::apply(_a13708t_107090 const &_arg ){
  _vI16344_s = _arg;
      return (::std::string("\"") + _vI16344_s ) + ::std::string("\"") ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/program.fdoc",1056,5,1056,52); // HACK! 
}

//------------------------------
//FUNCTION <105690>: flx_processing::cxx_compile_dynamic::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI105690__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//C FUNC <81928>: strfiletime
_a13708t_107090 strfiletime(FLX_APAR_DECL double _vI81929_x){
   ::flx::rtl::cl_t strfiletime0_mv_714;
   ::flx::rtl::cl_t strfiletime0_mv_709;
      {if(FLX_UNLIKELY(!(!((_vI81929_x == 0.0)) )))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",301,5,301,20);}
      strfiletime0_mv_709  = (_vI81929_x == - 1.0 ); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(strfiletime0_mv_709%2==1) ) goto _ml711_L97886;
      return ::std::string("BIG BANG");
    _ml711_L97886:;
/*match case 2:any*/
      strfiletime0_mv_714  = (_vI81929_x == (static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)))); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(strfiletime0_mv_714%2==1) ) goto _ml716_L97888;
      return ::std::string("BIG CRUNCH");
    _ml716_L97888:;
/*match case 2:any*/
      return fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI81929_x, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(0, 3))))) /* apply_stack */;
}
//------------------------------
//FUNCTION <66325>: toolchain_clang_osx::cxx_compiler_vendor: Apply method
_a13708t_107090 _fI66325_cxx_compiler_vendor::apply(){
      return ::std::string("clang");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1458,3,1458,47); // HACK! 
}

//------------------------------
//FUNCTION <65730>: toolchain_msvc_win32::_lam_65646: Apply method
_a13708t_107090 _lam_65646::apply(_a13708t_107090 const &_arg ){
  _vI65732_s = _arg;
      return ::std::string("/I") + _vI65732_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1746,31,1746,54); // HACK! 
}

//------------------------------
//FUNCTION <106387>: flx_processing::check_output_if_required: Apply method
int _fI106387_check_output_if_required::apply(){
      _vI106388_result = 0; //assign simple
      _vI106389_expected = ptrflx_processing->_vI106422_control.EXPECT; //assign simple
      _vI106390_output = ptrflx_processing->_vI106422_control.STDOUT; //assign simple
      if(!((_vI106390_output == ::std::string(""))) ) goto _ifdoend_bootflx_65399_L106394;
      {
      _a13708t_107090 _tmp108140 = ::std::string("[flx] No output file given??") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108140)));
      }
      fflush(stderr);
      _vI106388_result = 1; //assign simple
      goto _ifdoelse_bootflx_65400_L106399;
    _ifdoend_bootflx_65399_L106394:;
      if(!((_vI106389_expected == ::std::string(""))) ) goto _ifdoend_bootflx_65401_L106395;
      {
      _a13708t_107090 _tmp108141 = ::std::string("[flx] No expect file given??") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108141)));
      }
      fflush(stderr);
      _vI106388_result = 1; //assign simple
      goto _ifdoelse_bootflx_65400_L106399;
    _ifdoend_bootflx_65401_L106395:;
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_575_L107059;
      {
      _a13708t_107090 _tmp108142 = (::std::string("[load_text] ") + _vI106390_output ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108142)));
      }
      fflush(stderr);
    _ifdoelse_std_575_L107059:;
      _vI106391_output_text = ::flx::rtl::ioutil::load_text_file(_vI106390_output); //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_575_L107061;
      {
      _a13708t_107090 _tmp108143 = (::std::string("[load_text] ") + _vI106389_expected ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108143)));
      }
      fflush(stderr);
    _ifdoelse_std_575_L107061:;
      _vI106392_expected_text = ::flx::rtl::ioutil::load_text_file(_vI106389_expected); //assign simple
      _vI106393_bresult = (_vI106391_output_text == _vI106392_expected_text); //assign simple
      if(_vI106393_bresult) goto _ifdoelse_bootflx_65400_L106399;
      {
      _a13708t_107090 _tmp108144 = (((::std::string("[flx] Output ") + _vI106390_output ) + ::std::string(" doesn't match expected ") ) + _vI106389_expected ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108144)));
      }
      fflush(stderr);
      _vI106388_result = 1; //assign simple
    _ifdoelse_bootflx_65400_L106399:;
      return _vI106388_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2903,3,2903,4); // HACK! 
}

//------------------------------
//FUNCTION <95907>: flx_pkgconfig::tail_val::aux: Apply method
void* _fI95907_aux::apply(_at107115 const &_arg ){
  _vI95908_inp = _arg.data[0];
  _vI95909_out = _arg.data[1];
    start_95901_L95928:;
      aux_mv_1434  = _vI95908_inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(aux_mv_1434)==0) ) goto _ml1436_L95911;
      return _fI95915_aux_uncurry(FLX_FPAR_PASS this, ptrtail_val, ptrflx_pkgconfig)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI95909_out, ptrtail_val->_vI68059_v))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1436_L95911:;
/*match case 2:|Snoc (t_param_std_1242, h_param_std_1243)*/
      if(!andthen(FLX_VNI(aux_mv_1434)==1, (FLX_NEWP(_lam_1443)(FLX_FPAR_PASS this, ptrtail_val, ptrflx_pkgconfig))) ) goto _ml1437_L95910;
      h_param_std_1243 = (*((_tt107095*)FLX_VNP(aux_mv_1434))).mem_1; //assign simple
      t_param_std_1242 = (*((_tt107095*)FLX_VNP(aux_mv_1434))).mem_0; //assign simple
      aux_mv_1439  = !eq(h_param_std_1243, ptrtail_val->_vI68059_v) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(aux_mv_1439%2==1) ) goto _ml1441_L95926;
/*parallel assignment*/
      _vI95909_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI95909_out, h_param_std_1243))); //init
      _vI95908_inp  = t_param_std_1242; //init
      goto start_95901_L95928;
    _ml1441_L95926:;
/*match case 2:any*/
/*parallel assignment*/
      _vI95908_inp  = t_param_std_1242; //init
      goto start_95901_L95928;
    _ml1437_L95910:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",582,7,582,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",584,5,584,6); // HACK! 
}

//------------------------------
//FUNCTION <66179>: toolchain_clang_linux::dynamic_executable_linker: Apply method
int _fI66179_dynamic_executable_linker::apply(_art107181 const &_arg ){
  _vI66182_spec = _arg;
      _vI66181_result = generic_link_exe_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_clang_linux->_vI66104_linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_clang_linux->_vI66187_config.library_search_dirs, ptrtoolchain_clang_linux->_vI66187_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66182_spec.srcs, _vI66182_spec.dst)) /* apply_stack */; //assign simple
      return _vI66181_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1400,3,1400,4); // HACK! 
}

//------------------------------
//FUNCTION <106017>: flx_processing::run_program_dynamic::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI106017__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <66155>: toolchain_clang_linux::c_dynamic_object_compiler: Apply method
int _fI66155_c_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI66158_spec = _arg;
      _vI66157_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_linux->_vI66107_base_c_compile_flags, ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_clang_linux->_vI66102_c_compiler, ptrtoolchain_clang_linux->_vI66187_config.header_search_dirs, ptrtoolchain_clang_linux->_vI66187_config.macros, ::std::string("-o "), ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66158_spec.src, _vI66158_spec.dst)) /* apply_stack */; //assign simple
      return _vI66157_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1300,3,1300,4); // HACK! 
}

//------------------------------
//FUNCTION <99213>: subscript::_lam_2002: Apply method
 ::flx::rtl::cl_t _lam_2002::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",226,7,226,35); // HACK! 
}

//------------------------------
//FUNCTION <66343>: toolchain_clang_osx::get_base_c_compile_flags: Apply method
void* _fI66343_get_base_c_compile_flags::apply(){
      return ptrtoolchain_clang_osx->_vI66317_base_c_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1468,3,1468,65); // HACK! 
}

//------------------------------
//FUNCTION <95998>: isidstart::_lam_168: Apply method
 ::flx::rtl::cl_t _lam_168::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/char.fdoc",66,57,66,62); // HACK! 
}

//------------------------------
//C FUNC <16480>: mk_absolute_filename
_a13708t_107090 mk_absolute_filename(_a13708t_107090 _vI16484_s){
   ::flx::rtl::cl_t getcwd_mv_2805;
  char* _vI92975_p;
  _at107254 _vI92974_b;
  _a13708t_107090 _urv92963;
   ::flx::rtl::cl_t mk_absolute_filename_mv_2810;
      mk_absolute_filename_mv_2810  = (::flx::rtl::strutil::subscript(_vI16484_s,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0)) || ((::flx::rtl::strutil::subscript(_vI16484_s,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0)) && (::flx::rtl::strutil::subscript(_vI16484_s,2) == ::flx::rtl::strutil::subscript(::std::string("\\"),0)) ) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(mk_absolute_filename_mv_2810%2==1) ) goto _ml2812_L92972;
      return _vI16484_s;
    _ml2812_L92972:;
/*match case 2:any*/
      _vI92975_p = _getcwd(((char*)(((_at107254*)&_vI92974_b)->data)),(int)(static_cast<_a5038t_107106>(1024)/*int.flx: ctor size from _a5038t_107106*/)); //assign simple
      getcwd_mv_2805  = (0==_vI92975_p); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(getcwd_mv_2805%2==1) ) goto _ml2807_L92977;
      _urv92963  = ::std::string(""); //init
      goto _end_inline_getcwd_92969_L92978;
    _ml2807_L92977:;
/*match case 2:any*/
      _urv92963  = ::std::string(_vI92975_p); //init
    _end_inline_getcwd_92969_L92978:;
      return (_urv92963 + ::std::string("\\") ) + _vI16484_s ;
}
//------------------------------
//FUNCTION <104994>: FlxPkgConfigQuery::aux_uncurry::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI104994__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <66057>: toolchain_gcc_osx::dependency_parser: Apply method
void* _fI66057_dependency_parser::apply(_a13708t_107090 const &_arg ){
  _vI66059_data = _arg;
      return generic_dependency_parser(FLX_FPAR_PASS_ONLY)
      .apply(_vI66059_data) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1018,3,1018,4); // HACK! 
}

//------------------------------
//FUNCTION <67771>: FlxPkgConfigQuery::getpkgfield::getpkgfield'2: Apply method
void* _fI67771_getpkgfield__apos_2::apply(_at107092 const &_arg ){
  pkg = _arg.data[0];
  field = _arg.data[1];
      _vI104780_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L104776;
      _vI104781_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108146 = (int*)&_vI104781_i;
      ++*((_tmp108146));
      }
    redo__ll_lists_4854_L104779:;
      if(FLX_UNLIKELY(!((0 < _vI104781_i)) )) goto _ifdoelse_std_1191_L104776;
      {
      int* _tmp108147 = (int*)&_vI104781_i;
      --*((_tmp108147));
      }
      _vI104780_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104780_o, (_at107092(::std::string("--field=") + field , pkg).data)[reinterpret< ::flx::rtl::cl_t>(_vI104781_i)]))); //assign simple
      goto redo__ll_lists_4854_L104779;
    _ifdoelse_std_1191_L104776:;
      _genout_urv104784  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrFlxPkgConfigQuery->paths, _vI104780_o)) /* apply_stack */) /* apply_stack */; //init
      _ds2_64761 = _genout_urv104784; //assign simple
      _vI67774_result = _ds2_64761.mem_0; //assign simple
      values = _ds2_64761.mem_1; //assign simple
      if(!(!((_vI67774_result == 0)) ) ) goto _ifdoelse_bootflx_64734_L67788;
      {
      _a13708t_107090 _tmp108148 = (::std::string("Can't find package ") + pkg ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108148)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108149 = ::std::string("Searching in paths:") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108149)));
      }
      fflush(stdout);
      _vI104799_xs  = ptrFlxPkgConfigQuery->paths; //init
      _genout_urv104798  = (FLX_NEWP(_fI104800_iterator__apos_2)(FLX_FPAR_PASS this, ptrgetpkgfield, ptrFlxPkgConfigQuery)); //init
      _generator_flx_pkgconfig_10992 = _genout_urv104798; //assign simple
    continue__ll_flx_pkgconfig_10986_L67782:;
      _vI64762_getpkgfield__apos_2_mv_64762  = (_generator_flx_pkgconfig_10992)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some path_param_bootflx_64736*/
      if(!andthen(FLX_VNI(_vI64762_getpkgfield__apos_2_mv_64762)==1, (FLX_NEWP(_lam_64765)(FLX_FPAR_PASS this, ptrgetpkgfield, ptrFlxPkgConfigQuery))) ) goto _ml64764_L67783;
      path_param_bootflx_64736 = *((_a13708t_107090*)FLX_VNP(_vI64762_getpkgfield__apos_2_mv_64762)); //assign simple
      {
      _a13708t_107090 _tmp108150 = (::std::string("  ") + path_param_bootflx_64736 ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108150)));
      }
      fflush(stdout);
      goto continue__ll_flx_pkgconfig_10986_L67782;
    _ml64764_L67783:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI64762_getpkgfield__apos_2_mv_64762)==0) ) goto _ml64766_L67784;
      goto _em64762_L67785;
    _ml64766_L67784:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",495,9,495,13);
;
    _em64762_L67785:;
      {
      _a6203t_107291 _tmp108152 = (_a6203t_107291)(ptrgetpkgfield->_vI67789_ehandler);
      throw ((_tmp108152));
      }
    _ifdoelse_bootflx_64734_L67788:;
      return values;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",501,5,501,6); // HACK! 
}

//------------------------------
//FUNCTION <97662>: map_package_requirements_uncurry::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI97662__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <98589>: cxx_depcheck::_lam_65578: Apply method
 ::flx::rtl::cl_t _lam_65578::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",415,9,415,13); // HACK! 
}

//------------------------------
//FUNCTION <98575>: cxx_depcheck::aux::aux_uncurry: Apply method
void* _fI98575_aux_uncurry::apply(_at107115 const &_arg ){
  _vI98576_x_uncurry = _arg.data[0];
  _vI98577_y = _arg.data[1];
    start_91065_L98584:;
      _vI98580_aux__apos_2_mv_1328  = _vI98576_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI98580_aux__apos_2_mv_1328)==0) ) goto _ml1330_L98579;
      return _vI98577_y;
    _ml1330_L98579:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI98580_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI98583__lam_1332)(FLX_FPAR_PASS this, ptr_fI98567_aux, ptrcxx_depcheck))) ) goto _ml1331_L98578;
      _vI98581_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI98580_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI98582_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI98580_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI98577_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI98577_y, _vI98581_h_param_std_1210))); //init
      _vI98576_x_uncurry  = _vI98582_t_param_std_1209; //init
      goto start_91065_L98584;
    _ml1331_L98578:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <97104>: flx_pkgconfig::parse_args::_lam_64653: Apply method
 ::flx::rtl::cl_t _lam_64653::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",154,9,154,23); // HACK! 
}

//------------------------------
//C FUNC <16976>: std_config
_art107117 std_config(FLX_APAR_DECL_ONLY){
  _a13708t_107090 INSTALL_ROOT;
  _a13708t_107090 INSTALL_ROOT_TOPDIR;
  _a13708t_107090 PREFIX;
  _art107117 _vI90880_cfg;
  _art107126 profile;
  _art107117 _vI16978_cfg;
      profile = dflt_profile(); //assign simple
      *(&((_art107117*)&_vI90880_cfg)->FLX_HOME_DIR)  = profile.FLX_HOME_DIR; //assign simple
      *(&((_art107117*)&_vI90880_cfg)->FLX_PROFILE_DIR)  = profile.FLX_PROFILE_DIR; //assign simple
      *(&((_art107117*)&_vI90880_cfg)->FLX_CACHE_DIR)  = profile.FLX_CACHE_DIR; //assign simple
      *(&((_art107117*)&_vI90880_cfg)->FLX_OUTPUT_DIR)  = profile.FLX_OUTPUT_DIR; //assign simple
      PREFIX = _fI82124_join(_fI82124_join(::std::string("C:\\") + ::std::string("usr") , ::std::string("local")), ::std::string("lib")); //assign simple
      INSTALL_ROOT_TOPDIR = _fI82124_join(PREFIX, ::std::string("felix")); //assign simple
      INSTALL_ROOT = _fI82124_join(INSTALL_ROOT_TOPDIR, ::std::string("felix-") + ::std::string("2016.07.12-rc1") ); //assign simple
      *(&((_art107117*)&_vI90880_cfg)->FLX_TARGET_DIR)  = _fI82124_join(INSTALL_ROOT, ::std::string("host")); //assign simple
      *(&((_art107117*)&_vI90880_cfg)->FLX_CONFIG_DIRS)  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, _fI82124_join(_fI82124_join(INSTALL_ROOT, ::std::string("host")), ::std::string("config"))))); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS (_art107117*)&_vI90880_cfg);
      *(&((_art107117*)&_vI90880_cfg)->FLX_SHARE_DIR)  = _fI82124_join(INSTALL_ROOT, ::std::string("share")); //assign simple
  set_libs_and_rtls(FLX_FPAR_PASS (_art107117*)&_vI90880_cfg);
      _vI16978_cfg = _vI90880_cfg; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_573_L90904;
      {
      _a13708t_107090 _tmp108154 = (::std::string("[load] ") + _fI82124_join(_vI16978_cfg.FLX_PROFILE_DIR, ::std::string("felix.fpc")) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108154)));
      }
      fflush(stderr);
    _ifdoelse_std_573_L90904:;
      {
      _art107117* _tmp108155 = (_art107117*)&_vI16978_cfg;
      _a13708t_107090 _tmp108156 = ::flx::rtl::ioutil::load_file((_fI82124_join(_vI16978_cfg.FLX_PROFILE_DIR, ::std::string("felix.fpc"))));
      process_config_text_uncurry(FLX_FPAR_PASS_ONLY)
      .stack_call(_tt107132((_tmp108155), (_tmp108156)));
      }
  config_env_overrides(FLX_FPAR_PASS (_art107117*)&_vI16978_cfg);
      return _vI16978_cfg;
}
//------------------------------
//FUNCTION <88950>: join_uncurry: Apply method
void* _fI88950_join_uncurry::apply(_at107285 const &_arg ){
  _vI89630_x_uncurry = _arg.data[0];
  _vI89631_y = _arg.data[1];
      _vI102494_is_empty_mv_1309  = _vI89630_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102494_is_empty_mv_1309)==0) ) goto _ml1311_L102493;
      _urv102491  = 1; //init
      goto _end_inline_is_empty_102496_L102496;
    _ml1311_L102493:;
/*match case 2:any*/
      _urv102491  = 0; //init
    _end_inline_is_empty_102496_L102496:;
      if(!_urv102491 ) goto _ifdoend_std_1215_L89632;
      return _vI89631_y;
    _ifdoend_std_1215_L89632:;
      *((void**)&_vI89633_z)  = _fI102535_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107285(_vI89630_x_uncurry, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108158 = (void**)&_vI89633_z;
      void** _tmp108159 = (void**)&_vI89634_last;
      _rev_last(((_tmp108158)),((_tmp108159)),(_at107092*)0);
      }
      {
      void** _tmp108160 = (void**)&_vI89634_last;
      
    { // list splice
      //struct node_t { _at107092 elt; void *tail; };
      struct node_t { void *tail; _at107092 elt; };
      void **p = ((_tmp108160));
      while(*p) p = &((node_t*)FLX_VNP(*p))->tail;
      *p = _vI89631_y;
    }
    
      }
      return _vI89633_z;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",405,3,405,4); // HACK! 
}

//------------------------------
//FUNCTION <97219>: flx_pkgconfig::parse_args::aux::_lam_2241: Apply method
 ::flx::rtl::cl_t _lam_2241::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",502,9,502,14); // HACK! 
}

//------------------------------
//FUNCTION <102567>: exts::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI102567__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <66098>: toolchain_clang_linux: Apply method
_art107183 toolchain_clang_linux::apply(_art107173 const &_arg ){
  _vI66187_config = _arg;
      _vI93847_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 14)) ) goto _ifdoelse_std_1191_L93843;
      _vI93848_i = (static_cast<int>(14)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108161 = (int*)&_vI93848_i;
      ++*((_tmp108161));
      }
    redo__ll_lists_4854_L93846:;
      if(FLX_UNLIKELY(!((0 < _vI93848_i)) )) goto _ifdoelse_std_1191_L93843;
      {
      int* _tmp108162 = (int*)&_vI93848_i;
      --*((_tmp108162));
      }
      _vI93847_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93847_o, (_at107234(::std::string("-w"), ::std::string("-Wfatal-errors"), ::std::string("-Wno-invalid-offsetof"), ::std::string("-Wno-logical-op-parentheses"), ::std::string("-Wno-bitwise-op-parentheses"), ::std::string("-Wno-parentheses-equality"), ::std::string("-Wno-parentheses"), ::std::string("-Wno-return-stack-address"), ::std::string("-Wno-tautological-compare"), ::std::string("-Wno-return-type-c-linkage"), ::std::string("-Wno-unused-variable"), ::std::string("-Wno-unused-function"), ::std::string("-Wno-c++11-narrowing"), ::std::string("-Wno-missing-braces")).data)[reinterpret< ::flx::rtl::cl_t>(_vI93848_i)]))); //assign simple
      goto redo__ll_lists_4854_L93846;
    _ifdoelse_std_1191_L93843:;
      _vI66100_cxx_compile_warning_flags = _vI93847_o; //assign simple
      _vI93857_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L93853;
      _vI93858_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108163 = (int*)&_vI93858_i;
      ++*((_tmp108163));
      }
    redo__ll_lists_4854_L93856:;
      if(FLX_UNLIKELY(!((0 < _vI93858_i)) )) goto _ifdoelse_std_1191_L93853;
      {
      int* _tmp108164 = (int*)&_vI93858_i;
      --*((_tmp108164));
      }
      _vI93857_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93857_o, (_at107092(::std::string("-w"), ::std::string("-Wfatal-errors")).data)[reinterpret< ::flx::rtl::cl_t>(_vI93858_i)]))); //assign simple
      goto redo__ll_lists_4854_L93856;
    _ifdoelse_std_1191_L93853:;
      _vI66101_c_compile_warning_flags = _vI93857_o; //assign simple
      _vI66102_c_compiler = ::std::string("clang"); //assign simple
      _vI66103_cxx_compiler = ::std::string("clang++"); //assign simple
      _vI66104_linker = ::std::string("clang++"); //assign simple
      _vI66105_ccflags_for_dynamic_link = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-shared")))); //assign simple
      _vI66106_base_cxx_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI66100_cxx_compile_warning_flags, _vI66187_config.ccflags)) /* apply_stack */, ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), ::std::string("-c")))), ::std::string("-g")))), ::std::string("-std=c++11")))); //assign simple
      _vI66107_base_c_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI66101_c_compile_warning_flags, _vI66187_config.ccflags)) /* apply_stack */, ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), ::std::string("-c")))), ::std::string("-g")))); //assign simple
      return _art107183((FLX_NEWP(_fI66136_c_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66155_c_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66151_c_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66114_cxx_compiler_vendor)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66142_cxx_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66167_cxx_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66163_cxx_static_library_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66159_cxx_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66130_debug_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66116_dependency_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66148_dependency_parser)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66179_dynamic_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66126_dynamic_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66183_dynamic_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66122_dynamic_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66118_executable_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66132_get_base_c_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66134_get_base_cxx_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66110_host_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66128_pathname_separator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66175_static_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66124_static_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66171_static_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66120_static_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66112_target_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66108_whatami)(FLX_FPAR_PASS this)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1419,1,1419,2); // HACK! 
}

//------------------------------
//FUNCTION <104919>: FlxPkgConfigQuery::getpkgfieldopt_uncurry::_lam_64776: Apply method
 ::flx::rtl::cl_t _fI104919__lam_64776::apply(){
      return FLX_VNI((reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>((ptrgetpkgfieldopt_uncurry->_vI89321_getpkgfieldopt__apos_2_mv_64773)))).mem_1)==0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",528,9,528,23); // HACK! 
}

//------------------------------
//FUNCTION <97654>: map_package_requirements_uncurry::aux_uncurry: Apply method
void* _fI97654_aux_uncurry::apply(_at107115 const &_arg ){
  _vI97655_init_uncurry = _arg.data[0];
  _vI97656_x = _arg.data[1];
    start_94039_L97663:;
      _vI97659_aux__apos_2_mv_1297  = _vI97656_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97659_aux__apos_2_mv_1297)==0) ) goto _ml1299_L97658;
      return _vI97655_init_uncurry;
    _ml1299_L97658:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI97659_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI97662__lam_1301)(FLX_FPAR_PASS this, ptrmap_package_requirements_uncurry))) ) goto _ml1300_L97657;
      _vI97660_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI97659_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI97661_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI97659_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI97656_x  = _vI97661_t_param_std_1199; //init
      _vI97655_init_uncurry  = ((FLX_NEWP(_lam_64522)(FLX_FPAR_PASS ptrmap_package_requirements_uncurry))
      ->apply(_vI97655_init_uncurry))->clone()
      ->apply(_vI97660_h_param_std_1200) /* general apply */; //init
      goto start_94039_L97663;
    _ml1300_L97657:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <91529>: respectful_parse_uncurry_uncurry::_lam_2295: Apply method
 ::flx::rtl::cl_t _lam_2295::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",660,7,660,11); // HACK! 
}

//------------------------------
//FUNCTION <105941>: flx_processing::check_binary_uptodate::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI105941__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//C FUNC <7357>: prepare_lib
_a7338t_107409 prepare_lib(FLX_APAR_DECL _a13708t_107090 _vI7361_modulename){
  _a13367t_107412 _genout_urv94269;
  _a13367t_107412 _vI94266__genout_urv94258;
  _a13367t_107412 _vI94265__genout_urv94252;
  _a13367t_107412* _vI94262_pregistry;
  _a13367t_107412** _vI94261_ppregistry;
  _a13367t_107412 _genout_urv94260;
  _a7338t_107409 linstance;
  _a7265t_107411 _vI7359_dlibrary;
      _vI7359_dlibrary = new(*PTF gcp, ::flx::dynlink::flx_dynlink_ptr_map, false) ::flx::dynlink::flx_dynlink_t((PTF gcp->debug_driver)); //assign simple
      linstance = new(*PTF gcp, ::flx::dynlink::flx_libinst_ptr_map, false) ::flx::dynlink::flx_libinst_t((PTF gcp->debug_driver)); //assign simple
      _vI94261_ppregistry = (void****)(void*)&(PTF gcp->collector->module_registry); //assign simple
      _vI94262_pregistry = *_vI94261_ppregistry ; //assign simple
      if(!(0==_vI94262_pregistry) ) goto _ifdoelse_std_462_L94264;
      _genout_urv94269  = _mkjudy(FLX_POINTER_TO_THREAD_FRAME, &_a13365t_107413_ptr_map); //init
      _vI94266__genout_urv94258  = _genout_urv94269; //init
      _vI94265__genout_urv94252  = _vI94266__genout_urv94258; //init
      _vI94262_pregistry = (_a13367t_107412*)new(*PTF gcp, _a13367t_107412_ptr_map, true) _a13367t_107412 (_vI94265__genout_urv94252); //assign simple
      *_vI94261_ppregistry  = _vI94262_pregistry; //assign simple
      {
      _a5050t_107416 _tmp108166 = (_a5050t_107416)(_vI94262_pregistry);
      PTF gcp->collector->add_root (((_tmp108166)));
      }
    _ifdoelse_std_462_L94264:;
      _genout_urv94260  = *_vI94262_pregistry ; //init
      {
      regopen_uncurry(FLX_FPAR_PASS_ONLY)
      .stack_call(_tt107417(_genout_urv94260, _vI7359_dlibrary, _vI7361_modulename));
      }
      linstance->create(_vI7359_dlibrary,PTF gcp,PTF argc,PTF argv,PTF flx_stdin, PTF flx_stdout, PTF flx_stderr, false);
      return linstance;
}
//------------------------------
//FUNCTION <104468>: gramtime_uncurry::aux::aux_uncurry: Apply method
void* _fI104468_aux_uncurry::apply(_at107115 const &_arg ){
  _vI104469_x_uncurry = _arg.data[0];
  _vI104470_y = _arg.data[1];
    start_91065_L104477:;
      _vI104473_aux__apos_2_mv_1328  = _vI104469_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI104473_aux__apos_2_mv_1328)==0) ) goto _ml1330_L104472;
      return _vI104470_y;
    _ml1330_L104472:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI104473_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI104476__lam_1332)(FLX_FPAR_PASS this, ptr_fI104460_aux, ptrgramtime_uncurry))) ) goto _ml1331_L104471;
      _vI104474_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI104473_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI104475_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI104473_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI104470_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104470_y, _vI104474_h_param_std_1210))); //init
      _vI104469_x_uncurry  = _vI104475_t_param_std_1209; //init
      goto start_91065_L104477;
    _ml1331_L104471:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------

//PROCEDURE <98605:> cxx_depcheck::_lam_582: Call method
::flx::rtl::con_t * _lam_582::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI98606_s = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <98605:> cxx_depcheck::_lam_582: Resume method
::flx::rtl::con_t *_lam_582::resume(){
      ::flx::rtl::ioutil::writeln((ptrcxx_depcheck->f),_vI98606_s);
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <93443>: generic_link_exe_dynamic_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93443__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <105529>: flx_processing::find_cxx_pkgs::_lam_65445: Apply method
 ::flx::rtl::cl_t _lam_65445::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2093,7,2093,11); // HACK! 
}

//------------------------------
//FUNCTION <66118>: toolchain_clang_linux::executable_extension: Apply method
_a13708t_107090 _fI66118_executable_extension::apply(){
      return ::std::string("");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1220,3,1220,43); // HACK! 
}

//------------------------------
//FUNCTION <88898>: toolchain_clang_apple_iOS_maker_uncurry: Apply method
_art107183 toolchain_clang_apple_iOS_maker_uncurry::apply(_tt107236 const &_arg ){
  sdk_tag_uncurry = _arg.mem_0;
  archs_uncurry = _arg.mem_1;
  _vI89265_config = _arg.mem_2;
      _genout_urv93964  = get(this)
      .apply((::std::string("xcrun --sdk ") + sdk_tag_uncurry ) + ::std::string(" --find clang") ) /* apply_stack */; //init
      clang = lstrip(rstrip(_genout_urv93964, ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //assign simple
      _genout_urv93969  = get(this)
      .apply((::std::string("xcrun --sdk ") + sdk_tag_uncurry ) + ::std::string(" --find clang++") ) /* apply_stack */; //init
      clangxx = lstrip(rstrip(_genout_urv93969, ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //assign simple
      _genout_urv93974  = get(this)
      .apply((::std::string("xcrun --sdk ") + sdk_tag_uncurry ) + ::std::string(" --show-sdk-path") ) /* apply_stack */; //init
      sdk = lstrip(rstrip(_genout_urv93974, ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //assign simple
      _vI94007_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 4)) ) goto _ifdoelse_std_1191_L94003;
      _vI94008_i = (static_cast<int>(4)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108169 = (int*)&_vI94008_i;
      ++*((_tmp108169));
      }
    redo__ll_lists_4854_L94006:;
      if(FLX_UNLIKELY(!((0 < _vI94008_i)) )) goto _ifdoelse_std_1191_L94003;
      {
      int* _tmp108170 = (int*)&_vI94008_i;
      --*((_tmp108170));
      }
      _vI94007_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI94007_o, (_at107238(::std::string("-w"), ::std::string("-Wfatal-errors"), ::std::string("-Wno-return-type-c-linkage"), ::std::string("-Wno-invalid-offsetof")).data)[reinterpret< ::flx::rtl::cl_t>(_vI94008_i)]))); //assign simple
      goto redo__ll_lists_4854_L94006;
    _ifdoelse_std_1191_L94003:;
      _vI89199_cxx_compile_warning_flags = _vI94007_o; //assign simple
      _vI94017_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 3)) ) goto _ifdoelse_std_1191_L94013;
      _vI94018_i = (static_cast<int>(3)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108171 = (int*)&_vI94018_i;
      ++*((_tmp108171));
      }
    redo__ll_lists_4854_L94016:;
      if(FLX_UNLIKELY(!((0 < _vI94018_i)) )) goto _ifdoelse_std_1191_L94013;
      {
      int* _tmp108172 = (int*)&_vI94018_i;
      --*((_tmp108172));
      }
      _vI94017_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI94017_o, (_at107185(::std::string("-w"), ::std::string("-Wfatal-errors"), ::std::string("-Wno-array-bounds")).data)[reinterpret< ::flx::rtl::cl_t>(_vI94018_i)]))); //assign simple
      goto redo__ll_lists_4854_L94016;
    _ifdoelse_std_1191_L94013:;
      _vI89200_c_compile_warning_flags = _vI94017_o; //assign simple
      _vI89201_c_compiler = clang; //assign simple
      _vI89202_cxx_compiler = clangxx; //assign simple
      _vI89203_linker = clangxx; //assign simple
      archlist = _fI94060_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_fI94045_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115((void* /*VR_nullptr*/ )0, archs_uncurry)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      _vI94078_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 3)) ) goto _ifdoelse_std_1191_L94074;
      _vI94079_i = (static_cast<int>(3)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108173 = (int*)&_vI94079_i;
      ++*((_tmp108173));
      }
    redo__ll_lists_4854_L94077:;
      if(FLX_UNLIKELY(!((0 < _vI94079_i)) )) goto _ifdoelse_std_1191_L94074;
      {
      int* _tmp108174 = (int*)&_vI94079_i;
      --*((_tmp108174));
      }
      _vI94078_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI94078_o, (_at107185(::std::string("-dynamiclib"), ::std::string("-isysroot"), sdk).data)[reinterpret< ::flx::rtl::cl_t>(_vI94079_i)]))); //assign simple
      goto redo__ll_lists_4854_L94077;
    _ifdoelse_std_1191_L94074:;
      _vI89209_ccflags_for_dynamic_link = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI94078_o, archlist)) /* apply_stack */; //assign simple
      _vI89210_base_c_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(archlist, _vI89200_c_compile_warning_flags)) /* apply_stack */, _vI89265_config.ccflags)) /* apply_stack */, ::std::string("-fembed-bitcode")))), ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), sdk))), ::std::string("-isysroot")))), ::std::string("-c")))), ::std::string("-g")))); //assign simple
      _vI89211_base_cxx_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(archlist, _vI89199_cxx_compile_warning_flags)) /* apply_stack */, _vI89265_config.ccflags)) /* apply_stack */, ::std::string("-std=c++11")))), ::std::string("-fembed-bitcode")))), ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), sdk))), ::std::string("-isysroot")))), ::std::string("-c")))), ::std::string("-g")))); //assign simple
      return _art107183((FLX_NEWP(_fI89226_c_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89241_c_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89238_c_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89215_cxx_compiler_vendor)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89231_cxx_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89250_cxx_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89247_cxx_static_library_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89244_cxx_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89223_debug_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89216_dependency_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89236_dependency_parser)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89259_dynamic_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89221_dynamic_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89262_dynamic_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89219_dynamic_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89217_executable_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89224_get_base_c_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89225_get_base_cxx_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89213_host_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89222_pathname_separator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89256_static_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89220_static_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89253_static_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89218_static_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89214_target_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI89212_whatami)(FLX_FPAR_PASS this)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2192,1,2192,2); // HACK! 
}

//------------------------------
//FUNCTION <105766>: flx_processing::ocaml_compile::dxqt'2: Apply method
_a13708t_107090 _fI105766_dxqt__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI105773_cmd = _arg;
      if(!((ptrflx_processing->_vI105441_control.ECHO == 1) || ptrflx_processing->_vI105441_control.DEBUG_FLX ) ) goto _ifdoelse_bootflx_65246_L105775;
      {
      _a13708t_107090 _tmp108175 = (::std::string("cmd=") + _vI105773_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108175)));
      }
    _ifdoelse_bootflx_65246_L105775:;
      {
      __timeb64* _tmp108176 = (__timeb64*)&_vI105783_tv;
      _ftime64_s(((_tmp108176)));
      }
      _vI105782__genout_urv98975  = (static_cast<double>((_vI105783_tv.time))) + ((static_cast<double>((_vI105783_tv.millitm))) / 1.0e3 ) ; //init
      _vI105767_now = _vI105782__genout_urv98975; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_448_L105785;
      {
      _a13708t_107090 _tmp108177 = (::std::string("[get_stdout] ") + _vI105773_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108177)));
      }
      fflush(stderr);
    _ifdoelse_std_448_L105785:;
      _vI105784__genout_urv98979  = basic_get_stdout(_vI105773_cmd); //init
      _vI105768__ds2_65429 = _vI105784__genout_urv98979; //assign simple
      _vI105769_result = _vI105768__ds2_65429.mem_0; //assign simple
      _vI105770_output = _vI105768__ds2_65429.mem_1; //assign simple
      if(!((_vI105769_result == 0)) ) goto _ifdoend_bootflx_65247_L105778;
      _vI105792_find_first_of_mv_2106  = _vI105770_output.find_first_of((::flx::rtl::strutil::subscript(::std::string("\n"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1857 when (== (i_param_std_1857, stl_npos)))*/
      if(!((_vI105792_find_first_of_mv_2106 == ::std::string::npos)) ) goto _ml2108_L105794;
      _vI105788_dxqt__apos_2_mv_65431  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_first_of_98962_L105795;
    _ml2108_L105794:;
/*match case 2:i_param_std_1858*/
      _vI105793_i_param_std_1858 = _vI105792_find_first_of_mv_2106; //assign simple
      _vI105788_dxqt__apos_2_mv_65431  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI105793_i_param_std_1858)); //init
    _end_inline_find_first_of_98962_L105795:;
/*begin match*/
/*match case 1:|Some n_param_bootflx_65249*/
      if(!andthen(FLX_VNI(_vI105788_dxqt__apos_2_mv_65431)==1, (FLX_NEWP(_fI105796__lam_65434)(FLX_FPAR_PASS this, ptrocaml_compile, ptrflx_processing))) ) goto _ml65433_L105790;
      _vI105789_n_param_bootflx_65249 = *((_a5038t_107106*)FLX_VNP(_vI105788_dxqt__apos_2_mv_65431)); //assign simple
      _vI105787__urv98985  = _vI105789_n_param_bootflx_65249; //init
      goto _end_hash_412655914;
    _ml65433_L105790:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI105788_dxqt__apos_2_mv_65431)==0) ) goto _ml65435_L105791;
      _vI105787__urv98985  = _vI105770_output.size(); //init
      goto _end_hash_412655914;
    _ml65435_L105791:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1950,7,1950,28);
;
    _end_hash_412655914:;
      _vI105771_n = _vI105787__urv98985; //assign simple
      _vI105770_output = ::flx::rtl::strutil::substr(_vI105770_output,0,_vI105771_n); //assign simple
      {
      __timeb64* _tmp108179 = (__timeb64*)&_vI105799_tv;
      _ftime64_s(((_tmp108179)));
      }
      _vI105798__genout_urv98997  = (static_cast<double>((_vI105799_tv.time))) + ((static_cast<double>((_vI105799_tv.millitm))) / 1.0e3 ) ; //init
      _vI105772_elapsed = _vI105798__genout_urv98997 - _vI105767_now ; //assign simple
      if(!((ptrflx_processing->_vI105441_control.ECHO == 1) || ptrflx_processing->_vI105441_control.DEBUG_FLX ) ) goto _ifdoelse_bootflx_65248_L105781;
      {
      _a13708t_107090 _tmp108180 = ((((::std::string("Popen:Elapsed: ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105772_elapsed, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(9, 3))))) /* apply_stack */ ) + ::std::string(", output='") ) + _vI105770_output ) + ::std::string("'") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108180)));
      }
      goto _ifdoelse_bootflx_65248_L105781;
      goto _ifdoelse_bootflx_65248_L105781;
    _ifdoend_bootflx_65247_L105778:;
      if(!((ptrflx_processing->_vI105441_control.ECHO == 1) || ptrflx_processing->_vI105441_control.DEBUG_FLX ) ) goto _ifdoelse_bootflx_65253_L105780;
      {
      _a13708t_107090 _tmp108181 = ::std::string("COMMAND FAILED") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108181)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65253_L105780:;
      {
      _a13708t_107090 _tmp108182 = (((::std::string("Error ") + (::flx::rtl::strutil::str<int>(_vI105769_result) + ::std::string("") ) ) + ::std::string(" executing command ") ) + _vI105773_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108182)));
      }
  pexit(_vI105769_result);
    _ifdoelse_bootflx_65248_L105781:;
      return _vI105770_output;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1962,1,1962,2); // HACK! 
}

//------------------------------
//FUNCTION <65708>: toolchain_msvc_win32::cxx_compiler_vendor: Apply method
_a13708t_107090 cxx_compiler_vendor::apply(){
      return ::std::string("microsoft");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1733,3,1733,51); // HACK! 
}

//------------------------------
//FUNCTION <97515>: map_package_requirements_uncurry::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI97515__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <105931>: flx_processing::check_binary_uptodate::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI105931__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <96621>: flx_pkgconfig::handle_pkg::aux_uncurry: Apply method
void* _fI96621_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96622_x_uncurry = _arg.data[0];
  _vI96623_y = _arg.data[1];
    start_91065_L96630:;
      _vI96626_aux__apos_2_mv_1328  = _vI96622_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96626_aux__apos_2_mv_1328)==0) ) goto _ml1330_L96625;
      return _vI96623_y;
    _ml1330_L96625:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI96626_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI96629__lam_1332)(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L96624;
      _vI96627_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI96626_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI96628_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI96626_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI96623_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96623_y, _vI96627_h_param_std_1210))); //init
      _vI96622_x_uncurry  = _vI96628_t_param_std_1209; //init
      goto start_91065_L96630;
    _ml1331_L96624:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <96388>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::search_and_replace'2::iterator'2: Apply method
void* _fI96388_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L96389:;
      _vI96393_iterator__apos_2_mv_1504  = ptr_fI96375_search_and_replace__apos_2->_vI96387_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI96393_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI96396__lam_1507)(FLX_FPAR_PASS this, ptr_fI96375_search_and_replace__apos_2, ptr_lam_64707, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1506_L96392;
      _vI96394_h_param_std_1260 = (*((_tt107274*)FLX_VNP(_vI96393_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI96395_t_param_std_1259 = (*((_tt107274*)FLX_VNP(_vI96393_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptr_fI96375_search_and_replace__apos_2->_vI96387_xs = _vI96395_t_param_std_1259; //assign simple
      FLX_SET_PC(108184)
      return FLX_VNR(1, new(*PTF gcp, _at107092_ptr_map, true) _at107092 (_vI96394_h_param_std_1260));//yield
    FLX_CASE_LABEL(108184)
      goto continue__ll_lists_5177_L96389;
    _ml1506_L96392:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI96393_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L96391;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L96391:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L96389;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <67820>: FlxPkgConfigQuery::getpkgfielddflt: Apply method
_ft107135* getpkgfielddflt::apply(_pt107161* const &_arg ){
  _vI67831_ehandler = _arg;
      return (FLX_NEWP(_fI67822_getpkgfielddflt__apos_2)(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",543,5,543,6); // HACK! 
}

//------------------------------
//FUNCTION <66124>: toolchain_clang_linux::static_library_extension: Apply method
_a13708t_107090 _fI66124_static_library_extension::apply(){
      return ::std::string(".a");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1223,3,1223,49); // HACK! 
}

//------------------------------
//FUNCTION <81570>: list_eq: Apply method
 ::flx::rtl::cl_t list_eq::apply(_at107115 const &_arg ){
  _vI81571_a = _arg.data[0];
  _vI81572_b = _arg.data[1];
    start_95683_L95683:;
      (list_eq_mv_1490.data)[0] = _vI81571_a; //assign simple
      (list_eq_mv_1490.data)[1] = _vI81572_b; //assign simple
/*begin match*/
/*match case 1:(|Empty, |Empty)*/
      if(!(FLX_VNI((list_eq_mv_1490.data)[0])==0 && FLX_VNI((list_eq_mv_1490.data)[1])==0 ) ) goto _ml1492_L95672;
      return 1;
    _ml1492_L95672:;
/*match case 2:(|Empty, any)*/
      if(!(FLX_VNI((list_eq_mv_1490.data)[0])==0) ) goto _ml1493_L95671;
      return 0;
    _ml1493_L95671:;
/*match case 3:(any, |Empty)*/
      if(!(FLX_VNI((list_eq_mv_1490.data)[1])==0) ) goto _ml1494_L95670;
      return 0;
    _ml1494_L95670:;
/*match case 4:(|Snoc (ta_param_std_1252, ha_param_std_1253), |Snoc (tb_param_std_1254, hb_param_std_1255))*/
      if(!(andthen(FLX_VNI((list_eq_mv_1490.data)[0])==1, (FLX_NEWP(_lam_1501)(FLX_FPAR_PASS this))) && andthen(FLX_VNI((list_eq_mv_1490.data)[1])==1, (FLX_NEWP(_lam_1502)(FLX_FPAR_PASS this))) ) ) goto _ml1495_L95669;
      hb_param_std_1255 = (*((_tt107095*)FLX_VNP((list_eq_mv_1490.data)[1]))).mem_1; //assign simple
      tb_param_std_1254 = (*((_tt107095*)FLX_VNP((list_eq_mv_1490.data)[1]))).mem_0; //assign simple
      ha_param_std_1253 = (*((_tt107095*)FLX_VNP((list_eq_mv_1490.data)[0]))).mem_1; //assign simple
      ta_param_std_1252 = (*((_tt107095*)FLX_VNP((list_eq_mv_1490.data)[0]))).mem_0; //assign simple
      list_eq_mv_1497  = !((ha_param_std_1253 == hb_param_std_1255)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(list_eq_mv_1497%2==1) ) goto _ml1499_L95680;
      return 0;
    _ml1499_L95680:;
/*match case 2:any*/
/*parallel assignment*/
      _vI81572_b  = tb_param_std_1254; //init
      _vI81571_a  = ta_param_std_1252; //init
      goto start_95683_L95683;
    _ml1495_L95669:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",643,5,643,12);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",645,3,645,4); // HACK! 
}

//------------------------------
//FUNCTION <105095>: flx_processing::rfi::_lam_814: Apply method
 ::flx::rtl::cl_t _lam_814::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",612,9,612,13); // HACK! 
}

//------------------------------
//FUNCTION <105319>: flx_processing::cxx_link_static_exe: Apply method
int cxx_link_static_exe::apply(_pt107161* const &_arg ){
  _vI105333_ehandler = _arg;
      {
      __timeb64* _tmp108187 = (__timeb64*)&_vI105861_tv;
      _ftime64_s(((_tmp108187)));
      }
      _genout_urv99453  = (static_cast<double>((_vI105861_tv.time))) + ((static_cast<double>((_vI105861_tv.millitm))) / 1.0e3 ) ; //init
      _vI105320_t0 = _genout_urv99453; //assign simple
      pkg_sstrings = (void* /*VR_nullptr*/ )0; //assign simple
      _vI105322_pkgs = ptrflx_processing->_vI105441_control.extra_pkgs; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI105322_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65362_L105337;
      {
      _a13708t_107090 _tmp108188 = (::std::string("[flx:cxx_link_static] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105322_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108188)));
      }
      fflush(stderr);
      _vI105862_r = _fI105863_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108189 = (void**)&_vI105862_r;
      _rev(((_tmp108189)),(_a13708t_107090*)0);
      }
      _vI105325_PKGCONFIG_PATH = _vI105862_r; //assign simple
      _vI105326_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI105325_PKGCONFIG_PATH, ::std::string("-r"))) /* apply_stack */, ::std::string("--field=provides_slib"))) /* apply_stack */, ::std::string("--field=requires_slibs"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI105322_pkgs)) /* apply_stack */, ptrflx_processing->_vI105441_control.pkgs)) /* apply_stack */; //assign simple
      _genout_urv99494  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI105326_allargs) /* apply_stack */; //init
      _ds2_65526 = _genout_urv99494; //assign simple
      _vI105328_ret = _ds2_65526.mem_0; //assign simple
      mysstrings = _ds2_65526.mem_1; //assign simple
      if(!(!((_vI105328_ret == 0)) ) ) goto _ifdoelse_bootflx_65364_L105335;
      {
      _a13708t_107090 _tmp108190 = (((::std::string("[flx:cxx_link_static] Error ") + ::flx::rtl::strutil::str<int>(_vI105328_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105326_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108190)));
      }
      fflush(stderr);
      {
      _a6203t_107291 _tmp108191 = (_a6203t_107291)(_vI105333_ehandler);
      throw ((_tmp108191));
      }
    _ifdoelse_bootflx_65364_L105335:;
      pkg_sstrings = mysstrings; //assign simple
    _ifdoelse_bootflx_65362_L105337:;
      _vI105875_cxx_link_static_exe_mv_65528  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105875_cxx_link_static_exe_mv_65528%2==1) ) goto _ml65530_L105876;
      _urv99505  = (FLX_NEWP(echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_597735754;
    _ml65530_L105876:;
/*match case 2:any*/
      _urv99505  = (FLX_NEWP(_pI105442_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_597735754:;
      cxx_link_static_exe_mv_65528  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(cxx_link_static_exe_mv_65528%2==1) ) goto _ml65530_L105880;
      goto _end_hash_324470338;
    _ml65530_L105880:;
/*match case 2:any*/
    _end_hash_324470338:;
      _vI105330_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(ptrflx_processing->_vI105142_dflt_clang_config.ccflags, _urv99505, ptrflx_processing->_vI105142_dflt_clang_config.dynamic_libraries, ptrflx_processing->_vI105142_dflt_clang_config.header_search_dirs, ptrflx_processing->_vI105142_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI105142_dflt_clang_config.macros, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.LINK_STRINGS, pkg_sstrings)) /* apply_stack */)) /* general apply */; //assign simple
      _vI105331_EXT_STATIC_OBJ = (_vI105330_tc.static_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI105441_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65365_L105338;
      _vI105332_result = (_vI105330_tc.static_executable_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME, _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.DRIVER_OBJS, ptrflx_processing->_vI105441_control.cppos)) /* apply_stack */, (ptrflx_processing->_vI105038_dvars.cpp_filebase + ::std::string("_static_link_thunk") ) + _vI105331_EXT_STATIC_OBJ )) /* apply_stack */, ptrflx_processing->_vI105038_dvars.cpp_filebase + _vI105331_EXT_STATIC_OBJ )) /* apply_stack */)) /* general apply */; //assign simple
      goto _ifdoelse_bootflx_65366_L105339;
    _ifdoend_bootflx_65365_L105338:;
      _vI105332_result = (_vI105330_tc.static_executable_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME, ptrflx_processing->_vI105441_control.cppos)) /* general apply */; //assign simple
    _ifdoelse_bootflx_65366_L105339:;
      if(!((ptrflx_processing->_vI105441_control.TIME == 1)) ) goto _end_99542_L105889;
      {
      __timeb64* _tmp108192 = (__timeb64*)&_vI105888_tv;
      _ftime64_s(((_tmp108192)));
      }
      _vI105887__genout_urv95543  = (static_cast<double>((_vI105888_tv.time))) + ((static_cast<double>((_vI105888_tv.millitm))) / 1.0e3 ) ; //init
      _vI105882_elapsed = _vI105887__genout_urv95543 - _vI105320_t0 ; //assign simple
      _vI105883_minutes = ::std::floor((_vI105882_elapsed / 60.0 )); //assign simple
      _vI105884_seconds = _vI105882_elapsed - (_vI105883_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108193 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105883_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105884_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Static executable link  : ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108193)));
      }
      fflush(stdout);
    _end_99542_L105889:;
      if(!(!((_vI105332_result == 0)) ) ) goto _ifdoelse_bootflx_65368_L105341;
      {
      _a13708t_107090 _tmp108194 = ((::std::string("[flx] C++ static executable link ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108194)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65368_L105341:;
      return _vI105332_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2671,3,2671,4); // HACK! 
}

//------------------------------
//FUNCTION <104977>: FlxPkgConfigQuery::_lam_64756: Apply method
 ::flx::rtl::cl_t _lam_64756::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",470,9,470,18); // HACK! 
}

//------------------------------
//FUNCTION <106513>: flx_processing::find_cxx_pkgs::aux_uncurry: Apply method
void* _fI106513_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106514_x_uncurry = _arg.data[0];
  _vI106515_y = _arg.data[1];
    start_91065_L106522:;
      _vI106518_aux__apos_2_mv_1328  = _vI106514_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106518_aux__apos_2_mv_1328)==0) ) goto _ml1330_L106517;
      return _vI106515_y;
    _ml1330_L106517:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI106518_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI106521__lam_1332)(FLX_FPAR_PASS this, ptr_fI106140_find_cxx_pkgs, ptrflx_processing))) ) goto _ml1331_L106516;
      _vI106519_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI106518_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI106520_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI106518_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI106515_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106515_y, _vI106519_h_param_std_1210))); //init
      _vI106514_x_uncurry  = _vI106520_t_param_std_1209; //init
      goto start_91065_L106522;
    _ml1331_L106516:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <106194>: flx_processing::cxx_compile_dynamic: Apply method
int _fI106194_cxx_compile_dynamic::apply(_pt107161* const &_arg ){
  _vI106200_ehandler = _arg;
      _vI106195_EXT_SHARED_OBJ = ((ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(ptrflx_processing->_vI106123_dflt_clang_config) /* general apply */.dynamic_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI106422_control.CXXONLY == 0) && ((ptrflx_processing->_vI106422_control.LINKIT == 1) || ((ptrflx_processing->_vI106422_control.OUTPUT_FILENAME_SPECIFIED == 0) && (ptrflx_processing->_vI106422_control.OUTP_hash_48688961 == 0) ) ) ) ) goto _ifdoelse_bootflx_65298_L106203;
      _vI106196_result = _fI106432_cxx_compile_dynamic1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI106200_ehandler, ptrflx_processing->dvars.cpp_filebase + ::std::string("_static_link_thunk.cpp") , (ptrflx_processing->dvars.cpp_filebase + ::std::string("_static_link_thunk") ) + _vI106195_EXT_SHARED_OBJ )) /* apply_stack */; //assign simple
      if(!(!((_vI106196_result == 0)) ) ) goto _ifdoelse_bootflx_65298_L106203;
      return _vI106196_result;
    _ifdoelse_bootflx_65298_L106203:;
      if(!((ptrflx_processing->_vI106422_control.CXXONLY == 0)) ) goto _ifdoelse_bootflx_65302_L106209;
      if(!((ptrflx_processing->_vI106422_control.LINKIT == 0)) ) goto _ifdoend_bootflx_65303_L106205;
      _vI106196_result = _fI106432_cxx_compile_dynamic1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI106200_ehandler, ptrflx_processing->dvars.cpp_filebase + ::std::string(".cpp") , ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME)) /* apply_stack */; //assign simple
      if(!(!((_vI106196_result == 0)) ) ) goto _ifdoelse_bootflx_65302_L106209;
      return _vI106196_result;
      goto _ifdoelse_bootflx_65302_L106209;
    _ifdoend_bootflx_65303_L106205:;
      _vI106196_result = _fI106432_cxx_compile_dynamic1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI106200_ehandler, ptrflx_processing->dvars.cpp_filebase + ::std::string(".cpp") , ptrflx_processing->dvars.cpp_filebase + _vI106195_EXT_SHARED_OBJ )) /* apply_stack */; //assign simple
      if(!(!((_vI106196_result == 0)) ) ) goto _ifdoelse_bootflx_65302_L106209;
      return _vI106196_result;
    _ifdoelse_bootflx_65302_L106209:;
      _vI106662_xs  = ptrflx_processing->_vI106422_control.cpps; //init
      _vI106661__genout_urv98661  = (FLX_NEWP(_fI106663_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _vI106197__generator_flx_2483 = _vI106661__genout_urv98661; //assign simple
    continue__ll_flx_2471_L106210:;
      _vI106120_cxx_compile_dynamic_mv_65488  = (_vI106197__generator_flx_2483)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some src_param_bootflx_65310*/
      if(!andthen(FLX_VNI(_vI106120_cxx_compile_dynamic_mv_65488)==1, (FLX_NEWP(_fI106672__lam_65491)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65490_L106212;
      _vI106198_src_param_bootflx_65310 = *((_a13708t_107090*)FLX_VNP(_vI106120_cxx_compile_dynamic_mv_65488)); //assign simple
      _vI106199_dst = (split_extension(_vI106198_src_param_bootflx_65310).data)[0] + _vI106195_EXT_SHARED_OBJ ; //assign simple
      _vI106196_result = _fI106432_cxx_compile_dynamic1_uncurry(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107292(_vI106200_ehandler, _vI106198_src_param_bootflx_65310, _vI106199_dst)) /* apply_stack */; //assign simple
      if(!(!((_vI106196_result == 0)) ) ) goto _ifdoend_bootflx_65311_L106211;
      return _vI106196_result;
    _ifdoend_bootflx_65311_L106211:;
      *(&(*(&((_art107120*)&ptrflx_processing->_vI106422_control)->cppos) ))  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*(&(*(&((_art107120*)&ptrflx_processing->_vI106422_control)->cppos) )) , _vI106199_dst)) /* apply_stack */; //assign simple
      goto continue__ll_flx_2471_L106210;
    _ml65490_L106212:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI106120_cxx_compile_dynamic_mv_65488)==0) ) goto _ml65492_L106213;
      goto _em65488_L106214;
    _ml65492_L106213:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2293,5,2293,9);
;
    _em65488_L106214:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2295,3,2295,4); // HACK! 
}

//------------------------------
//FUNCTION <95810>: flx_pkgconfig::add_val::aux_uncurry: Apply method
void* _fI95810_aux_uncurry::apply(_at107115 const &_arg ){
  _vI95811_x_uncurry = _arg.data[0];
  _vI95812_y = _arg.data[1];
    start_91065_L95819:;
      _vI95815_aux__apos_2_mv_1328  = _vI95811_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI95815_aux__apos_2_mv_1328)==0) ) goto _ml1330_L95814;
      return _vI95812_y;
    _ml1330_L95814:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI95815_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI95818__lam_1332)(FLX_FPAR_PASS this, ptradd_val, ptrflx_pkgconfig))) ) goto _ml1331_L95813;
      _vI95816_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI95815_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI95817_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI95815_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI95812_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI95812_y, _vI95816_h_param_std_1210))); //init
      _vI95811_x_uncurry  = _vI95817_t_param_std_1209; //init
      goto start_91065_L95819;
    _ml1331_L95813:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <92182>: toolchain_msvc_win32::checkwarn::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI92182__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <93483>: generic_link_exe_dynamic_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93483__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <94068>: toolchain_clang_apple_iOS_maker_uncurry::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI94068__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <105644>: flx_processing::cxx_compile_dynamic1_uncurry::aux_uncurry: Apply method
void* _fI105644_aux_uncurry::apply(_at107115 const &_arg ){
  _vI105645_inp_uncurry = _arg.data[0];
  _vI105646_out = _arg.data[1];
    start_90421_L105653:;
      _vI105649_aux__apos_2_mv_1322  = _vI105645_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105649_aux__apos_2_mv_1322)==0) ) goto _ml1324_L105648;
      return _vI105646_out;
    _ml1324_L105648:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI105649_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI105652__lam_1326)(FLX_FPAR_PASS this, ptrcxx_compile_dynamic1_uncurry, ptrflx_processing))) ) goto _ml1325_L105647;
      _vI105650_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI105649_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI105651_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI105649_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI105646_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI105646_out, _lam_65481(ptrcxx_compile_dynamic1_uncurry, ptrflx_processing)
      .apply(_vI105650_h_param_std_1208) /* apply_stack */))); //init
      _vI105645_inp_uncurry  = _vI105651_t_param_std_1207; //init
      goto start_90421_L105653;
    _ml1325_L105647:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <106792>: flx_processing::cxx_link_shared_library::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI106792__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <88871>: find_uncurry: Apply method
void* find_uncurry::apply(_tt107276 const &_arg ){
  eq_uncurry = _arg.mem_0;
  _vI89065_xs = _arg.mem_1;
    start_102659_L102659:;
      _vI102651_find__apos_2_mv_1527  = _vI89065_xs; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102651_find__apos_2_mv_1527)==0) ) goto _ml1529_L102650;
      return (void* /*VR_nullptr*/ )0;
    _ml1529_L102650:;
/*match case 2:|Snoc (t_param_std_1521, (a_param_std_1522, b_param_std_1523))*/
      if(!andthen(FLX_VNI(_vI102651_find__apos_2_mv_1527)==1, (FLX_NEWP(_lam_1536)(FLX_FPAR_PASS this))) ) goto _ml1530_L102649;
      b_param_std_1523 = ((*((_tt107274*)FLX_VNP(_vI102651_find__apos_2_mv_1527))).mem_1.data)[1]; //assign simple
      a_param_std_1522 = ((*((_tt107274*)FLX_VNP(_vI102651_find__apos_2_mv_1527))).mem_1.data)[0]; //assign simple
      t_param_std_1521 = (*((_tt107274*)FLX_VNP(_vI102651_find__apos_2_mv_1527))).mem_0; //assign simple
      _vI102657_find__apos_2_mv_1532  = (eq_uncurry)->clone()
      ->apply(a_param_std_1522) /* general apply */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI102657_find__apos_2_mv_1532%2==1) ) goto _ml1534_L102656;
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (b_param_std_1523));
    _ml1534_L102656:;
/*match case 2:any*/
/*parallel assignment*/
      _vI89065_xs  = t_param_std_1521; //init
      goto start_102659_L102659;
    _ml1530_L102649:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",759,5,759,67);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",761,3,761,4); // HACK! 
}

//------------------------------
//FUNCTION <97166>: flx_pkgconfig::parse_args::aux::aux_uncurry: Apply method
void* _fI97166_aux_uncurry::apply(_at107115 const &_arg ){
  _vI97167_x_uncurry = _arg.data[0];
  _vI97168_y = _arg.data[1];
    start_91065_L97175:;
      _vI97171_aux__apos_2_mv_1328  = _vI97167_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97171_aux__apos_2_mv_1328)==0) ) goto _ml1330_L97170;
      return _vI97168_y;
    _ml1330_L97170:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI97171_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI97174__lam_1332)(FLX_FPAR_PASS this, ptr_fI97158_aux, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1331_L97169;
      _vI97172_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI97171_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI97173_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI97171_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI97168_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97168_y, _vI97172_h_param_std_1210))); //init
      _vI97167_x_uncurry  = _vI97173_t_param_std_1209; //init
      goto start_91065_L97175;
    _ml1331_L97169:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <16358>: parse: Apply method
void* parse::apply(_a13708t_107090 const &_arg ){
  _vI16378_s = _arg;
      args = (void* /*VR_nullptr*/ )0; //assign simple
      current = ::std::string(""); //assign simple
      mode = /*VR_int*/1; //assign simple
      _vI104173_x  = _vI16378_s; //init
      _genout_urv104168  = (FLX_NEWP(_fI104169_iterator__apos_2)(FLX_FPAR_PASS this)); //init
      _generator_program_9122 = _genout_urv104168; //assign simple
    continue__ll_program_9047_L16379:;
      parse_mv_2763  = (_generator_program_9122)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some ch_param_std_2739*/
      if(!andthen(FLX_VNI(parse_mv_2763)==1, (FLX_NEWP(_lam_2773)(FLX_FPAR_PASS this))) ) goto _ml2765_L16406;
      ch_param_std_2739 = *((char*)FLX_VNP(parse_mv_2763)); //assign simple
      parse_mv_2766  = mode; //init
/*begin match*/
/*match case 1:|skip*/
      if(!(parse_mv_2766%5==1) ) goto _ml2768_L16386;
      if(!((ch_param_std_2739 == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoend_std_2741_L16380;
      mode = /*VR_int*/3; //assign simple
      goto continue__ll_program_9047_L16379;
    _ifdoend_std_2741_L16380:;
      if(!((ch_param_std_2739 == ::flx::rtl::strutil::subscript(::std::string("\""),0))) ) goto _ifdoend_std_2743_L16381;
      mode = /*VR_int*/2; //assign simple
      goto continue__ll_program_9047_L16379;
    _ifdoend_std_2743_L16381:;
      if(!((((int)(::flx::rtl::strutil::subscript(::std::string(" "),0)) ) < ((int)ch_param_std_2739 ))) ) goto continue__ll_program_9047_L16379;
      {
      _a13708t_107090* _tmp108201 = (_a13708t_107090*)&current;
      *((_tmp108201)) += ch_param_std_2739;
      }
      mode = /*VR_int*/0; //assign simple
      goto continue__ll_program_9047_L16379;
      goto continue__ll_program_9047_L16379;
    _ml2768_L16386:;
/*match case 2:|copy*/
      if(!(parse_mv_2766%5==0) ) goto _ml2769_L16393;
      if(!((ch_param_std_2739 == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoend_std_2747_L16387;
      mode = /*VR_int*/3; //assign simple
      goto continue__ll_program_9047_L16379;
    _ifdoend_std_2747_L16387:;
      if(!(!((((int)(::flx::rtl::strutil::subscript(::std::string(" "),0)) ) < ((int)ch_param_std_2739 ))) ) ) goto _ifdoend_std_2749_L16388;
      mode = /*VR_int*/1; //assign simple
      *((void**)&args)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&args) , current)) /* apply_stack */; //assign simple
      current = ::std::string(""); //assign simple
      goto continue__ll_program_9047_L16379;
    _ifdoend_std_2749_L16388:;
      if(!((ch_param_std_2739 == ::flx::rtl::strutil::subscript(::std::string("\""),0))) ) goto _ifdoend_std_2751_L16389;
      mode = /*VR_int*/2; //assign simple
      goto continue__ll_program_9047_L16379;
    _ifdoend_std_2751_L16389:;
      {
      _a13708t_107090* _tmp108202 = (_a13708t_107090*)&current;
      *((_tmp108202)) += ch_param_std_2739;
      }
      goto continue__ll_program_9047_L16379;
    _ml2769_L16393:;
/*match case 3:|escape-copy*/
      if(!(parse_mv_2766%5==3) ) goto _ml2770_L16396;
      mode = /*VR_int*/0; //assign simple
      if(!((ch_param_std_2739 == ::flx::rtl::strutil::subscript(::std::string("\""),0))) ) goto _ifdoend_std_2753_L16394;
      {
      _a13708t_107090* _tmp108203 = (_a13708t_107090*)&current;
      *((_tmp108203)) += ch_param_std_2739;
      }
      goto continue__ll_program_9047_L16379;
    _ifdoend_std_2753_L16394:;
      {
      _a13708t_107090* _tmp108204 = (_a13708t_107090*)&current;
      _a13708t_107090 _tmp108205 = ::std::string("\\") + ch_param_std_2739 ;
      ((_tmp108204))->append((_tmp108205));
      }
      goto continue__ll_program_9047_L16379;
    _ml2770_L16396:;
/*match case 4:|escape-dquote*/
      if(!(parse_mv_2766%5==4) ) goto _ml2771_L16399;
      mode = /*VR_int*/2; //assign simple
      if(!((ch_param_std_2739 == ::flx::rtl::strutil::subscript(::std::string("\""),0))) ) goto _ifdoend_std_2755_L16397;
      {
      _a13708t_107090* _tmp108206 = (_a13708t_107090*)&current;
      *((_tmp108206)) += ch_param_std_2739;
      }
      goto continue__ll_program_9047_L16379;
    _ifdoend_std_2755_L16397:;
      {
      _a13708t_107090* _tmp108207 = (_a13708t_107090*)&current;
      _a13708t_107090 _tmp108208 = ::std::string("\\") + ch_param_std_2739 ;
      ((_tmp108207))->append((_tmp108208));
      }
      goto continue__ll_program_9047_L16379;
    _ml2771_L16399:;
/*match case 5:|dquote*/
      if(!(parse_mv_2766%5==2) ) goto _ml2772_L16404;
      if(!((ch_param_std_2739 == ::flx::rtl::strutil::subscript(::std::string("\""),0))) ) goto _ifdoend_std_2757_L16400;
      mode = /*VR_int*/0; //assign simple
      goto continue__ll_program_9047_L16379;
    _ifdoend_std_2757_L16400:;
      if(!((ch_param_std_2739 == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoend_std_2759_L16401;
      mode = /*VR_int*/4; //assign simple
      goto continue__ll_program_9047_L16379;
    _ifdoend_std_2759_L16401:;
      {
      _a13708t_107090* _tmp108209 = (_a13708t_107090*)&current;
      *((_tmp108209)) += ch_param_std_2739;
      }
      goto continue__ll_program_9047_L16379;
    _ml2772_L16404:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/program.fdoc",1129,9,1129,18);
;
      goto continue__ll_program_9047_L16379;
    _ml2765_L16406:;
/*match case 2:|None*/
      if(!(FLX_VNI(parse_mv_2763)==0) ) goto _ml2774_L16407;
      goto _em2763_L16408;
    _ml2774_L16407:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/program.fdoc",1130,7,1130,11);
;
    _em2763_L16408:;
      parse_mv_2775  = mode; //init
/*begin match*/
/*match case 1:|skip*/
      if(!(parse_mv_2775%5==1) ) goto _ml2777_L16410;
      goto _em2775_L16412;
    _ml2777_L16410:;
/*match case 2:any*/
      *((void**)&args)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&args) , current)) /* apply_stack */; //assign simple
    _em2775_L16412:;
      return args;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/program.fdoc",1136,5,1136,6); // HACK! 
}

//------------------------------
//FUNCTION <103079>: setup-from-file_uncurry::aux_uncurry: Apply method
void* _fI103079_aux_uncurry::apply(_at107115 const &_arg ){
  _vI103080_x_uncurry = _arg.data[0];
  _vI103081_y = _arg.data[1];
    start_91065_L103088:;
      _vI103084_aux__apos_2_mv_1328  = _vI103080_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI103084_aux__apos_2_mv_1328)==0) ) goto _ml1330_L103083;
      return _vI103081_y;
    _ml1330_L103083:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI103084_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI103087__lam_1332)(FLX_FPAR_PASS this, ptr_pI88880_setup__hyphen_from__hyphen_file_uncurry))) ) goto _ml1331_L103082;
      _vI103085_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI103084_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI103086_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI103084_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI103081_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI103081_y, _vI103085_h_param_std_1210))); //init
      _vI103080_x_uncurry  = _vI103086_t_param_std_1209; //init
      goto start_91065_L103088;
    _ml1331_L103082:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <97174>: flx_pkgconfig::parse_args::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI97174__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <89407>: gramtime_uncurry::maxtime: Apply method
_ft107543* maxtime::apply(double const &_arg ){
  _vI89410_x = _arg;
      return (FLX_NEWP(_fI89408_maxtime__apos_2)(FLX_FPAR_PASS this, ptrgramtime_uncurry));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",84,5,84,77); // HACK! 
}

//------------------------------
//FUNCTION <96525>: flx_pkgconfig::handle_pkg::_lam_64696::aux::aux_uncurry: Apply method
void* _fI96525_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96526_x_uncurry = _arg.data[0];
  _vI96527_y = _arg.data[1];
    start_91065_L96534:;
      _vI96530_aux__apos_2_mv_1328  = _vI96526_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96530_aux__apos_2_mv_1328)==0) ) goto _ml1330_L96529;
      return _vI96527_y;
    _ml1330_L96529:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI96530_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI96533__lam_1332)(FLX_FPAR_PASS this, ptr_fI96517_aux, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L96528;
      _vI96531_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI96530_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI96532_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI96530_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI96527_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96527_y, _vI96531_h_param_std_1210))); //init
      _vI96526_x_uncurry  = _vI96532_t_param_std_1209; //init
      goto start_91065_L96534;
    _ml1331_L96528:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <89213>: toolchain_clang_apple_iOS_maker_uncurry::host_os: Apply method
_a13708t_107090 _fI89213_host_os::apply(){
      return ::std::string("OSX");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1988,3,1988,33); // HACK! 
}

//------------------------------
//FUNCTION <66382>: toolchain_clang_osx::static_library_linker: Apply method
int _fI66382_static_library_linker::apply(_art107181 const &_arg ){
  _vI66385_spec = _arg;
      _vI66384_result = generic_static_library_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107227(_art107226(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-rcs")))), ::std::string("ar"), ::std::string(""), ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66385_spec.srcs, _vI66385_spec.dst)) /* apply_stack */; //assign simple
      return _vI66384_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1609,3,1609,4); // HACK! 
}

//------------------------------
//FUNCTION <95180>: str::_lam_1519::_lam_1519'2: Apply method
_a13708t_107090 _fI95180__lam_1519__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI95181_b = _arg;
      _vI95182_o = ::std::string("'"); //assign simple
      if(!((0 < _vI95181_b.size())) ) goto _ifdoelse_std_1977_L95187;
      _vI95183_i = 0; //assign simple
    redo__ll_strings_7471_L95184:;
      if(FLX_UNLIKELY(!(!((_vI95181_b.size() - 1  < _vI95183_i)) ) )) goto _ifdoelse_std_1977_L95187;
      {
      _a13708t_107090* _tmp108214 = (_a13708t_107090*)&_vI95182_o;
      _a13708t_107090 _tmp108215 = repr(::flx::rtl::strutil::subscript(_vI95181_b,_vI95183_i));
      ((_tmp108214))->append((_tmp108215));
      }
      {
      _a5038t_107106* _tmp108216 = (_a5038t_107106*)&_vI95183_i;
      ++*((_tmp108216));
      }
      goto redo__ll_strings_7471_L95184;
    _ifdoelse_std_1977_L95187:;
      return (ptr_lam_1519->_vI95179_a + ::std::string(", ") ) + (_vI95182_o + ::std::string("'") ) ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",706,13,706,62); // HACK! 
}

//------------------------------
//FUNCTION <97208>: flx_pkgconfig::parse_args::aux: Apply method
void* _fI97208_aux::apply(_tt107116 const &_arg ){
  _vI97209_x = _arg.mem_0;
  _vI97210_y = _arg.mem_1;
    start_96902_L97220:;
      find_first_of_mv_2096  = _vI97209_x.find_first_of((" \n\x0D\x09,")); //init
/*begin match*/
/*match case 1:(i_param_std_1853 when (== (i_param_std_1853, stl_npos)))*/
      if(!((find_first_of_mv_2096 == ::std::string::npos)) ) goto _ml2098_L97217;
      aux_mv_2237  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_first_of_96873_L97218;
    _ml2098_L97217:;
/*match case 2:i_param_std_1854*/
      i_param_std_1854 = find_first_of_mv_2096; //assign simple
      aux_mv_2237  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (i_param_std_1854)); //init
    _end_inline_find_first_of_96873_L97218:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(aux_mv_2237)==0) ) goto _ml2239_L97213;
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97210_y, _vI97209_x)));
    _ml2239_L97213:;
/*match case 2:|Some n_param_std_1913*/
      if(!andthen(FLX_VNI(aux_mv_2237)==1, (FLX_NEWP(_lam_2241)(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml2240_L97214;
      n_param_std_1913 = *((_a5038t_107106*)FLX_VNP(aux_mv_2237)); //assign simple
/*parallel assignment*/
      _vI97210_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97210_y, ::flx::rtl::strutil::substr(_vI97209_x,0,n_param_std_1913)))); //init
      _vI97209_x  = ::flx::rtl::strutil::substr(_vI97209_x,n_param_std_1913 + 1 ,_vI97209_x.size()); //init
      goto start_96902_L97220;
    _ml2240_L97214:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",502,7,502,61);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",504,5,504,6); // HACK! 
}

//------------------------------
//FUNCTION <98617>: cxx_depcheck::aux_uncurry: Apply method
double _fI98617_aux_uncurry::apply(_tt107527 const &_arg ){
  _vI98618_init_uncurry = _arg.mem_0;
  _vI98619_x = _arg.mem_1;
    start_97926_L98626:;
      _vI98622_aux__apos_2_mv_1297  = _vI98619_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI98622_aux__apos_2_mv_1297)==0) ) goto _ml1299_L98621;
      return _vI98618_init_uncurry;
    _ml1299_L98621:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI98622_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI98625__lam_1301)(FLX_FPAR_PASS this, ptrcxx_depcheck))) ) goto _ml1300_L98620;
      _vI98623_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI98622_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI98624_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI98622_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI98619_x  = _vI98624_t_param_std_1199; //init
      _vI98618_init_uncurry  = ((FLX_NEWP(maxf)(FLX_FPAR_PASS ptrcxx_depcheck))
      ->apply(_vI98618_init_uncurry))->clone()
      ->apply(_vI98623_h_param_std_1200) /* general apply */; //init
      goto start_97926_L98626;
    _ml1300_L98620:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <95195>: str::aux_uncurry: Apply method
_a13708t_107090 _fI95195_aux_uncurry::apply(_tt107116 const &_arg ){
  _vI95196_init_uncurry = _arg.mem_0;
  _vI95197_x = _arg.mem_1;
    start_95154_L95204:;
      _vI95200_aux__apos_2_mv_1297  = _vI95197_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI95200_aux__apos_2_mv_1297)==0) ) goto _ml1299_L95199;
      return _vI95196_init_uncurry;
    _ml1299_L95199:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI95200_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI95203__lam_1301)(FLX_FPAR_PASS this, ptrstr))) ) goto _ml1300_L95198;
      _vI95201_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI95200_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI95202_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI95200_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI95197_x  = _vI95202_t_param_std_1199; //init
      _vI95196_init_uncurry  = ((FLX_NEWP(_lam_1519)(FLX_FPAR_PASS ptrstr))
      ->apply(_vI95196_init_uncurry))->clone()
      ->apply(_vI95201_h_param_std_1200) /* general apply */; //init
      goto start_95154_L95204;
    _ml1300_L95198:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <97184>: flx_pkgconfig::parse_args::aux: Apply method
void* _fI97184_aux::apply(_at107115 const &_arg ){
  _vI97185_inp = _arg.data[0];
  _vI97186_out = _arg.data[1];
    start_95901_L97205:;
      _vI97189_aux_mv_1434  = _vI97185_inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97189_aux_mv_1434)==0) ) goto _ml1436_L97188;
      return _fI97192_aux_uncurry(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97186_out, ptrparse_args->fld))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1436_L97188:;
/*match case 2:|Snoc (t_param_std_1242, h_param_std_1243)*/
      if(!andthen(FLX_VNI(_vI97189_aux_mv_1434)==1, (FLX_NEWP(_fI97202__lam_1443)(FLX_FPAR_PASS this, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1437_L97187;
      _vI97190_h_param_std_1243 = (*((_tt107095*)FLX_VNP(_vI97189_aux_mv_1434))).mem_1; //assign simple
      _vI97191_t_param_std_1242 = (*((_tt107095*)FLX_VNP(_vI97189_aux_mv_1434))).mem_0; //assign simple
      _vI97204_aux_mv_1439  = !eq(_vI97190_h_param_std_1243, ptrparse_args->fld) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI97204_aux_mv_1439%2==1) ) goto _ml1441_L97203;
/*parallel assignment*/
      _vI97186_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97186_out, _vI97190_h_param_std_1243))); //init
      _vI97185_inp  = _vI97191_t_param_std_1242; //init
      goto start_95901_L97205;
    _ml1441_L97203:;
/*match case 2:any*/
/*parallel assignment*/
      _vI97185_inp  = _vI97191_t_param_std_1242; //init
      goto start_95901_L97205;
    _ml1437_L97187:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",582,7,582,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",584,5,584,6); // HACK! 
}

//------------------------------
//FUNCTION <93307>: generic_static_library_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93307__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <105323>: flx_processing::cxx_link_static_exe::_lam_65525: Apply method
_a13708t_107090 _lam_65525::apply(_a13708t_107090 const &_arg ){
  _vI105324_s = _arg;
      return ::std::string("--path+=") + _vI105324_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2623,11,2623,40); // HACK! 
}

//------------------------------
//FUNCTION <96397>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::search_and_replace'2::_lam_2304: Apply method
 ::flx::rtl::cl_t _fI96397__lam_2304::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",740,5,740,9); // HACK! 
}

//------------------------------
//FUNCTION <88874>: mem_uncurry: Apply method
 ::flx::rtl::cl_t mem_uncurry::apply(_tt107208 const &_arg ){
  _vI89358_eq_uncurry = _arg.mem_0;
  _vI89359_xs = _arg.mem_1;
    start_92369_L92369:;
      _vI92362_mem__apos_2_mv_1388  = _vI89359_xs; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92362_mem__apos_2_mv_1388)==0) ) goto _ml1390_L92361;
      return 0;
    _ml1390_L92361:;
/*match case 2:|Snoc (t_param_std_1236, h_param_std_1237)*/
      if(!andthen(FLX_VNI(_vI92362_mem__apos_2_mv_1388)==1, (FLX_NEWP(_lam_1397)(FLX_FPAR_PASS this))) ) goto _ml1391_L92360;
      h_param_std_1237 = (*((_tt107095*)FLX_VNP(_vI92362_mem__apos_2_mv_1388))).mem_1; //assign simple
      t_param_std_1236 = (*((_tt107095*)FLX_VNP(_vI92362_mem__apos_2_mv_1388))).mem_0; //assign simple
      _vI92367_mem__apos_2_mv_1393  = (_vI89358_eq_uncurry)->clone()
      ->apply(h_param_std_1237) /* general apply */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI92367_mem__apos_2_mv_1393%2==1) ) goto _ml1395_L92366;
      return 1;
    _ml1395_L92366:;
/*match case 2:any*/
/*parallel assignment*/
      _vI89359_xs  = t_param_std_1236; //init
      goto start_92369_L92369;
    _ml1391_L92360:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",505,5,505,58);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",507,3,507,4); // HACK! 
}

//------------------------------
//FUNCTION <106747>: flx_processing::ocaml_compile::dxqt'2: Apply method
_a13708t_107090 _fI106747_dxqt__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI106754_cmd = _arg;
      if(!((ptrflx_processing->_vI106422_control.ECHO == 1) || ptrflx_processing->_vI106422_control.DEBUG_FLX ) ) goto _ifdoelse_bootflx_65246_L106756;
      {
      _a13708t_107090 _tmp108222 = (::std::string("cmd=") + _vI106754_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108222)));
      }
    _ifdoelse_bootflx_65246_L106756:;
      {
      __timeb64* _tmp108223 = (__timeb64*)&_vI106764_tv;
      _ftime64_s(((_tmp108223)));
      }
      _vI106763__genout_urv98975  = (static_cast<double>((_vI106764_tv.time))) + ((static_cast<double>((_vI106764_tv.millitm))) / 1.0e3 ) ; //init
      _vI106748_now = _vI106763__genout_urv98975; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_448_L106766;
      {
      _a13708t_107090 _tmp108224 = (::std::string("[get_stdout] ") + _vI106754_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108224)));
      }
      fflush(stderr);
    _ifdoelse_std_448_L106766:;
      _vI106765__genout_urv98979  = basic_get_stdout(_vI106754_cmd); //init
      _vI106749__ds2_65429 = _vI106765__genout_urv98979; //assign simple
      _vI106750_result = _vI106749__ds2_65429.mem_0; //assign simple
      _vI106751_output = _vI106749__ds2_65429.mem_1; //assign simple
      if(!((_vI106750_result == 0)) ) goto _ifdoend_bootflx_65247_L106759;
      _vI106773_find_first_of_mv_2106  = _vI106751_output.find_first_of((::flx::rtl::strutil::subscript(::std::string("\n"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1857 when (== (i_param_std_1857, stl_npos)))*/
      if(!((_vI106773_find_first_of_mv_2106 == ::std::string::npos)) ) goto _ml2108_L106775;
      _vI106769_dxqt__apos_2_mv_65431  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_first_of_98962_L106776;
    _ml2108_L106775:;
/*match case 2:i_param_std_1858*/
      _vI106774_i_param_std_1858 = _vI106773_find_first_of_mv_2106; //assign simple
      _vI106769_dxqt__apos_2_mv_65431  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI106774_i_param_std_1858)); //init
    _end_inline_find_first_of_98962_L106776:;
/*begin match*/
/*match case 1:|Some n_param_bootflx_65249*/
      if(!andthen(FLX_VNI(_vI106769_dxqt__apos_2_mv_65431)==1, (FLX_NEWP(_fI106777__lam_65434)(FLX_FPAR_PASS this, ptr_fI106237_ocaml_compile, ptrflx_processing))) ) goto _ml65433_L106771;
      _vI106770_n_param_bootflx_65249 = *((_a5038t_107106*)FLX_VNP(_vI106769_dxqt__apos_2_mv_65431)); //assign simple
      _vI106768__urv98985  = _vI106770_n_param_bootflx_65249; //init
      goto _end_hash_412691786;
    _ml65433_L106771:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI106769_dxqt__apos_2_mv_65431)==0) ) goto _ml65435_L106772;
      _vI106768__urv98985  = _vI106751_output.size(); //init
      goto _end_hash_412691786;
    _ml65435_L106772:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1950,7,1950,28);
;
    _end_hash_412691786:;
      _vI106752_n = _vI106768__urv98985; //assign simple
      _vI106751_output = ::flx::rtl::strutil::substr(_vI106751_output,0,_vI106752_n); //assign simple
      {
      __timeb64* _tmp108226 = (__timeb64*)&_vI106780_tv;
      _ftime64_s(((_tmp108226)));
      }
      _vI106779__genout_urv98997  = (static_cast<double>((_vI106780_tv.time))) + ((static_cast<double>((_vI106780_tv.millitm))) / 1.0e3 ) ; //init
      _vI106753_elapsed = _vI106779__genout_urv98997 - _vI106748_now ; //assign simple
      if(!((ptrflx_processing->_vI106422_control.ECHO == 1) || ptrflx_processing->_vI106422_control.DEBUG_FLX ) ) goto _ifdoelse_bootflx_65248_L106762;
      {
      _a13708t_107090 _tmp108227 = ((((::std::string("Popen:Elapsed: ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106753_elapsed, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(9, 3))))) /* apply_stack */ ) + ::std::string(", output='") ) + _vI106751_output ) + ::std::string("'") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108227)));
      }
      goto _ifdoelse_bootflx_65248_L106762;
      goto _ifdoelse_bootflx_65248_L106762;
    _ifdoend_bootflx_65247_L106759:;
      if(!((ptrflx_processing->_vI106422_control.ECHO == 1) || ptrflx_processing->_vI106422_control.DEBUG_FLX ) ) goto _ifdoelse_bootflx_65253_L106761;
      {
      _a13708t_107090 _tmp108228 = ::std::string("COMMAND FAILED") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108228)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65253_L106761:;
      {
      _a13708t_107090 _tmp108229 = (((::std::string("Error ") + (::flx::rtl::strutil::str<int>(_vI106750_result) + ::std::string("") ) ) + ::std::string(" executing command ") ) + _vI106754_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108229)));
      }
  pexit(_vI106750_result);
    _ifdoelse_bootflx_65248_L106762:;
      return _vI106751_output;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1962,1,1962,2); // HACK! 
}

//------------------------------
//FUNCTION <67924>: flx_pkgconfig::xfind: Apply method
 ::flx::rtl::cl_t xfind::apply(_at107092 const &_arg ){
  _vI67930_flags = _arg.data[0];
  c = _arg.data[1];
      _vI96715_find_mv_2026  = _vI67930_flags.find(c); //init
/*begin match*/
/*match case 1:(i_param_std_1825 when (== (i_param_std_1825, stl_npos)))*/
      if(!((_vI96715_find_mv_2026 == ::std::string::npos)) ) goto _ml2028_L96717;
      xfind_mv_64636  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_96703_L96718;
    _ml2028_L96717:;
/*match case 2:i_param_std_1826*/
      _vI96716_i_param_std_1826 = _vI96715_find_mv_2026; //assign simple
      xfind_mv_64636  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI96716_i_param_std_1826)); //init
    _end_inline_find_96703_L96718:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(xfind_mv_64636)==0) ) goto _ml64638_L96713;
      return 0;
    _ml64638_L96713:;
/*match case 2:|Some any*/
      if(!andthen(FLX_VNI(xfind_mv_64636)==1, (FLX_NEWP(_lam_64640)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml64639_L96714;
      return 1;
    _ml64639_L96714:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",146,6,146,22);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",148,5,148,6); // HACK! 
}

//------------------------------
//FUNCTION <66080>: toolchain_gcc_osx::static_library_linker: Apply method
int _fI66080_static_library_linker::apply(_art107181 const &_arg ){
  _vI66083_spec = _arg;
      _vI66082_result = generic_static_library_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107227(_art107226(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-rcs")))), ::std::string("ar"), ::std::string(""), ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66083_spec.srcs, _vI66083_spec.dst)) /* apply_stack */; //assign simple
      return _vI66082_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1120,3,1120,4); // HACK! 
}

//------------------------------
//FUNCTION <92754>: toolchain_msvc_win32::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI92754__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <88943>: map_package_requirements_uncurry: Apply method
_art107568 map_package_requirements_uncurry::apply(_tt107570 const &_arg ){
  _vI89761_ehandler_uncurry = _arg.mem_0;
  _vI89750_spec = _arg.mem_1;
      _vI97432_r = _fI97433_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89750_spec.FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108231 = (void**)&_vI97432_r;
      _rev(((_tmp108231)),(_a13708t_107090*)0);
      }
      PKGCONFIG_PATH = _vI97432_r; //assign simple
      RESH = (::std::string("@") + _vI89750_spec.cpp_filebase ) + ::std::string(".resh") ; //assign simple
      e = (void* /*VR_nullptr*/ )0; //assign simple
      _genout_urv97446  = pkgconfl(FLX_FPAR_PASS this)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(e, ::std::string("--field=cflags"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */) /* apply_stack */; //init
      CFLAGS = _genout_urv97446; //assign simple
      _genout_urv97447  = pkgconfl(FLX_FPAR_PASS this)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(e, ::std::string("--field=includes"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */) /* apply_stack */; //init
      INCLUDE_FILES = _genout_urv97447; //assign simple
      _genout_urv97352  = pkgconfl(FLX_FPAR_PASS this)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(e, ::std::string("--field=flx_requires_driver"))) /* apply_stack */) /* apply_stack */; //init
      _genout_urv97448  = cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _genout_urv97352)) /* apply_stack */; //init
      DRIVER_PKG = _genout_urv97448; //assign simple
      if(!((DRIVER_PKG == ::std::string(""))) ) goto _ifdoelse_bootflx_64505_L89752;
      DRIVER_PKG = ::std::string("flx_run"); //assign simple
    _ifdoelse_bootflx_64505_L89752:;
      if(!((_vI89750_spec.STATIC == 0)) ) goto _ifdoend_bootflx_64506_L89755;
      if(!((_vI89750_spec.LINKEXE == 0)) ) goto _ifdoend_bootflx_64508_L89753;
      _vI97459_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 3)) ) goto _ifdoelse_std_1191_L97455;
      _vI97460_i = (static_cast<int>(3)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108232 = (int*)&_vI97460_i;
      ++*((_tmp108232));
      }
    redo__ll_lists_4854_L97458:;
      if(FLX_UNLIKELY(!((0 < _vI97460_i)) )) goto _ifdoelse_std_1191_L97455;
      {
      int* _tmp108233 = (int*)&_vI97460_i;
      --*((_tmp108233));
      }
      _vI97459_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97459_o, (_at107185(_vI89750_spec.FLX_TARGET_DIR, ::std::string("bin"), DRIVER_PKG + _vI89750_spec.EXT_EXE ).data)[reinterpret< ::flx::rtl::cl_t>(_vI97460_i)]))); //assign simple
      goto redo__ll_lists_4854_L97458;
    _ifdoelse_std_1191_L97455:;
      DRIVER_EXE = _fI97483_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107116(::std::string(""), _vI97459_o)) /* apply_stack */; //assign simple
      DRIVER_OBJS = (void* /*VR_nullptr*/ )0; //assign simple
      goto _ifdoelse_bootflx_64507_L89756;
    _ifdoend_bootflx_64508_L89753:;
      _vI97501_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 4)) ) goto _ifdoelse_std_1191_L97497;
      _vI97502_i = (static_cast<int>(4)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108234 = (int*)&_vI97502_i;
      ++*((_tmp108234));
      }
    redo__ll_lists_4854_L97500:;
      if(FLX_UNLIKELY(!((0 < _vI97502_i)) )) goto _ifdoelse_std_1191_L97497;
      {
      int* _tmp108235 = (int*)&_vI97502_i;
      --*((_tmp108235));
      }
      _vI97501_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97501_o, (_at107238(_vI89750_spec.FLX_TARGET_DIR, ::std::string("lib"), ::std::string("rtl"), (DRIVER_PKG + ::std::string("_lib_static") ) + _vI89750_spec.EXT_DYNAMIC_OBJ ).data)[reinterpret< ::flx::rtl::cl_t>(_vI97502_i)]))); //assign simple
      goto redo__ll_lists_4854_L97500;
    _ifdoelse_std_1191_L97497:;
      _vI97525_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 4)) ) goto _ifdoelse_std_1191_L97521;
      _vI97526_i = (static_cast<int>(4)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108236 = (int*)&_vI97526_i;
      ++*((_tmp108236));
      }
    redo__ll_lists_4854_L97524:;
      if(FLX_UNLIKELY(!((0 < _vI97526_i)) )) goto _ifdoelse_std_1191_L97521;
      {
      int* _tmp108237 = (int*)&_vI97526_i;
      --*((_tmp108237));
      }
      _vI97525_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97525_o, (_at107238(_vI89750_spec.FLX_TARGET_DIR, ::std::string("lib"), ::std::string("rtl"), (DRIVER_PKG + ::std::string("_main") ) + _vI89750_spec.EXT_DYNAMIC_OBJ ).data)[reinterpret< ::flx::rtl::cl_t>(_vI97526_i)]))); //assign simple
      goto redo__ll_lists_4854_L97524;
    _ifdoelse_std_1191_L97521:;
      _vI97549_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L97545;
      _vI97550_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108238 = (int*)&_vI97550_i;
      ++*((_tmp108238));
      }
    redo__ll_lists_4854_L97548:;
      if(FLX_UNLIKELY(!((0 < _vI97550_i)) )) goto _ifdoelse_std_1191_L97545;
      {
      int* _tmp108239 = (int*)&_vI97550_i;
      --*((_tmp108239));
      }
      _vI97549_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97549_o, (_at107092(_fI97507_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107116(::std::string(""), _vI97501_o)) /* apply_stack */, _fI97531_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107116(::std::string(""), _vI97525_o)) /* apply_stack */).data)[reinterpret< ::flx::rtl::cl_t>(_vI97550_i)]))); //assign simple
      goto redo__ll_lists_4854_L97548;
    _ifdoelse_std_1191_L97545:;
      DRIVER_OBJS = _vI97549_o; //assign simple
      DRIVER_EXE = ::std::string(""); //assign simple
      goto _ifdoelse_bootflx_64507_L89756;
    _ifdoend_bootflx_64506_L89755:;
      _vI97559_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 4)) ) goto _ifdoelse_std_1191_L97555;
      _vI97560_i = (static_cast<int>(4)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108240 = (int*)&_vI97560_i;
      ++*((_tmp108240));
      }
    redo__ll_lists_4854_L97558:;
      if(FLX_UNLIKELY(!((0 < _vI97560_i)) )) goto _ifdoelse_std_1191_L97555;
      {
      int* _tmp108241 = (int*)&_vI97560_i;
      --*((_tmp108241));
      }
      _vI97559_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97559_o, (_at107238(_vI89750_spec.FLX_TARGET_DIR, ::std::string("lib"), ::std::string("rtl"), (DRIVER_PKG + ::std::string("_lib_static") ) + _vI89750_spec.EXT_STATIC_OBJ ).data)[reinterpret< ::flx::rtl::cl_t>(_vI97560_i)]))); //assign simple
      goto redo__ll_lists_4854_L97558;
    _ifdoelse_std_1191_L97555:;
      _vI97583_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 4)) ) goto _ifdoelse_std_1191_L97579;
      _vI97584_i = (static_cast<int>(4)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108242 = (int*)&_vI97584_i;
      ++*((_tmp108242));
      }
    redo__ll_lists_4854_L97582:;
      if(FLX_UNLIKELY(!((0 < _vI97584_i)) )) goto _ifdoelse_std_1191_L97579;
      {
      int* _tmp108243 = (int*)&_vI97584_i;
      --*((_tmp108243));
      }
      _vI97583_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97583_o, (_at107238(_vI89750_spec.FLX_TARGET_DIR, ::std::string("lib"), ::std::string("rtl"), (DRIVER_PKG + ::std::string("_main") ) + _vI89750_spec.EXT_STATIC_OBJ ).data)[reinterpret< ::flx::rtl::cl_t>(_vI97584_i)]))); //assign simple
      goto redo__ll_lists_4854_L97582;
    _ifdoelse_std_1191_L97579:;
      _vI97607_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L97603;
      _vI97608_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108244 = (int*)&_vI97608_i;
      ++*((_tmp108244));
      }
    redo__ll_lists_4854_L97606:;
      if(FLX_UNLIKELY(!((0 < _vI97608_i)) )) goto _ifdoelse_std_1191_L97603;
      {
      int* _tmp108245 = (int*)&_vI97608_i;
      --*((_tmp108245));
      }
      _vI97607_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97607_o, (_at107092(_fI97565_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107116(::std::string(""), _vI97559_o)) /* apply_stack */, _fI97589_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107116(::std::string(""), _vI97583_o)) /* apply_stack */).data)[reinterpret< ::flx::rtl::cl_t>(_vI97608_i)]))); //assign simple
      goto redo__ll_lists_4854_L97606;
    _ifdoelse_std_1191_L97603:;
      DRIVER_OBJS = _vI97607_o; //assign simple
      DRIVER_EXE = ::std::string(""); //assign simple
    _ifdoelse_bootflx_64507_L89756:;
      if(!((_vI89750_spec.STATIC == 0)) ) goto _ifdoend_bootflx_64510_L89759;
      if(!((_vI89750_spec.LINKEXE == 0)) ) goto _ifdoend_bootflx_64512_L89757;
      _genout_urv97617  = pkgconfl(FLX_FPAR_PASS this)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(e, ::std::string("-r"))) /* apply_stack */, ::std::string("--keeprightmost"))) /* apply_stack */, ::std::string("--field=provides_dlib"))) /* apply_stack */, ::std::string("--field=requires_dlibs"))) /* apply_stack */, DRIVER_PKG)) /* apply_stack */) /* apply_stack */; //init
      LINK_STRINGS = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI89750_spec.DLINK_STRINGS, _vI89750_spec.LINKER_SWITCHES)) /* apply_stack */, _genout_urv97617)) /* apply_stack */; //assign simple
      goto _ifdoelse_bootflx_64511_L89760;
    _ifdoend_bootflx_64512_L89757:;
      _genout_urv97630  = pkgconfl(FLX_FPAR_PASS this)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(e, ::std::string("-r"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, ::std::string("--field=provides_dlib"))) /* apply_stack */, ::std::string("--field=requires_dlibs"))) /* apply_stack */, DRIVER_PKG)) /* apply_stack */) /* apply_stack */; //init
      LINK_STRINGS = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI89750_spec.DLINK_STRINGS, _vI89750_spec.LINKER_SWITCHES)) /* apply_stack */, _genout_urv97630)) /* apply_stack */; //assign simple
      goto _ifdoelse_bootflx_64511_L89760;
    _ifdoend_bootflx_64510_L89759:;
      _genout_urv97643  = pkgconfl(FLX_FPAR_PASS this)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(e, ::std::string("-r"))) /* apply_stack */, ::std::string("--keeprightmost"))) /* apply_stack */, ::std::string("--field=provides_slib"))) /* apply_stack */, ::std::string("--field=requires_slibs"))) /* apply_stack */, DRIVER_PKG)) /* apply_stack */) /* apply_stack */; //init
      LINK_STRINGS = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI89750_spec.SLINK_STRINGS, _vI89750_spec.LINKER_SWITCHES)) /* apply_stack */, _genout_urv97643)) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64511_L89760:;
      LINK_STRINGS = _fI97654_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115((void* /*VR_nullptr*/ )0, LINK_STRINGS)) /* apply_stack */; //assign simple
      return _art107568(CFLAGS, DRIVER_EXE, DRIVER_OBJS, INCLUDE_FILES, LINK_STRINGS);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",833,3,833,4); // HACK! 
}

//------------------------------
//FUNCTION <104452>: gramtime_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI104452__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <94380>: find_sym::_lam_513: Apply method
 ::flx::rtl::cl_t _lam_513::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",888,9,888,17); // HACK! 
}

//------------------------------
//FUNCTION <95969>: flx_pkgconfig::check_id::_lam_64669: Apply method
 ::flx::rtl::cl_t _lam_64669::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",248,7,248,56); // HACK! 
}

//------------------------------
//FUNCTION <66116>: toolchain_clang_linux::dependency_extension: Apply method
_a13708t_107090 _fI66116_dependency_extension::apply(){
      return ::std::string(".d");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1219,3,1219,45); // HACK! 
}

//------------------------------
//FUNCTION <93167>: generic_cxx_compile_for_dynamic_uncurry::aux_uncurry: Apply method
void* _fI93167_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93168_inp_uncurry = _arg.data[0];
  _vI93169_out = _arg.data[1];
    start_90421_L93176:;
      _vI93172_aux__apos_2_mv_1322  = _vI93168_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93172_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93171;
      return _vI93169_out;
    _ml1324_L93171:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93172_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93175__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_cxx_compile_for_dynamic_uncurry))) ) goto _ml1325_L93170;
      _vI93173_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93172_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93174_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93172_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93169_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93169_out, mkinc(_vI93173_h_param_std_1208)))); //init
      _vI93168_inp_uncurry  = _vI93174_t_param_std_1207; //init
      goto start_90421_L93176;
    _ml1325_L93170:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <104665>: flx_processing::dxqt'2::_lam_65434: Apply method
 ::flx::rtl::cl_t _lam_65434::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1949,9,1949,14); // HACK! 
}

//------------------------------

//PROCEDURE <88880:> setup-from-file_uncurry: Call method
::flx::rtl::con_t * _pI88880_setup__hyphen_from__hyphen_file_uncurry::call(::flx::rtl::con_t *_ptr_caller, _tt107271 const &_arg){
  _caller = _ptr_caller;
  debugln_uncurry = _arg.mem_0;
  _vI89797_config = _arg.mem_1;
  _vI89798_control = _arg.mem_2;
  _vI89799_arg = _arg.mem_3;
  INIT_PC
  return this;
}

//PROCEDURE <88880:> setup-from-file_uncurry: Resume method
::flx::rtl::con_t *_pI88880_setup__hyphen_from__hyphen_file_uncurry::resume(){
  FLX_START_SWITCH
      FLX_SET_PC(108247)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("Setup file: ") + _vI89799_arg );
    FLX_CASE_LABEL(108247)
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_573_L102917;
      {
      _a13708t_107090 _tmp108248 = (::std::string("[load] ") + _vI89799_arg ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108248)));
      }
      fflush(stderr);
    _ifdoelse_std_573_L102917:;
      _vI89787_text = ::flx::rtl::ioutil::load_file(_vI89799_arg); //assign simple
      {
      process_config_text_uncurry(FLX_FPAR_PASS_ONLY)
      .stack_call(_tt107132(_vI89797_config, _vI89787_text));
      }
      _vI102922_s = ::std::string(""); //assign simple
      {
      _a13708t_107090* _tmp108250 = (_a13708t_107090*)&_vI102922_s;
      ((_tmp108250))->reserve(1000);
      }
      {
      _a13708t_107090* _tmp108251 = (_a13708t_107090*)&_vI102922_s;
      _a13708t_107090 _tmp108252 = (::std::string("(FLX_SHARE_DIR=") + (*_vI89797_config ).FLX_SHARE_DIR ) + ::std::string(",\n") ;
      ((_tmp108251))->append((_tmp108252));
      }
      {
      _a13708t_107090* _tmp108253 = (_a13708t_107090*)&_vI102922_s;
      _a13708t_107090 _tmp108254 = (::std::string("FLX_TARGET_DIR=") + (*_vI89797_config ).FLX_TARGET_DIR ) + ::std::string(",\n") ;
      ((_tmp108253))->append((_tmp108254));
      }
      {
      _a13708t_107090* _tmp108255 = (_a13708t_107090*)&_vI102922_s;
      _a13708t_107090 _tmp108256 = (::std::string("FLX_HOME_DIR=") + (*_vI89797_config ).FLX_HOME_DIR ) + ::std::string(",\n") ;
      ((_tmp108255))->append((_tmp108256));
      }
      {
      _a13708t_107090* _tmp108257 = (_a13708t_107090*)&_vI102922_s;
      _a13708t_107090 _tmp108258 = (::std::string("FLX_PROFILE_DIR=") + (*_vI89797_config ).FLX_PROFILE_DIR ) + ::std::string(",\n") ;
      ((_tmp108257))->append((_tmp108258));
      }
      {
      _a13708t_107090* _tmp108259 = (_a13708t_107090*)&_vI102922_s;
      _a13708t_107090 _tmp108260 = (::std::string("FLX_CACHE_DIR=") + (*_vI89797_config ).FLX_CACHE_DIR ) + ::std::string(",\n") ;
      ((_tmp108259))->append((_tmp108260));
      }
      {
      _a13708t_107090* _tmp108261 = (_a13708t_107090*)&_vI102922_s;
      _a13708t_107090 _tmp108262 = (::std::string("FLX_OUTPUT_DIR=") + (*_vI89797_config ).FLX_OUTPUT_DIR ) + ::std::string(",\n") ;
      ((_tmp108261))->append((_tmp108262));
      }
      {
      _a13708t_107090* _tmp108263 = (_a13708t_107090*)&_vI102922_s;
      _a13708t_107090 _tmp108264 = (::std::string("FLX_LIB_DIRS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI89797_config ).FLX_LIB_DIRS) /* apply_stack */ ) + ::std::string(",\n") ;
      ((_tmp108263))->append((_tmp108264));
      }
      {
      _a13708t_107090* _tmp108265 = (_a13708t_107090*)&_vI102922_s;
      _a13708t_107090 _tmp108266 = (::std::string("FLX_CONFIG_DIRS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI89797_config ).FLX_CONFIG_DIRS) /* apply_stack */ ) + ::std::string(",\n") ;
      ((_tmp108265))->append((_tmp108266));
      }
      {
      _a13708t_107090* _tmp108267 = (_a13708t_107090*)&_vI102922_s;
      _a13708t_107090 _tmp108268 = (::std::string("FLX_RTL_DIRS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI89797_config ).FLX_RTL_DIRS) /* apply_stack */ ) + ::std::string(")\n") ;
      ((_tmp108267))->append((_tmp108268));
      }
      FLX_SET_PC(108269)
      return (debugln_uncurry)->clone()
      ->call(this, ((::std::string("Config[after setupfile ") + _vI89799_arg ) + ::std::string("] =\n") ) + _vI102922_s );
    FLX_CASE_LABEL(108269)
      _vI102928_dflt_control_mv_64833  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_BUNDLE_DIR")).c_str())); //init
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == _vI102928_dflt_control_mv_64833)) ) goto _ml64835_L102930;
      _vI102927__urv91882  = (void* /*VR_nullptr*/ )0; //init
      goto _end_hash_439522528;
    _ml64835_L102930:;
/*match case 2:dir_param_bootflx_64831*/
      _vI102929_dir_param_bootflx_64831 = _vI102928_dflt_control_mv_64833; //assign simple
      _vI102927__urv91882  = FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI102929_dir_param_bootflx_64831)); //init
    _end_hash_439522528:;
      *_vI89798_control  = _art107120(::std::string(""), _vI102927__urv91882, (void* /*VR_nullptr*/ )0, 1, 1, 0, 0, 0, ::std::string(""), 0, 0, ::std::string(""), 0, 0, 0, ::std::string(""), (void* /*VR_nullptr*/ )0, 1, ::std::string(""), (void* /*VR_nullptr*/ )0, 0, ::std::string(""), (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, 1, ::std::string(""), 0, 0, (void* /*VR_nullptr*/ )0, ::std::string(""), ::std::string(""), (void* /*VR_nullptr*/ )0, ::std::string(""), ::std::string(""), ::std::string(""), (void* /*VR_nullptr*/ )0, ::std::string(""), 25, ::std::string(""), ::std::string(""), (void* /*VR_nullptr*/ )0, 0, 1, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, 0, 0, 0, 0, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-O1")))), 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, 0, 0, ::std::string(""), ::std::string("plat/flx.flxh"), ::std::string(""), ::std::string(""), 0, ::std::string("time -p"), ::std::string("production"), (void* /*VR_nullptr*/ )0, 1, 0.0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0); //assign simple
      if(!(*_vI89798_control).DEBUG_FLX ) goto _ifdoelse_bootflx_64838_L89801;
      {
      _art107120 _tmp108270 = *_vI89798_control ;
      print_options(FLX_FPAR_PASS_ONLY)
      .stack_call((_tmp108270));
      }
    _ifdoelse_bootflx_64838_L89801:;
      _genout_urv103052  = ::std::shared_ptr< ::re2::RE2>(new RE2((::std::string("([-_a-zA-Z0-9]+) *: *(.*)")))); //init
      re = _genout_urv103052; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_573_L103056;
      {
      _a13708t_107090 _tmp108272 = (::std::string("[load] ") + _vI89799_arg ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108272)));
      }
      fflush(stderr);
    _ifdoelse_std_573_L103056:;
      _vI89789_lines = _fI103079_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_fI103066_aux(FLX_FPAR_PASS this)
      .apply(_tt107116(::flx::rtl::ioutil::load_file(_vI89799_arg), (void* /*VR_nullptr*/ )0)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      _vI103093_xs  = _vI89789_lines; //init
      _genout_urv103092  = (FLX_NEWP(_fI103094_iterator__apos_2)(FLX_FPAR_PASS this)); //init
      _generator_flx_1116 = _genout_urv103092; //assign simple
    continue__ll_flx_1052_L89802:;
      _vI89764_setu_hash_864462774  = (_generator_flx_1116)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some line_param_bootflx_64840*/
      if(!andthen(FLX_VNI(_vI89764_setu_hash_864462774)==1, (FLX_NEWP(_lam_65053)(FLX_FPAR_PASS this))) ) goto _ml65028_L89823;
      line_param_bootflx_64840 = *((_a13708t_107090*)FLX_VNP(_vI89764_setu_hash_864462774)); //assign simple
      _vI89767_setu_hash_864462777  = Match(FLX_FPAR_PASS re, line_param_bootflx_64840); //init
/*begin match*/
/*match case 1:|Some v_param_bootflx_64842_param_bootflx_64846*/
      if(!andthen(FLX_VNI(_vI89767_setu_hash_864462777)==1, (FLX_NEWP(_lam_65051)(FLX_FPAR_PASS this))) ) goto _ml65031_L89820;
      _vI89794_v_pa_hash_743371386 = *((_poly_79881t_107147*)FLX_VNP(_vI89767_setu_hash_864462777)); //assign simple
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(1)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < (PTF gcp->collector->get_used(_vI89794_v_pa_hash_743371386))))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      _vI89795_field = _vI89794_v_pa_hash_743371386[(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(1)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)]; //assign simple
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(2)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < (PTF gcp->collector->get_used(_vI89794_v_pa_hash_743371386))))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      _vI89796_data = lstrip(rstrip(_vI89794_v_pa_hash_743371386[(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(2)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)], ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //assign simple
      _vI89770_setu_hash_864462803  = _vI89795_field; //init
/*begin match*/
/*match case 1:"felix-compiler"*/
      if(!((::std::string("felix-compiler") == _vI89770_setu_hash_864462803)) ) goto _ml65034_L89803;
      FLX_SET_PC(108273)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set flxg ") + _vI89796_data );
    FLX_CASE_LABEL(108273)
      *(&_vI89798_control->FLXG)  = _vI89796_data; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65034_L89803:;
/*match case 2:"toolchain"*/
      if(!((::std::string("toolchain") == _vI89770_setu_hash_864462803)) ) goto _ml65035_L89804;
      FLX_SET_PC(108274)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set toolchain ") + _vI89796_data );
    FLX_CASE_LABEL(108274)
      *(&_vI89798_control->FLX_TOOLCHAIN)  = _vI89796_data; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65035_L89804:;
/*match case 3:"linker-switch"*/
      if(!((::std::string("linker-switch") == _vI89770_setu_hash_864462803)) ) goto _ml65036_L89805;
      FLX_SET_PC(108275)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("add linker switch ") + _vI89796_data );
    FLX_CASE_LABEL(108275)
      *(&_vI89798_control->LINKER_SWITCHES)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89798_control).LINKER_SWITCHES, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65036_L89805:;
/*match case 4:"macro-switch"*/
      if(!((::std::string("macro-switch") == _vI89770_setu_hash_864462803)) ) goto _ml65037_L89806;
      FLX_SET_PC(108276)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("add macro switches ") + _vI89796_data );
    FLX_CASE_LABEL(108276)
      *(&_vI89798_control->MACROS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89798_control).MACROS, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65037_L89806:;
/*match case 5:"optimisation-switch"*/
      if(!((::std::string("optimisation-switch") == _vI89770_setu_hash_864462803)) ) goto _ml65038_L89807;
      FLX_SET_PC(108277)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set C++ optimisation level ") + _vI89796_data );
    FLX_CASE_LABEL(108277)
      *(&_vI89798_control->OPTIMISE)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89798_control).OPTIMISE, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65038_L89807:;
/*match case 6:"optimization-switch"*/
      if(!((::std::string("optimization-switch") == _vI89770_setu_hash_864462803)) ) goto _ml65039_L89808;
      FLX_SET_PC(108278)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set C++ optimization level ") + _vI89796_data );
    FLX_CASE_LABEL(108278)
      *(&_vI89798_control->OPTIMISE)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89798_control).OPTIMISE, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65039_L89808:;
/*match case 7:"cflag"*/
      if(!((::std::string("cflag") == _vI89770_setu_hash_864462803)) ) goto _ml65040_L89809;
      FLX_SET_PC(108279)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("add C++ cflag ") + _vI89796_data );
    FLX_CASE_LABEL(108279)
      *(&_vI89798_control->EXTRA_CCFLAGS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89798_control).EXTRA_CCFLAGS, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65040_L89809:;
/*match case 8:"flx-include-dir"*/
      if(!((::std::string("flx-include-dir") == _vI89770_setu_hash_864462803)) ) goto _ml65041_L89810;
      FLX_SET_PC(108280)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("add Felix include dir ") + _vI89796_data );
    FLX_CASE_LABEL(108280)
      *(&_vI89797_config->FLX_LIB_DIRS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89797_config).FLX_LIB_DIRS, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65041_L89810:;
/*match case 9:"rtl-include-dir"*/
      if(!((::std::string("rtl-include-dir") == _vI89770_setu_hash_864462803)) ) goto _ml65042_L89811;
      FLX_SET_PC(108281)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("add Felix and C++ rtl include dir ") + _vI89796_data );
    FLX_CASE_LABEL(108281)
      *(&_vI89797_config->FLX_RTL_DIRS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89797_config).FLX_RTL_DIRS, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65042_L89811:;
/*match case 10:"grammar-dir"*/
      if(!((::std::string("grammar-dir") == _vI89770_setu_hash_864462803)) ) goto _ml65043_L89812;
      FLX_SET_PC(108282)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set Felix grammar directory ") + _vI89796_data );
    FLX_CASE_LABEL(108282)
      *(&_vI89798_control->GRAMMAR_DIR)  = _vI89796_data; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65043_L89812:;
/*match case 11:"grammar"*/
      if(!((::std::string("grammar") == _vI89770_setu_hash_864462803)) ) goto _ml65044_L89813;
      FLX_SET_PC(108283)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set Felix grammar (in stdlib) ") + _vI89796_data );
    FLX_CASE_LABEL(108283)
      *(&_vI89798_control->STDGRAMMAR)  = _vI89796_data; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65044_L89813:;
/*match case 12:"std-import"*/
      if(!((::std::string("std-import") == _vI89770_setu_hash_864462803)) ) goto _ml65045_L89814;
      FLX_SET_PC(108284)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set Felix standard import (in stdlib) ") + _vI89796_data );
    FLX_CASE_LABEL(108284)
      *(&_vI89798_control->STDIMPORT)  = _vI89796_data; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65045_L89814:;
/*match case 13:"extra-import"*/
      if(!((::std::string("extra-import") == _vI89770_setu_hash_864462803)) ) goto _ml65046_L89815;
      FLX_SET_PC(108285)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set Felix extra import (in stdlib) ") + _vI89796_data );
    FLX_CASE_LABEL(108285)
      *(&_vI89798_control->IMPORTS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89798_control).IMPORTS, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65046_L89815:;
/*match case 14:"extra-cpp"*/
      if(!((::std::string("extra-cpp") == _vI89770_setu_hash_864462803)) ) goto _ml65047_L89816;
      FLX_SET_PC(108286)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set Felix extra C++ file ") + _vI89796_data );
    FLX_CASE_LABEL(108286)
      *(&_vI89798_control->cpps)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89798_control).cpps, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65047_L89816:;
/*match case 15:"extra-obj"*/
      if(!((::std::string("extra-obj") == _vI89770_setu_hash_864462803)) ) goto _ml65048_L89817;
      FLX_SET_PC(108287)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("set Felix extra object file ") + _vI89796_data );
    FLX_CASE_LABEL(108287)
      *(&_vI89798_control->cppos)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89798_control).cppos, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65048_L89817:;
/*match case 16:"flx-std-lib"*/
      if(!((::std::string("flx-std-lib") == _vI89770_setu_hash_864462803)) ) goto _ml65049_L89818;
      FLX_SET_PC(108288)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("add Felix standard (cached) library ") + _vI89796_data );
    FLX_CASE_LABEL(108288)
      *(&_vI89798_control->FLX_STD_LIBS)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI89798_control).FLX_STD_LIBS, _vI89796_data)) /* apply_stack */; //assign simple
      goto continue__ll_flx_1052_L89802;
    _ml65049_L89818:;
/*match case 17:any*/
      FLX_SET_PC(108289)
      return (debugln_uncurry)->clone()
      ->call(this, ::std::string("Unknown field ") + _vI89795_field );
    FLX_CASE_LABEL(108289)
      goto continue__ll_flx_1052_L89802;
      goto continue__ll_flx_1052_L89802;
    _ml65031_L89820:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI89767_setu_hash_864462777)==0) ) goto _ml65052_L89821;
      goto continue__ll_flx_1052_L89802;
    _ml65052_L89821:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",958,5,958,14);
;
      goto continue__ll_flx_1052_L89802;
    _ml65028_L89823:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI89764_setu_hash_864462774)==0) ) goto _ml65054_L89824;
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ml65054_L89824:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",959,3,959,7);
;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------
//FUNCTION <67790>: FlxPkgConfigQuery::getpkgfield1: Apply method
_ft107135* getpkgfield1::apply(_pt107161* const &_arg ){
  _vI67804_ehandler = _arg;
      return (FLX_NEWP(_fI67792_getpkgfield1__apos_2)(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",521,5,521,6); // HACK! 
}

//------------------------------

//PROCEDURE <102078:> flx_processing::_lam_1669: Call method
::flx::rtl::con_t * _lam_1669::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI102079_v = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <102078:> flx_processing::_lam_1669: Resume method
::flx::rtl::con_t *_lam_1669::resume(){
      if(!(!(((PTF gcp->collector->get_used((ptrflx_processing->_vI102077_a))) < (PTF gcp->collector->get_count((ptrflx_processing->_vI102077_a))))) ) ) goto _ifdoelse_std_1638_L102080;
      {
      _a13708t_107090 _tmp108292 = (::std::string("ctor3: attempt to push_back on full varray size ") + ::flx::rtl::strutil::str<_a5038t_107106>((PTF gcp->collector->get_count((ptrflx_processing->_vI102077_a)))) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108292)));
      }
      fflush(stderr);
    _ifdoelse_std_1638_L102080:;
      if(!(!(((PTF gcp->collector->get_used((ptrflx_processing->_vI102077_a))) < (PTF gcp->collector->get_count((ptrflx_processing->_vI102077_a))))) ) ) goto _ifdoelse_std_1642_L102082;
      {
      _a13708t_107090 _tmp108293 = (::std::string("attempt to push_back on full varray size ") + ::flx::rtl::strutil::str<_a5038t_107106>((PTF gcp->collector->get_count((ptrflx_processing->_vI102077_a)))) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108293)));
      }
      fflush(stderr);
    _ifdoelse_std_1642_L102082:;
      
    {
      //_a13708t_107090 * _p = *(ptrflx_processing->_vI102077_a);
      size_t n = PTF gcp->collector->get_used((ptrflx_processing->_vI102077_a));
      PTF gcp->collector->incr_used((ptrflx_processing->_vI102077_a),1L);
      new((ptrflx_processing->_vI102077_a)+n) _a13708t_107090(_vI102079_v);
    }
  
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <105104>: flx_processing::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI105104__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <105392>: flx_processing::run_program_static: Apply method
int run_program_static::apply(_pt107161* const &_arg ){
  _vI105396_ehandler = _arg;
      _vI105393_result = 0; //assign simple
      _vI106044_r = _fI106045_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_processing->_vI105038_dvars.STATIC_ENV, ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME)) /* apply_stack */, ptrflx_processing->_vI105038_dvars.args)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108294 = (void**)&_vI106044_r;
      _rev(((_tmp108294)),(_a13708t_107090*)0);
      }
      _vI105394_CMD = cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI106044_r)) /* apply_stack */; //assign simple
      if(!(!((ptrflx_processing->_vI105441_control.STDOUT == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65394_L105398;
      _vI105394_CMD = (_vI105394_CMD + ::std::string(" > ") ) + ((::std::string("\"") + ptrflx_processing->_vI105441_control.STDOUT ) + ::std::string("\"") ) ; //assign simple
    _ifdoelse_bootflx_65394_L105398:;
      if(!(!((ptrflx_processing->_vI105441_control.STDIN == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65396_L105400;
      _vI105394_CMD = (_vI105394_CMD + ::std::string(" < ") ) + ((::std::string("\"") + ptrflx_processing->_vI105441_control.STDIN ) + ::std::string("\"") ) ; //assign simple
    _ifdoelse_bootflx_65396_L105400:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99919_L106057;
      {
      _a13708t_107090 _tmp108295 = (::std::string("[flx] ") + (::std::string("Run command=") + _vI105394_CMD ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108295)));
      }
    _end_99919_L106057:;
      {
      __timeb64* _tmp108296 = (__timeb64*)&_vI106059_tv;
      _ftime64_s(((_tmp108296)));
      }
      _genout_urv99920  = (static_cast<double>((_vI106059_tv.time))) + ((static_cast<double>((_vI106059_tv.millitm))) / 1.0e3 ) ; //init
      _vI105395_t0 = _genout_urv99920; //assign simple
      _genout_urv99924  = system(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105394_CMD) /* apply_stack */; //init
      _vI105393_result = _genout_urv99924; //assign simple
      if(!((ptrflx_processing->_vI105441_control.TIME == 1)) ) goto _end_99934_L106068;
      {
      __timeb64* _tmp108297 = (__timeb64*)&_vI106067_tv;
      _ftime64_s(((_tmp108297)));
      }
      _vI106066__genout_urv95543  = (static_cast<double>((_vI106067_tv.time))) + ((static_cast<double>((_vI106067_tv.millitm))) / 1.0e3 ) ; //init
      _vI106061_elapsed = _vI106066__genout_urv95543 - _vI105395_t0 ; //assign simple
      _vI106062_minutes = ::std::floor((_vI106061_elapsed / 60.0 )); //assign simple
      _vI106063_seconds = _vI106061_elapsed - (_vI106062_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108298 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106062_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106063_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Static Run   : ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108298)));
      }
      fflush(stdout);
    _end_99934_L106068:;
      return _vI105393_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2850,3,2850,4); // HACK! 
}

//------------------------------
//FUNCTION <105741>: flx_processing::cxx_compile_static::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI105741__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <106432>: flx_processing::cxx_compile_dynamic1_uncurry: Apply method
int _fI106432_cxx_compile_dynamic1_uncurry::apply(_tt107292 const &_arg ){
  _vI106474_ehandler_uncurry = _arg.mem_0;
  _vI106467_src = _arg.mem_1;
  _vI106468_dst = _arg.mem_2;
      {
      __timeb64* _tmp108299 = (__timeb64*)&_vI106623_tv;
      _ftime64_s(((_tmp108299)));
      }
      _vI106622__genout_urv98327  = (static_cast<double>((_vI106623_tv.time))) + ((static_cast<double>((_vI106623_tv.millitm))) / 1.0e3 ) ; //init
      _vI106455_t0 = _vI106622__genout_urv98327; //assign simple
      _vI106456_pkgs = _fI106140_find_cxx_pkgs(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106467_src) /* apply_stack */; //assign simple
      *(&((_art107120*)&ptrflx_processing->_vI106422_control)->extra_pkgs)  = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.extra_pkgs, _vI106456_pkgs)) /* apply_stack */; //assign simple
      _vI106457_pkg_cflags = (void* /*VR_nullptr*/ )0; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI106456_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65292_L106472;
      {
      _a13708t_107090 _tmp108300 = (::std::string("[flx:cxx_compile_dynamic1] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106456_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108300)));
      }
      fflush(stderr);
      _vI106624_r = _fI106625_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108301 = (void**)&_vI106624_r;
      _rev(((_tmp108301)),(_a13708t_107090*)0);
      }
      _vI106460_PKGCONFIG_PATH = _vI106624_r; //assign simple
      _vI106461_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI106460_PKGCONFIG_PATH, ::std::string("--field=cflags"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI106456_pkgs)) /* apply_stack */, ptrflx_processing->_vI106422_control.pkgs)) /* apply_stack */; //assign simple
      _vI106635__genout_urv98374  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI106461_allargs) /* apply_stack */; //init
      _vI106462__ds2_65482 = _vI106635__genout_urv98374; //assign simple
      _vI106463_ret = _vI106462__ds2_65482.mem_0; //assign simple
      _vI106464_mycflags = _vI106462__ds2_65482.mem_1; //assign simple
      if(!(!((_vI106463_ret == 0)) ) ) goto _ifdoelse_bootflx_65294_L106470;
      {
      _a13708t_107090 _tmp108302 = (((::std::string("[flx:cxx_compile_dynamic1] Error ") + ::flx::rtl::strutil::str<int>(_vI106463_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106461_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108302)));
      }
      fflush(stderr);
      {
      _a6203t_107291 _tmp108303 = (_a6203t_107291)(_vI106474_ehandler_uncurry);
      throw ((_tmp108303));
      }
    _ifdoelse_bootflx_65294_L106470:;
      _vI106457_pkg_cflags = _vI106464_mycflags; //assign simple
    _ifdoelse_bootflx_65292_L106472:;
      _vI106637_cxx_compile_dynamic1__apos_2_mv_65484  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106637_cxx_compile_dynamic1__apos_2_mv_65484%2==1) ) goto _ml65486_L106638;
      goto _end_hash_640086240;
    _ml65486_L106638:;
/*match case 2:any*/
    _end_hash_640086240:;
      _vI106641_cxx_compile_dynamic1__apos_2_mv_65484  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106641_cxx_compile_dynamic1__apos_2_mv_65484%2==1) ) goto _ml65486_L106642;
      _vI106640__urv98408  = (FLX_NEWP(_pI106424_echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_768227313;
    _ml65486_L106642:;
/*match case 2:any*/
      _vI106640__urv98408  = (FLX_NEWP(_pI106423_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_768227313:;
      _vI106645_cxx_compile_dynamic1__apos_2_mv_65484  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106645_cxx_compile_dynamic1__apos_2_mv_65484%2==1) ) goto _ml65486_L106646;
      goto _end_hash_557624518;
    _ml65486_L106646:;
/*match case 2:any*/
    _end_hash_557624518:;
      _vI106649_cxx_compile_dynamic1__apos_2_mv_65484  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106649_cxx_compile_dynamic1__apos_2_mv_65484%2==1) ) goto _ml65486_L106650;
      goto _end_hash_199081591;
    _ml65486_L106650:;
/*match case 2:any*/
    _end_hash_199081591:;
      _vI106465_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.CCFLAGS, _vI106457_pkg_cflags)) /* apply_stack */, _vI106640__urv98408, ptrflx_processing->_vI106123_dflt_clang_config.dynamic_libraries, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_RTL_DIRS, ptrflx_processing->_vI106422_control.EXTRA_INCLUDE_DIRS)) /* apply_stack */, ptrflx_processing->_vI106123_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI106422_control.MACROS, ptrflx_processing->_vI106123_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      _vI106652__genout_urv98630  = cxx_depcheck(FLX_FPAR_PASS_ONLY)
      .apply(_tt107593(_vI106465_tc, _vI106467_src, _vI106468_dst)) /* apply_stack */; //init
      if(!((ptrflx_processing->_vI106422_control.RECOMPILE == 1) || !_vI106652__genout_urv98630  ) ) goto _ifdoend_bootflx_65295_L106473;
      _vI106466_result = (_vI106465_tc.cxx_dynamic_object_compiler)->clone()
      ->apply(_art107177(_vI106468_dst, _vI106467_src)) /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI106422_control.TIME == 1)) ) goto _end_98640_L106660;
      {
      __timeb64* _tmp108304 = (__timeb64*)&_vI106659_tv;
      _ftime64_s(((_tmp108304)));
      }
      _vI106658__genout_urv95543  = (static_cast<double>((_vI106659_tv.time))) + ((static_cast<double>((_vI106659_tv.millitm))) / 1.0e3 ) ; //init
      _vI106653_elapsed = _vI106658__genout_urv95543 - _vI106455_t0 ; //assign simple
      _vI106654_minutes = ::std::floor((_vI106653_elapsed / 60.0 )); //assign simple
      _vI106655_seconds = _vI106653_elapsed - (_vI106654_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108305 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106654_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106655_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Dynamic c++  : ") + _vI106467_src ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108305)));
      }
      fflush(stdout);
    _end_98640_L106660:;
      return _vI106466_result;
    _ifdoend_bootflx_65295_L106473:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2257,3,2257,4); // HACK! 
}

//------------------------------
//FUNCTION <95577>: fmt::_lam_229: Apply method
 ::flx::rtl::cl_t _lam_229::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/numbers.fdoc",214,7,214,17); // HACK! 
}

//------------------------------
//FUNCTION <92759>: toolchain_msvc_win32::fixup: Apply method
_a13708t_107090 _fI92759_fixup::apply(_a13708t_107090 const &_arg ){
  _vI92760_s = _arg;
      fixup_mv_65657  = (::flx::rtl::strutil::substr(_vI92760_s,0,::std::string("-L").size()) == ::std::string("-L")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(fixup_mv_65657%2==1) ) goto _ml65659_L92762;
      return ::std::string("/LIBPATH:") + ::flx::rtl::strutil::substr(_vI92760_s,2,_vI92760_s.size()) ;
    _ml65659_L92762:;
/*match case 2:any*/
      return _vI92760_s;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1761,5,1761,70); // HACK! 
}

//------------------------------
//FUNCTION <94396>: find_sym::_lam_512: Apply method
 ::flx::rtl::cl_t _lam_512::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",891,11,891,18); // HACK! 
}

//------------------------------
//FUNCTION <66386>: toolchain_clang_osx::static_executable_linker: Apply method
int _fI66386_static_executable_linker::apply(_art107181 const &_arg ){
  _vI66389_spec = _arg;
      _vI66388_result = generic_link_exe_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_clang_osx->_vI66315_linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_clang_osx->_vI66398_config.library_search_dirs, ptrtoolchain_clang_osx->_vI66398_config.static_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66389_spec.srcs, _vI66389_spec.dst)) /* apply_stack */; //assign simple
      return _vI66388_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1625,3,1625,4); // HACK! 
}

//------------------------------
//FUNCTION <99210>: subscript::_lam_1996: Apply method
 ::flx::rtl::cl_t _lam_1996::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",223,7,223,24); // HACK! 
}

//------------------------------
//FUNCTION <106676>: flx_processing::cxx_compile_static1_uncurry::aux_uncurry: Apply method
void* _fI106676_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106677_inp_uncurry = _arg.data[0];
  _vI106678_out = _arg.data[1];
    start_90421_L106685:;
      _vI106681_aux__apos_2_mv_1322  = _vI106677_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106681_aux__apos_2_mv_1322)==0) ) goto _ml1324_L106680;
      return _vI106678_out;
    _ml1324_L106680:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI106681_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI106684__lam_1326)(FLX_FPAR_PASS this, ptr_fI106431_cxx_compile_static1_uncurry, ptrflx_processing))) ) goto _ml1325_L106679;
      _vI106682_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI106681_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI106683_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI106681_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI106678_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106678_out, _fI106441__lam_65499(ptr_fI106431_cxx_compile_static1_uncurry, ptrflx_processing)
      .apply(_vI106682_h_param_std_1208) /* apply_stack */))); //init
      _vI106677_inp_uncurry  = _vI106683_t_param_std_1207; //init
      goto start_90421_L106685;
    _ml1325_L106679:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <105691>: flx_processing::cxx_compile_dynamic::_lam_65491: Apply method
 ::flx::rtl::cl_t _lam_65491::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2293,5,2293,9); // HACK! 
}

//------------------------------
//FUNCTION <65969>: toolchain_gcc_linux::c_static_object_compiler: Apply method
int _fI65969_c_static_object_compiler::apply(_art107177 const &_arg ){
  _vI65972_spec = _arg;
      _vI65971_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_linux->_vI65924_base_c_compile_flags, ::std::string("-fvisibility=hidden")))), ptrtoolchain_gcc_linux->c_compiler, ptrtoolchain_gcc_linux->_vI66005_config.header_search_dirs, ptrtoolchain_gcc_linux->_vI66005_config.macros, ::std::string("-o "), ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI65972_spec.src, _vI65972_spec.dst)) /* apply_stack */; //assign simple
      return _vI65971_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",800,3,800,4); // HACK! 
}

//------------------------------
//FUNCTION <93550>: generic_link_lib_dynamic_uncurry::aux_uncurry: Apply method
void* _fI93550_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93551_inp_uncurry = _arg.data[0];
  _vI93552_out = _arg.data[1];
    start_90421_L93559:;
      _vI93555_aux__apos_2_mv_1322  = _vI93551_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93555_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93554;
      return _vI93552_out;
    _ml1324_L93554:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93555_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93558__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_link_lib_dynamic_uncurry))) ) goto _ml1325_L93553;
      _vI93556_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93555_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93557_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93555_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93552_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93552_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93556_h_param_std_1208) /* apply_stack */))); //init
      _vI93551_inp_uncurry  = _vI93557_t_param_std_1207; //init
      goto start_90421_L93559;
    _ml1325_L93553:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <105122>: flx_processing::aux_uncurry::_lam_1280: Apply method
 ::flx::rtl::cl_t _fI105122__lam_1280::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",202,11,202,19); // HACK! 
}

//------------------------------
//FUNCTION <92632>: toolchain_msvc_win32::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI92632__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <106232>: flx_processing::run_cxx_compiler_if_required: Apply method
int _fI106232_run_cxx_compiler_if_required::apply(_pt107161* const &_arg ){
  _vI106234_ehandler = _arg;
      _vI106233_result = 0; //assign simple
      if(!((ptrflx_processing->_vI106422_control.STATIC == 0)) ) goto _ifdoend_bootflx_65333_L106235;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_98894_L106726;
      {
      _a13708t_107090 _tmp108308 = (::std::string("[flx] ") + ::std::string("Dynamic linkage") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108308)));
      }
    _end_98894_L106726:;
      _vI106727__genout_urv98895  = _fI106194_cxx_compile_dynamic(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106234_ehandler) /* apply_stack */; //init
      _vI106233_result = _vI106727__genout_urv98895; //assign simple
      goto _ifdoelse_bootflx_65334_L106236;
    _ifdoend_bootflx_65333_L106235:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_98899_L106730;
      {
      _a13708t_107090 _tmp108309 = (::std::string("[flx] ") + ::std::string("Static linkage") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108309)));
      }
    _end_98899_L106730:;
      _vI106731__genout_urv98900  = _fI106215_cxx_compile_static(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106234_ehandler) /* apply_stack */; //init
      _vI106233_result = _vI106731__genout_urv98900; //assign simple
    _ifdoelse_bootflx_65334_L106236:;
      return _vI106233_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2403,3,2403,4); // HACK! 
}

//------------------------------
//FUNCTION <89238>: toolchain_clang_apple_iOS_maker_uncurry::c_static_object_compiler: Apply method
int _fI89238_c_static_object_compiler::apply(_art107177 const &_arg ){
  _vI89240_spec = _arg;
      _vI89239_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89210_base_c_compile_flags, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89201_c_compiler, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.header_search_dirs, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.macros, ::std::string("-o "), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89240_spec.src, _vI89240_spec.dst)) /* apply_stack */; //assign simple
      return _vI89239_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2056,3,2056,4); // HACK! 
}

//------------------------------
//FUNCTION <105096>: flx_processing::aux_uncurry: Apply method
void* _fI105096_aux_uncurry::apply(_at107115 const &_arg ){
  _vI105097_x_uncurry = _arg.data[0];
  _vI105098_y = _arg.data[1];
    start_91065_L105105:;
      _vI105101_aux__apos_2_mv_1328  = _vI105097_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105101_aux__apos_2_mv_1328)==0) ) goto _ml1330_L105100;
      return _vI105098_y;
    _ml1330_L105100:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI105101_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI105104__lam_1332)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml1331_L105099;
      _vI105102_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI105101_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI105103_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI105101_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI105098_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI105098_y, _vI105102_h_param_std_1210))); //init
      _vI105097_x_uncurry  = _vI105103_t_param_std_1209; //init
      goto start_91065_L105105;
    _ml1331_L105099:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <106844>: flx_processing::cxx_link_static_exe::aux_uncurry: Apply method
void* _fI106844_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106845_inp_uncurry = _arg.data[0];
  _vI106846_out = _arg.data[1];
    start_90421_L106853:;
      _vI106849_aux__apos_2_mv_1322  = _vI106845_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106849_aux__apos_2_mv_1322)==0) ) goto _ml1324_L106848;
      return _vI106846_out;
    _ml1324_L106848:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI106849_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI106852__lam_1326)(FLX_FPAR_PASS this, ptr_fI106300_cxx_link_static_exe, ptrflx_processing))) ) goto _ml1325_L106847;
      _vI106850_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI106849_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI106851_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI106849_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI106846_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106846_out, _fI106304__lam_65525(ptr_fI106300_cxx_link_static_exe, ptrflx_processing)
      .apply(_vI106850_h_param_std_1208) /* apply_stack */))); //init
      _vI106845_inp_uncurry  = _vI106851_t_param_std_1207; //init
      goto start_90421_L106853;
    _ml1325_L106847:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <105179>: flx_processing::cal_time_from_flxdepfile: Apply method
double cal_time_from_flxdepfile::apply(_tt107589 const &_arg ){
  _vI105190_debugln = _arg.mem_0;
  df = _arg.mem_1;
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_575_L105555;
      {
      _a13708t_107090 _tmp108312 = (::std::string("[load_text] ") + df ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108312)));
      }
      fflush(stderr);
    _ifdoelse_std_575_L105555:;
      deptext = ::flx::rtl::ioutil::load_text_file(df); //assign simple
      _vI105188_lines = split(FLX_FPAR_PASS_ONLY)
      .apply(_at107092(deptext, ::std::string("\n"))) /* apply_stack */; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI105190_debugln)->clone()
      ->call(0, ::std::string("Deps=") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105188_lines) /* apply_stack */ );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      cal_time_from_flxdepfile_mv_65458  = _fI105559_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_tt107527(- 1.0 , _vI105188_lines)) /* apply_stack */; //init
/*begin match*/
/*match case 1:ft_param_bootflx_65280*/
      ft_param_bootflx_65280 = cal_time_from_flxdepfile_mv_65458; //assign simple
      cal_time_from_flxdepfile_mv_65462  = (ft_param_bootflx_65280 == - 1.0 ); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(cal_time_from_flxdepfile_mv_65462%2==1) ) goto _ml65464_L105570;
      _urv97976  = static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)); //init
      goto _end_hash_1065957040;
    _ml65464_L105570:;
/*match case 2:any*/
      _urv97976  = ft_param_bootflx_65280; //init
    _end_hash_1065957040:;
      deptime = _urv97976; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI105190_debugln)->clone()
      ->call(0, ::std::string("Deptime=") + strfiletime(FLX_FPAR_PASS deptime) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      return deptime;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2135,3,2135,4); // HACK! 
}

//------------------------------
//FUNCTION <92172>: toolchain_msvc_win32::checkwarn::aux::_lam_2230: Apply method
 ::flx::rtl::cl_t _fI92172__lam_2230::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,9,478,14); // HACK! 
}

//------------------------------
//FUNCTION <65977>: toolchain_gcc_linux::cxx_static_object_compiler: Apply method
int _fI65977_cxx_static_object_compiler::apply(_art107177 const &_arg ){
  _vI65980_spec = _arg;
      _vI65979_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_gcc_linux->cxx_compile_warning_flags, ptrtoolchain_gcc_linux->_vI66005_config.ccflags)) /* apply_stack */, ::std::string("-D_GLIBCXX_USE_CXX11_ABI=1")))), ::std::string("-std=gnu++11")))), ::std::string("-D_POSIX")))), ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), ::std::string("-c")))), ::std::string("-g")))), ::std::string("-fvisibility=hidden")))), ptrtoolchain_gcc_linux->cxx_compiler, ptrtoolchain_gcc_linux->_vI66005_config.header_search_dirs, ptrtoolchain_gcc_linux->_vI66005_config.macros, ::std::string("-o "), ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI65980_spec.src, _vI65980_spec.dst)) /* apply_stack */; //assign simple
      return _vI65979_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",837,3,837,4); // HACK! 
}

//------------------------------
//FUNCTION <92727>: toolchain_msvc_win32::aux_uncurry: Apply method
void* _fI92727_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92728_inp_uncurry = _arg.data[0];
  _vI92729_out = _arg.data[1];
    start_90421_L92736:;
      _vI92732_aux__apos_2_mv_1322  = _vI92728_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92732_aux__apos_2_mv_1322)==0) ) goto _ml1324_L92731;
      return _vI92729_out;
    _ml1324_L92731:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI92732_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI92735__lam_1326)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32))) ) goto _ml1325_L92730;
      _vI92733_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI92732_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI92734_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI92732_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI92729_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92729_out, _lam_65648(ptrtoolchain_msvc_win32)
      .apply(_vI92733_h_param_std_1208) /* apply_stack */))); //init
      _vI92728_inp_uncurry  = _vI92734_t_param_std_1207; //init
      goto start_90421_L92736;
    _ml1325_L92730:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <88900>: generic_link_lib_dynamic_uncurry: Apply method
int generic_link_lib_dynamic_uncurry::apply(_tt107231 const &_arg ){
  _vI89538_spec_uncurry = _arg.mem_0;
  _vI89534_cppos = _arg.mem_1;
  _vI89535_LINKER_OUTPUT_FILENAME = _arg.mem_2;
      _vI89531_cmd = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI89538_spec_uncurry.CCFLAGS, _vI89534_cppos)) /* apply_stack */, _vI89538_spec_uncurry.CCLINK_DLLIB))); //assign simple
      _vI93527_r = _fI93528_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89531_cmd, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108314 = (void**)&_vI93527_r;
      _rev(((_tmp108314)),(_a13708t_107090*)0);
      }
      _vI93549_r = _fI93550_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89538_spec_uncurry.LINK_STRINGS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108315 = (void**)&_vI93549_r;
      _rev(((_tmp108315)),(_a13708t_107090*)0);
      }
      _vI89532_CMD = ((((cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93527_r)) /* apply_stack */ + ::std::string(" ") ) + _vI89538_spec_uncurry.SPEC_EXE_FILENAME ) + ((::std::string("\"") + _vI89535_LINKER_OUTPUT_FILENAME ) + ::std::string("\"") ) ) + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93549_r)) /* apply_stack */ ; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI89538_spec_uncurry.debugln)->clone()
      ->call(0, ::std::string("Link command=") + _vI89532_CMD );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_444_L93565;
      {
      _a13708t_107090 _tmp108316 = (::std::string("[system] ") + _vI89532_CMD ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108316)));
      }
      fflush(stderr);
    _ifdoelse_std_444_L93565:;
      _genout_urv93572  = ::std::system(((::std::string("\"") + _vI89532_CMD ) + ::std::string("\"") ).c_str()); //init
      _vI93569__genout_urv93142  = _genout_urv93572; //init
      _vI93568__genout_urv93134  = _vI93569__genout_urv93142; //init
      _vI93567__genout_urv93129  = _vI93568__genout_urv93134; //init
      _genout_urv93563  = _vI93567__genout_urv93129; //init
      _vI89533_result = _genout_urv93563; //assign simple
      if(!(!((_vI89533_result == 0)) ) ) goto _ifdoelse_bootflx_64817_L89537;
      {
      _a13708t_107090 _tmp108317 = ((::std::string("Dynamic link command=") + _vI89532_CMD ) + ::std::string(" FAILED") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108317)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_64817_L89537:;
      return _vI89533_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",266,3,266,4); // HACK! 
}

//------------------------------
//FUNCTION <106625>: flx_processing::cxx_compile_dynamic1_uncurry::aux_uncurry: Apply method
void* _fI106625_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106626_inp_uncurry = _arg.data[0];
  _vI106627_out = _arg.data[1];
    start_90421_L106634:;
      _vI106630_aux__apos_2_mv_1322  = _vI106626_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106630_aux__apos_2_mv_1322)==0) ) goto _ml1324_L106629;
      return _vI106627_out;
    _ml1324_L106629:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI106630_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI106633__lam_1326)(FLX_FPAR_PASS this, ptr_fI106432_cxx_compile_dynamic1_uncurry, ptrflx_processing))) ) goto _ml1325_L106628;
      _vI106631_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI106630_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI106632_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI106630_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI106627_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106627_out, _fI106458__lam_65481(ptr_fI106432_cxx_compile_dynamic1_uncurry, ptrflx_processing)
      .apply(_vI106631_h_param_std_1208) /* apply_stack */))); //init
      _vI106626_inp_uncurry  = _vI106632_t_param_std_1207; //init
      goto start_90421_L106634;
    _ml1325_L106628:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <66051>: toolchain_gcc_osx::cxx_dependency_generator: Apply method
_tt107175 _fI66051_cxx_dependency_generator::apply(_art107174 const &_arg ){
  _vI66056_spec = _arg;
      _ds2_65609 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_gcc_osx->_vI66012_cxx_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_osx->_vI66096_config.ccflags, ::std::string("-std=c++11")))), ::std::string("-MM")))), ptrtoolchain_gcc_osx->_vI66096_config.header_search_dirs, ptrtoolchain_gcc_osx->_vI66096_config.macros, ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66056_spec.src)) /* apply_stack */; //assign simple
      _vI66054_result = _ds2_65609.mem_0; //assign simple
      _vI66055_data = _ds2_65609.mem_1; //assign simple
      return _tt107175(_vI66054_result, _vI66055_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1014,3,1014,4); // HACK! 
}

//------------------------------
//FUNCTION <90236>: _a90236__ctor_string: Apply method
_a13708t_107090 _a90236__ctor_string::apply(_a14737t_107477 const &_arg ){
  _a90237 = _arg;
      return _a90237.as_string();
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",952,5,952,48); // HACK! 
}

//------------------------------
//FUNCTION <106182>: flx_processing::check_cxx_uptodate: Apply method
 ::flx::rtl::cl_t _fI106182_check_cxx_uptodate::apply(){
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_98027_L106567;
      {
      _a13708t_107090 _tmp108319 = (::std::string("[flx] ") + ::std::string("Check Felix->C++ uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108319)));
      }
    _end_98027_L106567:;
      if(!((ptrflx_processing->_vI106422_control.RECOMPILE == 1)) ) goto _ifdoend_bootflx_65283_L106183;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_98031_L106570;
      {
      _a13708t_107090 _tmp108320 = (::std::string("[flx] ") + ::std::string("Felix->C++ dependency checking skipped due to switch RECOMPILE=1: forced not uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108320)));
      }
    _end_98031_L106570:;
      return 0;
    _ifdoend_bootflx_65283_L106183:;
      if(!((ptrflx_processing->_vI106422_control.CHECK_DEPENDENCIES == 1)) ) goto _ifdoend_bootflx_65285_L106184;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_98035_L106573;
      {
      _a13708t_107090 _tmp108321 = (::std::string("[flx] ") + ::std::string("Checking Felix->C++ dependencies since CHECK_DEPENDENCIES=1 to see if the cxx is uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108321)));
      }
    _end_98035_L106573:;
      return _fI106173_cal_cxx_uptodate(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107307((FLX_NEWP(_pI106423_debugln)(FLX_FPAR_PASS ptrflx_processing)), (*ptrflx_processing->_vI68366_config ).FLX_OUTPUT_DIR, ptrflx_processing->dvars.filebase)) /* apply_stack */;
    _ifdoend_bootflx_65285_L106184:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_98039_L106576;
      {
      _a13708t_107090 _tmp108322 = (::std::string("[flx] ") + ::std::string("Felix->C++ dependency checking skipped due to switch CHECK_DEPENDENCIES=0: forced uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108322)));
      }
    _end_98039_L106576:;
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2168,3,2168,4); // HACK! 
}

//------------------------------
//FUNCTION <92480>: toolchain_msvc_win32::static_executable_linker::_lam_65683: Apply method
 ::flx::rtl::cl_t _lam_65683::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1896,5,1896,9); // HACK! 
}

//------------------------------
//C FUNC <11248>: range
void* range(FLX_APAR_DECL  int low, int high, int step){
   ::flx::rtl::cl_t inner_mv_1341;
  void* _vI90316_values;
  int _vI90315_step;
  int _vI90314_high;
  int _vI90313_low;
   ::flx::rtl::cl_t range_mv_1352;
   ::flx::rtl::cl_t range_mv_1347;
  _at107102 _urv90306;
  int _vI11264_n;
  int _vI11263_s;
  int hi;
  int lo;
  _at107102 _ds1_1345;
      range_mv_1347  = (low < high); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(range_mv_1347%2==1) ) goto _ml1349_L90308;
      (_urv90306.data)[0] = low; //assign simple
      (_urv90306.data)[1] = high; //assign simple
      (_urv90306.data)[2] = step; //assign simple
      goto _end_inline_range_mf_1346_90310_L90310;
    _ml1349_L90308:;
/*match case 2:any*/
      (_urv90306.data)[0] = high; //assign simple
      (_urv90306.data)[1] = low; //assign simple
      (_urv90306.data)[2] = - step ; //assign simple
    _end_inline_range_mf_1346_90310_L90310:;
      _ds1_1345 = _urv90306; //assign simple
      lo = (_ds1_1345.data)[0]; //assign simple
      hi = (_ds1_1345.data)[1]; //assign simple
      _vI11263_s = (_ds1_1345.data)[2]; //assign simple
      _vI11264_n = (hi - lo ) - 1 ; //assign simple
      range_mv_1352  = !((0 < _vI11263_s)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(range_mv_1352%2==1) ) goto _ml1354_L90312;
      return (void* /*VR_nullptr*/ )0;
    _ml1354_L90312:;
/*match case 2:any*/
      _vI90313_low  = lo; //init
      _vI90314_high  = lo + (_vI11264_n - (_vI11264_n % _vI11263_s ) ) ; //init
      _vI90315_step  = _vI11263_s; //init
      _vI90316_values  = (void* /*VR_nullptr*/ )0; //init
    start_90295_L90319:;
      inner_mv_1341  = (_vI90314_high < _vI90313_low); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(inner_mv_1341%2==1) ) goto _ml1343_L90318;
      return _vI90316_values;
    _ml1343_L90318:;
/*match case 2:any*/
/*parallel assignment*/
      _vI90316_values  = FLX_VNR(1, new(*PTF gcp, _tt107098_ptr_map, true) _tt107098 (_tt107098(_vI90316_values, _vI90314_high))); //init
      _vI90314_high  = _vI90314_high - _vI90315_step ; //init
      goto start_90295_L90319;
}
//------------------------------
//FUNCTION <105833>: flx_processing::cxx_link_shared_exe::aux_uncurry: Apply method
void* _fI105833_aux_uncurry::apply(_at107115 const &_arg ){
  _vI105834_inp_uncurry = _arg.data[0];
  _vI105835_out = _arg.data[1];
    start_90421_L105842:;
      _vI105838_aux__apos_2_mv_1322  = _vI105834_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105838_aux__apos_2_mv_1322)==0) ) goto _ml1324_L105837;
      return _vI105835_out;
    _ml1324_L105837:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI105838_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI105841__lam_1326)(FLX_FPAR_PASS this, ptrcxx_link_shared_exe, ptrflx_processing))) ) goto _ml1325_L105836;
      _vI105839_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI105838_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI105840_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI105838_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI105835_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI105835_out, _lam_65518(ptrcxx_link_shared_exe, ptrflx_processing)
      .apply(_vI105839_h_param_std_1208) /* apply_stack */))); //init
      _vI105834_inp_uncurry  = _vI105840_t_param_std_1207; //init
      goto start_90421_L105842;
    _ml1325_L105836:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------

//PROCEDURE <87817:> handle_switch::debugln: Call method
::flx::rtl::con_t * _pI87817_debugln::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI88518_x = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <87817:> handle_switch::debugln: Resume method
::flx::rtl::con_t *_pI87817_debugln::resume(){
      if(!(*ptrhandle_switch->_vI67272_control).DEBUG_FLX ) goto _ifdoelse_bootflx_64850_L88535;
      {
      _a13708t_107090 _tmp108324 = (::std::string("[flx] ") + _vI88518_x ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108324)));
      }
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_64850_L88535:;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <105803>: flx_processing::cxx_link_shared_library::aux_uncurry: Apply method
void* _fI105803_aux_uncurry::apply(_at107115 const &_arg ){
  _vI105804_inp_uncurry = _arg.data[0];
  _vI105805_out = _arg.data[1];
    start_90421_L105812:;
      _vI105808_aux__apos_2_mv_1322  = _vI105804_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105808_aux__apos_2_mv_1322)==0) ) goto _ml1324_L105807;
      return _vI105805_out;
    _ml1324_L105807:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI105808_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI105811__lam_1326)(FLX_FPAR_PASS this, ptrcxx_link_shared_library, ptrflx_processing))) ) goto _ml1325_L105806;
      _vI105809_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI105808_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI105810_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI105808_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI105805_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI105805_out, _lam_65511(ptrcxx_link_shared_library, ptrflx_processing)
      .apply(_vI105809_h_param_std_1208) /* apply_stack */))); //init
      _vI105804_inp_uncurry  = _vI105810_t_param_std_1207; //init
      goto start_90421_L105812;
    _ml1325_L105806:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------

//PROCEDURE <105153:> flx_processing::calpackages: Call method
void calpackages::stack_call(_pt107161* const &_arg){
  _vI105156_ehandler = _arg;
      str_mv_152  = ptrflx_processing->_vI105152_calpackages_run; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(str_mv_152%2==1) ) goto _ml154_L105507;
      _urv95620  = ::std::string("true"); //init
      goto _end_inline_str_95625_L105508;
    _ml154_L105507:;
/*match case 2:any*/
      _urv95620  = ::std::string("false"); //init
    _end_inline_str_95625_L105508:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_95638_L105511;
      {
      _a13708t_107090 _tmp108326 = (::std::string("[flx] ") + ((::std::string("[flx:calpackages] Calculating package requirements (calpackages_run=") + _urv95620 ) + ::std::string(")") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108326)));
      }
    _end_95638_L105511:;
      if(ptrflx_processing->_vI105152_calpackages_run) goto _ifdoelse_bootflx_65267_L105158;
      _vI105154_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(ptrflx_processing->_vI105142_dflt_clang_config) /* general apply */; //assign simple
      _vI105155_x = map_package_requirements_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107570(_vI105156_ehandler, _art107569(ptrflx_processing->_vI105441_control.DLINK_STRINGS, ptrflx_processing->_vI105441_control.pkgs, (_vI105154_tc.dynamic_object_extension)->clone()
      ->apply() /* general apply */, (_vI105154_tc.executable_extension)->clone()
      ->apply() /* general apply */, (_vI105154_tc.static_object_extension)->clone()
      ->apply() /* general apply */, (*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (*ptrflx_processing->_vI68366_config ).FLX_TARGET_DIR, ptrflx_processing->_vI105441_control.LINKER_SWITCHES, ptrflx_processing->_vI105441_control.LINKEXE, ptrflx_processing->_vI105441_control.SLINK_STRINGS, ptrflx_processing->_vI105441_control.STATIC, ptrflx_processing->_vI105038_dvars.cpp_filebase))) /* apply_stack */; //assign simple
      ptrflx_processing->_vI105441_control.CCFLAGS = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.CCFLAGS, _vI105155_x.CFLAGS)) /* apply_stack */; //assign simple
      ptrflx_processing->_vI105441_control.EXTRA_INCLUDE_FILES = _vI105155_x.INCLUDE_FILES; //assign simple
      ptrflx_processing->_vI105441_control.DRIVER_EXE = _vI105155_x.DRIVER_EXE; //assign simple
      ptrflx_processing->_vI105441_control.DRIVER_OBJS = _vI105155_x.DRIVER_OBJS; //assign simple
      ptrflx_processing->_vI105441_control.LINK_STRINGS = _vI105155_x.LINK_STRINGS; //assign simple
      ptrflx_processing->_vI105152_calpackages_run = 1; //assign simple
      return; // proc return from stackable 
    _ifdoelse_bootflx_65267_L105158:;
      return; // proc return from stackable 

}
//------------------------------
//FUNCTION <95576>: fmt::_lam_227: Apply method
 ::flx::rtl::cl_t _lam_227::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/numbers.fdoc",213,7,213,19); // HACK! 
}

//------------------------------
//FUNCTION <93285>: generic_static_library_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93285__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------

//PROCEDURE <67504:> processing_stage1: Call method
::flx::rtl::con_t * processing_stage1::call(::flx::rtl::con_t *_ptr_caller, _tt107150 const &_arg){
  _caller = _ptr_caller;
  _vI67557_config = _arg.mem_0;
  _vI67558_control = _arg.mem_1;
  xloopctl = _arg.mem_2;
  _vI67560_vargs = _arg.mem_3;
  INIT_PC
  return this;
}

//PROCEDURE <67504:> processing_stage1: Resume method
::flx::rtl::con_t *processing_stage1::resume(){
  FLX_START_SWITCH
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_DEBUG_FLX")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65014_L67562;
      *(&_vI67558_control->DEBUG_FLX)  = 1; //assign simple
      *(&_vI67558_control->ECHO)  = 1; //assign simple
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_102236_L102236;
      {
      _a13708t_107090 _tmp108327 = (::std::string("[flx] ") + ::std::string("debug flx tool ON") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108327)));
      }
    _end_102236_L102236:;
      *(&_vI67558_control->DEBUG)  = 1; //assign simple
    _ifdoelse_bootflx_65014_L67562:;
      FLX_SET_PC(108328)
      return (FLX_NEWP(xparse_cmd_line)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt107150(_vI67557_config, _vI67558_control, xloopctl, _vI67560_vargs));
    FLX_CASE_LABEL(108328)
      if(!(((*_vI67558_control).PRINT_HELP == 1)) ) goto _ifdoelse_bootflx_65016_L67564;
  _pI67189_print_help();
      ::std::exit(0);
    _ifdoelse_bootflx_65016_L67564:;
      if(!(((*_vI67558_control).LINKIT == 0) && ((*_vI67558_control).STATICLIB == 1) ) ) goto _ifdoelse_bootflx_65018_L67566;
      {
      _a13708t_107090 _tmp108329 = ::std::string("Conflicting switches --nolink and --staticlib") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108329)));
      }
      fflush(stderr);
      ::std::exit(1);
    _ifdoelse_bootflx_65018_L67566:;
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104038_L104038;
      {
      _a13708t_107090 _tmp108330 = (::std::string("[flx] ") + _fI86832_str(_at107102((*xloopctl).grab, (*xloopctl).argno, PTF argc)) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108330)));
      }
    _end_104038_L104038:;
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104042_L104042;
      {
      _a13708t_107090 _tmp108331 = (::std::string("[flx] ") + ::std::string("#--------") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108331)));
      }
    _end_104042_L104042:;
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104046_L104046;
      {
      _a13708t_107090 _tmp108332 = (::std::string("[flx] ") + (::std::string("DONE, option index = ") + ::flx::rtl::strutil::str<int>((*xloopctl).argno) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108332)));
      }
    _end_104046_L104046:;
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104050_L104050;
      {
      _a13708t_107090 _tmp108333 = (::std::string("[flx] ") + (((((((::std::string("path=") + (*xloopctl).path ) + ::std::string(": dir=") ) + (*xloopctl).dir ) + ::std::string(",base=") ) + (*xloopctl).base ) + ::std::string(", ext=") ) + (*xloopctl).ext ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108333)));
      }
    _end_104050_L104050:;
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104054_L104054;
      {
      _a13708t_107090 _tmp108334 = (::std::string("[flx] ") + (::std::string("cpps=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67558_control).cpps) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108334)));
      }
    _end_104054_L104054:;
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104058_L104058;
      {
      _a13708t_107090 _tmp108335 = (::std::string("[flx] ") + (::std::string("cppos=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67558_control).cppos) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108335)));
      }
    _end_104058_L104058:;
      if(!(*_vI67558_control).DEBUG_FLX ) goto continue__ll_flx_1634_L67567;
      {
      _a13708t_107090 _tmp108336 = (::std::string("[flx] ") + (::std::string("ocamls=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67558_control).ocamls) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108336)));
      }
    continue__ll_flx_1634_L67567:;
      if(FLX_UNLIKELY(!(((*xloopctl).argno < (static_cast<int>((PTF gcp->collector->get_used(_vI67560_vargs)))/*int.flx: ctor*/))) )) goto break__ll_flx_1634_L67568;
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(((*xloopctl).argno))/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < (PTF gcp->collector->get_used(_vI67560_vargs))))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      *(&(*(&_vI67558_control->USER_ARGS) ))  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*(&(*(&_vI67558_control->USER_ARGS) )) , _vI67560_vargs[(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(((*xloopctl).argno))/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)])) /* apply_stack */; //assign simple
      {
      int* _tmp108337 = &(*(&xloopctl->argno) );
      ++*((_tmp108337));
      }
      goto continue__ll_flx_1634_L67567;
    break__ll_flx_1634_L67568:;
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104076_L104076;
      {
      _a13708t_107090 _tmp108338 = (::std::string("[flx] ") + (::std::string("USER_ARGS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67558_control).USER_ARGS) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108338)));
      }
    _end_104076_L104076:;
      _vI104078_s = ::std::string(""); //assign simple
      {
      _a13708t_107090* _tmp108339 = (_a13708t_107090*)&_vI104078_s;
      ((_tmp108339))->reserve(1000);
      }
      {
      _a13708t_107090* _tmp108340 = (_a13708t_107090*)&_vI104078_s;
      _a13708t_107090 _tmp108341 = (::std::string("(FLX_SHARE_DIR=") + (*_vI67557_config ).FLX_SHARE_DIR ) + ::std::string(",\n") ;
      ((_tmp108340))->append((_tmp108341));
      }
      {
      _a13708t_107090* _tmp108342 = (_a13708t_107090*)&_vI104078_s;
      _a13708t_107090 _tmp108343 = (::std::string("FLX_TARGET_DIR=") + (*_vI67557_config ).FLX_TARGET_DIR ) + ::std::string(",\n") ;
      ((_tmp108342))->append((_tmp108343));
      }
      {
      _a13708t_107090* _tmp108344 = (_a13708t_107090*)&_vI104078_s;
      _a13708t_107090 _tmp108345 = (::std::string("FLX_HOME_DIR=") + (*_vI67557_config ).FLX_HOME_DIR ) + ::std::string(",\n") ;
      ((_tmp108344))->append((_tmp108345));
      }
      {
      _a13708t_107090* _tmp108346 = (_a13708t_107090*)&_vI104078_s;
      _a13708t_107090 _tmp108347 = (::std::string("FLX_PROFILE_DIR=") + (*_vI67557_config ).FLX_PROFILE_DIR ) + ::std::string(",\n") ;
      ((_tmp108346))->append((_tmp108347));
      }
      {
      _a13708t_107090* _tmp108348 = (_a13708t_107090*)&_vI104078_s;
      _a13708t_107090 _tmp108349 = (::std::string("FLX_CACHE_DIR=") + (*_vI67557_config ).FLX_CACHE_DIR ) + ::std::string(",\n") ;
      ((_tmp108348))->append((_tmp108349));
      }
      {
      _a13708t_107090* _tmp108350 = (_a13708t_107090*)&_vI104078_s;
      _a13708t_107090 _tmp108351 = (::std::string("FLX_OUTPUT_DIR=") + (*_vI67557_config ).FLX_OUTPUT_DIR ) + ::std::string(",\n") ;
      ((_tmp108350))->append((_tmp108351));
      }
      {
      _a13708t_107090* _tmp108352 = (_a13708t_107090*)&_vI104078_s;
      _a13708t_107090 _tmp108353 = (::std::string("FLX_LIB_DIRS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67557_config ).FLX_LIB_DIRS) /* apply_stack */ ) + ::std::string(",\n") ;
      ((_tmp108352))->append((_tmp108353));
      }
      {
      _a13708t_107090* _tmp108354 = (_a13708t_107090*)&_vI104078_s;
      _a13708t_107090 _tmp108355 = (::std::string("FLX_CONFIG_DIRS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67557_config ).FLX_CONFIG_DIRS) /* apply_stack */ ) + ::std::string(",\n") ;
      ((_tmp108354))->append((_tmp108355));
      }
      {
      _a13708t_107090* _tmp108356 = (_a13708t_107090*)&_vI104078_s;
      _a13708t_107090 _tmp108357 = (::std::string("FLX_RTL_DIRS=") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67557_config ).FLX_RTL_DIRS) /* apply_stack */ ) + ::std::string(")\n") ;
      ((_tmp108356))->append((_tmp108357));
      }
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104085_L104085;
      {
      _a13708t_107090 _tmp108358 = (::std::string("[flx] ") + (::std::string("config=") + _vI104078_s ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108358)));
      }
    _end_104085_L104085:;
      if(!(((*_vI67558_control).NOOPTIMISE == 0)) ) goto _ifdoend_bootflx_65019_L67569;
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104089_L104089;
      {
      _a13708t_107090 _tmp108359 = (::std::string("[flx] ") + ::std::string("Set C++ compiler optimisation switches") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108359)));
      }
    _end_104089_L104089:;
      *(&_vI67558_control->CCFLAGS)  = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115((*_vI67558_control).CCFLAGS, (*_vI67558_control).OPTIMISE)) /* apply_stack */; //assign simple
      goto _ifdoelse_bootflx_65020_L67570;
    _ifdoend_bootflx_65019_L67569:;
      if(!(*_vI67558_control).DEBUG_FLX ) goto _ifdoelse_bootflx_65020_L67570;
      {
      _a13708t_107090 _tmp108360 = (::std::string("[flx] ") + ::std::string("What, no optimisation?") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108360)));
      }
    _ifdoelse_bootflx_65020_L67570:;
      *(&_vI67558_control->CCFLAGS)  = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115((*_vI67558_control).CCFLAGS, (*_vI67558_control).EXTRA_CCFLAGS)) /* apply_stack */; //assign simple
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104109_L104109;
      {
      _a13708t_107090 _tmp108361 = (::std::string("[flx] ") + (::std::string("CCFLAGS =") + str(FLX_FPAR_PASS_ONLY)
      .apply((*_vI67558_control).CCFLAGS) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108361)));
      }
    _end_104109_L104109:;
      dflt_flxg = ::std::string(""); //assign simple
      dflt_flx_run = (void* /*VR_nullptr*/ )0; //assign simple
      dflt_flxg = _fI82124_join(_fI82124_join((*_vI67557_config).FLX_TARGET_DIR, ::std::string("bin")), ::std::string("flxg.exe")); //assign simple
      _vI104124_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L104120;
      _vI104125_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108362 = (int*)&_vI104125_i;
      ++*((_tmp108362));
      }
    redo__ll_lists_4854_L104123:;
      if(FLX_UNLIKELY(!((0 < _vI104125_i)) )) goto _ifdoelse_std_1191_L104120;
      {
      int* _tmp108363 = (int*)&_vI104125_i;
      --*((_tmp108363));
      }
      _vI104124_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104124_o, (_at107092(::std::string("set"), ((::std::string("PATH=") + mk_absolute_filename((*_vI67557_config).FLX_TARGET_DIR) ) + ::std::string("\\lib\\rtl;") ) + ::std::string("%PATH%&&") ).data)[reinterpret< ::flx::rtl::cl_t>(_vI104125_i)]))); //assign simple
      goto redo__ll_lists_4854_L104123;
    _ifdoelse_std_1191_L104120:;
      dflt_flx_run = _vI104124_o; //assign simple
      processing_stage1_mv_65081  = (*_vI67558_control).FLXG; //init
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == processing_stage1_mv_65081)) ) goto _ml65083_L104131;
      _urv104128  = dflt_flxg; //init
      goto _end_hash_61064142;
    _ml65083_L104131:;
/*match case 2:x_param_bootflx_65021*/
      x_param_bootflx_65021 = processing_stage1_mv_65081; //assign simple
      _urv104128  = x_param_bootflx_65021; //init
    _end_hash_61064142:;
      *(&_vI67558_control->FLXG)  = _urv104128; //assign simple
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104137_L104137;
      {
      _a13708t_107090 _tmp108364 = (::std::string("[flx] ") + (::std::string("FLXG = ") + (*_vI67558_control).FLXG ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108364)));
      }
    _end_104137_L104137:;
      processing_stage1_mv_65086  = (*_vI67558_control).FLXRUN; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(processing_stage1_mv_65086)==0) ) goto _ml65088_L104141;
      _urv104138  = dflt_flx_run; //init
      goto _end_hash_873728049;
    _ml65088_L104141:;
/*match case 2:x_param_bootflx_65022*/
      x_param_bootflx_65022 = processing_stage1_mv_65086; //assign simple
      _urv104138  = x_param_bootflx_65022; //init
    _end_hash_873728049:;
      *(&_vI67558_control->FLXRUN)  = _urv104138; //assign simple
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104153_L104153;
      {
      _a13708t_107090 _tmp108365 = (::std::string("[flx] ") + str(FLX_FPAR_PASS_ONLY)
      .apply(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((*_vI67558_control).FLXRUN, ::std::string("FLXRUN = "))))) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108365)));
      }
    _end_104153_L104153:;
      DLINK_STRING = ::std::string(""); //assign simple
      SLINK_STRING = ::std::string(""); //assign simple
      DLINK_STRING = (::std::string("/LIBPATH:") + (*_vI67557_config).FLX_TARGET_DIR ) + ::std::string("\\lib\\rtl") ; //assign simple
      SLINK_STRING = (::std::string("/LIBPATH:") + (*_vI67557_config).FLX_TARGET_DIR ) + ::std::string("\\lib\\rtl") ; //assign simple
/*parallel assignment*/
      _vI67534_s  = SLINK_STRING; //init
      _vI67533_d  = DLINK_STRING; //init
      *(&_vI67558_control->DLINK_STRINGS)  = parse(FLX_FPAR_PASS_ONLY)
      .apply(_vI67533_d) /* apply_stack */; //assign simple
      *(&_vI67558_control->SLINK_STRINGS)  = parse(FLX_FPAR_PASS_ONLY)
      .apply(_vI67534_s) /* apply_stack */; //assign simple
      dflt_grammar_dir = _fI82124_join((*_vI67557_config).FLX_SHARE_DIR, ::std::string("lib")); //assign simple
      processing_stage1_mv_65097  = (*_vI67558_control).GRAMMAR_DIR; //init
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == processing_stage1_mv_65097)) ) goto _ml65099_L104271;
      _urv104268  = dflt_grammar_dir; //init
      goto _end_hash_5719710;
    _ml65099_L104271:;
/*match case 2:x_param_bootflx_65023*/
      x_param_bootflx_65023 = processing_stage1_mv_65097; //assign simple
      _urv104268  = mk_absolute_filename(x_param_bootflx_65023); //init
    _end_hash_5719710:;
      *(&_vI67558_control->GRAMMAR_DIR)  = _urv104268; //assign simple
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104277_L104277;
      {
      _a13708t_107090 _tmp108366 = (::std::string("[flx] ") + (::std::string("GRAMMAR_DIR = ") + (*_vI67558_control).GRAMMAR_DIR ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108366)));
      }
    _end_104277_L104277:;
      dflt_grammar = mk_absolute_filename(_fI82124_join((*_vI67558_control).GRAMMAR_DIR, ::std::string("grammar/grammar.files"))); //assign simple
      processing_stage1_mv_65102  = (*_vI67558_control).STDGRAMMAR; //init
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == processing_stage1_mv_65102)) ) goto _ml65104_L104281;
      _urv104278  = dflt_grammar; //init
      goto _end_hash_528164525;
    _ml65104_L104281:;
/*match case 2:x_param_bootflx_65024*/
      x_param_bootflx_65024 = processing_stage1_mv_65102; //assign simple
      processing_stage1_mv_65107  = (::flx::rtl::strutil::subscript(x_param_bootflx_65024,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0)) || ((::flx::rtl::strutil::subscript(x_param_bootflx_65024,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0)) && (::flx::rtl::strutil::subscript(x_param_bootflx_65024,2) == ::flx::rtl::strutil::subscript(::std::string("\\"),0)) ) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(processing_stage1_mv_65107%2==1) ) goto _ml65109_L104283;
      _urv104278  = x_param_bootflx_65024; //init
      goto _end_hash_528164525;
    _ml65109_L104283:;
/*match case 2:any*/
      _urv104278  = _fI82124_join((*_vI67558_control).GRAMMAR_DIR, x_param_bootflx_65024); //init
    _end_hash_528164525:;
      *(&_vI67558_control->STDGRAMMAR)  = _urv104278; //assign simple
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104289_L104289;
      {
      _a13708t_107090 _tmp108367 = (::std::string("[flx] ") + (::std::string("STDGRAMMAR = ") + (*_vI67558_control).STDGRAMMAR ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108367)));
      }
    _end_104289_L104289:;
      _vI104293_f  = _fI82124_join((*_vI67558_control).STDGRAMMAR, ::std::string("syntax.automaton")); //init
      if(!((::flx::rtl::strutil::substr(_vI104293_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L104294;
      _vI104293_f = ::flx::rtl::strutil::substr(_vI104293_f,0,1) + ::flx::rtl::strutil::substr(_vI104293_f,2,_vI104293_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L104297;
    _ifdoend_bootflx_64478_L104294:;
      if(!((::flx::rtl::strutil::subscript(_vI104293_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L104297;
      _vI104293_f = (::flx::rtl::strutil::substr(_vI104293_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI104293_f,2,_vI104293_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L104297:;
      if(!((::flx::rtl::strutil::subscript(_vI104293_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L104299;
      _vI104293_f = ::flx::rtl::strutil::substr(_vI104293_f,1,_vI104293_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L104299:;
      _vI104291_k = _fI82124_join((*_vI67557_config).FLX_CACHE_DIR, _vI104293_f); //assign simple
      dflt_automaton = _vI104291_k; //assign simple
      processing_stage1_mv_65112  = (*_vI67558_control).AUTOMATON; //init
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == processing_stage1_mv_65112)) ) goto _ml65114_L104306;
      _urv104303  = dflt_automaton; //init
      goto _end_hash_547623704;
    _ml65114_L104306:;
/*match case 2:x_param_bootflx_65025*/
      x_param_bootflx_65025 = processing_stage1_mv_65112; //assign simple
      _urv104303  = x_param_bootflx_65025; //init
    _end_hash_547623704:;
      *(&_vI67558_control->AUTOMATON)  = _urv104303; //assign simple
      if(!(*_vI67558_control).DEBUG_FLX ) goto _end_104312_L104312;
      {
      _a13708t_107090 _tmp108368 = (::std::string("[flx] ") + (::std::string("AUTOMATON = ") + (*_vI67558_control).AUTOMATON ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108368)));
      }
    _end_104312_L104312:;
      processing_stage1_mv_65117  = !(((*xloopctl).dir == ::std::string(""))) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(processing_stage1_mv_65117%2==1) ) goto _ml65119_L104315;
      _urv104313  = (*xloopctl).dir; //init
      goto _end_hash_479715676;
    _ml65119_L104315:;
/*match case 2:any*/
      _urv104313  = ::std::string("."); //init
    _end_hash_479715676:;
      *(&xloopctl->dir)  = _urv104313; //assign simple
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------
//FUNCTION <105277>: flx_processing::cxx_link_shared_library::_lam_65511: Apply method
_a13708t_107090 _lam_65511::apply(_a13708t_107090 const &_arg ){
  _vI105278_s = _arg;
      return ::std::string("--path+=") + _vI105278_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2488,11,2488,40); // HACK! 
}

//------------------------------
//FUNCTION <65710>: toolchain_msvc_win32::dependency_extension: Apply method
_a13708t_107090 dependency_extension::apply(){
      return ::std::string(".d");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1735,3,1735,45); // HACK! 
}

//------------------------------
//FUNCTION <105450>: flx_processing::cxx_compile_static1_uncurry: Apply method
int cxx_compile_static1_uncurry::apply(_tt107292 const &_arg ){
  _vI105455_ehandler_uncurry = _arg.mem_0;
  _vI105465_src = _arg.mem_1;
  _vI105454_dst = _arg.mem_2;
      {
      __timeb64* _tmp108369 = (__timeb64*)&_vI105693_tv;
      _ftime64_s(((_tmp108369)));
      }
      _genout_urv98705  = (static_cast<double>((_vI105693_tv.time))) + ((static_cast<double>((_vI105693_tv.millitm))) / 1.0e3 ) ; //init
      _vI105471_t0 = _genout_urv98705; //assign simple
      _vI105457_pkgs = find_cxx_pkgs(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105465_src) /* apply_stack */; //assign simple
      *(&((_art107120*)&ptrflx_processing->_vI105441_control)->extra_pkgs)  = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.extra_pkgs, _vI105457_pkgs)) /* apply_stack */; //assign simple
      pkg_cflags = (void* /*VR_nullptr*/ )0; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI105457_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65326_L105463;
      {
      _a13708t_107090 _tmp108370 = (::std::string("[flx:cxx_compile_static1] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105457_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108370)));
      }
      fflush(stderr);
      _vI105694_r = _fI105695_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108371 = (void**)&_vI105694_r;
      _rev(((_tmp108371)),(_a13708t_107090*)0);
      }
      _vI105464_PKGCONFIG_PATH = _vI105694_r; //assign simple
      _vI105461_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI105464_PKGCONFIG_PATH, ::std::string("--field=cflags"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI105457_pkgs)) /* apply_stack */, ptrflx_processing->_vI105441_control.pkgs)) /* apply_stack */; //assign simple
      _genout_urv98752  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI105461_allargs) /* apply_stack */; //init
      _ds2_65500 = _genout_urv98752; //assign simple
      _vI105466_ret = _ds2_65500.mem_0; //assign simple
      mycflags = _ds2_65500.mem_1; //assign simple
      if(!(!((_vI105466_ret == 0)) ) ) goto _ifdoelse_bootflx_65328_L105472;
      {
      _a13708t_107090 _tmp108372 = (((::std::string("[flx:cxx_compile_static1] Error ") + ::flx::rtl::strutil::str<int>(_vI105466_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105461_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108372)));
      }
      fflush(stderr);
      ::std::exit(1);
    _ifdoelse_bootflx_65328_L105472:;
      pkg_cflags = mycflags; //assign simple
    _ifdoelse_bootflx_65326_L105463:;
      _vI105707_cxx_compile_static1__apos_2_mv_65502  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105707_cxx_compile_static1__apos_2_mv_65502%2==1) ) goto _ml65504_L105708;
      goto _end_hash_1056141264;
    _ml65504_L105708:;
/*match case 2:any*/
    _end_hash_1056141264:;
      _vI105711_cxx_compile_static1__apos_2_mv_65502  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105711_cxx_compile_static1__apos_2_mv_65502%2==1) ) goto _ml65504_L105712;
      _urv98784  = (FLX_NEWP(echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_845538492;
    _ml65504_L105712:;
/*match case 2:any*/
      _urv98784  = (FLX_NEWP(_pI105442_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_845538492:;
      _vI105715_cxx_compile_static1__apos_2_mv_65502  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105715_cxx_compile_static1__apos_2_mv_65502%2==1) ) goto _ml65504_L105716;
      goto _end_hash_973679542;
    _ml65504_L105716:;
/*match case 2:any*/
    _end_hash_973679542:;
      _vI105719_cxx_compile_static1__apos_2_mv_65502  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105719_cxx_compile_static1__apos_2_mv_65502%2==1) ) goto _ml65504_L105720;
      goto _end_hash_615136615;
    _ml65504_L105720:;
/*match case 2:any*/
    _end_hash_615136615:;
      _vI105456_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI105441_control.CCFLAGS, pkg_cflags)) /* apply_stack */, _urv98784, ptrflx_processing->_vI105142_dflt_clang_config.dynamic_libraries, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_RTL_DIRS, ptrflx_processing->_vI105441_control.EXTRA_INCLUDE_DIRS)) /* apply_stack */, ptrflx_processing->_vI105142_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI105441_control.MACROS, ptrflx_processing->_vI105142_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      _genout_urv98829  = cxx_depcheck(FLX_FPAR_PASS_ONLY)
      .apply(_tt107593(_vI105456_tc, _vI105465_src, _vI105454_dst)) /* apply_stack */; //init
      if(!((ptrflx_processing->_vI105441_control.RECOMPILE == 1) || !_genout_urv98829  ) ) goto _ifdoend_bootflx_65329_L105470;
      _vI105459_result = (_vI105456_tc.cxx_static_object_compiler)->clone()
      ->apply(_art107177(_vI105454_dst, _vI105465_src)) /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI105441_control.TIME == 1)) ) goto _end_98839_L105730;
      {
      __timeb64* _tmp108373 = (__timeb64*)&_vI105729_tv;
      _ftime64_s(((_tmp108373)));
      }
      _vI105728__genout_urv95543  = (static_cast<double>((_vI105729_tv.time))) + ((static_cast<double>((_vI105729_tv.millitm))) / 1.0e3 ) ; //init
      _vI105723_elapsed = _vI105728__genout_urv95543 - _vI105471_t0 ; //assign simple
      _vI105724_minutes = ::std::floor((_vI105723_elapsed / 60.0 )); //assign simple
      _vI105725_seconds = _vI105723_elapsed - (_vI105724_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108374 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105724_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105725_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Static c++   : ") + _vI105465_src ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108374)));
      }
      fflush(stdout);
    _end_98839_L105730:;
      if(!(!((_vI105459_result == 0)) ) ) goto _ifdoelse_bootflx_65332_L105468;
      {
      _a13708t_107090 _tmp108375 = ((::std::string("[flx] C++ compilation ") + _vI105465_src ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108375)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65332_L105468:;
      return _vI105459_result;
    _ifdoend_bootflx_65329_L105470:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2389,3,2389,4); // HACK! 
}

//------------------------------
//FUNCTION <92056>: toolchain_msvc_win32::xpopen::aux_uncurry: Apply method
void* _fI92056_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92057_inp_uncurry = _arg.data[0];
  _vI92058_out = _arg.data[1];
    start_90421_L92065:;
      _vI92061_aux__apos_2_mv_1322  = _vI92057_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92061_aux__apos_2_mv_1322)==0) ) goto _ml1324_L92060;
      return _vI92058_out;
    _ml1324_L92060:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI92061_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI92064__lam_1326)(FLX_FPAR_PASS this, ptrxpopen, ptrtoolchain_msvc_win32))) ) goto _ml1325_L92059;
      _vI92062_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI92061_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI92063_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI92061_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI92058_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92058_out, _fI14710_str(_vI92062_h_param_std_1208)))); //init
      _vI92057_inp_uncurry  = _vI92063_t_param_std_1207; //init
      goto start_90421_L92065;
    _ml1325_L92059:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <95384>: cal_depvars::_lam_65233: Apply method
 ::flx::rtl::cl_t _lam_65233::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1796,7,1796,14); // HACK! 
}

//------------------------------

//PROCEDURE <68096:> flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::_lam_64719: Call method
::flx::rtl::con_t * _lam_64719::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI68098_s = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <68096:> flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::_lam_64719: Resume method
::flx::rtl::con_t *_lam_64719::resume(){
      {
      void* _tmp108377 = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrhandle_pkg->trace, ptrhandle_pkg->_vI68127_pkg)));
      ::flx::rtl::con_t *tmp = _caller;
      _caller = 0;
      return (FLX_NEWP(handle_pkg)(FLX_FPAR_PASS ptrflx_pkgconfig))
      ->call(tmp, _tt107116(_vI68098_s, (_tmp108377)));
      }
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <106722>: flx_processing::cxx_compile_static::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI106722__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <91123>: process_config_text_uncurry::_lam_2916: Apply method
 ::flx::rtl::cl_t _lam_2916::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",567,5,567,9); // HACK! 
}

//------------------------------
//FUNCTION <65734>: toolchain_msvc_win32::_lam_65647: Apply method
 ::flx::rtl::cl_t _lam_65647::apply(_a13708t_107090 const &_arg ){
  _vI65736_s = _arg;
      return (::flx::rtl::strutil::substr(_vI65736_s,0,::std::string("/I").size()) == ::std::string("/I")) || (::flx::rtl::strutil::substr(_vI65736_s,0,::std::string("-I").size()) == ::std::string("-I")) ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1748,6,1748,56); // HACK! 
}

//------------------------------
//FUNCTION <93099>: generic_cxx_compile_for_static_uncurry::aux_uncurry: Apply method
void* _fI93099_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93100_inp_uncurry = _arg.data[0];
  _vI93101_out = _arg.data[1];
    start_90421_L93108:;
      _vI93104_aux__apos_2_mv_1322  = _vI93100_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93104_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93103;
      return _vI93101_out;
    _ml1324_L93103:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93104_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93107__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_cxx_compile_for_static_uncurry))) ) goto _ml1325_L93102;
      _vI93105_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93104_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93106_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93104_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93101_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93101_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93105_h_param_std_1208) /* apply_stack */))); //init
      _vI93100_inp_uncurry  = _vI93106_t_param_std_1207; //init
      goto start_90421_L93108;
    _ml1325_L93102:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <103102>: setup-from-file_uncurry::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI103102__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <96449>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI96449__lam_1398::apply(_a13708t_107090 const &_arg ){
  _vI96450_x = _arg;
      return eq(_vI96450_x, ptr_lam_64707->_vI68084_key);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <105192>: flx_processing::cal_cxx_uptodate: Apply method
 ::flx::rtl::cl_t cal_cxx_uptodate::apply(_tt107307 const &_arg ){
  _vI105197_debugln = _arg.mem_0;
  OUTPUT_DIR = _arg.mem_1;
  _vI105199_f = _arg.mem_2;
      _vI105573_f  = _vI105199_f + ::std::string(".dep") ; //init
      if(!((::flx::rtl::strutil::substr(_vI105573_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L105574;
      _vI105573_f = ::flx::rtl::strutil::substr(_vI105573_f,0,1) + ::flx::rtl::strutil::substr(_vI105573_f,2,_vI105573_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L105577;
    _ifdoend_bootflx_64478_L105574:;
      if(!((::flx::rtl::strutil::subscript(_vI105573_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L105577;
      _vI105573_f = (::flx::rtl::strutil::substr(_vI105573_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI105573_f,2,_vI105573_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L105577:;
      if(!((::flx::rtl::strutil::subscript(_vI105573_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L105579;
      _vI105573_f = ::flx::rtl::strutil::substr(_vI105573_f,1,_vI105573_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L105579:;
      _vI105572_k = _fI82124_join(OUTPUT_DIR, _vI105573_f); //assign simple
      depfilename = _vI105572_k; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI105197_debugln)->clone()
      ->call(0, ::std::string("Dependency file name = ") + depfilename );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      depfiletime = dfiletime(depfilename, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/))); //assign simple
      if(!((depfiletime == (static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/))))) ) goto _ifdoend_bootflx_65281_L105200;
      {
        ::flx::rtl::con_t *_p = (_vI105197_debugln)->clone()
      ->call(0, ::std::string("Dependency file doesn't exist"));
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      return 0;
    _ifdoend_bootflx_65281_L105200:;
      _vI105195_deptime = cal_time_from_flxdepfile(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107589(_vI105197_debugln, depfilename)) /* apply_stack */; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI105197_debugln)->clone()
      ->call(0, ::std::string("dep time = ") + strfiletime(FLX_FPAR_PASS _vI105195_deptime) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      {
        ::flx::rtl::con_t *_p = (_vI105197_debugln)->clone()
      ->call(0, ::std::string("depfile time = ") + strfiletime(FLX_FPAR_PASS depfiletime) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      cxx_uptodate = (_vI105195_deptime < depfiletime); //assign simple
      cal_cxx_uptodate_mv_65467  = cxx_uptodate; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(cal_cxx_uptodate_mv_65467%2==1) ) goto _ml65469_L105582;
      _urv98018  = ::std::string(""); //init
      goto _end_hash_473545530;
    _ml65469_L105582:;
/*match case 2:any*/
      _urv98018  = ::std::string(" NOT "); //init
    _end_hash_473545530:;
      {
        ::flx::rtl::con_t *_p = (_vI105197_debugln)->clone()
      ->call(0, (::std::string("cxx generated by flxg is = ") + _urv98018 ) + ::std::string("uptodate") );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      return cxx_uptodate;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2153,3,2153,4); // HACK! 
}

//------------------------------
//C PROC <7103>: pexit
void pexit(int _vI7106_e){
  _a13708t_107090 _vI99043_bad;
  _at107111 _vI99042_b;
  _a13708t_107090 _urv99041;
  _a13708t_107090 bad;
  _at107111 _vI99036_b;
  _a13708t_107090 _urv99034;
  _a15532t_107105 _vI7105_err;
      if(!(!((_vI7106_e == 0)) ) ) goto _ifdoelse_std_435_L7110;
      if(!((_vI7106_e == -1)) ) goto _ifdoend_std_436_L7107;
      _vI7105_err = errno; //assign simple
      if(!(((_vI7105_err ) == 0)) ) goto _ifdoend_std_2456_L99038;
      _urv99034  = ::std::string("OK"); //init
      goto _end_inline_str_99040_L99040;
    _ifdoend_std_2456_L99038:;
      bad = ::std::string("[strerror_r] Failed to find text for error number ") + ::flx::rtl::strutil::str<int>((_vI7105_err )) ; //assign simple
      {
      char* _tmp108380 = (((_at107111*)&_vI99036_b))->data;
      char* _tmp108381 = ((char*)bad.c_str());
      _a5038t_107106 _tmp108382 = static_cast<_a5038t_107106>(1000)/*int.flx: ctor size from _a5038t_107106*/;
      (void)::std::strncpy(((_tmp108380)),((_tmp108381)),((_tmp108382)));
      }
      {
      char* _tmp108383 = (((_at107111*)&_vI99036_b))->data;
      _a5038t_107106 _tmp108384 = (1000)/*int.flx: ctor size IDENT*/;
      (void)strerror_s(((_tmp108383)), ((_tmp108384)), _vI7105_err);
      }
      _urv99034  = ::std::string(((((_at107111*)&_vI99036_b))->data)); //init
    _end_inline_str_99040_L99040:;
      if(!(((_vI7105_err ) == 0)) ) goto _ifdoend_std_2456_L99045;
      _urv99041  = ::std::string("OK"); //init
      goto _end_inline_strerror_99047_L99047;
    _ifdoend_std_2456_L99045:;
      _vI99043_bad = ::std::string("[strerror_r] Failed to find text for error number ") + ::flx::rtl::strutil::str<int>((_vI7105_err )) ; //assign simple
      {
      char* _tmp108385 = (((_at107111*)&_vI99042_b))->data;
      char* _tmp108386 = ((char*)_vI99043_bad.c_str());
      _a5038t_107106 _tmp108387 = static_cast<_a5038t_107106>(1000)/*int.flx: ctor size from _a5038t_107106*/;
      (void)::std::strncpy(((_tmp108385)),((_tmp108386)),((_tmp108387)));
      }
      {
      char* _tmp108388 = (((_at107111*)&_vI99042_b))->data;
      _a5038t_107106 _tmp108389 = (1000)/*int.flx: ctor size IDENT*/;
      (void)strerror_s(((_tmp108388)), ((_tmp108389)), _vI7105_err);
      }
      _urv99041  = ::std::string(((((_at107111*)&_vI99042_b))->data)); //init
    _end_inline_strerror_99047_L99047:;
      {
      _a13708t_107090 _tmp108390 = (((::std::string("Error ") + _urv99034 ) + ::std::string(" in flx: ") ) + _urv99041 ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108390)));
      }
      fflush(stderr);
      {
      int _tmp108391 = _vI7105_err ;
      ::std::exit(((_tmp108391)));
      }
      goto _ifdoelse_std_435_L7110;
    _ifdoend_std_436_L7107:;
      {
      _a13708t_107090 _tmp108392 = (::std::string("Unknown error in shell ") + ::flx::rtl::strutil::str<int>(_vI7106_e) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108392)));
      }
      fflush(stderr);
      ::std::exit(3);
    _ifdoelse_std_435_L7110:;
      ::std::exit(_vI7106_e);
      return; // proc return from stackable 
}
//------------------------------
//FUNCTION <103106>: setup-from-file_uncurry::_lam_65053: Apply method
 ::flx::rtl::cl_t _lam_65053::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",959,3,959,7); // HACK! 
}

//------------------------------
//FUNCTION <104460>: gramtime_uncurry::aux: Apply method
void* _fI104460_aux::apply(_at107115 const &_arg ){
  _vI104461_inp = _arg.data[0];
  _vI104462_out = _arg.data[1];
    start_92687_L104481:;
      _vI104465_aux_mv_1412  = _vI104461_inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI104465_aux_mv_1412)==0) ) goto _ml1414_L104464;
      return _fI104468_aux_uncurry(FLX_FPAR_PASS this, ptrgramtime_uncurry)
      .apply(_at107115(_vI104462_out, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1414_L104464:;
/*match case 2:|Snoc (t_param_std_1240, h_param_std_1241)*/
      if(!andthen(FLX_VNI(_vI104465_aux_mv_1412)==1, (FLX_NEWP(_fI104478__lam_1421)(FLX_FPAR_PASS this, ptrgramtime_uncurry))) ) goto _ml1415_L104463;
      _vI104466_h_param_std_1241 = (*((_tt107095*)FLX_VNP(_vI104465_aux_mv_1412))).mem_1; //assign simple
      _vI104467_t_param_std_1240 = (*((_tt107095*)FLX_VNP(_vI104465_aux_mv_1412))).mem_0; //assign simple
      _vI104480_aux_mv_1417  = _lam_64493(ptrgramtime_uncurry)
      .apply(_vI104466_h_param_std_1241) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI104480_aux_mv_1417%2==1) ) goto _ml1419_L104479;
/*parallel assignment*/
      _vI104462_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104462_out, _vI104466_h_param_std_1241))); //init
      _vI104461_inp  = _vI104467_t_param_std_1240; //init
      goto start_92687_L104481;
    _ml1419_L104479:;
/*match case 2:any*/
/*parallel assignment*/
      _vI104461_inp  = _vI104467_t_param_std_1240; //init
      goto start_92687_L104481;
    _ml1415_L104463:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",550,7,550,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",552,5,552,6); // HACK! 
}

//------------------------------
//FUNCTION <104478>: gramtime_uncurry::aux::_lam_1421: Apply method
 ::flx::rtl::cl_t _fI104478__lam_1421::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",547,9,547,17); // HACK! 
}

//------------------------------
//FUNCTION <96411>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::aux_uncurry: Apply method
void* _fI96411_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96412_inp_uncurry = _arg.data[0];
  _vI96413_out = _arg.data[1];
    start_90421_L96420:;
      _vI96416_aux__apos_2_mv_1322  = _vI96412_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96416_aux__apos_2_mv_1322)==0) ) goto _ml1324_L96415;
      return _vI96413_out;
    _ml1324_L96415:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI96416_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI96419__lam_1326)(FLX_FPAR_PASS this, ptr_lam_64707, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1325_L96414;
      _vI96417_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI96416_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI96418_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI96416_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI96413_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96413_out, _fI96375_search_and_replace__apos_2(FLX_FPAR_PASS ptr_lam_64707, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_vI96417_h_param_std_1208) /* apply_stack */))); //init
      _vI96412_inp_uncurry  = _vI96418_t_param_std_1207; //init
      goto start_90421_L96420;
    _ml1325_L96414:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------

//PROCEDURE <68057:> flx_pkgconfig::tail_val: Call method
::flx::rtl::con_t * tail_val::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI68059_v = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <68057:> flx_pkgconfig::tail_val: Resume method
::flx::rtl::con_t *tail_val::resume(){
      ptrflx_pkgconfig->_vI68017_result = _fI95907_aux(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at107115(ptrflx_pkgconfig->_vI68017_result, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <67832>: FlxPkgConfigQuery::getclosure: Apply method
_ft107162* getclosure::apply(_pt107161* const &_arg ){
  _vI67842_ehandler = _arg;
      return (FLX_NEWP(_fI67834_getclosure__apos_2)(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",559,5,559,6); // HACK! 
}

//------------------------------
//FUNCTION <98567>: cxx_depcheck::aux: Apply method
void* _fI98567_aux::apply(_at107115 const &_arg ){
  _vI98568_inp = _arg.data[0];
  _vI98569_out = _arg.data[1];
    start_92687_L98588:;
      _vI98572_aux_mv_1412  = _vI98568_inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI98572_aux_mv_1412)==0) ) goto _ml1414_L98571;
      return _fI98575_aux_uncurry(FLX_FPAR_PASS this, ptrcxx_depcheck)
      .apply(_at107115(_vI98569_out, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1414_L98571:;
/*match case 2:|Snoc (t_param_std_1240, h_param_std_1241)*/
      if(!andthen(FLX_VNI(_vI98572_aux_mv_1412)==1, (FLX_NEWP(_fI98585__lam_1421)(FLX_FPAR_PASS this, ptrcxx_depcheck))) ) goto _ml1415_L98570;
      _vI98573_h_param_std_1241 = (*((_tt107095*)FLX_VNP(_vI98572_aux_mv_1412))).mem_1; //assign simple
      _vI98574_t_param_std_1240 = (*((_tt107095*)FLX_VNP(_vI98572_aux_mv_1412))).mem_0; //assign simple
      _vI98587_aux_mv_1417  = _lam_65574(ptrcxx_depcheck)
      .apply(_vI98573_h_param_std_1241) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI98587_aux_mv_1417%2==1) ) goto _ml1419_L98586;
/*parallel assignment*/
      _vI98569_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI98569_out, _vI98573_h_param_std_1241))); //init
      _vI98568_inp  = _vI98574_t_param_std_1240; //init
      goto start_92687_L98588;
    _ml1419_L98586:;
/*match case 2:any*/
/*parallel assignment*/
      _vI98568_inp  = _vI98574_t_param_std_1240; //init
      goto start_92687_L98588;
    _ml1415_L98570:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",550,7,550,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",552,5,552,6); // HACK! 
}

//------------------------------
//FUNCTION <103110>: setup-from-file_uncurry::_lam_65051: Apply method
 ::flx::rtl::cl_t _lam_65051::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",920,7,920,12); // HACK! 
}

//------------------------------
//FUNCTION <104177>: parse::_lam_2773: Apply method
 ::flx::rtl::cl_t _lam_2773::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/program.fdoc",1130,7,1130,11); // HACK! 
}

//------------------------------
//FUNCTION <66007>: toolchain_gcc_osx: Apply method
_art107183 toolchain_gcc_osx::apply(_art107173 const &_arg ){
  _vI66096_config = _arg;
      _vI93729_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 3)) ) goto _ifdoelse_std_1191_L93725;
      _vI93730_i = (static_cast<int>(3)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108396 = (int*)&_vI93730_i;
      ++*((_tmp108396));
      }
    redo__ll_lists_4854_L93728:;
      if(FLX_UNLIKELY(!((0 < _vI93730_i)) )) goto _ifdoelse_std_1191_L93725;
      {
      int* _tmp108397 = (int*)&_vI93730_i;
      --*((_tmp108397));
      }
      _vI93729_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93729_o, (_at107185(::std::string("-w"), ::std::string("-Wfatal-errors"), ::std::string("-Wno-invalid-offsetof")).data)[reinterpret< ::flx::rtl::cl_t>(_vI93730_i)]))); //assign simple
      goto redo__ll_lists_4854_L93728;
    _ifdoelse_std_1191_L93725:;
      _vI66009_cxx_compile_warning_flags = _vI93729_o; //assign simple
      _vI93739_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L93735;
      _vI93740_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108398 = (int*)&_vI93740_i;
      ++*((_tmp108398));
      }
    redo__ll_lists_4854_L93738:;
      if(FLX_UNLIKELY(!((0 < _vI93740_i)) )) goto _ifdoelse_std_1191_L93735;
      {
      int* _tmp108399 = (int*)&_vI93740_i;
      --*((_tmp108399));
      }
      _vI93739_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93739_o, (_at107092(::std::string("-w"), ::std::string("-Wfatal-errors")).data)[reinterpret< ::flx::rtl::cl_t>(_vI93740_i)]))); //assign simple
      goto redo__ll_lists_4854_L93738;
    _ifdoelse_std_1191_L93735:;
      _vI66010_c_compile_warning_flags = _vI93739_o; //assign simple
      _vI66011_c_compiler = ::std::string("gcc"); //assign simple
      _vI66012_cxx_compiler = ::std::string("g++"); //assign simple
      _vI66013_linker = ::std::string("g++"); //assign simple
      _vI66014_ccflags_for_dynamic_link = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-dynamiclib")))); //assign simple
      _vI66015_base_c_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI66010_c_compile_warning_flags, _vI66096_config.ccflags)) /* apply_stack */, ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), ::std::string("-c")))), ::std::string("-g")))); //assign simple
      _vI66016_base_cxx_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI66009_cxx_compile_warning_flags, _vI66096_config.ccflags)) /* apply_stack */, ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-std=c++11")))), ::std::string("-O1")))), ::std::string("-c")))), ::std::string("-g")))); //assign simple
      return _art107183((FLX_NEWP(_fI66045_c_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66064_c_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66060_c_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66023_cxx_compiler_vendor)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66051_cxx_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66076_cxx_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66072_cxx_static_library_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66068_cxx_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66039_debug_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66025_dependency_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66057_dependency_parser)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66088_dynamic_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66035_dynamic_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66092_dynamic_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66031_dynamic_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66027_executable_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66041_get_base_c_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66043_get_base_cxx_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66019_host_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66037_pathname_separator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66084_static_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66033_static_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66080_static_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66029_static_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66021_target_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66017_whatami)(FLX_FPAR_PASS this)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1171,1,1171,2); // HACK! 
}

//------------------------------
//FUNCTION <7322>: find_sym: Apply method
_a5050t_107416 find_sym::apply(_tt107429 const &_arg ){
  lib = _arg.mem_0;
  sym = _arg.mem_1;
      if(!(((lib->filename) == ::std::string(""))) ) goto _ifdoend_std_471_L7337;
      ppregistry = (void****)(void*)&(PTF gcp->collector->module_registry); //assign simple
      pregistry = *ppregistry ; //assign simple
      if(!(0==pregistry) ) goto _ifdoelse_std_462_L94361;
      _genout_urv94366  = _mkjudy(FLX_POINTER_TO_THREAD_FRAME, &_a13365t_107413_ptr_map); //init
      _genout_urv94258  = _genout_urv94366; //init
      _genout_urv94252  = _genout_urv94258; //init
      pregistry = (_a13367t_107412*)new(*PTF gcp, _a13367t_107412_ptr_map, true) _a13367t_107412 (_genout_urv94252); //assign simple
      *ppregistry  = pregistry; //assign simple
      {
      _a5050t_107416 _tmp108400 = (_a5050t_107416)(pregistry);
      PTF gcp->collector->add_root (((_tmp108400)));
      }
    _ifdoelse_std_462_L94361:;
      _genout_urv94357  = *pregistry ; //init
      reg = _genout_urv94357; //assign simple
      _vI94368_key  = lib->modulename; //init
      {
      char* _tmp108401 = ((char*)((_a13708t_107090*)&_vI94368_key)->c_str());
      JError_t* _tmp108402 = (JError_t*)&_vI94369_err;
      _a13298t_107433** _tmp108403 = (_a13298t_107433**)((_a13367t_107412***)&_vI94370_slot);
      *((_tmp108403))=(Word_t*)JudySLGet(*reg,(unsigned char*)((_tmp108401)),((_tmp108402)));
      }
      _vI94372_get__apos_2_mv_1761  = (0==_vI94370_slot); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI94372_get__apos_2_mv_1761%2==1) ) goto _ml1763_L94371;
      find_sym_mv_504  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_get_uncurry_94375_L94375;
    _ml1763_L94371:;
/*match case 2:any*/
      find_sym_mv_504  = FLX_VNR(1, new(*PTF gcp, _a13367t_107412_ptr_map, true) _a13367t_107412 (*(*_vI94370_slot ) )); //init
    _end_inline_get_uncurry_94375_L94375:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(find_sym_mv_504)==0) ) goto _ml506_L7333;
      return NULL;
    _ml506_L7333:;
/*match case 2:|Some dict_param_std_474*/
      if(!andthen(FLX_VNI(find_sym_mv_504)==1, (FLX_NEWP(_lam_513)(FLX_FPAR_PASS this))) ) goto _ml507_L7336;
      dict_param_std_474 = *((_a13367t_107412*)FLX_VNP(find_sym_mv_504)); //assign simple
      key  = sym; //init
      {
      char* _tmp108404 = ((char*)((_a13708t_107090*)&key)->c_str());
      JError_t* _tmp108405 = (JError_t*)&err;
      _a13298t_107433** _tmp108406 = (_a13298t_107433**)((_a5050t_107416***)&slot);
      *((_tmp108406))=(Word_t*)JudySLGet(*dict_param_std_474,(unsigned char*)((_tmp108404)),((_tmp108405)));
      }
      _vI94388_get__apos_2_mv_1761  = (0==slot); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI94388_get__apos_2_mv_1761%2==1) ) goto _ml1763_L94387;
      find_sym_mv_508  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_get_uncurry_94391_L94391;
    _ml1763_L94387:;
/*match case 2:any*/
      find_sym_mv_508  = FLX_VNR(1, new(*PTF gcp, _a5050t_107416_ptr_map, true) _a5050t_107416 (*(*slot ) )); //init
    _end_inline_get_uncurry_94391_L94391:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(find_sym_mv_508)==0) ) goto _ml510_L7334;
      return NULL;
    _ml510_L7334:;
/*match case 2:|Some sym_param_std_476_param_std_478*/
      if(!andthen(FLX_VNI(find_sym_mv_508)==1, (FLX_NEWP(_lam_512)(FLX_FPAR_PASS this))) ) goto _ml511_L7335;
      sym_param_std_476_param_std_478 = *((_a5050t_107416*)FLX_VNP(find_sym_mv_508)); //assign simple
      return sym_param_std_476_param_std_478;
    _ml511_L7335:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",892,9,892,18);
;
    _ml507_L7336:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",893,7,893,16);
;
    _ifdoend_std_471_L7337:;
      return FLX_NATIVE_SDLSYM(lib->library,sym.c_str());
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",897,3,897,4); // HACK! 
}

//------------------------------
//FUNCTION <90488>: cat_uncurry::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <105353>: flx_processing::check_binary_uptodate::maxf: Apply method
_ft107543* _fI105353_maxf::apply(double const &_arg ){
  _vI105356_t = _arg;
      return (FLX_NEWP(_fI105354_maxf__apos_2)(FLX_FPAR_PASS this, ptrcheck_binary_uptodate, ptrflx_processing));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2723,5,2723,95); // HACK! 
}

//------------------------------
//FUNCTION <106912>: flx_processing::check_binary_uptodate::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI106912__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <65832>: toolchain_msvc_win32::c_dynamic_object_compiler: Apply method
int c_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI65837_spec = _arg;
      _genout_urv92417  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_msvc_win32->macros, ::std::string("/Tc") + _vI65837_spec.src ))), ::std::string("/c")))), ::std::string("/Zi")))), ::std::string("/MDd")))), ::std::string("/nologo")))), ::std::string("cl.exe")))), ptrtoolchain_msvc_win32->include_switches)) /* apply_stack */, ::std::string("/Fo") + _vI65837_spec.dst )) /* apply_stack */) /* apply_stack */; //init
      _ds2_65675 = _genout_urv92417; //assign simple
      _vI65835_result = _ds2_65675.mem_0; //assign simple
      _vI65836_text = _ds2_65675.mem_1; //assign simple
      {
      checkwarn(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .stack_call(_tt107175(_vI65835_result, _vI65836_text));
      }
      return _vI65835_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1849,3,1849,4); // HACK! 
}

//------------------------------
//FUNCTION <106904>: flx_processing::check_binary_uptodate::aux_uncurry: Apply method
double _fI106904_aux_uncurry::apply(_tt107527 const &_arg ){
  _vI106905_init_uncurry = _arg.mem_0;
  _vI106906_x = _arg.mem_1;
    start_97926_L106913:;
      _vI106909_aux__apos_2_mv_1297  = _vI106906_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106909_aux__apos_2_mv_1297)==0) ) goto _ml1299_L106908;
      return _vI106905_init_uncurry;
    _ml1299_L106908:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI106909_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI106912__lam_1301)(FLX_FPAR_PASS this, ptr_fI106333_check_binary_uptodate, ptrflx_processing))) ) goto _ml1300_L106907;
      _vI106910_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI106909_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI106911_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI106909_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI106906_x  = _vI106911_t_param_std_1199; //init
      _vI106905_init_uncurry  = ((FLX_NEWP(_fI106334_maxf)(FLX_FPAR_PASS ptr_fI106333_check_binary_uptodate, ptrflx_processing))
      ->apply(_vI106905_init_uncurry))->clone()
      ->apply(_vI106910_h_param_std_1200) /* general apply */; //init
      goto start_97926_L106913;
    _ml1300_L106907:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <96589>: flx_pkgconfig::handle_pkg::_lam_64696::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI96589__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <92382>: toolchain_msvc_win32::dependency_parser::_lam_1398: Apply method
 ::flx::rtl::cl_t _lam_1398::apply(_a13708t_107090 const &_arg ){
  _vI92383_x = _arg;
      return eq(_vI92383_x, ptrdependency_parser->name);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <66021>: toolchain_gcc_osx::target_os: Apply method
_a13708t_107090 _fI66021_target_os::apply(){
      return ::std::string("OSX");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",968,3,968,35); // HACK! 
}

//------------------------------
//FUNCTION <106441>: flx_processing::cxx_compile_static1_uncurry::_lam_65499: Apply method
_a13708t_107090 _fI106441__lam_65499::apply(_a13708t_107090 const &_arg ){
  _vI106450_s = _arg;
      return ::std::string("--path+=") + _vI106450_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2355,11,2355,40); // HACK! 
}

//------------------------------
//FUNCTION <65856>: toolchain_msvc_win32::static_library_linker: Apply method
int static_library_linker::apply(_art107181 const &_arg ){
  _vI65861_spec = _arg;
      _genout_urv92455  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI65861_spec.srcs, ::std::string("/OUT:") + _vI65861_spec.dst ))), ::std::string("lib.exe"))))) /* apply_stack */; //init
      _ds2_65679 = _genout_urv92455; //assign simple
      _vI65859_result = _ds2_65679.mem_0; //assign simple
      _vI65860_text = _ds2_65679.mem_1; //assign simple
      {
      checkwarn(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .stack_call(_tt107175(_vI65859_result, _vI65860_text));
      }
      return _vI65859_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1881,3,1881,4); // HACK! 
}

//------------------------------
//FUNCTION <66319>: toolchain_clang_osx::whatami: Apply method
_a13708t_107090 _fI66319_whatami::apply(){
      return ::std::string("toolchain_clang_osx (version 2)");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1455,3,1455,61); // HACK! 
}

//------------------------------

//PROCEDURE <105053:> flx_processing::rfi: Call method
void rfi::stack_call(_a13708t_107090 const &_arg){
  ::flx::rtl::con_t *cc = call(0,_arg);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * rfi::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  dname2 = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <105053:> flx_processing::rfi: Resume method
::flx::rtl::con_t *rfi::resume(){
      if(!((dname2 == ::std::string(".")) || (dname2 == ::std::string("..")) ) ) goto _ifret_std_740_L105064;
      FLX_RETURN // procedure return
    _ifret_std_740_L105064:;
      rfi_mv_798  = (dname2 == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(rfi_mv_798%2==1) ) goto _ml800_L105081;
      _urv94449  = (*ptrflx_processing->_vI68367_control).INDIR; //init
      goto _end_inline_rfi_mf_797_94453_L105082;
    _ml800_L105081:;
/*match case 2:any*/
      _urv94449  = _fI82124_join((*ptrflx_processing->_vI68367_control).INDIR, dname2); //init
    _end_inline_rfi_mf_797_94453_L105082:;
      newpath = _urv94449; //assign simple
      newfiles = filesin(FLX_FPAR_PASS newpath); //assign simple
      rfi_mv_802  = newfiles; //init
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(rfi_mv_802)==0) ) goto _ml804_L105065;
      FLX_RETURN // procedure return
    _ml804_L105065:;
/*match case 2:|Some files_param_std_742*/
      if(!andthen(FLX_VNI(rfi_mv_802)==1, (FLX_NEWP(_lam_816)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml805_L105077;
      files_param_std_742 = *((void**)FLX_VNP(rfi_mv_802)); //assign simple
      _vI105085_xs  = files_param_std_742; //init
      _genout_urv94484  = (FLX_NEWP(_fI105086_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _generator_filesystem_3950 = _genout_urv94484; //assign simple
    continue__ll_filesystem_3916_L105066:;
      rfi_mv_806  = (_generator_filesystem_3950)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some f_param_std_744_param_std_752*/
      if(!andthen(FLX_VNI(rfi_mv_806)==1, (FLX_NEWP(_lam_814)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml808_L105074;
      f_param_std_744_param_std_752 = *((_a13708t_107090*)FLX_VNP(rfi_mv_806)); //assign simple
      if(!((f_param_std_744_param_std_752 == ::std::string(".")) || (f_param_std_744_param_std_752 == ::std::string("..")) ) ) goto _ifdoend_std_745_L105067;
      goto continue__ll_filesystem_3916_L105066;
    _ifdoend_std_745_L105067:;
      _vI105059_d = _fI82124_join(dname2, f_param_std_744_param_std_752); //assign simple
      fullpath = _fI82124_join((*ptrflx_processing->_vI68367_control).INDIR, _vI105059_d); //assign simple
      _vI105061_t = filetype(fullpath); //assign simple
      rfi_mv_809  = _vI105061_t; //init
/*begin match*/
/*match case 1:|REGULAR*/
      if(!(rfi_mv_809%10==4) ) goto _ml811_L105070;
      _vI105062_result = (ptrflx_processing->regex)->Match(::re2::StringPiece(_vI105059_d),0, ::re2::StringPiece(_vI105059_d).length(),::re2::RE2::ANCHOR_BOTH, (::re2::StringPiece*)0, 0); //assign simple
      if(!_vI105062_result ) goto continue__ll_filesystem_3916_L105066;
      ptrflx_processing->foundfiles = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrflx_processing->foundfiles, _vI105059_d))); //assign simple
      goto continue__ll_filesystem_3916_L105066;
      goto continue__ll_filesystem_3916_L105066;
    _ml811_L105070:;
/*match case 2:|DIRECTORY*/
      if(!(rfi_mv_809%10==2) ) goto continue__ll_filesystem_3916_L105066;
      {
      rfi(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI105059_d);
      }
      goto continue__ll_filesystem_3916_L105066;
/*match case 3:any*/
      goto continue__ll_filesystem_3916_L105066;
      goto continue__ll_filesystem_3916_L105066;
    _ml808_L105074:;
/*match case 2:|None*/
      if(!(FLX_VNI(rfi_mv_806)==0) ) goto _ml815_L105075;
      FLX_RETURN // procedure return
    _ml815_L105075:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",612,9,612,13);
;
      FLX_RETURN // procedure return
    _ml805_L105077:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",613,7,613,16);
;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <89205>: toolchain_clang_apple_iOS_maker_uncurry::_lam_65603::_lam_65603'2: Apply method
void* _fI89205__lam_65603__apos_2::apply(_a13708t_107090 const &_arg ){
  arch = _arg;
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptr_lam_65603->_vI89207_acc, ::std::string("-arch")))), arch)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1973,34,1973,93); // HACK! 
}

//------------------------------
//FUNCTION <66110>: toolchain_clang_linux::host_os: Apply method
_a13708t_107090 _fI66110_host_os::apply(){
      return ::std::string("LINUX");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1215,3,1215,35); // HACK! 
}

//------------------------------
//FUNCTION <93084>: generic_cxx_compile_for_static_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93084__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <105523>: flx_processing::find_cxx_pkgs::iterator'2: Apply method
void* _fI105523_iterator__apos_2::apply(){
      _genout_urv97724  = ::flx::rtl::ioutil::readln((ptrfind_cxx_pkgs->_vI105162_f)); //init
      _genout_urv97710  = _genout_urv97724; //init
      _vI105525_iterator__apos_2_mv_577  = _genout_urv97710; //init
/*begin match*/
/*match case 1:""*/
      if(!((::std::string("") == _vI105525_iterator__apos_2_mv_577)) ) goto _ml579_L105524;
      return (void* /*VR_nullptr*/ )0;
    _ml579_L105524:;
/*match case 2:text_param_std_563*/
      text_param_std_563 = _vI105525_iterator__apos_2_mv_577; //assign simple
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (rstrip(text_param_std_563, ::std::string(" \x09\n\x0D\x0C\x0B"))));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/io.fdoc",340,3,340,4); // HACK! 
}

//------------------------------
//FUNCTION <80511>: str: Apply method
_a13708t_107090 str::apply(void* const &_arg ){
  _vI81459_xs = _arg;
      str_mv_1515  = _vI81459_xs; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(str_mv_1515)==0) ) goto _ml1517_L95174;
      _urv95172  = ::std::string(""); //init
      goto _end_inline_str_mf_1514_95206_L95206;
    _ml1517_L95174:;
/*match case 2:|Snoc (os_param_std_1261_param_std_1263_param_std_1265_param_std_1267, o_param_std_1262_param_std_1264_param_std_1266_param_std_1268)*/
      if(!andthen(FLX_VNI(str_mv_1515)==1, (FLX_NEWP(_lam_1520)(FLX_FPAR_PASS this))) ) goto _ml1518_L95173;
      _vI95176_o_pa_hash_135802415 = (*((_tt107095*)FLX_VNP(str_mv_1515))).mem_1; //assign simple
      _vI95177_os_p_hash_17376535 = (*((_tt107095*)FLX_VNP(str_mv_1515))).mem_0; //assign simple
      _vI95189_o = ::std::string("'"); //assign simple
      if(!((0 < _vI95176_o_pa_hash_135802415.size())) ) goto _ifdoelse_std_1977_L95194;
      _vI95190_i = 0; //assign simple
    redo__ll_strings_7471_L95191:;
      if(FLX_UNLIKELY(!(!((_vI95176_o_pa_hash_135802415.size() - 1  < _vI95190_i)) ) )) goto _ifdoelse_std_1977_L95194;
      {
      _a13708t_107090* _tmp108415 = (_a13708t_107090*)&_vI95189_o;
      _a13708t_107090 _tmp108416 = repr(::flx::rtl::strutil::subscript(_vI95176_o_pa_hash_135802415,_vI95190_i));
      ((_tmp108415))->append((_tmp108416));
      }
      {
      _a5038t_107106* _tmp108417 = (_a5038t_107106*)&_vI95190_i;
      ++*((_tmp108417));
      }
      goto redo__ll_strings_7471_L95191;
    _ifdoelse_std_1977_L95194:;
      _urv95172  = _fI95195_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107116(_vI95189_o + ::std::string("'") , _vI95177_os_p_hash_17376535)) /* apply_stack */; //init
      goto _end_inline_str_mf_1514_95206_L95206;
    _ml1518_L95173:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",707,7,707,24);
;
    _end_inline_str_mf_1514_95206_L95206:;
      return (::std::string("list(") + _urv95172 ) + ::std::string(")") ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",710,3,710,4); // HACK! 
}

//------------------------------
//FUNCTION <65960>: toolchain_gcc_linux::cxx_dependency_generator: Apply method
_tt107175 _fI65960_cxx_dependency_generator::apply(_art107174 const &_arg ){
  _vI65965_spec = _arg;
      _ds2_65611 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_gcc_linux->cxx_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_linux->_vI66005_config.ccflags, ::std::string("-std=gnu++11")))), ::std::string("-D_POSIX")))), ::std::string("-MM")))), ptrtoolchain_gcc_linux->_vI66005_config.header_search_dirs, ptrtoolchain_gcc_linux->_vI66005_config.macros, ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI65965_spec.src)) /* apply_stack */; //assign simple
      _vI65963_result = _ds2_65611.mem_0; //assign simple
      _vI65964_data = _ds2_65611.mem_1; //assign simple
      return _tt107175(_vI65963_result, _vI65964_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",779,3,779,4); // HACK! 
}

//------------------------------
//FUNCTION <91502>: +::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI91502__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------

//PROCEDURE <67575:> print_options: Call method
void print_options::stack_call(_art107120 const &_arg){
  ::flx::rtl::con_t *cc = call(0,_arg);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * print_options::call(::flx::rtl::con_t *_ptr_caller, _art107120 const &_arg){
  _caller = _ptr_caller;
  _vI67577_control = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <67575:> print_options: Resume method
::flx::rtl::con_t *print_options::resume(){
      {
      _a13708t_107090 _tmp108419 = (::std::string("NOOPTIMISE         = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.NOOPTIMISE) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108419)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108420 = (::std::string("STATIC             = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.STATIC) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108420)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108421 = (::std::string("ECHO               = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.ECHO) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108421)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108422 = (::std::string("NOSTDLIB           = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.NOSTDLIB) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108422)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108423 = (::std::string("DEBUG              = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.DEBUG) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108423)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108424 = (::std::string("DEBUG_COMPILER     = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.DEBUG_COMPILER) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108424)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108425 = (::std::string("STDIMPORT          = ") + _vI67577_control.STDIMPORT ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108425)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108426 = (::std::string("STDGRAMMAR         = ") + _vI67577_control.STDGRAMMAR ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108426)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108427 = (::std::string("IMPORTS            = ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67577_control.IMPORTS) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108427)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108428 = (::std::string("RECOMPILE          = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.RECOMPILE) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108428)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108429 = (::std::string("FLXG_FORCE         = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.FLXG_FORCE) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108429)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108430 = (::std::string("ocamls              = ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67577_control.ocamls) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108430)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108431 = (::std::string("cpps               = ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67577_control.cpps) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108431)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108432 = (::std::string("cppos              = ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67577_control.cppos) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108432)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108433 = (::std::string("TIME               = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.TIME) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108433)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108434 = (::std::string("COMPILER_TIME      = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.COMPILER_TIME) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108434)));
      }
      fflush(stdout);
      str_mv_1011  = _vI67577_control.BUNDLE_DIR; //init
/*begin match*/
/*match case 1:|Some x_param_std_1003*/
      if(!andthen(FLX_VNI(str_mv_1011)==1, (FLX_NEWP(_lam_1014)(FLX_FPAR_PASS this))) ) goto _ml1013_L102999;
      x_param_std_1003 = *((_a13708t_107090*)FLX_VNP(str_mv_1011)); //assign simple
      _urv102996  = ::std::string("Some ") + x_param_std_1003 ; //init
      goto _end_inline_str_103004_L103004;
    _ml1013_L102999:;
/*match case 2:|None*/
      if(!(FLX_VNI(str_mv_1011)==0) ) goto _ml1015_L102998;
      _urv102996  = ::std::string("None"); //init
      goto _end_inline_str_103004_L103004;
    _ml1015_L102998:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/core_type_constructors.fdoc",123,7,123,24);
;
    _end_inline_str_103004_L103004:;
      {
      _a13708t_107090 _tmp108436 = (::std::string("BUNDLE_DIR         = ") + _urv102996 ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108436)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108437 = (::std::string("RUNIT              = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.RUNIT) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108437)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108438 = (::std::string("CCOMPILEIT         = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.CCOMPILEIT) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108438)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108439 = (::std::string("LINKIT             = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.LINKIT) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108439)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108440 = (::std::string("RUNONLY            = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.RUNONLY) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108440)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108441 = (::std::string("CXXONLY            = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.CXXONLY) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108441)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108442 = (::std::string("OCAMLONLY          = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.OCAMLONLY) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108442)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108443 = (::std::string("FELIX              = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.FELIX) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108443)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108444 = (::std::string("LINKER_SWITCHES    = ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67577_control.LINKER_SWITCHES) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108444)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108445 = (::std::string("LINKER_OUTPUT_FILENAME = ") + _vI67577_control.LINKER_OUTPUT_FILENAME ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108445)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108446 = (::std::string("FLX_INTERFACE_FILENAME = ") + _vI67577_control.FLX_INTERFACE_FILENAME ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108446)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108447 = (::std::string("CXX_INTERFACE_FILENAME = ") + _vI67577_control.CXX_INTERFACE_FILENAME ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108447)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108448 = (::std::string("MACROS             = ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67577_control.MACROS) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108448)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108449 = (::std::string("SHOWCODE           = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.SHOWCODE) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108449)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108450 = (::std::string("USAGE              = ") + _vI67577_control.USAGE ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108450)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108451 = (::std::string("DOREDUCE           = ") + ::flx::rtl::strutil::str<int>(_vI67577_control.DOREDUCE) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108451)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108452 = (::std::string("OPTIMISE           = ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67577_control.OPTIMISE) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108452)));
      }
      fflush(stdout);
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <66023>: toolchain_gcc_osx::cxx_compiler_vendor: Apply method
_a13708t_107090 _fI66023_cxx_compiler_vendor::apply(){
      return ::std::string("GNU");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",969,3,969,45); // HACK! 
}

//------------------------------
//FUNCTION <105762>: flx_processing::ocaml_compile::_lam_65509: Apply method
 ::flx::rtl::cl_t _lam_65509::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2428,5,2428,9); // HACK! 
}

//------------------------------
//FUNCTION <65997>: toolchain_gcc_linux::dynamic_executable_linker: Apply method
int _fI65997_dynamic_executable_linker::apply(_art107181 const &_arg ){
  _vI66000_spec = _arg;
      _vI65999_result = generic_link_exe_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_gcc_linux->linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_gcc_linux->_vI66005_config.library_search_dirs, ptrtoolchain_gcc_linux->_vI66005_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI66000_spec.srcs, _vI66000_spec.dst)) /* apply_stack */; //assign simple
      return _vI65999_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",918,3,918,4); // HACK! 
}

//------------------------------
//FUNCTION <106185>: flx_processing::run_felix_compiler_if_required: Apply method
int _fI106185_run_felix_compiler_if_required::apply(_pt107161* const &_arg ){
  _vI106189_ehandler = _arg;
      _vI106186_result = 0; //assign simple
      _vI106577__genout_urv98062  = _fI106182_check_cxx_uptodate(FLX_FPAR_PASS ptrflx_processing)
      .apply() /* apply_stack */; //init
      _vI106187_uptodate = _vI106577__genout_urv98062; //assign simple
      _vI106579_str_mv_152  = _vI106187_uptodate; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106579_str_mv_152%2==1) ) goto _ml154_L106580;
      _vI106578__urv98063  = ::std::string("true"); //init
      goto _end_inline_str_98068_L106581;
    _ml154_L106580:;
/*match case 2:any*/
      _vI106578__urv98063  = ::std::string("false"); //init
    _end_inline_str_98068_L106581:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_98072_L106584;
      {
      _a13708t_107090 _tmp108453 = (::std::string("[flx] ") + (::std::string("[run_felix_compiler_if_required] Uptodate=") + _vI106578__urv98063 ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108453)));
      }
    _end_98072_L106584:;
      if(_vI106187_uptodate) goto _ifdoend_bootflx_65287_L106192;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_98076_L106587;
      {
      _a13708t_107090 _tmp108454 = (::std::string("[flx] ") + ::std::string("Running flxg because target is not uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108454)));
      }
    _end_98076_L106587:;
      {
      __timeb64* _tmp108455 = (__timeb64*)&_vI106589_tv;
      _ftime64_s(((_tmp108455)));
      }
      _vI106588__genout_urv98077  = (static_cast<double>((_vI106589_tv.time))) + ((static_cast<double>((_vI106589_tv.millitm))) / 1.0e3 ) ; //init
      _vI106188_t0 = _vI106588__genout_urv98077; //assign simple
      _vI106591_run_felix_compiler_if_required_mv_65472  = (ptrflx_processing->_vI106422_control.FLXG_OPTIMISE == 0); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106591_run_felix_compiler_if_required_mv_65472%2==1) ) goto _ml65474_L106592;
      _vI106590__urv98081  = (void* /*VR_nullptr*/ )0; //init
      goto _end_hash_332461554;
    _ml65474_L106592:;
/*match case 2:any*/
      _vI106590__urv98081  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("--optimise")))); //init
    _end_hash_332461554:;
      _vI106595_run_felix_compiler_if_required_mv_65477  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106595_run_felix_compiler_if_required_mv_65477%2==1) ) goto _ml65479_L106596;
      _vI106594__urv98092  = (FLX_NEWP(_pI106424_echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_34480765;
    _ml65479_L106596:;
/*match case 2:any*/
      _vI106594__urv98092  = (FLX_NEWP(_pI106423_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_34480765:;
      _vI106598__genout_urv98264  = run_felix_compiler(FLX_FPAR_PASS_ONLY)
      .apply(_art107577(ptrflx_processing->_vI106422_control.AUTOMATON, ptrflx_processing->_vI106422_control.BUNDLE_DIR, (*ptrflx_processing->_vI68366_config ).FLX_CACHE_DIR, ptrflx_processing->_vI106422_control.COMPILER_PHASE, ptrflx_processing->_vI106422_control.DOREDUCE, _vI106590__urv98081, ptrflx_processing->_vI106422_control.FLXG, ptrflx_processing->dvars.FLX_STD_LIBS, ptrflx_processing->_vI106422_control.FLXG_FORCE, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrflx_processing->_vI106422_control.IMPORTS, ptrflx_processing->_vI106422_control.STDIMPORT))), (*ptrflx_processing->_vI68366_config ).FLX_LIB_DIRS, ptrflx_processing->_vI106422_control.INLINE, (*ptrflx_processing->_vI68366_config ).FLX_OUTPUT_DIR, ::std::string("@") + ptrflx_processing->_vI106422_control.STDGRAMMAR , ptrflx_processing->_vI106422_control.COMPILER_TIME, ptrflx_processing->dvars.VERBOSE, _vI106594__urv98092, ptrflx_processing->dvars.filebase, ptrflx_processing->dvars.use_ext)) /* apply_stack */; //init
      _vI106186_result = _vI106598__genout_urv98264; //assign simple
      if(!((ptrflx_processing->_vI106422_control.TIME == 1)) ) goto _end_98274_L106606;
      {
      __timeb64* _tmp108456 = (__timeb64*)&_vI106605_tv;
      _ftime64_s(((_tmp108456)));
      }
      _vI106604__genout_urv95543  = (static_cast<double>((_vI106605_tv.time))) + ((static_cast<double>((_vI106605_tv.millitm))) / 1.0e3 ) ; //init
      _vI106599_elapsed = _vI106604__genout_urv95543 - _vI106188_t0 ; //assign simple
      _vI106600_minutes = ::std::floor((_vI106599_elapsed / 60.0 )); //assign simple
      _vI106601_seconds = _vI106599_elapsed - (_vI106600_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108457 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106600_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106601_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Felix flxg   : ") + ptrflx_processing->dvars.cpp_filebase ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108457)));
      }
      fflush(stdout);
    _end_98274_L106606:;
      if(!((_vI106186_result == 0)) ) goto _ifdoelse_bootflx_65288_L106193;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_98279_L106609;
      {
      _a13708t_107090 _tmp108458 = (::std::string("[flx] ") + ::std::string("Felix compilation succeeded") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108458)));
      }
    _end_98279_L106609:;
      {
      _pI106134_calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI106189_ehandler);
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_565_L106614;
      {
      _a13708t_107090 _tmp108460 = (::std::string("[Open_output] ") + (ptrflx_processing->dvars.cpp_filebase + ::std::string(".includes") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108460)));
      }
      fflush(stderr);
    _ifdoelse_std_565_L106614:;
      _vI106618__genout_urv98312  = fopen((ptrflx_processing->dvars.cpp_filebase + ::std::string(".includes") ).c_str(),"wb"); //init
      _vI106617__genout_urv98298  = _vI106618__genout_urv98312; //init
      _vI106616__genout_urv98289  = _vI106617__genout_urv98298; //init
      _vI106613__genout_urv98291  = _vI106616__genout_urv98289; //init
      _vI106610_f = _vI106613__genout_urv98291; //assign simple
      //run procedure directcall iter_uncurry<88913>directproc (_lam_64528<106611>closure, apply((prj24:record(AUTOMATON:(string),BUNDLE_DIR:(opt),CCFLAGS:(list),CCOMPILEIT:(int),CHECK_DEPENDENCIES:(int),CHECK_EXPECT:(int),CLEAR_CACHE:(int),CMDLINE_INPUT:(bool),COMPILER_PHASE:(string),COMPILER_TIME:(int),CXXONLY:(int),CXX_INTERFACE_FILENAME:(string),DEBUG:(int),DEBUG_COMPILER:(int),DEBUG_FLX:(bool),DIST_ROOT:(string),DLINK_STRINGS:(list),DOREDUCE:(int),DRIVER_EXE:(string),DRIVER_OBJS:(list),ECHO:(int),EXPECT:(string),EXTRA_CCFLAGS:(list),EXTRA_INCLUDE_DIRS:(list),EXTRA_INCLUDE_FILES:(list),EXTRA_PACKAGES:(list),FELIX:(int),FLXG:(string),FLXG_FORCE:(int),FLXG_OPTIMISE:(int),FLXRUN:(list),FLX_INSTALL_DIR:(string),FLX_INTERFACE_FILENAME:(string),FLX_STD_LIBS:(list),FLX_TARGET_SUBDIR:(string),FLX_TOOLCHAIN:(string),GRAMMAR_DIR:(string),IMPORTS:(list),INDIR:(string),INLINE:(int),INREGEX:(string),LINKER_OUTPUT_FILENAME:(string),LINKER_SWITCHES:(list),LINKEXE:(int),LINKIT:(int),LINK_STRINGS:(list),MACROS:(list),NONSTOP:(int),NOOPTIMISE:(int),NOSTDLIB:(int),OCAMLONLY:(int),OPTIMISE:(list),OUTPUT_DIRECTORY_SPECIFIED:(int),OUTPUT_FILENAME_SPECIFIED:(int),OUTPUT_FILENAME_WITHOUT_EXTENSION_SPECIFIED:(int),PRINT_HELP:(int),RECOMPILE:(int),REPL_MODE:(bool),RUNIT:(int),RUNONLY:(int),SET_STDIN:(int),SHOWCODE:(int),SLINK_STRINGS:(list),STANDARD_INCLUDE_FILES:(list),STATIC:(int),STATICLIB:(int),STDGRAMMAR:(string),STDIMPORT:(string),STDIN:(string),STDOUT:(string),TIME:(int),TIMECMD:(string),USAGE:(string),USER_ARGS:(list),VALIDATE_CACHE:(int),cache_time:(double),cppos:(list),cpps:(list),extra_pkgs:(list),ocamls:(list),pkgs:(list)) -> list), control<106422>varname));
      {
      _pt107148* _tmp108461 = (FLX_NEWP(_pI106611__lam_64528)(FLX_FPAR_PASS this, ptrflx_processing));
        ::flx::rtl::con_t *_p =
          (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
          ->call(0, _tt107149((_tmp108461), ptrflx_processing->_vI106422_control.EXTRA_INCLUDE_FILES));
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            fprintf(stderr,"Caller run_felix_compiler_if_required\n");
            fprintf(stderr,"Calls  iter_uncurry\n");
            abort();
          }
          _p=_p->resume();
        }
      }
      (void)fclose(_vI106610_f);
      goto _ifdoelse_bootflx_65288_L106193;
      goto _ifdoelse_bootflx_65288_L106193;
    _ifdoend_bootflx_65287_L106192:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65288_L106193;
      {
      _a13708t_107090 _tmp108463 = (::std::string("[flx] ") + ::std::string("skipping flxg because output is uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108463)));
      }
    _ifdoelse_bootflx_65288_L106193:;
      return _vI106186_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2212,3,2212,4); // HACK! 
}

//------------------------------
//FUNCTION <106237>: flx_processing::ocaml_compile: Apply method
int _fI106237_ocaml_compile::apply(_pt107161* const &_arg ){
  _vI106242_ehandler = _arg;
      _vI106238_deps = (void* /*VR_nullptr*/ )0; //assign simple
      _vI106733_xs  = ptrflx_processing->_vI106422_control.ocamls; //init
      _vI106732__genout_urv98905  = (FLX_NEWP(_fI106734_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _vI106239__generator_flx_2665 = _vI106732__genout_urv98905; //assign simple
    continue__ll_flx_2632_L106243:;
      _vI106122_ocaml_compile_mv_65506  = (_vI106239__generator_flx_2665)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some src_param_bootflx_65336*/
      if(!andthen(FLX_VNI(_vI106122_ocaml_compile_mv_65506)==1, (FLX_NEWP(_fI106743__lam_65509)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65508_L106251;
      _vI106240_src_param_bootflx_65336 = *((_a13708t_107090*)FLX_VNP(_vI106122_ocaml_compile_mv_65506)); //assign simple
      if(!((::flx::rtl::strutil::substr(_vI106240_src_param_bootflx_65336,- ::std::string(".cmi").size() ,_vI106240_src_param_bootflx_65336.size()) == ::std::string(".cmi")) || (::flx::rtl::strutil::substr(_vI106240_src_param_bootflx_65336,- ::std::string(".cmx").size() ,_vI106240_src_param_bootflx_65336.size()) == ::std::string(".cmx")) ) ) goto _ifdoend_bootflx_65337_L106244;
      *((void**)&_vI106238_deps)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI106238_deps) , _vI106240_src_param_bootflx_65336)) /* apply_stack */; //assign simple
      goto continue__ll_flx_2632_L106243;
    _ifdoend_bootflx_65337_L106244:;
      _vI106746__genout_urv99055  = (FLX_NEWP(_fI106747_dxqt__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _vI106744_xqt = _vI106746__genout_urv99055; //assign simple
      _vI106745_result = (_vI106744_xqt)->clone()
      ->apply(((::std::string("ocamlopt.opt -c ") + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI106238_deps)) /* apply_stack */ ) + ::std::string(" ") ) + _vI106240_src_param_bootflx_65336 ) /* general apply */; //assign simple
      (void)_vI106745_result;
      _vI106241_result = 0; //assign simple
      if(!(!((_vI106241_result == 0)) ) ) goto _ifdoend_bootflx_65339_L106245;
      return _vI106241_result;
    _ifdoend_bootflx_65339_L106245:;
      if(!((::flx::rtl::strutil::substr(_vI106240_src_param_bootflx_65336,- ::std::string(".mli").size() ,_vI106240_src_param_bootflx_65336.size()) == ::std::string(".mli"))) ) goto _ifdoend_bootflx_65341_L106246;
      *((void**)&_vI106238_deps)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI106238_deps) , subscript(FLX_FPAR_PASS_ONLY)
      .apply(_tt107591(_vI106240_src_param_bootflx_65336, ::flx::rtl::_uctor_(3, new(*PTF gcp, int_ptr_map, true) int (-5)))) /* apply_stack */ + ::std::string(".cmi") )) /* apply_stack */; //assign simple
      goto continue__ll_flx_2632_L106243;
    _ifdoend_bootflx_65341_L106246:;
      if(!((::flx::rtl::strutil::substr(_vI106240_src_param_bootflx_65336,- ::std::string(".ml").size() ,_vI106240_src_param_bootflx_65336.size()) == ::std::string(".ml"))) ) goto continue__ll_flx_2632_L106243;
      *((void**)&_vI106238_deps)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI106238_deps) , subscript(FLX_FPAR_PASS_ONLY)
      .apply(_tt107591(_vI106240_src_param_bootflx_65336, ::flx::rtl::_uctor_(3, new(*PTF gcp, int_ptr_map, true) int (-4)))) /* apply_stack */ + ::std::string(".cmi") )) /* apply_stack */; //assign simple
      goto continue__ll_flx_2632_L106243;
      goto continue__ll_flx_2632_L106243;
    _ml65508_L106251:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI106122_ocaml_compile_mv_65506)==0) ) goto _ml65510_L106252;
      goto _em65506_L106253;
    _ml65510_L106252:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2428,5,2428,9);
;
    _em65506_L106253:;
      return 0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2430,2,2430,3); // HACK! 
}

//------------------------------
//FUNCTION <95925>: flx_pkgconfig::tail_val::aux::_lam_1443: Apply method
 ::flx::rtl::cl_t _lam_1443::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",579,9,579,17); // HACK! 
}

//------------------------------
//FUNCTION <106045>: flx_processing::run_program_static::aux_uncurry: Apply method
void* _fI106045_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106046_inp_uncurry = _arg.data[0];
  _vI106047_out = _arg.data[1];
    start_90421_L106054:;
      _vI106050_aux__apos_2_mv_1322  = _vI106046_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106050_aux__apos_2_mv_1322)==0) ) goto _ml1324_L106049;
      return _vI106047_out;
    _ml1324_L106049:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI106050_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI106053__lam_1326)(FLX_FPAR_PASS this, ptrrun_program_static, ptrflx_processing))) ) goto _ml1325_L106048;
      _vI106051_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI106050_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI106052_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI106050_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI106047_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106047_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI106051_h_param_std_1208) /* apply_stack */))); //init
      _vI106046_inp_uncurry  = _vI106052_t_param_std_1207; //init
      goto start_90421_L106054;
    _ml1325_L106048:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <107026>: flx_processing::run_program_static::aux_uncurry: Apply method
void* _fI107026_aux_uncurry::apply(_at107115 const &_arg ){
  _vI107027_inp_uncurry = _arg.data[0];
  _vI107028_out = _arg.data[1];
    start_90421_L107035:;
      _vI107031_aux__apos_2_mv_1322  = _vI107027_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI107031_aux__apos_2_mv_1322)==0) ) goto _ml1324_L107030;
      return _vI107028_out;
    _ml1324_L107030:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI107031_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI107034__lam_1326)(FLX_FPAR_PASS this, ptr_fI106373_run_program_static, ptrflx_processing))) ) goto _ml1325_L107029;
      _vI107032_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI107031_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI107033_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI107031_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI107028_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI107028_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI107032_h_param_std_1208) /* apply_stack */))); //init
      _vI107027_inp_uncurry  = _vI107033_t_param_std_1207; //init
      goto start_90421_L107035;
    _ml1325_L107029:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <106173>: flx_processing::cal_cxx_uptodate: Apply method
 ::flx::rtl::cl_t _fI106173_cal_cxx_uptodate::apply(_tt107307 const &_arg ){
  _vI106178_debugln = _arg.mem_0;
  _vI106179_OUTPUT_DIR = _arg.mem_1;
  _vI106180_f = _arg.mem_2;
      _vI106554_f  = _vI106180_f + ::std::string(".dep") ; //init
      if(!((::flx::rtl::strutil::substr(_vI106554_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L106555;
      _vI106554_f = ::flx::rtl::strutil::substr(_vI106554_f,0,1) + ::flx::rtl::strutil::substr(_vI106554_f,2,_vI106554_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L106558;
    _ifdoend_bootflx_64478_L106555:;
      if(!((::flx::rtl::strutil::subscript(_vI106554_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L106558;
      _vI106554_f = (::flx::rtl::strutil::substr(_vI106554_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI106554_f,2,_vI106554_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L106558:;
      if(!((::flx::rtl::strutil::subscript(_vI106554_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L106560;
      _vI106554_f = ::flx::rtl::strutil::substr(_vI106554_f,1,_vI106554_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L106560:;
      _vI106553_k = _fI82124_join(_vI106179_OUTPUT_DIR, _vI106554_f); //assign simple
      _vI106174_depfilename = _vI106553_k; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI106178_debugln)->clone()
      ->call(0, ::std::string("Dependency file name = ") + _vI106174_depfilename );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      _vI106175_depfiletime = dfiletime(_vI106174_depfilename, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/))); //assign simple
      if(!((_vI106175_depfiletime == (static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/))))) ) goto _ifdoend_bootflx_65281_L106181;
      {
        ::flx::rtl::con_t *_p = (_vI106178_debugln)->clone()
      ->call(0, ::std::string("Dependency file doesn't exist"));
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      return 0;
    _ifdoend_bootflx_65281_L106181:;
      _vI106176_deptime = _fI106160_cal_time_from_flxdepfile(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107589(_vI106178_debugln, _vI106174_depfilename)) /* apply_stack */; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI106178_debugln)->clone()
      ->call(0, ::std::string("dep time = ") + strfiletime(FLX_FPAR_PASS _vI106176_deptime) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      {
        ::flx::rtl::con_t *_p = (_vI106178_debugln)->clone()
      ->call(0, ::std::string("depfile time = ") + strfiletime(FLX_FPAR_PASS _vI106175_depfiletime) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      _vI106177_cxx_uptodate = (_vI106176_deptime < _vI106175_depfiletime); //assign simple
      _vI106562_cal_cxx_uptodate_mv_65467  = _vI106177_cxx_uptodate; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106562_cal_cxx_uptodate_mv_65467%2==1) ) goto _ml65469_L106563;
      _vI106561__urv98018  = ::std::string(""); //init
      goto _end_hash_473581402;
    _ml65469_L106563:;
/*match case 2:any*/
      _vI106561__urv98018  = ::std::string(" NOT "); //init
    _end_hash_473581402:;
      {
        ::flx::rtl::con_t *_p = (_vI106178_debugln)->clone()
      ->call(0, (::std::string("cxx generated by flxg is = ") + _vI106561__urv98018 ) + ::std::string("uptodate") );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      return _vI106177_cxx_uptodate;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2153,3,2153,4); // HACK! 
}

//------------------------------
//FUNCTION <99211>: subscript::_lam_1998: Apply method
 ::flx::rtl::cl_t _lam_1998::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",224,7,224,25); // HACK! 
}

//------------------------------
//FUNCTION <92875>: generic_cxx_gen_deps_uncurry::aux_uncurry: Apply method
void* _fI92875_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92876_inp_uncurry = _arg.data[0];
  _vI92877_out = _arg.data[1];
    start_90421_L92884:;
      _vI92880_aux__apos_2_mv_1322  = _vI92876_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92880_aux__apos_2_mv_1322)==0) ) goto _ml1324_L92879;
      return _vI92877_out;
    _ml1324_L92879:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI92880_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI92883__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_cxx_gen_deps_uncurry))) ) goto _ml1325_L92878;
      _vI92881_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI92880_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI92882_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI92880_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI92877_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92877_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI92881_h_param_std_1208) /* apply_stack */))); //init
      _vI92876_inp_uncurry  = _vI92882_t_param_std_1207; //init
      goto start_90421_L92884;
    _ml1325_L92878:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <92700>: toolchain_msvc_win32::aux::aux_uncurry: Apply method
void* _fI92700_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92701_x_uncurry = _arg.data[0];
  _vI92702_y = _arg.data[1];
    start_91065_L92709:;
      _vI92705_aux__apos_2_mv_1328  = _vI92701_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92705_aux__apos_2_mv_1328)==0) ) goto _ml1330_L92704;
      return _vI92702_y;
    _ml1330_L92704:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI92705_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI92708__lam_1332)(FLX_FPAR_PASS this, ptr_fI92692_aux, ptrtoolchain_msvc_win32))) ) goto _ml1331_L92703;
      _vI92706_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI92705_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI92707_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI92705_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI92702_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92702_y, _vI92706_h_param_std_1210))); //init
      _vI92701_x_uncurry  = _vI92707_t_param_std_1209; //init
      goto start_91065_L92709;
    _ml1331_L92703:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <105733>: flx_processing::cxx_compile_static::iterator'2: Apply method
void* _fI105733_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L105734:;
      _vI105738_iterator__apos_2_mv_1504  = ptrcxx_compile_static->_vI105732_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI105738_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI105741__lam_1507)(FLX_FPAR_PASS this, ptrcxx_compile_static, ptrflx_processing))) ) goto _ml1506_L105737;
      _vI105739_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI105738_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI105740_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI105738_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrcxx_compile_static->_vI105732_xs = _vI105740_t_param_std_1259; //assign simple
      FLX_SET_PC(108469)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI105739_h_param_std_1260));//yield
    FLX_CASE_LABEL(108469)
      goto continue__ll_lists_5177_L105734;
    _ml1506_L105737:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI105738_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L105736;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L105736:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L105734;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <106540>: flx_processing::cal_time_from_flxdepfile::aux_uncurry: Apply method
double _fI106540_aux_uncurry::apply(_tt107527 const &_arg ){
  _vI106541_init_uncurry = _arg.mem_0;
  _vI106542_x = _arg.mem_1;
    start_97926_L106549:;
      _vI106545_aux__apos_2_mv_1297  = _vI106542_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106545_aux__apos_2_mv_1297)==0) ) goto _ml1299_L106544;
      return _vI106541_init_uncurry;
    _ml1299_L106544:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI106545_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI106548__lam_1301)(FLX_FPAR_PASS this, ptr_fI106160_cal_time_from_flxdepfile, ptrflx_processing))) ) goto _ml1300_L106543;
      _vI106546_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI106545_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI106547_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI106545_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI106542_x  = _vI106547_t_param_std_1199; //init
      _vI106541_init_uncurry  = ((FLX_NEWP(_fI106161_maxf)(FLX_FPAR_PASS ptr_fI106160_cal_time_from_flxdepfile, ptrflx_processing))
      ->apply(_vI106541_init_uncurry))->clone()
      ->apply(_vI106546_h_param_std_1200) /* general apply */; //init
      goto start_97926_L106549;
    _ml1300_L106543:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <96509>: flx_pkgconfig::handle_pkg::_lam_64696::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI96509__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <92311>: toolchain_msvc_win32::dependency_parser::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI92311__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <67449>: exts::_lam_65072: Apply method
_at107092 _lam_65072::apply(_a13708t_107090 const &_arg ){
  _vI67451_s = _arg;
      return _at107092(_vI67451_s, ::std::string("link"));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1380,10,1380,35); // HACK! 
}

//------------------------------
//FUNCTION <89746>: map_package_requirements_uncurry::_lam_64522::_lam_64522'2: Apply method
void* _fI89746__lam_64522__apos_2::apply(_a13708t_107090 const &_arg ){
  elt = _arg;
      _vI97401__lam_64522__apos_2_mv_64524  = (::flx::rtl::strutil::substr(elt,0,::std::string("---").size()) == ::std::string("---")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI97401__lam_64522__apos_2_mv_64524%2==1) ) goto _ml64526_L97402;
      return join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptr_lam_64522->_vI89749_acc, _fI97416_aux_uncurry(FLX_FPAR_PASS this, ptr_lam_64522, ptrmap_package_requirements_uncurry)
      .apply(_at107115(_fI97403_aux(FLX_FPAR_PASS this, ptr_lam_64522, ptrmap_package_requirements_uncurry)
      .apply(_tt107116(::flx::rtl::strutil::substr(elt,2,elt.size()), (void* /*VR_nullptr*/ )0)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */)) /* apply_stack */;
    _ml64526_L97402:;
/*match case 2:any*/
      return _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptr_lam_64522->_vI89749_acc, elt)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",820,8,820,14); // HACK! 
}

//------------------------------
//FUNCTION <106347>: flx_processing::run_linker_if_required: Apply method
int _fI106347_run_linker_if_required::apply(_pt107161* const &_arg ){
  _vI106350_ehandler = _arg;
      _vI106348_result = 0; //assign simple
      if(!((ptrflx_processing->_vI106422_control.CCOMPILEIT == 0)) ) goto _ifdoend_bootflx_65377_L106351;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65378_L106360;
      {
      _a13708t_107090 _tmp108472 = (::std::string("[flx] ") + ::std::string("C++ compilation (and linking and running) skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108472)));
      }
      goto _ifdoelse_bootflx_65378_L106360;
      goto _ifdoelse_bootflx_65378_L106360;
    _ifdoend_bootflx_65377_L106351:;
      _vI106975__genout_urv99755  = _fI106333_check_binary_uptodate(FLX_FPAR_PASS ptrflx_processing)
      .apply() /* apply_stack */; //init
      _vI106349_uptodate = _vI106975__genout_urv99755; //assign simple
      if(!_vI106349_uptodate ) goto _ifdoend_bootflx_65379_L106352;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65378_L106360;
      {
      _a13708t_107090 _tmp108473 = (::std::string("[flx] ") + ::std::string("Linking skipped because binary is uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108473)));
      }
      goto _ifdoelse_bootflx_65378_L106360;
      goto _ifdoelse_bootflx_65378_L106360;
    _ifdoend_bootflx_65379_L106352:;
      if(!((ptrflx_processing->_vI106422_control.STATIC == 0)) ) goto _ifdoend_bootflx_65381_L106355;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99763_L106981;
      {
      _a13708t_107090 _tmp108474 = (::std::string("[flx] ") + ::std::string("Dynamic linkage") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108474)));
      }
    _end_99763_L106981:;
      if(!((ptrflx_processing->_vI106422_control.LINKEXE == 1)) ) goto _ifdoend_bootflx_65383_L106353;
      {
      _pI106134_calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI106350_ehandler);
      }
      _vI106982__genout_urv99764  = _fI106277_cxx_link_shared_exe(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106350_ehandler) /* apply_stack */; //init
      _vI106348_result = _vI106982__genout_urv99764; //assign simple
      goto _ifdoelse_bootflx_65378_L106360;
    _ifdoend_bootflx_65383_L106353:;
      {
      _pI106134_calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI106350_ehandler);
      }
      _vI106983__genout_urv99768  = _fI106254_cxx_link_shared_library(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106350_ehandler) /* apply_stack */; //init
      _vI106348_result = _vI106983__genout_urv99768; //assign simple
      goto _ifdoelse_bootflx_65378_L106360;
    _ifdoend_bootflx_65381_L106355:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99775_L106986;
      {
      _a13708t_107090 _tmp108477 = (::std::string("[flx] ") + ::std::string("Static linkage") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108477)));
      }
    _end_99775_L106986:;
      if(!((ptrflx_processing->_vI106422_control.STATICLIB == 1)) ) goto _ifdoend_bootflx_65385_L106356;
      _vI106987__genout_urv99776  = _fI106323_cxx_static_library(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106350_ehandler) /* apply_stack */; //init
      _vI106348_result = _vI106987__genout_urv99776; //assign simple
      goto _ifdoelse_bootflx_65378_L106360;
    _ifdoend_bootflx_65385_L106356:;
      {
      _pI106134_calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI106350_ehandler);
      }
      _vI106988__genout_urv99777  = _fI106300_cxx_link_static_exe(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106350_ehandler) /* apply_stack */; //init
      _vI106348_result = _vI106988__genout_urv99777; //assign simple
    _ifdoelse_bootflx_65378_L106360:;
      return _vI106348_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2792,3,2792,4); // HACK! 
}

//------------------------------
//FUNCTION <65702>: toolchain_msvc_win32::whatami: Apply method
_a13708t_107090 whatami::apply(){
      return ::std::string("toolchain_msvc_win32 (version 2)");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1730,3,1730,62); // HACK! 
}

//------------------------------
//FUNCTION <66378>: toolchain_clang_osx::cxx_dynamic_object_compiler: Apply method
int _fI66378_cxx_dynamic_object_compiler::apply(_art107177 const &_arg ){
  _vI66381_spec = _arg;
      _vI66380_result = generic_cxx_compile_for_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107225(_art107224(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_osx->_vI66318_base_cxx_compile_flags, ::std::string("-fvisibility=hidden")))), ::std::string("-fPIC")))), ptrtoolchain_clang_osx->_vI66315_linker, ptrtoolchain_clang_osx->_vI66398_config.header_search_dirs, ptrtoolchain_clang_osx->_vI66398_config.macros, ::std::string("-o "), ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66381_spec.src, _vI66381_spec.dst)) /* apply_stack */; //assign simple
      return _vI66380_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1594,3,1594,4); // HACK! 
}

//------------------------------
//FUNCTION <66353>: toolchain_clang_osx::cxx_dependency_generator: Apply method
_tt107175 _fI66353_cxx_dependency_generator::apply(_art107174 const &_arg ){
  _vI66358_spec = _arg;
      _ds2_65599 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_clang_osx->_vI66314_cxx_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_osx->_vI66398_config.ccflags, ::std::string("-std=c++11")))), ::std::string("-MM")))), ptrtoolchain_clang_osx->_vI66398_config.header_search_dirs, ptrtoolchain_clang_osx->_vI66398_config.macros, ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66358_spec.src)) /* apply_stack */; //assign simple
      _vI66356_result = _ds2_65599.mem_0; //assign simple
      _vI66357_data = _ds2_65599.mem_1; //assign simple
      return _tt107175(_vI66356_result, _vI66357_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1503,3,1503,4); // HACK! 
}

//------------------------------
//FUNCTION <98500>: cxx_depcheck::==::_lam_65568: Apply method
 ::flx::rtl::cl_t _lam_65568::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",392,9,392,20); // HACK! 
}

//------------------------------
//FUNCTION <102655>: find_uncurry::_lam_1536: Apply method
 ::flx::rtl::cl_t _lam_1536::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",759,7,759,21); // HACK! 
}

//------------------------------
//FUNCTION <67443>: exts::_lam_65070: Apply method
_at107092 _lam_65070::apply(_a13708t_107090 const &_arg ){
  _vI67445_s = _arg;
      return _at107092(_vI67445_s, ::std::string("ocaml"));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1378,10,1378,36); // HACK! 
}

//------------------------------
//FUNCTION <90535>: runflx::aux_uncurry: Apply method
void* _fI90535_aux_uncurry::apply(_at107115 const &_arg ){
  _vI90536_inp_uncurry = _arg.data[0];
  _vI90537_out = _arg.data[1];
    start_90421_L90544:;
      _vI90540_aux__apos_2_mv_1322  = _vI90536_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI90540_aux__apos_2_mv_1322)==0) ) goto _ml1324_L90539;
      return _vI90537_out;
    _ml1324_L90539:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI90540_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI90543__lam_1326)(FLX_FPAR_PASS this, ptrrunflx))) ) goto _ml1325_L90538;
      _vI90541_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI90540_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI90542_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI90540_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI90537_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI90537_out, _fI14710_str(_vI90541_h_param_std_1208)))); //init
      _vI90536_inp_uncurry  = _vI90542_t_param_std_1207; //init
      goto start_90421_L90544;
    _ml1325_L90538:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <92990>: generic_dependency_parser::_lam_64829: Apply method
 ::flx::rtl::cl_t _lam_64829::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",146,48,146,53); // HACK! 
}

//------------------------------
//FUNCTION <106333>: flx_processing::check_binary_uptodate: Apply method
 ::flx::rtl::cl_t _fI106333_check_binary_uptodate::apply(){
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99607_L106889;
      {
      _a13708t_107090 _tmp108480 = (::std::string("[flx] ") + ::std::string("Check C++->binary uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108480)));
      }
    _end_99607_L106889:;
      if(!((ptrflx_processing->_vI106422_control.RECOMPILE == 1)) ) goto _ifdoend_bootflx_65373_L106345;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99611_L106892;
      {
      _a13708t_107090 _tmp108481 = (::std::string("[flx] ") + ::std::string("C++->binary dependency checking skipped due to switch RECOMPILE=1: forced not uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108481)));
      }
    _end_99611_L106892:;
      return 0;
    _ifdoend_bootflx_65373_L106345:;
      if(!((ptrflx_processing->_vI106422_control.CHECK_DEPENDENCIES == 1)) ) goto _ifdoend_bootflx_65375_L106346;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99615_L106895;
      {
      _a13708t_107090 _tmp108482 = (::std::string("[flx] ") + ::std::string("Checking C++->binary dependencies since CHECK_DEPENDENCIES=1 to see if the output is uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108482)));
      }
    _end_99615_L106895:;
      _vI106338_xtime = dfiletime(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME, - 1.0 ); //assign simple
      _vI106897_f  = ptrflx_processing->dvars.filebase + ::std::string(".dep") ; //init
      if(!((::flx::rtl::strutil::substr(_vI106897_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L106898;
      _vI106897_f = ::flx::rtl::strutil::substr(_vI106897_f,0,1) + ::flx::rtl::strutil::substr(_vI106897_f,2,_vI106897_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L106901;
    _ifdoend_bootflx_64478_L106898:;
      if(!((::flx::rtl::strutil::subscript(_vI106897_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L106901;
      _vI106897_f = (::flx::rtl::strutil::substr(_vI106897_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI106897_f,2,_vI106897_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L106901:;
      if(!((::flx::rtl::strutil::subscript(_vI106897_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L106903;
      _vI106897_f = ::flx::rtl::strutil::substr(_vI106897_f,1,_vI106897_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L106903:;
      _vI106896_k = _fI82124_join((*ptrflx_processing->_vI68366_config ).FLX_OUTPUT_DIR, _vI106897_f); //assign simple
      _vI106339_depfilename = _vI106896_k; //assign simple
      _vI106340_flx_srctime = dfiletime(_vI106339_depfilename, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/))); //assign simple
      _vI106341_cpp_srctime = _fI106904_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_tt107527(- 1.0 , ptrflx_processing->_vI106422_control.cpps)) /* apply_stack */; //assign simple
      _vI106342_obj_srctime = _fI106914_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_tt107527(- 1.0 , ptrflx_processing->_vI106422_control.cppos)) /* apply_stack */; //assign simple
      _vI106926_max_mv_106  = (_vI106340_flx_srctime < _vI106341_cpp_srctime); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106926_max_mv_106%2==1) ) goto _ml108_L106925;
      _vI106924__urv99675  = _vI106341_cpp_srctime; //init
      goto _end_inline_max_99682_L106927;
    _ml108_L106925:;
/*match case 2:any*/
      _vI106924__urv99675  = _vI106340_flx_srctime; //init
    _end_inline_max_99682_L106927:;
      _vI106930_max_mv_106  = (_vI106924__urv99675 < _vI106342_obj_srctime); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106930_max_mv_106%2==1) ) goto _ml108_L106929;
      _vI106928__urv99683  = _vI106342_obj_srctime; //init
      goto _end_inline_max_99690_L106931;
    _ml108_L106929:;
/*match case 2:any*/
      _vI106928__urv99683  = _vI106924__urv99675; //init
    _end_inline_max_99690_L106931:;
      _vI106343_deptime = _vI106928__urv99683; //assign simple
      _vI106344_uptodate = (_vI106343_deptime < _vI106338_xtime); //assign simple
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99700_L106934;
      {
      _a13708t_107090 _tmp108483 = (::std::string("[flx] ") + (::std::string("Extra c++ sources  ") + str(FLX_FPAR_PASS_ONLY)
      .apply(ptrflx_processing->_vI106422_control.cpps) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108483)));
      }
    _end_99700_L106934:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99704_L106937;
      {
      _a13708t_107090 _tmp108484 = (::std::string("[flx] ") + (::std::string("Extra object files ") + str(FLX_FPAR_PASS_ONLY)
      .apply(ptrflx_processing->_vI106422_control.cppos) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108484)));
      }
    _end_99704_L106937:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99708_L106940;
      {
      _a13708t_107090 _tmp108485 = (::std::string("[flx] ") + (::std::string("Extra ocaml files  ") + str(FLX_FPAR_PASS_ONLY)
      .apply(ptrflx_processing->_vI106422_control.ocamls) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108485)));
      }
    _end_99708_L106940:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99712_L106943;
      {
      _a13708t_107090 _tmp108486 = (::std::string("[flx] ") + (::std::string("Filebase = ") + ptrflx_processing->dvars.filebase ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108486)));
      }
    _end_99712_L106943:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99716_L106946;
      {
      _a13708t_107090 _tmp108487 = (::std::string("[flx] ") + (::std::string("cache   time = ") + strfiletime(FLX_FPAR_PASS ptrflx_processing->_vI106422_control.cache_time) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108487)));
      }
    _end_99716_L106946:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99720_L106949;
      {
      _a13708t_107090 _tmp108488 = (::std::string("[flx] ") + (::std::string("flx_src time = ") + strfiletime(FLX_FPAR_PASS _vI106340_flx_srctime) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108488)));
      }
    _end_99720_L106949:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99724_L106952;
      {
      _a13708t_107090 _tmp108489 = (::std::string("[flx] ") + (::std::string("cpp_src time = ") + strfiletime(FLX_FPAR_PASS _vI106341_cpp_srctime) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108489)));
      }
    _end_99724_L106952:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99728_L106955;
      {
      _a13708t_107090 _tmp108490 = (::std::string("[flx] ") + (::std::string("obj_src time = ") + strfiletime(FLX_FPAR_PASS _vI106342_obj_srctime) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108490)));
      }
    _end_99728_L106955:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99732_L106958;
      {
      _a13708t_107090 _tmp108491 = (::std::string("[flx] ") + (::std::string("dep     time = ") + strfiletime(FLX_FPAR_PASS _vI106343_deptime) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108491)));
      }
    _end_99732_L106958:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99736_L106961;
      {
      _a13708t_107090 _tmp108492 = (::std::string("[flx] ") + (((::std::string("Binary  time = ") + strfiletime(FLX_FPAR_PASS _vI106338_xtime) ) + ::std::string(" for ") ) + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108492)));
      }
    _end_99736_L106961:;
      _vI106963_check_binary_uptodate_mv_65538  = _vI106344_uptodate; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106963_check_binary_uptodate_mv_65538%2==1) ) goto _ml65540_L106964;
      _vI106962__urv99737  = ::std::string(""); //init
      goto _end_hash_143717561;
    _ml65540_L106964:;
/*match case 2:any*/
      _vI106962__urv99737  = ::std::string(" NOT "); //init
    _end_hash_143717561:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99745_L106968;
      {
      _a13708t_107090 _tmp108493 = (::std::string("[flx] ") + ((::std::string("output is ") + _vI106962__urv99737 ) + ::std::string(" up to date") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108493)));
      }
    _end_99745_L106968:;
      return _vI106344_uptodate;
    _ifdoend_bootflx_65375_L106346:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99749_L106971;
      {
      _a13708t_107090 _tmp108494 = (::std::string("[flx] ") + ::std::string("C++->binary dependency checking skipped due to switch CHECK_DEPENDENCIES=0: forced uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108494)));
      }
    _end_99749_L106971:;
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2761,3,2761,4); // HACK! 
}

//------------------------------
//FUNCTION <105567>: flx_processing::cal_time_from_flxdepfile::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI105567__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <89216>: toolchain_clang_apple_iOS_maker_uncurry::dependency_extension: Apply method
_a13708t_107090 _fI89216_dependency_extension::apply(){
      return ::std::string(".d");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1992,3,1992,45); // HACK! 
}

//------------------------------
//FUNCTION <67766>: FlxPkgConfigQuery::query: Apply method
_tt107169 query::apply(void* const &_arg ){
  _vI67768_args = _arg;
      return flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrFlxPkgConfigQuery->paths, _vI67768_args)) /* apply_stack */) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",485,5,485,6); // HACK! 
}

//------------------------------
//C FUNC <85573>: _fI85573_flx_dlsym
_tt107421 _fI85573_flx_dlsym(FLX_APAR_DECL  _a7338t_107409 _vI85579_linst, _a13708t_107090 _vI85580_sym){
  _cft107420* _vI85587_typed_sym;
  _a5050t_107416 _vI85585_raw_sym;
  _a5050t_107416 _vI85584_tf;
  _a7265t_107411 _vI85583_dlibrary;
      _vI85583_dlibrary = _vI85579_linst->lib; //assign simple
      _vI85584_tf = (void*)_vI85579_linst->thread_frame; //assign simple
      _vI85585_raw_sym = find_sym(FLX_FPAR_PASS_ONLY)
      .apply(_tt107429(_vI85583_dlibrary, _vI85580_sym)) /* apply_stack */; //assign simple
      if(!(0==_vI85585_raw_sym) ) goto _ifdoelse_std_483_L85581;
      {
      _a13708t_107090 _tmp108495 = (((::std::string("Unable to load symbol ") + _vI85580_sym ) + ::std::string(" from library ") ) + ::std::string(_vI85579_linst->lib->filename) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108495)));
      }
      fflush(stderr);
      {
      _a7258t_107430 _tmp108496 = ::flx::rtl::flx_link_failure_t((::std::string(_vI85579_linst->lib->filename)),(::std::string("dlsym")),(::std::string("Cannot find symbol ") + _vI85580_sym ));
      (throw ((_tmp108496)));
      }
    _ifdoelse_std_483_L85581:;
      _vI85587_typed_sym = (_cft107420*)(_vI85585_raw_sym); //assign simple
      return _tt107421(_vI85587_typed_sym, _vI85584_tf);
}
//------------------------------
//C FUNC <90238>: _a90238_argv
_a13708t_107090 _a90238_argv(FLX_APAR_DECL int _a90239){
      return ::std::string(_a90239<0||_a90239>=PTF argc?"":PTF argv[_a90239]);
}
//------------------------------
//FUNCTION <97565>: map_package_requirements_uncurry::aux_uncurry: Apply method
_a13708t_107090 _fI97565_aux_uncurry::apply(_tt107116 const &_arg ){
  _vI97566_init_uncurry = _arg.mem_0;
  _vI97567_x = _arg.mem_1;
    start_95154_L97574:;
      _vI97570_aux__apos_2_mv_1297  = _vI97567_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97570_aux__apos_2_mv_1297)==0) ) goto _ml1299_L97569;
      return _vI97566_init_uncurry;
    _ml1299_L97569:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI97570_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI97573__lam_1301)(FLX_FPAR_PASS this, ptrmap_package_requirements_uncurry))) ) goto _ml1300_L97568;
      _vI97571_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI97570_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI97572_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI97570_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI97567_x  = _vI97572_t_param_std_1199; //init
      _vI97566_init_uncurry  = ((FLX_NEWP(join)(FLX_FPAR_PASS_ONLY))
      ->apply(_vI97566_init_uncurry))->clone()
      ->apply(_vI97571_h_param_std_1200) /* general apply */; //init
      goto start_95154_L97574;
    _ml1300_L97568:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <65948>: toolchain_gcc_linux::debug_flags: Apply method
void* _fI65948_debug_flags::apply(){
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-g"))));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",743,3,743,48); // HACK! 
}

//------------------------------
//FUNCTION <106990>: flx_processing::run_program_dynamic::aux_uncurry: Apply method
void* _fI106990_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106991_inp_uncurry = _arg.data[0];
  _vI106992_out = _arg.data[1];
    start_90421_L106999:;
      _vI106995_aux__apos_2_mv_1322  = _vI106991_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106995_aux__apos_2_mv_1322)==0) ) goto _ml1324_L106994;
      return _vI106992_out;
    _ml1324_L106994:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI106995_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI106998__lam_1326)(FLX_FPAR_PASS this, ptr_fI106361_run_program_dynamic, ptrflx_processing))) ) goto _ml1325_L106993;
      _vI106996_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI106995_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI106997_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI106995_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI106992_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106992_out, _fI14710_str(_vI106996_h_param_std_1208)))); //init
      _vI106991_inp_uncurry  = _vI106997_t_param_std_1207; //init
      goto start_90421_L106999;
    _ml1325_L106993:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <96598>: flx_pkgconfig::handle_pkg::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI96598__lam_1398::apply(_a13708t_107090 const &_arg ){
  _vI96599_x = _arg;
      return eq(_vI96599_x, ptrhandle_pkg->_vI68127_pkg);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <95470>: cal_depvars::_lam_65239: Apply method
 ::flx::rtl::cl_t _lam_65239::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1868,7,1868,14); // HACK! 
}

//------------------------------
//FUNCTION <66033>: toolchain_gcc_osx::static_library_extension: Apply method
_a13708t_107090 _fI66033_static_library_extension::apply(){
      return ::std::string(".a");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",975,3,975,49); // HACK! 
}

//------------------------------
//FUNCTION <104978>: FlxPkgConfigQuery::aux_uncurry: Apply method
void* _fI104978_aux_uncurry::apply(_at107115 const &_arg ){
  lst_uncurry = _arg.data[0];
  _vI104979_out = _arg.data[1];
    start_104732_L104997:;
      _vI104981_aux__apos_2_mv_64751  = lst_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI104981_aux__apos_2_mv_64751)==0) ) goto _ml64753_L104984;
      return _fI104986_aux_uncurry(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery)
      .apply(_at107115(_vI104979_out, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml64753_L104984:;
/*match case 2:|Cons (h_param_bootflx_64730, t_param_bootflx_64731)*/
      if(!andthen(!!_vI104981_aux__apos_2_mv_64751 , (FLX_NEWP(_lam_64755)(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery))) ) goto _ml64754_L104985;
      t_param_bootflx_64731 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(_vI104981_aux__apos_2_mv_64751))).mem_1; //assign simple
      h_param_bootflx_64730 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(_vI104981_aux__apos_2_mv_64751))).mem_0; //assign simple
/*parallel assignment*/
      _vI104979_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104979_out, ::std::string("--path+=") + h_param_bootflx_64730 ))); //init
      lst_uncurry  = t_param_bootflx_64731; //init
      goto start_104732_L104997;
    _ml64754_L104985:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",475,11,475,53);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",478,9,478,44); // HACK! 
}

//------------------------------
//FUNCTION <66112>: toolchain_clang_linux::target_os: Apply method
_a13708t_107090 _fI66112_target_os::apply(){
      return ::std::string("LINUX");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1216,3,1216,37); // HACK! 
}

//------------------------------
//FUNCTION <85485>: func1: Apply method
_ft107197* func1::apply(_tt107410 const &_arg ){
  linst = _arg.mem_0;
  _vI85572_sym = _arg.mem_1;
      _ds2_521 = _fI85573_flx_dlsym(FLX_FPAR_PASS linst, _vI85572_sym); //assign simple
      _vI85575_s = _ds2_521.mem_0; //assign simple
      tf = _ds2_521.mem_1; //assign simple
      return (FLX_NEWP(_fI85577__lam_522)(FLX_FPAR_PASS this));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",1119,3,1119,4); // HACK! 
}

//------------------------------
//FUNCTION <83800>: join::join'2: Apply method
_a13708t_107090 _fI83800_join__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI83801_y = _arg;
      return _fI82124_join(ptrjoin->_vI83799_x, _vI83801_y);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",95,3,95,45); // HACK! 
}

//------------------------------
//FUNCTION <105742>: flx_processing::cxx_compile_static::_lam_65496: Apply method
 ::flx::rtl::cl_t _lam_65496::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2325,5,2325,9); // HACK! 
}

//------------------------------
//FUNCTION <106914>: flx_processing::check_binary_uptodate::aux_uncurry: Apply method
double _fI106914_aux_uncurry::apply(_tt107527 const &_arg ){
  _vI106915_init_uncurry = _arg.mem_0;
  _vI106916_x = _arg.mem_1;
    start_97926_L106923:;
      _vI106919_aux__apos_2_mv_1297  = _vI106916_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106919_aux__apos_2_mv_1297)==0) ) goto _ml1299_L106918;
      return _vI106915_init_uncurry;
    _ml1299_L106918:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI106919_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI106922__lam_1301)(FLX_FPAR_PASS this, ptr_fI106333_check_binary_uptodate, ptrflx_processing))) ) goto _ml1300_L106917;
      _vI106920_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI106919_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI106921_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI106919_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI106916_x  = _vI106921_t_param_std_1199; //init
      _vI106915_init_uncurry  = ((FLX_NEWP(_fI106334_maxf)(FLX_FPAR_PASS ptr_fI106333_check_binary_uptodate, ptrflx_processing))
      ->apply(_vI106915_init_uncurry))->clone()
      ->apply(_vI106920_h_param_std_1200) /* general apply */; //init
      goto start_97926_L106923;
    _ml1300_L106917:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <105342>: flx_processing::cxx_static_library: Apply method
int cxx_static_library::apply(_pt107161* const &_arg ){
  _vI105347_ehandler = _arg;
      {
      __timeb64* _tmp108501 = (__timeb64*)&_vI105891_tv;
      _ftime64_s(((_tmp108501)));
      }
      _genout_urv99559  = (static_cast<double>((_vI105891_tv.time))) + ((static_cast<double>((_vI105891_tv.millitm))) / 1.0e3 ) ; //init
      _vI105343_t0 = _genout_urv99559; //assign simple
      cxx_static_library_mv_65533  = (ptrflx_processing->_vI105441_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(cxx_static_library_mv_65533%2==1) ) goto _ml65535_L105894;
      _urv99563  = (FLX_NEWP(echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_645254333;
    _ml65535_L105894:;
/*match case 2:any*/
      _urv99563  = (FLX_NEWP(_pI105442_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_645254333:;
      _vI105344_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(ptrflx_processing->_vI105142_dflt_clang_config.ccflags, _urv99563, ptrflx_processing->_vI105142_dflt_clang_config.dynamic_libraries, ptrflx_processing->_vI105142_dflt_clang_config.header_search_dirs, ptrflx_processing->_vI105142_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI105142_dflt_clang_config.macros, ptrflx_processing->_vI105142_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      _vI105345_EXT_STATIC_OBJ = (_vI105344_tc.static_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI105441_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65369_L105348;
      _vI105346_result = (_vI105344_tc.static_library_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME, _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_processing->_vI105441_control.cppos, ptrflx_processing->_vI105038_dvars.cpp_filebase + _vI105345_EXT_STATIC_OBJ )) /* apply_stack */)) /* general apply */; //assign simple
      goto _ifdoelse_bootflx_65370_L105349;
    _ifdoend_bootflx_65369_L105348:;
      _vI105346_result = (_vI105344_tc.static_library_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME, ptrflx_processing->_vI105441_control.cppos)) /* general apply */; //assign simple
    _ifdoelse_bootflx_65370_L105349:;
      if(!((ptrflx_processing->_vI105441_control.TIME == 1)) ) goto _end_99577_L105903;
      {
      __timeb64* _tmp108502 = (__timeb64*)&_vI105902_tv;
      _ftime64_s(((_tmp108502)));
      }
      _vI105901__genout_urv95543  = (static_cast<double>((_vI105902_tv.time))) + ((static_cast<double>((_vI105902_tv.millitm))) / 1.0e3 ) ; //init
      _vI105896_elapsed = _vI105901__genout_urv95543 - _vI105343_t0 ; //assign simple
      _vI105897_minutes = ::std::floor((_vI105896_elapsed / 60.0 )); //assign simple
      _vI105898_seconds = _vI105896_elapsed - (_vI105897_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108503 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105897_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105898_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Static lib   : ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108503)));
      }
      fflush(stdout);
    _end_99577_L105903:;
      if(!(!((_vI105346_result == 0)) ) ) goto _ifdoelse_bootflx_65372_L105351;
      {
      _a13708t_107090 _tmp108504 = ((::std::string("[flx] C++ static library link ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108504)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65372_L105351:;
      return _vI105346_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2715,3,2715,4); // HACK! 
}

//------------------------------
//FUNCTION <105477>: flx_processing::cxx_compile_dynamic1_uncurry::_lam_65481: Apply method
_a13708t_107090 _lam_65481::apply(_a13708t_107090 const &_arg ){
  _vI105478_s = _arg;
      return ::std::string("--path+=") + _vI105478_s ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2227,11,2227,40); // HACK! 
}

//------------------------------
//FUNCTION <105531>: flx_processing::find_cxx_pkgs::_lam_65444: Apply method
 ::flx::rtl::cl_t _lam_65444::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2091,11,2091,16); // HACK! 
}

//------------------------------
//FUNCTION <89222>: toolchain_clang_apple_iOS_maker_uncurry::pathname_separator: Apply method
_a13708t_107090 _fI89222_pathname_separator::apply(){
      return ::std::string("/");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1998,3,1998,42); // HACK! 
}

//------------------------------
//FUNCTION <65916>: toolchain_gcc_linux: Apply method
_art107183 toolchain_gcc_linux::apply(_art107173 const &_arg ){
  _vI66005_config = _arg;
      _vI93611_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 9)) ) goto _ifdoelse_std_1191_L93607;
      _vI93612_i = (static_cast<int>(9)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108505 = (int*)&_vI93612_i;
      ++*((_tmp108505));
      }
    redo__ll_lists_4854_L93610:;
      if(FLX_UNLIKELY(!((0 < _vI93612_i)) )) goto _ifdoelse_std_1191_L93607;
      {
      int* _tmp108506 = (int*)&_vI93612_i;
      --*((_tmp108506));
      }
      _vI93611_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93611_o, (_at107217(::std::string("-w"), ::std::string("-Wfatal-errors"), ::std::string("-Wno-invalid-offsetof"), ::std::string("-Wno-parentheses"), ::std::string("-Wno-unused-variable"), ::std::string("-Wno-unused-label"), ::std::string("-Wno-unused-function"), ::std::string("-Wno-sign-compare"), ::std::string("-Wno-missing-braces")).data)[reinterpret< ::flx::rtl::cl_t>(_vI93612_i)]))); //assign simple
      goto redo__ll_lists_4854_L93610;
    _ifdoelse_std_1191_L93607:;
      cxx_compile_warning_flags = _vI93611_o; //assign simple
      o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L93617;
      i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108507 = (int*)&i;
      ++*((_tmp108507));
      }
    redo__ll_lists_4854_L93620:;
      if(FLX_UNLIKELY(!((0 < i)) )) goto _ifdoelse_std_1191_L93617;
      {
      int* _tmp108508 = (int*)&i;
      --*((_tmp108508));
      }
      o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(o, (_at107092(::std::string("-w"), ::std::string("-Wfatal-errors")).data)[reinterpret< ::flx::rtl::cl_t>(i)]))); //assign simple
      goto redo__ll_lists_4854_L93620;
    _ifdoelse_std_1191_L93617:;
      c_compile_warning_flags = o; //assign simple
      c_compiler = ::std::string("gcc"); //assign simple
      cxx_compiler = ::std::string("g++"); //assign simple
      linker = ::std::string("g++"); //assign simple
      ccflags_for_dynamic_link = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-shared")))); //assign simple
      _vI65924_base_c_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(c_compile_warning_flags, _vI66005_config.ccflags)) /* apply_stack */, ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), ::std::string("-c")))), ::std::string("-g")))), ::std::string("-D_POSIX")))); //assign simple
      _vI65925_base_cxx_compile_flags = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(cxx_compile_warning_flags, _vI66005_config.ccflags)) /* apply_stack */, ::std::string("-std=gnu++11")))), ::std::string("-fno-strict-aliasing")))), ::std::string("-fno-common")))), ::std::string("-O1")))), ::std::string("-c")))), ::std::string("-g")))), ::std::string("-D_POSIX")))); //assign simple
      return _art107183((FLX_NEWP(_fI65954_c_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65973_c_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65969_c_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65932_cxx_compiler_vendor)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65960_cxx_dependency_generator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65985_cxx_dynamic_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65981_cxx_static_library_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65977_cxx_static_object_compiler)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65948_debug_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65934_dependency_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65966_dependency_parser)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65997_dynamic_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65944_dynamic_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI66001_dynamic_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65940_dynamic_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65936_executable_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65950_get_base_c_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65952_get_base_cxx_compile_flags)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65928_host_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65946_pathname_separator)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65993_static_executable_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65942_static_library_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65989_static_library_linker)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65938_static_object_extension)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65930_target_os)(FLX_FPAR_PASS this)), (FLX_NEWP(_fI65926_whatami)(FLX_FPAR_PASS this)));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",936,1,936,2); // HACK! 
}

//------------------------------
//FUNCTION <106323>: flx_processing::cxx_static_library: Apply method
int _fI106323_cxx_static_library::apply(_pt107161* const &_arg ){
  _vI106328_ehandler = _arg;
      {
      __timeb64* _tmp108509 = (__timeb64*)&_vI106872_tv;
      _ftime64_s(((_tmp108509)));
      }
      _vI106871__genout_urv99559  = (static_cast<double>((_vI106872_tv.time))) + ((static_cast<double>((_vI106872_tv.millitm))) / 1.0e3 ) ; //init
      _vI106324_t0 = _vI106871__genout_urv99559; //assign simple
      _vI106874_cxx_static_library_mv_65533  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106874_cxx_static_library_mv_65533%2==1) ) goto _ml65535_L106875;
      _vI106873__urv99563  = (FLX_NEWP(_pI106424_echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_645290205;
    _ml65535_L106875:;
/*match case 2:any*/
      _vI106873__urv99563  = (FLX_NEWP(_pI106423_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_645290205:;
      _vI106325_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(ptrflx_processing->_vI106123_dflt_clang_config.ccflags, _vI106873__urv99563, ptrflx_processing->_vI106123_dflt_clang_config.dynamic_libraries, ptrflx_processing->_vI106123_dflt_clang_config.header_search_dirs, ptrflx_processing->_vI106123_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI106123_dflt_clang_config.macros, ptrflx_processing->_vI106123_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      _vI106326_EXT_STATIC_OBJ = (_vI106325_tc.static_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI106422_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65369_L106329;
      _vI106327_result = (_vI106325_tc.static_library_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME, _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_processing->_vI106422_control.cppos, ptrflx_processing->dvars.cpp_filebase + _vI106326_EXT_STATIC_OBJ )) /* apply_stack */)) /* general apply */; //assign simple
      goto _ifdoelse_bootflx_65370_L106330;
    _ifdoend_bootflx_65369_L106329:;
      _vI106327_result = (_vI106325_tc.static_library_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME, ptrflx_processing->_vI106422_control.cppos)) /* general apply */; //assign simple
    _ifdoelse_bootflx_65370_L106330:;
      if(!((ptrflx_processing->_vI106422_control.TIME == 1)) ) goto _end_99577_L106884;
      {
      __timeb64* _tmp108510 = (__timeb64*)&_vI106883_tv;
      _ftime64_s(((_tmp108510)));
      }
      _vI106882__genout_urv95543  = (static_cast<double>((_vI106883_tv.time))) + ((static_cast<double>((_vI106883_tv.millitm))) / 1.0e3 ) ; //init
      _vI106877_elapsed = _vI106882__genout_urv95543 - _vI106324_t0 ; //assign simple
      _vI106878_minutes = ::std::floor((_vI106877_elapsed / 60.0 )); //assign simple
      _vI106879_seconds = _vI106877_elapsed - (_vI106878_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108511 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106878_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106879_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Static lib   : ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108511)));
      }
      fflush(stdout);
    _end_99577_L106884:;
      if(!(!((_vI106327_result == 0)) ) ) goto _ifdoelse_bootflx_65372_L106332;
      {
      _a13708t_107090 _tmp108512 = ((::std::string("[flx] C++ static library link ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108512)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65372_L106332:;
      return _vI106327_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2715,3,2715,4); // HACK! 
}

//------------------------------
//FUNCTION <97573>: map_package_requirements_uncurry::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI97573__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <105352>: flx_processing::check_binary_uptodate: Apply method
 ::flx::rtl::cl_t check_binary_uptodate::apply(){
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99607_L105908;
      {
      _a13708t_107090 _tmp108513 = (::std::string("[flx] ") + ::std::string("Check C++->binary uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108513)));
      }
    _end_99607_L105908:;
      if(!((ptrflx_processing->_vI105441_control.RECOMPILE == 1)) ) goto _ifdoend_bootflx_65373_L105364;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99611_L105911;
      {
      _a13708t_107090 _tmp108514 = (::std::string("[flx] ") + ::std::string("C++->binary dependency checking skipped due to switch RECOMPILE=1: forced not uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108514)));
      }
    _end_99611_L105911:;
      return 0;
    _ifdoend_bootflx_65373_L105364:;
      if(!((ptrflx_processing->_vI105441_control.CHECK_DEPENDENCIES == 1)) ) goto _ifdoend_bootflx_65375_L105365;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99615_L105914;
      {
      _a13708t_107090 _tmp108515 = (::std::string("[flx] ") + ::std::string("Checking C++->binary dependencies since CHECK_DEPENDENCIES=1 to see if the output is uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108515)));
      }
    _end_99615_L105914:;
      xtime = dfiletime(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME, - 1.0 ); //assign simple
      _vI105916_f  = ptrflx_processing->_vI105038_dvars.filebase + ::std::string(".dep") ; //init
      if(!((::flx::rtl::strutil::substr(_vI105916_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L105917;
      _vI105916_f = ::flx::rtl::strutil::substr(_vI105916_f,0,1) + ::flx::rtl::strutil::substr(_vI105916_f,2,_vI105916_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L105920;
    _ifdoend_bootflx_64478_L105917:;
      if(!((::flx::rtl::strutil::subscript(_vI105916_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L105920;
      _vI105916_f = (::flx::rtl::strutil::substr(_vI105916_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI105916_f,2,_vI105916_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L105920:;
      if(!((::flx::rtl::strutil::subscript(_vI105916_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L105922;
      _vI105916_f = ::flx::rtl::strutil::substr(_vI105916_f,1,_vI105916_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L105922:;
      _vI105915_k = _fI82124_join((*ptrflx_processing->_vI68366_config ).FLX_OUTPUT_DIR, _vI105916_f); //assign simple
      _vI105358_depfilename = _vI105915_k; //assign simple
      flx_srctime = dfiletime(_vI105358_depfilename, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/))); //assign simple
      cpp_srctime = _fI105923_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_tt107527(- 1.0 , ptrflx_processing->_vI105441_control.cpps)) /* apply_stack */; //assign simple
      obj_srctime = _fI105933_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_tt107527(- 1.0 , ptrflx_processing->_vI105441_control.cppos)) /* apply_stack */; //assign simple
      _vI105945_max_mv_106  = (flx_srctime < cpp_srctime); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105945_max_mv_106%2==1) ) goto _ml108_L105944;
      _urv99675  = cpp_srctime; //init
      goto _end_inline_max_99682_L105946;
    _ml108_L105944:;
/*match case 2:any*/
      _urv99675  = flx_srctime; //init
    _end_inline_max_99682_L105946:;
      _vI105949_max_mv_106  = (_urv99675 < obj_srctime); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105949_max_mv_106%2==1) ) goto _ml108_L105948;
      _urv99683  = obj_srctime; //init
      goto _end_inline_max_99690_L105950;
    _ml108_L105948:;
/*match case 2:any*/
      _urv99683  = _urv99675; //init
    _end_inline_max_99690_L105950:;
      _vI105362_deptime = _urv99683; //assign simple
      _vI105363_uptodate = (_vI105362_deptime < xtime); //assign simple
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99700_L105953;
      {
      _a13708t_107090 _tmp108516 = (::std::string("[flx] ") + (::std::string("Extra c++ sources  ") + str(FLX_FPAR_PASS_ONLY)
      .apply(ptrflx_processing->_vI105441_control.cpps) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108516)));
      }
    _end_99700_L105953:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99704_L105956;
      {
      _a13708t_107090 _tmp108517 = (::std::string("[flx] ") + (::std::string("Extra object files ") + str(FLX_FPAR_PASS_ONLY)
      .apply(ptrflx_processing->_vI105441_control.cppos) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108517)));
      }
    _end_99704_L105956:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99708_L105959;
      {
      _a13708t_107090 _tmp108518 = (::std::string("[flx] ") + (::std::string("Extra ocaml files  ") + str(FLX_FPAR_PASS_ONLY)
      .apply(ptrflx_processing->_vI105441_control.ocamls) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108518)));
      }
    _end_99708_L105959:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99712_L105962;
      {
      _a13708t_107090 _tmp108519 = (::std::string("[flx] ") + (::std::string("Filebase = ") + ptrflx_processing->_vI105038_dvars.filebase ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108519)));
      }
    _end_99712_L105962:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99716_L105965;
      {
      _a13708t_107090 _tmp108520 = (::std::string("[flx] ") + (::std::string("cache   time = ") + strfiletime(FLX_FPAR_PASS ptrflx_processing->_vI105441_control.cache_time) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108520)));
      }
    _end_99716_L105965:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99720_L105968;
      {
      _a13708t_107090 _tmp108521 = (::std::string("[flx] ") + (::std::string("flx_src time = ") + strfiletime(FLX_FPAR_PASS flx_srctime) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108521)));
      }
    _end_99720_L105968:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99724_L105971;
      {
      _a13708t_107090 _tmp108522 = (::std::string("[flx] ") + (::std::string("cpp_src time = ") + strfiletime(FLX_FPAR_PASS cpp_srctime) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108522)));
      }
    _end_99724_L105971:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99728_L105974;
      {
      _a13708t_107090 _tmp108523 = (::std::string("[flx] ") + (::std::string("obj_src time = ") + strfiletime(FLX_FPAR_PASS obj_srctime) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108523)));
      }
    _end_99728_L105974:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99732_L105977;
      {
      _a13708t_107090 _tmp108524 = (::std::string("[flx] ") + (::std::string("dep     time = ") + strfiletime(FLX_FPAR_PASS _vI105362_deptime) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108524)));
      }
    _end_99732_L105977:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99736_L105980;
      {
      _a13708t_107090 _tmp108525 = (::std::string("[flx] ") + (((::std::string("Binary  time = ") + strfiletime(FLX_FPAR_PASS xtime) ) + ::std::string(" for ") ) + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108525)));
      }
    _end_99736_L105980:;
      check_binary_uptodate_mv_65538  = _vI105363_uptodate; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(check_binary_uptodate_mv_65538%2==1) ) goto _ml65540_L105983;
      _urv99737  = ::std::string(""); //init
      goto _end_hash_143681689;
    _ml65540_L105983:;
/*match case 2:any*/
      _urv99737  = ::std::string(" NOT "); //init
    _end_hash_143681689:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99745_L105987;
      {
      _a13708t_107090 _tmp108526 = (::std::string("[flx] ") + ((::std::string("output is ") + _urv99737 ) + ::std::string(" up to date") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108526)));
      }
    _end_99745_L105987:;
      return _vI105363_uptodate;
    _ifdoend_bootflx_65375_L105365:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99749_L105990;
      {
      _a13708t_107090 _tmp108527 = (::std::string("[flx] ") + ::std::string("C++->binary dependency checking skipped due to switch CHECK_DEPENDENCIES=0: forced uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108527)));
      }
    _end_99749_L105990:;
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2761,3,2761,4); // HACK! 
}

//------------------------------
//FUNCTION <89217>: toolchain_clang_apple_iOS_maker_uncurry::executable_extension: Apply method
_a13708t_107090 _fI89217_executable_extension::apply(){
      return ::std::string("");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1993,3,1993,43); // HACK! 
}

//------------------------------
//FUNCTION <88906>: generic_link_exe_static_uncurry: Apply method
int generic_link_exe_static_uncurry::apply(_tt107229 const &_arg ){
  _vI89718_spec_uncurry = _arg.mem_0;
  _vI89714_cppos = _arg.mem_1;
  _vI89715_LINKER_OUTPUT_FILENAME = _arg.mem_2;
      _vI93346_r = _fI93347_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89718_spec_uncurry.CCFLAGS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108528 = (void**)&_vI93346_r;
      _rev(((_tmp108528)),(_a13708t_107090*)0);
      }
      _vI93368_r = _fI93369_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89714_cppos, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108529 = (void**)&_vI93368_r;
      _rev(((_tmp108529)),(_a13708t_107090*)0);
      }
      _vI93386_r = _fI93387_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89718_spec_uncurry.LINK_STRINGS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108530 = (void**)&_vI93386_r;
      _rev(((_tmp108530)),(_a13708t_107090*)0);
      }
      _vI89712_CMD = (((((((((::std::string("\"") + _vI89718_spec_uncurry.CCLINK_STATIC ) + ::std::string("\"") ) + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93346_r)) /* apply_stack */ ) + ::std::string(" ") ) + (_vI89718_spec_uncurry.SPEC_EXE_FILENAME + ((::std::string("\"") + _vI89715_LINKER_OUTPUT_FILENAME ) + ::std::string("\"") ) ) ) + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93368_r)) /* apply_stack */ ) + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93386_r)) /* apply_stack */ ; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI89718_spec_uncurry.debugln)->clone()
      ->call(0, ::std::string("Link command=") + _vI89712_CMD );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_444_L93402;
      {
      _a13708t_107090 _tmp108531 = (::std::string("[system] ") + _vI89712_CMD ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108531)));
      }
      fflush(stderr);
    _ifdoelse_std_444_L93402:;
      _genout_urv93409  = ::std::system(((::std::string("\"") + _vI89712_CMD ) + ::std::string("\"") ).c_str()); //init
      _vI93406__genout_urv93142  = _genout_urv93409; //init
      _vI93405__genout_urv93134  = _vI93406__genout_urv93142; //init
      _vI93404__genout_urv93129  = _vI93405__genout_urv93134; //init
      _genout_urv93400  = _vI93404__genout_urv93129; //init
      _vI89713_result = _genout_urv93400; //assign simple
      if(!(!((_vI89713_result == 0)) ) ) goto _ifdoelse_bootflx_64821_L89717;
      {
      _a13708t_107090 _tmp108532 = ((::std::string("Link command=") + _vI89712_CMD ) + ::std::string(" FAILED") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108532)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_64821_L89717:;
      return _vI89713_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",337,3,337,4); // HACK! 
}

//------------------------------
//FUNCTION <105354>: flx_processing::check_binary_uptodate::maxf::maxf'2: Apply method
double _fI105354_maxf__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI105355_f = _arg;
      _vI105905_max_mv_106  = (ptr_fI105353_maxf->_vI105356_t < dfiletime(_vI105355_f, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)))); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI105905_max_mv_106%2==1) ) goto _ml108_L105904;
      return dfiletime(_vI105355_f, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)));
    _ml108_L105904:;
/*match case 2:any*/
      return ptr_fI105353_maxf->_vI105356_t;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2723,5,2723,95); // HACK! 
}

//------------------------------
//FUNCTION <98625>: cxx_depcheck::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI98625__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <89745>: map_package_requirements_uncurry::_lam_64522: Apply method
_ft107162* _lam_64522::apply(void* const &_arg ){
  _vI89749_acc = _arg;
      return (FLX_NEWP(_fI89746__lam_64522__apos_2)(FLX_FPAR_PASS this, ptrmap_package_requirements_uncurry));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",820,8,820,14); // HACK! 
}

//------------------------------
//FUNCTION <103066>: setup-from-file_uncurry::aux: Apply method
void* _fI103066_aux::apply(_tt107116 const &_arg ){
  _vI103067_x = _arg.mem_0;
  _vI103068_y = _arg.mem_1;
    start_91026_L103078:;
      _vI103073_find_mv_2046  = _vI103067_x.find((::flx::rtl::strutil::subscript(::std::string("\n"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI103073_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L103075;
      _vI103069_aux_mv_2226  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_90996_L103076;
    _ml2048_L103075:;
/*match case 2:i_param_std_1834*/
      _vI103074_i_param_std_1834 = _vI103073_find_mv_2046; //assign simple
      _vI103069_aux_mv_2226  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI103074_i_param_std_1834)); //init
    _end_inline_find_90996_L103076:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(_vI103069_aux_mv_2226)==0) ) goto _ml2228_L103071;
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI103068_y, _vI103067_x)));
    _ml2228_L103071:;
/*match case 2:|Some n_param_std_1909*/
      if(!andthen(FLX_VNI(_vI103069_aux_mv_2226)==1, (FLX_NEWP(_fI103077__lam_2230)(FLX_FPAR_PASS this, ptr_pI88880_setup__hyphen_from__hyphen_file_uncurry))) ) goto _ml2229_L103072;
      _vI103070_n_param_std_1909 = *((_a5038t_107106*)FLX_VNP(_vI103069_aux_mv_2226)); //assign simple
/*parallel assignment*/
      _vI103068_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI103068_y, ::flx::rtl::strutil::substr(_vI103067_x,0,_vI103070_n_param_std_1909)))); //init
      _vI103067_x  = ::flx::rtl::strutil::substr(_vI103067_x,_vI103070_n_param_std_1909 + 1 ,_vI103067_x.size()); //init
      goto start_91026_L103078;
    _ml2229_L103072:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,7,478,61);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",480,5,480,6); // HACK! 
}

//------------------------------
//FUNCTION <96619>: flx_pkgconfig::handle_pkg::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI96619__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <65885>: toolchain_msvc_win32::dynamic_executable_linker: Apply method
int dynamic_executable_linker::apply(_art107181 const &_arg ){
  _vI65896_spec = _arg;
      _vI65887_link_specs = (void* /*VR_nullptr*/ )0; //assign simple
      _vI65888_obj_specs = (void* /*VR_nullptr*/ )0; //assign simple
      _vI92545_xs  = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI65896_spec.srcs, ptrtoolchain_msvc_win32->static_link_strings)) /* apply_stack */; //init
      _genout_urv92544  = (FLX_NEWP(_fI92546_iterator__apos_2)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)); //init
      _generator_toolchain_4199 = _genout_urv92544; //assign simple
    continue__ll_toolchain_4176_L65897:;
      dynamic_executable_linker_mv_65686  = (_generator_toolchain_4199)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some term_param_bootflx_65639*/
      if(!andthen(FLX_VNI(dynamic_executable_linker_mv_65686)==1, (FLX_NEWP(_lam_65689)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32))) ) goto _ml65688_L65904;
      term_param_bootflx_65639 = *((_a13708t_107090*)FLX_VNP(dynamic_executable_linker_mv_65686)); //assign simple
      if(!((::flx::rtl::strutil::substr(term_param_bootflx_65639,0,::std::string("/DEFAULTLIB:").size()) == ::std::string("/DEFAULTLIB:"))) ) goto _ifdoend_bootflx_65640_L65898;
      *((void**)&_vI65887_link_specs)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI65887_link_specs) , term_param_bootflx_65639)) /* apply_stack */; //assign simple
      goto continue__ll_toolchain_4176_L65897;
    _ifdoend_bootflx_65640_L65898:;
      if(!((::flx::rtl::strutil::substr(term_param_bootflx_65639,0,::std::string("/LIBPATH:").size()) == ::std::string("/LIBPATH:"))) ) goto _ifdoend_bootflx_65642_L65899;
      *((void**)&_vI65887_link_specs)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI65887_link_specs) , term_param_bootflx_65639)) /* apply_stack */; //assign simple
      goto continue__ll_toolchain_4176_L65897;
    _ifdoend_bootflx_65642_L65899:;
      if(!((::flx::rtl::strutil::substr(term_param_bootflx_65639,- ::std::string(".obj").size() ,term_param_bootflx_65639.size()) == ::std::string(".obj")) || (::flx::rtl::strutil::substr(term_param_bootflx_65639,- ::std::string(".obj").size() ,term_param_bootflx_65639.size()) == ::std::string(".obj")) ) ) goto _ifdoend_bootflx_65644_L65900;
      *((void**)&_vI65888_obj_specs)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI65888_obj_specs) , term_param_bootflx_65639)) /* apply_stack */; //assign simple
      goto continue__ll_toolchain_4176_L65897;
    _ifdoend_bootflx_65644_L65900:;
      *((void**)&_vI65888_obj_specs)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI65888_obj_specs) , term_param_bootflx_65639)) /* apply_stack */; //assign simple
      goto continue__ll_toolchain_4176_L65897;
    _ml65688_L65904:;
/*match case 2:|None*/
      if(!(FLX_VNI(dynamic_executable_linker_mv_65686)==0) ) goto _ml65690_L65905;
      goto _em65686_L65906;
    _ml65690_L65905:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1915,5,1915,9);
;
    _em65686_L65906:;
      _genout_urv92610  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI65888_obj_specs, ::std::string("/Fe") + _vI65896_spec.dst )) /* apply_stack */, ::std::string("/link"))) /* apply_stack */, _vI65887_link_specs)) /* apply_stack */, ::std::string("/MDd")))), ::std::string("/nologo")))), ::std::string("cl.exe"))))) /* apply_stack */; //init
      _ds2_65691 = _genout_urv92610; //assign simple
      _vI65894_result = _ds2_65691.mem_0; //assign simple
      _vI65895_text = _ds2_65691.mem_1; //assign simple
      {
      checkwarn(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .stack_call(_tt107175(_vI65894_result, _vI65895_text));
      }
      return _vI65894_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1919,3,1919,4); // HACK! 
}

//------------------------------
//FUNCTION <97416>: map_package_requirements_uncurry::_lam_64522::_lam_64522'2::aux_uncurry: Apply method
void* _fI97416_aux_uncurry::apply(_at107115 const &_arg ){
  _vI97417_x_uncurry = _arg.data[0];
  _vI97418_y = _arg.data[1];
    start_91065_L97425:;
      _vI97421_aux__apos_2_mv_1328  = _vI97417_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97421_aux__apos_2_mv_1328)==0) ) goto _ml1330_L97420;
      return _vI97418_y;
    _ml1330_L97420:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI97421_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI97424__lam_1332)(FLX_FPAR_PASS this, ptr_fI89746__lam_64522__apos_2, ptr_lam_64522, ptrmap_package_requirements_uncurry))) ) goto _ml1331_L97419;
      _vI97422_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI97421_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI97423_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI97421_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI97418_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97418_y, _vI97422_h_param_std_1210))); //init
      _vI97417_x_uncurry  = _vI97423_t_param_std_1209; //init
      goto start_91065_L97425;
    _ml1331_L97419:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------

//PROCEDURE <68061:> flx_pkgconfig::keep_val: Call method
::flx::rtl::con_t * keep_val::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI68063_v = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <68061:> flx_pkgconfig::keep_val: Resume method
::flx::rtl::con_t *keep_val::resume(){
      ptrflx_pkgconfig->_vI68017_result = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_pkgconfig->_vI68017_result, _vI68063_v)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <89236>: toolchain_clang_apple_iOS_maker_uncurry::dependency_parser: Apply method
void* _fI89236_dependency_parser::apply(_a13708t_107090 const &_arg ){
  _vI89237_data = _arg;
      return generic_dependency_parser(FLX_FPAR_PASS_ONLY)
      .apply(_vI89237_data) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2039,3,2039,4); // HACK! 
}

//------------------------------
//FUNCTION <97282>: flx_pkgconfig::reattach_drive_letters::_lam_64663::_lam_64664: Apply method
 ::flx::rtl::cl_t _lam_64664::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",231,18,231,31); // HACK! 
}

//------------------------------

//PROCEDURE <68069:> flx_pkgconfig::handle_pkg::_lam_64696: Call method
::flx::rtl::con_t * _lam_64696::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  dir = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <68069:> flx_pkgconfig::handle_pkg::_lam_64696: Resume method
::flx::rtl::con_t *_lam_64696::resume(){
  FLX_START_SWITCH
      _lam_64696_mv_64698  = (dir == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_lam_64696_mv_64698%2==1) ) goto _ml64700_L96457;
      _urv96455  = ::std::string("."); //init
      goto _end_hash_857646330;
    _ml64700_L96457:;
/*match case 2:any*/
      _urv96455  = dir; //init
    _end_hash_857646330:;
      filename = (((_urv96455 + ::std::string("\\") ) + ptrhandle_pkg->_vI68127_pkg ) + ::std::string(".") ) + ptrflx_pkgconfig->extension ; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_562_L96475;
      {
      _a13708t_107090 _tmp108537 = (::std::string("[Open_input] ") + filename ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108537)));
      }
      fflush(stderr);
    _ifdoelse_std_562_L96475:;
      _genout_urv96480  = fopen(filename.c_str(),"rb"); //init
      _genout_urv96471  = _genout_urv96480; //init
      _genout_urv96473  = _genout_urv96471; //init
      file = _genout_urv96473; //assign simple
      _genout_urv96481  = file!=(FILE*)0; //init
      if(!_genout_urv96481 ) goto _ifdoelse_bootflx_64605_L68125;
      if(!ptrflx_pkgconfig->dolist ) goto _ifdoelse_bootflx_64607_L68116;
      _lam_64696_mv_64702  = ptrflx_pkgconfig->keep; //init
/*begin match*/
/*match case 1:|keepleftmost*/
      if(!(_lam_64696_mv_64702%3==1) ) goto _ml64704_L68111;
      _vI96488_insert_unique__apos_3_mv_1428  = mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107208((FLX_NEWP(_fI96489__lam_1398)(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)), ptrflx_pkgconfig->_vI68017_result)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI96488_insert_unique__apos_3_mv_1428%2==1) ) goto _ml1430_L96487;
      _vI96486__urv95792  = ptrflx_pkgconfig->_vI68017_result; //init
      goto _end_hash_396220951;
    _ml1430_L96487:;
/*match case 2:any*/
      _vI96486__urv95792  = _fI96501_aux_uncurry(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI96491_aux_uncurry(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at107115(ptrflx_pkgconfig->_vI68017_result, (void* /*VR_nullptr*/ )0)) /* apply_stack */, ptrhandle_pkg->_vI68127_pkg))), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
    _end_hash_396220951:;
      ptrflx_pkgconfig->_vI68017_result = _vI96486__urv95792; //assign simple
      goto _ifdoelse_bootflx_64607_L68116;
    _ml64704_L68111:;
/*match case 2:|keeprightmost*/
      if(!(_lam_64696_mv_64702%3==2) ) goto _ml64705_L68112;
      ptrflx_pkgconfig->_vI68017_result = _fI96517_aux(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at107115(ptrflx_pkgconfig->_vI68017_result, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      goto _ifdoelse_bootflx_64607_L68116;
    _ml64705_L68112:;
/*match case 3:|keepall*/
      if(!(_lam_64696_mv_64702%3==0) ) goto _ml64706_L68113;
      ptrflx_pkgconfig->_vI68017_result = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_pkgconfig->_vI68017_result, ptrhandle_pkg->_vI68127_pkg)) /* apply_stack */; //assign simple
      goto _ifdoelse_bootflx_64607_L68116;
    _ml64706_L68113:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",306,14,306,23);
;
    _ifdoelse_bootflx_64607_L68116:;
      _vI68075_lines = (void* /*VR_nullptr*/ )0; //assign simple
      _genout_urv96545  = ::flx::rtl::ioutil::readln(file); //init
      _vI68076_line = _genout_urv96545; //assign simple
    continue__ll_flx_pkgconfig_10814_L68117:;
      if(FLX_UNLIKELY(!(!((_vI68076_line == ::std::string(""))) ) )) goto break__ll_flx_pkgconfig_10814_L68120;
      _vI68076_line = lstrip(rstrip(_vI68076_line, ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //assign simple
      if(!(!((_vI68076_line == ::std::string("")))  && !((::flx::rtl::strutil::subscript(_vI68076_line,0) == ::flx::rtl::strutil::subscript(::std::string("#"),0)))  ) ) goto _ifdoelse_bootflx_64610_L68119;
      _vI68075_lines = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI68075_lines, _vI68076_line))); //assign simple
    _ifdoelse_bootflx_64610_L68119:;
      _genout_urv96578  = ::flx::rtl::ioutil::readln(file); //init
      _vI68076_line = _genout_urv96578; //assign simple
      goto continue__ll_flx_pkgconfig_10814_L68117;
    break__ll_flx_pkgconfig_10814_L68120:;
      if(ptrflx_pkgconfig->backwards) goto _ifdoelse_bootflx_64612_L68122;
      _vI68075_lines = _fI96581_aux_uncurry(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at107115(_vI68075_lines, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_64612_L68122:;
      {
      _pt107148* _tmp108539 = (FLX_NEWP(_lam_64707)(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig));
      FLX_SET_PC(108540)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt107149((_tmp108539), _vI68075_lines));
      }
    FLX_CASE_LABEL(108540)
      (void)fclose(file);
      ptrhandle_pkg->found = 1; //assign simple
      if(!ptrflx_pkgconfig->hide ) goto _ifdoelse_bootflx_64605_L68125;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_64605_L68125:;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------
//FUNCTION <97507>: map_package_requirements_uncurry::aux_uncurry: Apply method
_a13708t_107090 _fI97507_aux_uncurry::apply(_tt107116 const &_arg ){
  _vI97508_init_uncurry = _arg.mem_0;
  _vI97509_x = _arg.mem_1;
    start_95154_L97516:;
      _vI97512_aux__apos_2_mv_1297  = _vI97509_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97512_aux__apos_2_mv_1297)==0) ) goto _ml1299_L97511;
      return _vI97508_init_uncurry;
    _ml1299_L97511:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI97512_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI97515__lam_1301)(FLX_FPAR_PASS this, ptrmap_package_requirements_uncurry))) ) goto _ml1300_L97510;
      _vI97513_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI97512_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI97514_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI97512_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI97509_x  = _vI97514_t_param_std_1199; //init
      _vI97508_init_uncurry  = ((FLX_NEWP(join)(FLX_FPAR_PASS_ONLY))
      ->apply(_vI97508_init_uncurry))->clone()
      ->apply(_vI97513_h_param_std_1200) /* general apply */; //init
      goto start_95154_L97516;
    _ml1300_L97510:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <104942>: FlxPkgConfigQuery::getpkgfielddflt::getpkgfielddflt'2::_lam_64783: Apply method
 ::flx::rtl::cl_t _lam_64783::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",540,9,540,14); // HACK! 
}

//------------------------------
//FUNCTION <67860>: flx_pkgconfig::lexit: Apply method
_tt107298 lexit::apply(_at107297 const &_arg ){
  ini = _arg.data[0];
  finish = _arg.data[1];
      start = ini; //assign simple
      if(!((start == finish)) ) goto _ifdoend_bootflx_64529_L67868;
      return _tt107298(start, ::std::string(""));
    _ifdoend_bootflx_64529_L67868:;
      if(!((*start  == ::flx::rtl::strutil::subscript(::std::string(" "),0))) ) goto _ifdoend_bootflx_64531_L67871;
      {
      _a15443t_107296* _tmp108542 = (_a15443t_107296*)&start;
      ++*((_tmp108542));
      }
    continue__ll_flx_pkgconfig_10495_L67869:;
      if(FLX_UNLIKELY(!(!((start == finish))  && (*start  == ::flx::rtl::strutil::subscript(::std::string(" "),0)) ) )) goto break__ll_flx_pkgconfig_10495_L67870;
      {
      _a15443t_107296* _tmp108543 = (_a15443t_107296*)&start;
      ++*((_tmp108543));
      }
      goto continue__ll_flx_pkgconfig_10495_L67869;
    break__ll_flx_pkgconfig_10495_L67870:;
      return _tt107298(start, ::std::string(""));
    _ifdoend_bootflx_64531_L67871:;
      if(!((*start  == ::flx::rtl::strutil::subscript(::std::string("\""),0))) ) goto _ifdoend_bootflx_64533_L67875;
      {
      _a15443t_107296* _tmp108544 = (_a15443t_107296*)&start;
      ++*((_tmp108544));
      }
      p1 = start; //assign simple
    continue__ll_flx_pkgconfig_10510_L67872:;
      if(FLX_UNLIKELY(!(!((start == finish))  && !((*start  == ::flx::rtl::strutil::subscript(::std::string("\""),0)))  ) )) goto break__ll_flx_pkgconfig_10510_L67873;
      {
      _a15443t_107296* _tmp108545 = (_a15443t_107296*)&start;
      ++*((_tmp108545));
      }
      goto continue__ll_flx_pkgconfig_10510_L67872;
    break__ll_flx_pkgconfig_10510_L67873:;
      if(!((start == finish)) ) goto _ifdoend_bootflx_64535_L67874;
      return _tt107298(start, ::std::string(p1,start));
    _ifdoend_bootflx_64535_L67874:;
      return _tt107298(start + 1 , ::std::string(p1,start));
    _ifdoend_bootflx_64533_L67875:;
      if(!((*start  == ::flx::rtl::strutil::subscript(::std::string("'"),0))) ) goto _ifdoend_bootflx_64537_L67879;
      {
      _a15443t_107296* _tmp108546 = (_a15443t_107296*)&start;
      ++*((_tmp108546));
      }
      p2 = start; //assign simple
    continue__ll_flx_pkgconfig_10536_L67876:;
      if(FLX_UNLIKELY(!(!((start == finish))  && !((*start  == ::flx::rtl::strutil::subscript(::std::string("'"),0)))  ) )) goto break__ll_flx_pkgconfig_10536_L67877;
      {
      _a15443t_107296* _tmp108547 = (_a15443t_107296*)&start;
      ++*((_tmp108547));
      }
      goto continue__ll_flx_pkgconfig_10536_L67876;
    break__ll_flx_pkgconfig_10536_L67877:;
      if(!((start == finish)) ) goto _ifdoend_bootflx_64539_L67878;
      return _tt107298(start, ::std::string(p2,start));
    _ifdoend_bootflx_64539_L67878:;
      return _tt107298(start + 1 , ::std::string(p2,start));
    _ifdoend_bootflx_64537_L67879:;
      p3 = start; //assign simple
    continue__ll_flx_pkgconfig_10561_L67880:;
      if(FLX_UNLIKELY(!(!((start == finish))  && !((*start  == ::flx::rtl::strutil::subscript(::std::string(" "),0)))  ) )) goto break__ll_flx_pkgconfig_10561_L67881;
      {
      _a15443t_107296* _tmp108548 = (_a15443t_107296*)&start;
      ++*((_tmp108548));
      }
      goto continue__ll_flx_pkgconfig_10561_L67880;
    break__ll_flx_pkgconfig_10561_L67881:;
      return _tt107298(start, ::std::string(p3,start));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",98,5,98,6); // HACK! 
}

//------------------------------
//FUNCTION <105134>: flx_processing::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI105134__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <96499>: flx_pkgconfig::handle_pkg::_lam_64696::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI96499__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <89872>: respectful_parse_uncurry_uncurry: Apply method
_art107137 respectful_parse_uncurry_uncurry::apply(_tt107142 const &_arg ){
  action_uncurry_uncurry = _arg.mem_0;
  state_uncurry = _arg.mem_1;
  _vI90072_s = _arg.mem_2;
      _vI90044_mode = state_uncurry.mode; //assign simple
      _vI90045_current = state_uncurry.current; //assign simple
      _vI90046_result = (void* /*VR_nullptr*/ )0; //assign simple
      _vI91525_x  = _vI90072_s; //init
      _genout_urv91520  = (FLX_NEWP(_fI91521_iterator__apos_2)(FLX_FPAR_PASS this)); //init
      _generator_strings_7267 = _genout_urv91520; //assign simple
    continue__ll_strings_7183_L90073:;
      _vI90017_respectful_parse__apos_3_mv_2263  = (_generator_strings_7267)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some ch_param_std_1927*/
      if(!andthen(FLX_VNI(_vI90017_respectful_parse__apos_3_mv_2263)==1, (FLX_NEWP(_lam_2295)(FLX_FPAR_PASS this))) ) goto _ml2265_L90108;
      ch_param_std_1927 = *((char*)FLX_VNP(_vI90017_respectful_parse__apos_3_mv_2263)); //assign simple
      _vI90020_respectful_parse__apos_3_mv_2266  = _vI90044_mode; //init
/*begin match*/
/*match case 1:|copying*/
      if(!(_vI90020_respectful_parse__apos_3_mv_2266%7==0) ) goto _ml2268_L90074;
      {
      handlecopying(FLX_FPAR_PASS this)
      .stack_call(ch_param_std_1927);
      }
      goto continue__ll_strings_7183_L90073;
    _ml2268_L90074:;
/*match case 2:|quote*/
      if(!(_vI90020_respectful_parse__apos_3_mv_2266%7==2) ) goto _ml2269_L90087;
      if(!((ch_param_std_1927 == ::flx::rtl::strutil::subscript(::std::string("'"),0))) ) goto _ifdoend_std_1929_L90079;
      _vI90024_respectful_parse__apos_3_mv_2270  = action_uncurry_uncurry.quote; //init
/*begin match*/
/*match case 1:|ignore-quote*/
      if(!(_vI90024_respectful_parse__apos_3_mv_2270%3==0) ) goto _ml2272_L90075;
      {if(FLX_UNLIKELY(!(0)))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/strings.fdoc",595,15,595,27);}
      goto continue__ll_strings_7183_L90073;
    _ml2272_L90075:;
/*match case 2:|keep-quote*/
      if(!(_vI90024_respectful_parse__apos_3_mv_2270%3==1) ) goto _ml2273_L90076;
      {
      _a13708t_107090* _tmp108550 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108550)) += ch_param_std_1927;
      }
      _vI90044_mode = /*VR_int*/0; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2273_L90076:;
/*match case 3:|drop-quote*/
      if(!(_vI90024_respectful_parse__apos_3_mv_2270%3==2) ) goto _ml2274_L90077;
      _vI90044_mode = /*VR_int*/0; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2274_L90077:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",602,13,602,22);
;
      goto continue__ll_strings_7183_L90073;
    _ifdoend_std_1929_L90079:;
      if(!((ch_param_std_1927 == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoend_std_1932_L90084;
      _vI90028_respectful_parse__apos_3_mv_2275  = action_uncurry_uncurry.escape; //init
/*begin match*/
/*match case 1:|ignore-escape*/
      if(!(_vI90028_respectful_parse__apos_3_mv_2275%3==0) ) goto _ml2277_L90080;
      {
      _a13708t_107090* _tmp108552 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108552)) += ch_param_std_1927;
      }
      goto continue__ll_strings_7183_L90073;
    _ml2277_L90080:;
/*match case 2:|keep-escape*/
      if(!(_vI90028_respectful_parse__apos_3_mv_2275%3==1) ) goto _ml2278_L90081;
      {
      _a13708t_107090* _tmp108553 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108553)) += ch_param_std_1927;
      }
      _vI90044_mode = /*VR_int*/5; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2278_L90081:;
/*match case 3:|drop-escape*/
      if(!(_vI90028_respectful_parse__apos_3_mv_2275%3==2) ) goto _ml2279_L90082;
      _vI90044_mode = /*VR_int*/5; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2279_L90082:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",612,13,612,22);
;
      goto continue__ll_strings_7183_L90073;
    _ifdoend_std_1932_L90084:;
      {
      _a13708t_107090* _tmp108555 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108555)) += ch_param_std_1927;
      }
      goto continue__ll_strings_7183_L90073;
    _ml2269_L90087:;
/*match case 3:|dquote*/
      if(!(_vI90020_respectful_parse__apos_3_mv_2266%7==3) ) goto _ml2280_L90100;
      if(!((ch_param_std_1927 == ::flx::rtl::strutil::subscript(::std::string("\""),0))) ) goto _ifdoend_std_1937_L90092;
      _vI90033_respectful_parse__apos_3_mv_2281  = action_uncurry_uncurry.dquote; //init
/*begin match*/
/*match case 1:|ignore-dquote*/
      if(!(_vI90033_respectful_parse__apos_3_mv_2281%3==0) ) goto _ml2283_L90088;
      {if(FLX_UNLIKELY(!(0)))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/strings.fdoc",621,15,621,27);}
      goto continue__ll_strings_7183_L90073;
    _ml2283_L90088:;
/*match case 2:|keep-dquote*/
      if(!(_vI90033_respectful_parse__apos_3_mv_2281%3==1) ) goto _ml2284_L90089;
      {
      _a13708t_107090* _tmp108556 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108556)) += ch_param_std_1927;
      }
      _vI90044_mode = /*VR_int*/0; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2284_L90089:;
/*match case 3:|drop-dquote*/
      if(!(_vI90033_respectful_parse__apos_3_mv_2281%3==2) ) goto _ml2285_L90090;
      _vI90044_mode = /*VR_int*/0; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2285_L90090:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",628,13,628,22);
;
      goto continue__ll_strings_7183_L90073;
    _ifdoend_std_1937_L90092:;
      if(!((ch_param_std_1927 == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoend_std_1940_L90097;
      _vI90037_respectful_parse__apos_3_mv_2286  = action_uncurry_uncurry.escape; //init
/*begin match*/
/*match case 1:|ignore-escape*/
      if(!(_vI90037_respectful_parse__apos_3_mv_2286%3==0) ) goto _ml2288_L90093;
      {
      _a13708t_107090* _tmp108558 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108558)) += ch_param_std_1927;
      }
      goto continue__ll_strings_7183_L90073;
    _ml2288_L90093:;
/*match case 2:|keep-escape*/
      if(!(_vI90037_respectful_parse__apos_3_mv_2286%3==1) ) goto _ml2289_L90094;
      {
      _a13708t_107090* _tmp108559 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108559)) += ch_param_std_1927;
      }
      _vI90044_mode = /*VR_int*/6; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2289_L90094:;
/*match case 3:|drop-escape*/
      if(!(_vI90037_respectful_parse__apos_3_mv_2286%3==2) ) goto _ml2290_L90095;
      _vI90044_mode = /*VR_int*/6; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2290_L90095:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",638,13,638,22);
;
      goto continue__ll_strings_7183_L90073;
    _ifdoend_std_1940_L90097:;
      {
      _a13708t_107090* _tmp108561 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108561)) += ch_param_std_1927;
      }
      goto continue__ll_strings_7183_L90073;
    _ml2280_L90100:;
/*match case 4:|escape-copying*/
      if(!(_vI90020_respectful_parse__apos_3_mv_2266%7==4) ) goto _ml2291_L90101;
      {
      _a13708t_107090* _tmp108562 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108562)) += ch_param_std_1927;
      }
      _vI90044_mode = /*VR_int*/0; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2291_L90101:;
/*match case 5:|escape-quote*/
      if(!(_vI90020_respectful_parse__apos_3_mv_2266%7==5) ) goto _ml2292_L90102;
      {
      _a13708t_107090* _tmp108563 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108563)) += ch_param_std_1927;
      }
      _vI90044_mode = /*VR_int*/2; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2292_L90102:;
/*match case 6:|escape-dquote*/
      if(!(_vI90020_respectful_parse__apos_3_mv_2266%7==6) ) goto _ml2293_L90103;
      {
      _a13708t_107090* _tmp108564 = (_a13708t_107090*)&_vI90045_current;
      *((_tmp108564)) += ch_param_std_1927;
      }
      _vI90044_mode = /*VR_int*/3; //assign simple
      goto continue__ll_strings_7183_L90073;
    _ml2293_L90103:;
/*match case 7:|skipping*/
      if(!(_vI90020_respectful_parse__apos_3_mv_2266%7==1) ) goto _ml2294_L90106;
      if(!((((int)(::flx::rtl::strutil::subscript(::std::string(" "),0)) ) < ((int)ch_param_std_1927 ))) ) goto continue__ll_strings_7183_L90073;
      {
      handlecopying(FLX_FPAR_PASS this)
      .stack_call(ch_param_std_1927);
      }
      goto continue__ll_strings_7183_L90073;
      goto continue__ll_strings_7183_L90073;
    _ml2294_L90106:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",659,9,659,18);
;
      goto continue__ll_strings_7183_L90073;
    _ml2265_L90108:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI90017_respectful_parse__apos_3_mv_2263)==0) ) goto _ml2296_L90109;
      goto _em2263_L90110;
    _ml2296_L90109:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",660,7,660,11);
;
    _em2263_L90110:;
      return _art107137(_vI90045_current, _vI90044_mode, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(state_uncurry.parsed, _vI90046_result)) /* apply_stack */);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",662,5,662,6); // HACK! 
}

//------------------------------
//FUNCTION <106334>: flx_processing::check_binary_uptodate::maxf: Apply method
_ft107543* _fI106334_maxf::apply(double const &_arg ){
  _vI106337_t = _arg;
      return (FLX_NEWP(_fI106335_maxf__apos_2)(FLX_FPAR_PASS this, ptr_fI106333_check_binary_uptodate, ptrflx_processing));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2723,5,2723,95); // HACK! 
}

//------------------------------
//FUNCTION <66084>: toolchain_gcc_osx::static_executable_linker: Apply method
int _fI66084_static_executable_linker::apply(_art107181 const &_arg ){
  _vI66087_spec = _arg;
      _vI66086_result = generic_link_exe_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_gcc_osx->_vI66013_linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_gcc_osx->_vI66096_config.library_search_dirs, ptrtoolchain_gcc_osx->_vI66096_config.static_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66087_spec.srcs, _vI66087_spec.dst)) /* apply_stack */; //assign simple
      return _vI66086_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1136,3,1136,4); // HACK! 
}

//------------------------------
//C FUNC <81922>: dfiletime
double dfiletime( _a13708t_107090 _vI82201_f, double _vI82202_dflt){
   ::flx::rtl::cl_t dfiletime_mv_719;
  double _urv94860;
   ::flx::rtl::cl_t _vI94857_filetime_mv_689;
  int _vI94855_err;
  _a16417t_107248 _vI94854_b;
  double _urv94852;
  double _vI82204_x;
      {
      _a16417t_107248* _tmp108568 = (_a16417t_107248*)&_vI94854_b;
      int* _tmp108569 = (int*)&_vI94855_err;
      *((_tmp108569))=_stat64(_vI82201_f.c_str(),((_tmp108568)));
      }
      _vI94857_filetime_mv_689  = (_vI94855_err == 0); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI94857_filetime_mv_689%2==1) ) goto _ml691_L94856;
      _urv94852  = (double)(((_a16417t_107248*)&_vI94854_b)->st_mtime); //init
      goto _end_inline_filetime_94859_L94859;
    _ml691_L94856:;
/*match case 2:any*/
      _urv94852  = 0.0; //init
    _end_inline_filetime_94859_L94859:;
      _vI82204_x = _urv94852; //assign simple
      dfiletime_mv_719  = (_vI82204_x == 0.0); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(dfiletime_mv_719%2==1) ) goto _ml721_L94861;
      _urv94860  = _vI82202_dflt; //init
      goto _end_hash_626374834;
    _ml721_L94861:;
/*match case 2:any*/
      _urv94860  = _vI82204_x; //init
    _end_hash_626374834:;
      _vI82204_x = _urv94860; //assign simple
      return _vI82204_x;
}
//------------------------------
//FUNCTION <92554>: toolchain_msvc_win32::dynamic_executable_linker::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI92554__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <104635>: flx_processing::dxqt'2: Apply method
_a13708t_107090 _fI104635_dxqt__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI104642_cmd = _arg;
      if(!(((*ptrflx_processing->_vI68367_control).ECHO == 1) || (*ptrflx_processing->_vI68367_control).DEBUG_FLX ) ) goto _ifdoelse_bootflx_65246_L104644;
      {
      _a13708t_107090 _tmp108570 = (::std::string("cmd=") + _vI104642_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108570)));
      }
    _ifdoelse_bootflx_65246_L104644:;
      {
      __timeb64* _tmp108571 = (__timeb64*)&_vI104652_tv;
      _ftime64_s(((_tmp108571)));
      }
      _genout_urv98975  = (static_cast<double>((_vI104652_tv.time))) + ((static_cast<double>((_vI104652_tv.millitm))) / 1.0e3 ) ; //init
      now = _genout_urv98975; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_448_L104654;
      {
      _a13708t_107090 _tmp108572 = (::std::string("[get_stdout] ") + _vI104642_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108572)));
      }
      fflush(stderr);
    _ifdoelse_std_448_L104654:;
      _genout_urv98979  = basic_get_stdout(_vI104642_cmd); //init
      _ds2_65429 = _genout_urv98979; //assign simple
      _vI104638_result = _ds2_65429.mem_0; //assign simple
      output = _ds2_65429.mem_1; //assign simple
      if(!((_vI104638_result == 0)) ) goto _ifdoend_bootflx_65247_L104647;
      find_first_of_mv_2106  = output.find_first_of((::flx::rtl::strutil::subscript(::std::string("\n"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1857 when (== (i_param_std_1857, stl_npos)))*/
      if(!((find_first_of_mv_2106 == ::std::string::npos)) ) goto _ml2108_L104663;
      _vI104657_dxqt__apos_2_mv_65431  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_first_of_98962_L104664;
    _ml2108_L104663:;
/*match case 2:i_param_std_1858*/
      i_param_std_1858 = find_first_of_mv_2106; //assign simple
      _vI104657_dxqt__apos_2_mv_65431  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (i_param_std_1858)); //init
    _end_inline_find_first_of_98962_L104664:;
/*begin match*/
/*match case 1:|Some n_param_bootflx_65249*/
      if(!andthen(FLX_VNI(_vI104657_dxqt__apos_2_mv_65431)==1, (FLX_NEWP(_lam_65434)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65433_L104659;
      n_param_bootflx_65249 = *((_a5038t_107106*)FLX_VNP(_vI104657_dxqt__apos_2_mv_65431)); //assign simple
      _urv98985  = n_param_bootflx_65249; //init
      goto _end_hash_412618788;
    _ml65433_L104659:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI104657_dxqt__apos_2_mv_65431)==0) ) goto _ml65435_L104660;
      _urv98985  = output.size(); //init
      goto _end_hash_412618788;
    _ml65435_L104660:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1950,7,1950,28);
;
    _end_hash_412618788:;
      _vI104640_n = _urv98985; //assign simple
      output = ::flx::rtl::strutil::substr(output,0,_vI104640_n); //assign simple
      {
      __timeb64* _tmp108574 = (__timeb64*)&tv;
      _ftime64_s(((_tmp108574)));
      }
      _genout_urv98997  = (static_cast<double>((tv.time))) + ((static_cast<double>((tv.millitm))) / 1.0e3 ) ; //init
      elapsed = _genout_urv98997 - now ; //assign simple
      if(!(((*ptrflx_processing->_vI68367_control).ECHO == 1) || (*ptrflx_processing->_vI68367_control).DEBUG_FLX ) ) goto _ifdoelse_bootflx_65248_L104650;
      {
      _a13708t_107090 _tmp108575 = ((((::std::string("Popen:Elapsed: ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(elapsed, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(9, 3))))) /* apply_stack */ ) + ::std::string(", output='") ) + output ) + ::std::string("'") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108575)));
      }
      goto _ifdoelse_bootflx_65248_L104650;
      goto _ifdoelse_bootflx_65248_L104650;
    _ifdoend_bootflx_65247_L104647:;
      if(!(((*ptrflx_processing->_vI68367_control).ECHO == 1) || (*ptrflx_processing->_vI68367_control).DEBUG_FLX ) ) goto _ifdoelse_bootflx_65253_L104649;
      {
      _a13708t_107090 _tmp108576 = ::std::string("COMMAND FAILED") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108576)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65253_L104649:;
      {
      _a13708t_107090 _tmp108577 = (((::std::string("Error ") + (::flx::rtl::strutil::str<int>(_vI104638_result) + ::std::string("") ) ) + ::std::string(" executing command ") ) + _vI104642_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108577)));
      }
  pexit(_vI104638_result);
    _ifdoelse_bootflx_65248_L104650:;
      return output;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1962,1,1962,2); // HACK! 
}

//------------------------------
//FUNCTION <93435>: generic_link_exe_dynamic_uncurry::aux_uncurry: Apply method
void* _fI93435_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93436_inp_uncurry = _arg.data[0];
  _vI93437_out = _arg.data[1];
    start_90421_L93444:;
      _vI93440_aux__apos_2_mv_1322  = _vI93436_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93440_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93439;
      return _vI93437_out;
    _ml1324_L93439:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93440_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93443__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_link_exe_dynamic_uncurry))) ) goto _ml1325_L93438;
      _vI93441_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93440_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93442_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93440_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93437_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93437_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93441_h_param_std_1208) /* apply_stack */))); //init
      _vI93436_inp_uncurry  = _vI93442_t_param_std_1207; //init
      goto start_90421_L93444;
    _ml1325_L93438:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <67617>: generic_dependency_parser: Apply method
void* generic_dependency_parser::apply(_a13708t_107090 const &_arg ){
  _vI67627_data = _arg;
      find_mv_2026  = _vI67627_data.find((::std::string(":"))); //init
/*begin match*/
/*match case 1:(i_param_std_1825 when (== (i_param_std_1825, stl_npos)))*/
      if(!((find_mv_2026 == ::std::string::npos)) ) goto _ml2028_L92988;
      generic_dependency_parser_mv_64826  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_92925_L92989;
    _ml2028_L92988:;
/*match case 2:i_param_std_1826*/
      i_param_std_1826 = find_mv_2026; //assign simple
      generic_dependency_parser_mv_64826  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (i_param_std_1826)); //init
    _end_inline_find_92925_L92989:;
/*begin match*/
/*match case 1:|Some i_param_bootflx_64811*/
      if(!andthen(FLX_VNI(generic_dependency_parser_mv_64826)==1, (FLX_NEWP(_lam_64829)(FLX_FPAR_PASS this))) ) goto _ml64828_L92984;
      i_param_bootflx_64811 = *((_a5038t_107106*)FLX_VNP(generic_dependency_parser_mv_64826)); //assign simple
      _urv92981  = i_param_bootflx_64811 + 1 ; //init
      goto _end_hash_352198787;
    _ml64828_L92984:;
/*match case 2:|None*/
      if(!(FLX_VNI(generic_dependency_parser_mv_64826)==0) ) goto _ml64830_L92985;
      _urv92981  = 0; //init
      goto _end_hash_352198787;
    _ml64830_L92985:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",146,18,146,77);
;
    _end_hash_352198787:;
      pcolon = _urv92981; //assign simple
      txt = ::flx::rtl::strutil::substr(_vI67627_data,pcolon,_vI67627_data.size()); //assign simple
      spos  = 0; //init
      m = ::std::string("\\\n").size(); //assign simple
      _vI93017_o = ::flx::rtl::strutil::substr(txt,0,spos); //assign simple
      _vI93018_n = txt.find((::std::string("\\\n")),spos); //assign simple
    continue__ll_strings_7305_L93020:;
      if(FLX_UNLIKELY(!(!((_vI93018_n == ::std::string::npos)) ) )) goto break__ll_strings_7305_L93021;
      {
      _a13708t_107090* _tmp108580 = (_a13708t_107090*)&_vI93017_o;
      _a13708t_107090 _tmp108581 = ::flx::rtl::strutil::substr(txt,spos,_vI93018_n) + ::std::string("") ;
      ((_tmp108580))->append((_tmp108581));
      }
      spos = _vI93018_n + m ; //assign simple
      _vI93018_n = ((txt.find((::std::string("\\\n")),spos)))/*int.flx: ctor size IDENT*/; //assign simple
      goto continue__ll_strings_7305_L93020;
    break__ll_strings_7305_L93021:;
      {
      _a13708t_107090* _tmp108582 = (_a13708t_107090*)&_vI93017_o;
      _a13708t_107090 _tmp108583 = ::flx::rtl::strutil::substr(txt,spos,txt.size());
      ((_tmp108582))->append((_tmp108583));
      }
      txt = _vI93017_o; //assign simple
      state = respectful_parse_uncurry_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107142(_art107141(/*VR_int*/1, /*VR_int*/1, /*VR_int*/1), _art107137(::std::string(""), /*VR_int*/1, (void* /*VR_nullptr*/ )0), txt)) /* apply_stack */; //assign simple
      _vI93027_respectful_split__apos_2_mv_2297  = state.mode; //init
/*begin match*/
/*match case 1:|skipping*/
      if(!(_vI93027_respectful_split__apos_2_mv_2297%7==1) ) goto _ml2299_L93029;
      goto _em2297_L93030;
    _ml2299_L93029:;
/*match case 2:any*/
      state.parsed = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(state.parsed, state.current)) /* apply_stack */; //assign simple
    _em2297_L93030:;
      _vI67626_files = state.parsed; //assign simple
      _vI93036_r = _fI93037_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI67626_files, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108584 = (void**)&_vI93036_r;
      _rev(((_tmp108584)),(_a13708t_107090*)0);
      }
      _vI67626_files = _vI93036_r; //assign simple
      return _vI67626_files;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",152,3,152,4); // HACK! 
}

//------------------------------
//FUNCTION <66126>: toolchain_clang_linux::dynamic_library_extension: Apply method
_a13708t_107090 _fI66126_dynamic_library_extension::apply(){
      return ::std::string(".so");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1224,3,1224,51); // HACK! 
}

//------------------------------
//FUNCTION <67452>: exts::_lam_65073: Apply method
_at107092 _lam_65073::apply(_a13708t_107090 const &_arg ){
  _vI67454_s = _arg;
      return _at107092(_vI67454_s, ::std::string("felix"));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1381,10,1381,36); // HACK! 
}

//------------------------------
//FUNCTION <95203>: str::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI95203__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <104958>: FlxPkgConfigQuery::getclosure::getclosure'2::aux_uncurry: Apply method
void* _fI104958_aux_uncurry::apply(_at107115 const &_arg ){
  _vI104959_x_uncurry = _arg.data[0];
  _vI104960_y = _arg.data[1];
    start_91065_L104967:;
      _vI104963_aux__apos_2_mv_1328  = _vI104959_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI104963_aux__apos_2_mv_1328)==0) ) goto _ml1330_L104962;
      return _vI104960_y;
    _ml1330_L104962:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI104963_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI104966__lam_1332)(FLX_FPAR_PASS this, ptr_fI67834_getclosure__apos_2, ptrgetclosure, ptrFlxPkgConfigQuery))) ) goto _ml1331_L104961;
      _vI104964_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI104963_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI104965_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI104963_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI104960_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI104960_y, _vI104964_h_param_std_1210))); //init
      _vI104959_x_uncurry  = _vI104965_t_param_std_1209; //init
      goto start_91065_L104967;
    _ml1331_L104961:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <95800>: flx_pkgconfig::add_val::aux_uncurry: Apply method
void* _fI95800_aux_uncurry::apply(_at107115 const &_arg ){
  _vI95801_x_uncurry = _arg.data[0];
  _vI95802_y = _arg.data[1];
    start_91065_L95809:;
      _vI95805_aux__apos_2_mv_1328  = _vI95801_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI95805_aux__apos_2_mv_1328)==0) ) goto _ml1330_L95804;
      return _vI95802_y;
    _ml1330_L95804:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI95805_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI95808__lam_1332)(FLX_FPAR_PASS this, ptradd_val, ptrflx_pkgconfig))) ) goto _ml1331_L95803;
      _vI95806_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI95805_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI95807_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI95805_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI95802_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI95802_y, _vI95806_h_param_std_1210))); //init
      _vI95801_x_uncurry  = _vI95807_t_param_std_1209; //init
      goto start_91065_L95809;
    _ml1331_L95803:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <66039>: toolchain_gcc_osx::debug_flags: Apply method
void* _fI66039_debug_flags::apply(){
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-g"))));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",978,3,978,49); // HACK! 
}

//------------------------------
//FUNCTION <96629>: flx_pkgconfig::handle_pkg::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI96629__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <95923>: flx_pkgconfig::tail_val::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI95923__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <104856>: FlxPkgConfigQuery::getpkgfield_uncurry::iterator'2: Apply method
void* _fI104856_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L104857:;
      _vI104861_iterator__apos_2_mv_1504  = ptrgetpkgfield_uncurry->_vI104855_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI104861_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI104864__lam_1507)(FLX_FPAR_PASS this, ptrgetpkgfield_uncurry, ptrFlxPkgConfigQuery))) ) goto _ml1506_L104860;
      _vI104862_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI104861_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI104863_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI104861_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrgetpkgfield_uncurry->_vI104855_xs = _vI104863_t_param_std_1259; //assign simple
      FLX_SET_PC(108587)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI104862_h_param_std_1260));//yield
    FLX_CASE_LABEL(108587)
      goto continue__ll_lists_5177_L104857;
    _ml1506_L104860:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI104861_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L104859;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L104859:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L104857;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <92814>: generic_cxx_gen_deps_uncurry::aux_uncurry: Apply method
void* _fI92814_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92815_inp_uncurry = _arg.data[0];
  _vI92816_out = _arg.data[1];
    start_90421_L92823:;
      _vI92819_aux__apos_2_mv_1322  = _vI92815_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92819_aux__apos_2_mv_1322)==0) ) goto _ml1324_L92818;
      return _vI92816_out;
    _ml1324_L92818:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI92819_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI92822__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_cxx_gen_deps_uncurry))) ) goto _ml1325_L92817;
      _vI92820_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI92819_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI92821_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI92819_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI92816_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92816_out, mkinc(_vI92820_h_param_std_1208)))); //init
      _vI92815_inp_uncurry  = _vI92821_t_param_std_1207; //init
      goto start_90421_L92823;
    _ml1325_L92817:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <67437>: exts: Apply method
void* exts::apply(){
      _vI102333_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 4)) ) goto _ifdoelse_std_1191_L102329;
      _vI102334_i = (static_cast<int>(4)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108590 = (int*)&_vI102334_i;
      ++*((_tmp108590));
      }
    redo__ll_lists_4854_L102332:;
      if(FLX_UNLIKELY(!((0 < _vI102334_i)) )) goto _ifdoelse_std_1191_L102329;
      {
      int* _tmp108591 = (int*)&_vI102334_i;
      --*((_tmp108591));
      }
      _vI102333_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI102333_o, (_at107238(::std::string(".cpp"), ::std::string(".cxx"), ::std::string(".c"), ::std::string(".cc")).data)[reinterpret< ::flx::rtl::cl_t>(_vI102334_i)]))); //assign simple
      goto redo__ll_lists_4854_L102332;
    _ifdoelse_std_1191_L102329:;
      compile_exts = _vI102333_o; //assign simple
      _vI102365_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 5)) ) goto _ifdoelse_std_1191_L102361;
      _vI102366_i = (static_cast<int>(5)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108592 = (int*)&_vI102366_i;
      ++*((_tmp108592));
      }
    redo__ll_lists_4854_L102364:;
      if(FLX_UNLIKELY(!((0 < _vI102366_i)) )) goto _ifdoelse_std_1191_L102361;
      {
      int* _tmp108593 = (int*)&_vI102366_i;
      --*((_tmp108593));
      }
      _vI102365_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI102365_o, (_at107278(::std::string(".mli"), ::std::string(".ml"), ::std::string(".cmi"), ::std::string("cmx"), ::std::string(".cmxa")).data)[reinterpret< ::flx::rtl::cl_t>(_vI102366_i)]))); //assign simple
      goto redo__ll_lists_4854_L102364;
    _ifdoelse_std_1191_L102361:;
      ocaml = _vI102365_o; //assign simple
      _vI102397_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 8)) ) goto _ifdoelse_std_1191_L102393;
      _vI102398_i = (static_cast<int>(8)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108594 = (int*)&_vI102398_i;
      ++*((_tmp108594));
      }
    redo__ll_lists_4854_L102396:;
      if(FLX_UNLIKELY(!((0 < _vI102398_i)) )) goto _ifdoelse_std_1191_L102393;
      {
      int* _tmp108595 = (int*)&_vI102398_i;
      --*((_tmp108595));
      }
      _vI102397_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI102397_o, (_at107281(::std::string(".o"), ::std::string(".obj"), ::std::string(".lib"), ::std::string(".dll"), ::std::string(".a"), ::std::string(".so"), ::std::string(".dylib"), ::std::string(".os")).data)[reinterpret< ::flx::rtl::cl_t>(_vI102398_i)]))); //assign simple
      goto redo__ll_lists_4854_L102396;
    _ifdoelse_std_1191_L102393:;
      link_exts = _vI102397_o; //assign simple
      _vI102407_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L102403;
      _vI102408_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108596 = (int*)&_vI102408_i;
      ++*((_tmp108596));
      }
    redo__ll_lists_4854_L102406:;
      if(FLX_UNLIKELY(!((0 < _vI102408_i)) )) goto _ifdoelse_std_1191_L102403;
      {
      int* _tmp108597 = (int*)&_vI102408_i;
      --*((_tmp108597));
      }
      _vI102407_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI102407_o, (_at107092(::std::string(".flx"), ::std::string(".fdoc")).data)[reinterpret< ::flx::rtl::cl_t>(_vI102408_i)]))); //assign simple
      goto redo__ll_lists_4854_L102406;
    _ifdoelse_std_1191_L102403:;
      felix_exts = _vI102407_o; //assign simple
      _vI102451_r = _fI102452_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107283(ocaml, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108598 = (void**)&_vI102451_r;
      _rev(((_tmp108598)),(_at107092*)0);
      }
      _vI102468_r = _fI102469_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107283(compile_exts, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108599 = (void**)&_vI102468_r;
      _rev(((_tmp108599)),(_at107092*)0);
      }
      _vI102558_r = _fI102559_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107283(link_exts, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108600 = (void**)&_vI102558_r;
      _rev(((_tmp108600)),(_at107092*)0);
      }
      _vI102581_r = _fI102582_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107283(felix_exts, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108601 = (void**)&_vI102581_r;
      _rev(((_tmp108601)),(_at107092*)0);
      }
      _vI67455_exts = _fI88545___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107274(_fI88950_join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107285(_fI88950_join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107285(_fI88950_join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107285(_vI102451_r, _vI102468_r)) /* apply_stack */, _vI102558_r)) /* apply_stack */, _vI102581_r)) /* apply_stack */, _at107092(::std::string(""), ::std::string("none")))) /* apply_stack */; //assign simple
      return _vI67455_exts;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1385,9,1385,2); // HACK! 
}

//------------------------------
//FUNCTION <91659>: join_uncurry::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI91659__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <104505>: gramtime_uncurry::aux_uncurry: Apply method
double _fI104505_aux_uncurry::apply(_tt107527 const &_arg ){
  _vI104506_init_uncurry = _arg.mem_0;
  _vI104507_x = _arg.mem_1;
    start_97926_L104514:;
      _vI104510_aux__apos_2_mv_1297  = _vI104507_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI104510_aux__apos_2_mv_1297)==0) ) goto _ml1299_L104509;
      return _vI104506_init_uncurry;
    _ml1299_L104509:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI104510_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI104513__lam_1301)(FLX_FPAR_PASS this, ptrgramtime_uncurry))) ) goto _ml1300_L104508;
      _vI104511_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI104510_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI104512_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI104510_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI104507_x  = _vI104512_t_param_std_1199; //init
      _vI104506_init_uncurry  = ((FLX_NEWP(maxtime)(FLX_FPAR_PASS ptrgramtime_uncurry))
      ->apply(_vI104506_init_uncurry))->clone()
      ->apply(_vI104511_h_param_std_1200) /* general apply */; //init
      goto start_97926_L104514;
    _ml1300_L104508:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//FUNCTION <89253>: toolchain_clang_apple_iOS_maker_uncurry::static_library_linker: Apply method
int _fI89253_static_library_linker::apply(_art107181 const &_arg ){
  _vI89255_spec = _arg;
      _vI89254_result = generic_static_library_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107227(_art107226(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-static")))), ::std::string("libtool"), ::std::string("-o "), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89255_spec.srcs, _vI89255_spec.dst)) /* apply_stack */; //assign simple
      return _vI89254_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2141,3,2141,4); // HACK! 
}

//------------------------------
//FUNCTION <66329>: toolchain_clang_osx::executable_extension: Apply method
_a13708t_107090 _fI66329_executable_extension::apply(){
      return ::std::string("");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1461,3,1461,43); // HACK! 
}

//------------------------------
//FUNCTION <106663>: flx_processing::cxx_compile_dynamic::iterator'2: Apply method
void* _fI106663_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L106664:;
      _vI106668_iterator__apos_2_mv_1504  = ptr_fI106194_cxx_compile_dynamic->_vI106662_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI106668_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI106671__lam_1507)(FLX_FPAR_PASS this, ptr_fI106194_cxx_compile_dynamic, ptrflx_processing))) ) goto _ml1506_L106667;
      _vI106669_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI106668_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI106670_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI106668_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptr_fI106194_cxx_compile_dynamic->_vI106662_xs = _vI106670_t_param_std_1259; //assign simple
      FLX_SET_PC(108603)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI106669_h_param_std_1260));//yield
    FLX_CASE_LABEL(108603)
      goto continue__ll_lists_5177_L106664;
    _ml1506_L106667:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI106668_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L106666;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L106666:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L106664;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <102590>: exts::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI102590__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <106852>: flx_processing::cxx_link_static_exe::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI106852__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <95798>: flx_pkgconfig::add_val::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI95798__lam_1398::apply(_a13708t_107090 const &_arg ){
  _vI95799_x = _arg;
      return eq(_vI95799_x, ptradd_val->v);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <93299>: generic_static_library_uncurry::aux_uncurry: Apply method
void* _fI93299_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93300_inp_uncurry = _arg.data[0];
  _vI93301_out = _arg.data[1];
    start_90421_L93308:;
      _vI93304_aux__apos_2_mv_1322  = _vI93300_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93304_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93303;
      return _vI93301_out;
    _ml1324_L93303:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93304_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93307__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_static_library_uncurry))) ) goto _ml1325_L93302;
      _vI93305_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93304_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93306_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93304_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93301_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93301_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93305_h_param_std_1208) /* apply_stack */))); //init
      _vI93300_inp_uncurry  = _vI93306_t_param_std_1207; //init
      goto start_90421_L93308;
    _ml1325_L93302:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <80206>: +: Apply method
void* _fI80206___plus_::apply(_tt107095 const &_arg ){
  _vI80241_x = _arg.mem_0;
  _vI80242_y = _arg.mem_1;
      return _fI91494_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI91481_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI80241_x, (void* /*VR_nullptr*/ )0)) /* apply_stack */, _vI80242_y))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",419,3,419,69); // HACK! 
}

//------------------------------
//FUNCTION <96517>: flx_pkgconfig::handle_pkg::_lam_64696::aux: Apply method
void* _fI96517_aux::apply(_at107115 const &_arg ){
  _vI96518_inp = _arg.data[0];
  _vI96519_out = _arg.data[1];
    start_95901_L96538:;
      _vI96522_aux_mv_1434  = _vI96518_inp; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96522_aux_mv_1434)==0) ) goto _ml1436_L96521;
      return _fI96525_aux_uncurry(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96519_out, ptrhandle_pkg->_vI68127_pkg))), (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    _ml1436_L96521:;
/*match case 2:|Snoc (t_param_std_1242, h_param_std_1243)*/
      if(!andthen(FLX_VNI(_vI96522_aux_mv_1434)==1, (FLX_NEWP(_fI96535__lam_1443)(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1437_L96520;
      _vI96523_h_param_std_1243 = (*((_tt107095*)FLX_VNP(_vI96522_aux_mv_1434))).mem_1; //assign simple
      _vI96524_t_param_std_1242 = (*((_tt107095*)FLX_VNP(_vI96522_aux_mv_1434))).mem_0; //assign simple
      _vI96537_aux_mv_1439  = !eq(_vI96523_h_param_std_1243, ptrhandle_pkg->_vI68127_pkg) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI96537_aux_mv_1439%2==1) ) goto _ml1441_L96536;
/*parallel assignment*/
      _vI96519_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96519_out, _vI96523_h_param_std_1243))); //init
      _vI96518_inp  = _vI96524_t_param_std_1242; //init
      goto start_95901_L96538;
    _ml1441_L96536:;
/*match case 2:any*/
/*parallel assignment*/
      _vI96518_inp  = _vI96524_t_param_std_1242; //init
      goto start_95901_L96538;
    _ml1437_L96520:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",582,7,582,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",584,5,584,6); // HACK! 
}

//------------------------------
//FUNCTION <106361>: flx_processing::run_program_dynamic: Apply method
int _fI106361_run_program_dynamic::apply(_pt107161* const &_arg ){
  _vI106366_ehandler = _arg;
      _vI106362_result = 0; //assign simple
      if(!((ptrflx_processing->_vI106422_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65387_L106371;
      _vI106363_xargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrflx_processing->dvars.DEBUGSWITCH, ptrflx_processing->_vI106422_control.DRIVER_EXE))), ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME)) /* apply_stack */, ptrflx_processing->dvars.args)) /* apply_stack */; //assign simple
      _vI106989_r = _fI106990_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115(ptrflx_processing->_vI106422_control.FLXRUN, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108607 = (void**)&_vI106989_r;
      _rev(((_tmp108607)),(_a13708t_107090*)0);
      }
      _vI107000_r = _fI107001_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115(_vI106363_xargs, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108608 = (void**)&_vI107000_r;
      _rev(((_tmp108608)),(_a13708t_107090*)0);
      }
      _vI106364_CMD = (cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI106989_r)) /* apply_stack */ + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI107000_r)) /* apply_stack */ ; //assign simple
      if(!(!((ptrflx_processing->_vI106422_control.STDOUT == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65390_L106368;
      _vI106364_CMD = (_vI106364_CMD + ::std::string(" > ") ) + ((::std::string("\"") + ptrflx_processing->_vI106422_control.STDOUT ) + ::std::string("\"") ) ; //assign simple
    _ifdoelse_bootflx_65390_L106368:;
      if(!(!((ptrflx_processing->_vI106422_control.STDIN == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65392_L106370;
      _vI106364_CMD = (_vI106364_CMD + ::std::string(" < ") ) + ((::std::string("\"") + ptrflx_processing->_vI106422_control.STDIN ) + ::std::string("\"") ) ; //assign simple
    _ifdoelse_bootflx_65392_L106370:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99852_L107013;
      {
      _a13708t_107090 _tmp108609 = (::std::string("[flx] ") + (::std::string("Run command=") + _vI106364_CMD ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108609)));
      }
    _end_99852_L107013:;
      {
      __timeb64* _tmp108610 = (__timeb64*)&_vI107015_tv;
      _ftime64_s(((_tmp108610)));
      }
      _vI107014__genout_urv99853  = (static_cast<double>((_vI107015_tv.time))) + ((static_cast<double>((_vI107015_tv.millitm))) / 1.0e3 ) ; //init
      _vI106365_t0 = _vI107014__genout_urv99853; //assign simple
      _vI107016__genout_urv99857  = _fI106124_system(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106364_CMD) /* apply_stack */; //init
      _vI106362_result = _vI107016__genout_urv99857; //assign simple
      if(!((ptrflx_processing->_vI106422_control.TIME == 1)) ) goto _ifdoelse_bootflx_65388_L106372;
      {
      __timeb64* _tmp108611 = (__timeb64*)&_vI107023_tv;
      _ftime64_s(((_tmp108611)));
      }
      _vI107022__genout_urv95543  = (static_cast<double>((_vI107023_tv.time))) + ((static_cast<double>((_vI107023_tv.millitm))) / 1.0e3 ) ; //init
      _vI107017_elapsed = _vI107022__genout_urv95543 - _vI106365_t0 ; //assign simple
      _vI107018_minutes = ::std::floor((_vI107017_elapsed / 60.0 )); //assign simple
      _vI107019_seconds = _vI107017_elapsed - (_vI107018_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108612 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI107018_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI107019_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Dynamic Run : ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108612)));
      }
      fflush(stdout);
      goto _ifdoelse_bootflx_65388_L106372;
      goto _ifdoelse_bootflx_65388_L106372;
    _ifdoend_bootflx_65387_L106371:;
      {
      _a13708t_107090 _tmp108613 = (::std::string("Cannot run C++ dynamic library ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108613)));
      }
      fflush(stdout);
    _ifdoelse_bootflx_65388_L106372:;
      return _vI106362_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2834,3,2834,4); // HACK! 
}

//------------------------------
//FUNCTION <65704>: toolchain_msvc_win32::host_os: Apply method
_a13708t_107090 host_os::apply(){
      return ::std::string("Win32");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1731,3,1731,35); // HACK! 
}

//------------------------------
//FUNCTION <98562>: cxx_depcheck::_lam_65574: Apply method
 ::flx::rtl::cl_t _lam_65574::apply(_a13708t_107090 const &_arg ){
  _vI98563_s = _arg;
      return !((_vI98563_s == ::std::string(""))) ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",414,21,414,44); // HACK! 
}

//------------------------------
//FUNCTION <105419>: flx_processing::runit: Apply method
int runit::apply(_pt107161* const &_arg ){
  _vI105421_ehandler = _arg;
      _vI105420_result = 0; //assign simple
      if(!((ptrflx_processing->_vI105441_control.FELIX == 1)) ) goto _ifdoend_bootflx_65405_L105423;
      _genout_urv99971  = run_felix_compiler_if_required(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105421_ehandler) /* apply_stack */; //init
      _vI105420_result = _genout_urv99971; //assign simple
      if(!(!((_vI105420_result == 0)) ) ) goto _ifdoelse_bootflx_65406_L105424;
      return _vI105420_result;
      goto _ifdoelse_bootflx_65406_L105424;
    _ifdoend_bootflx_65405_L105423:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65406_L105424;
      {
      _a13708t_107090 _tmp108614 = (::std::string("[flx] ") + ::std::string("Felix compilation skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108614)));
      }
    _ifdoelse_bootflx_65406_L105424:;
      {
      calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI105421_ehandler);
      }
      if(!(!((ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65410_L105426;
      dirname_mv_671  = split1(FLX_FPAR_PASS_ONLY)
      .apply(ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME) /* apply_stack */; //init
/*begin match*/
/*match case 1:(d_param_std_617, any)*/
      d_param_std_617 = (dirname_mv_671.data)[0]; //assign simple
  mkdirs(FLX_FPAR_PASS d_param_std_617);
    _ifdoelse_bootflx_65410_L105426:;
      if(!((ptrflx_processing->_vI105441_control.CCOMPILEIT == 1)) ) goto _ifdoend_bootflx_65411_L105428;
      _genout_urv100011  = run_cxx_compiler_if_required(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105421_ehandler) /* apply_stack */; //init
      _vI105420_result = _genout_urv100011; //assign simple
      if(!(!((_vI105420_result == 0)) ) ) goto _ifdoelse_bootflx_65412_L105429;
      return _vI105420_result;
      goto _ifdoelse_bootflx_65412_L105429;
    _ifdoend_bootflx_65411_L105428:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65412_L105429;
      {
      _a13708t_107090 _tmp108616 = (::std::string("[flx] ") + ::std::string("C++ compilation (and linking and running) skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108616)));
      }
    _ifdoelse_bootflx_65412_L105429:;
      if(!((ptrflx_processing->_vI105441_control.CCOMPILEIT == 1)) ) goto _ifdoend_bootflx_65415_L105430;
      _genout_urv100022  = ocaml_compile(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105421_ehandler) /* apply_stack */; //init
      _vI105420_result = _genout_urv100022; //assign simple
      goto _ifdoelse_bootflx_65416_L105431;
    _ifdoend_bootflx_65415_L105430:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65416_L105431;
      {
      _a13708t_107090 _tmp108617 = (::std::string("[flx] ") + ::std::string("Ocaml compilation skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108617)));
      }
    _ifdoelse_bootflx_65416_L105431:;
      if(!((ptrflx_processing->_vI105441_control.LINKIT == 1)) ) goto _ifdoend_bootflx_65417_L105433;
      _genout_urv100030  = run_linker_if_required(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105421_ehandler) /* apply_stack */; //init
      _vI105420_result = _genout_urv100030; //assign simple
      if(!(!((_vI105420_result == 0)) ) ) goto _ifdoelse_bootflx_65418_L105434;
      return _vI105420_result;
      goto _ifdoelse_bootflx_65418_L105434;
    _ifdoend_bootflx_65417_L105433:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65418_L105434;
      {
      _a13708t_107090 _tmp108618 = (::std::string("[flx] ") + ::std::string("Link step skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108618)));
      }
    _ifdoelse_bootflx_65418_L105434:;
      if(!((ptrflx_processing->_vI105441_control.RUNIT == 1)) ) goto _ifdoend_bootflx_65421_L105436;
      _genout_urv100041  = run_program_if_required(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105421_ehandler) /* apply_stack */; //init
      _vI105420_result = _genout_urv100041; //assign simple
      if(!(!((_vI105420_result == 0)) ) ) goto _ifdoelse_bootflx_65422_L105437;
      return _vI105420_result;
      goto _ifdoelse_bootflx_65422_L105437;
    _ifdoend_bootflx_65421_L105436:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65422_L105437;
      {
      _a13708t_107090 _tmp108619 = (::std::string("[flx] ") + ::std::string("Running program skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108619)));
      }
    _ifdoelse_bootflx_65422_L105437:;
      if(!(!((ptrflx_processing->_vI105441_control.EXPECT == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65426_L105440;
      _genout_urv100058  = check_output_if_required(ptrflx_processing)
      .apply() /* apply_stack */; //init
      _vI105420_result = _genout_urv100058; //assign simple
      if(!(!((_vI105420_result == 0)) ) ) goto _ifdoelse_bootflx_65426_L105440;
      return _vI105420_result;
    _ifdoelse_bootflx_65426_L105440:;
      return _vI105420_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2958,3,2958,4); // HACK! 
}

//------------------------------
//FUNCTION <66347>: toolchain_clang_osx::c_dependency_generator: Apply method
_tt107175 _fI66347_c_dependency_generator::apply(_art107174 const &_arg ){
  _vI66352_spec = _arg;
      _ds2_65598 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_clang_osx->_vI66313_c_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_osx->_vI66398_config.ccflags, ::std::string("-MM")))), ptrtoolchain_clang_osx->_vI66398_config.header_search_dirs, ptrtoolchain_clang_osx->_vI66398_config.macros, ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66352_spec.src)) /* apply_stack */; //assign simple
      _vI66350_result = _ds2_65598.mem_0; //assign simple
      _vI66351_data = _ds2_65598.mem_1; //assign simple
      return _tt107175(_vI66350_result, _vI66351_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1487,3,1487,4); // HACK! 
}

//------------------------------
//FUNCTION <106373>: flx_processing::run_program_static: Apply method
int _fI106373_run_program_static::apply(_pt107161* const &_arg ){
  _vI106377_ehandler = _arg;
      _vI106374_result = 0; //assign simple
      _vI107025_r = _fI107026_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(ptrflx_processing->dvars.STATIC_ENV, ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME)) /* apply_stack */, ptrflx_processing->dvars.args)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108620 = (void**)&_vI107025_r;
      _rev(((_tmp108620)),(_a13708t_107090*)0);
      }
      _vI106375_CMD = cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI107025_r)) /* apply_stack */; //assign simple
      if(!(!((ptrflx_processing->_vI106422_control.STDOUT == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65394_L106379;
      _vI106375_CMD = (_vI106375_CMD + ::std::string(" > ") ) + ((::std::string("\"") + ptrflx_processing->_vI106422_control.STDOUT ) + ::std::string("\"") ) ; //assign simple
    _ifdoelse_bootflx_65394_L106379:;
      if(!(!((ptrflx_processing->_vI106422_control.STDIN == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65396_L106381;
      _vI106375_CMD = (_vI106375_CMD + ::std::string(" < ") ) + ((::std::string("\"") + ptrflx_processing->_vI106422_control.STDIN ) + ::std::string("\"") ) ; //assign simple
    _ifdoelse_bootflx_65396_L106381:;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_99919_L107038;
      {
      _a13708t_107090 _tmp108621 = (::std::string("[flx] ") + (::std::string("Run command=") + _vI106375_CMD ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108621)));
      }
    _end_99919_L107038:;
      {
      __timeb64* _tmp108622 = (__timeb64*)&_vI107040_tv;
      _ftime64_s(((_tmp108622)));
      }
      _vI107039__genout_urv99920  = (static_cast<double>((_vI107040_tv.time))) + ((static_cast<double>((_vI107040_tv.millitm))) / 1.0e3 ) ; //init
      _vI106376_t0 = _vI107039__genout_urv99920; //assign simple
      _vI107041__genout_urv99924  = _fI106124_system(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI106375_CMD) /* apply_stack */; //init
      _vI106374_result = _vI107041__genout_urv99924; //assign simple
      if(!((ptrflx_processing->_vI106422_control.TIME == 1)) ) goto _end_99934_L107049;
      {
      __timeb64* _tmp108623 = (__timeb64*)&_vI107048_tv;
      _ftime64_s(((_tmp108623)));
      }
      _vI107047__genout_urv95543  = (static_cast<double>((_vI107048_tv.time))) + ((static_cast<double>((_vI107048_tv.millitm))) / 1.0e3 ) ; //init
      _vI107042_elapsed = _vI107047__genout_urv95543 - _vI106376_t0 ; //assign simple
      _vI107043_minutes = ::std::floor((_vI107042_elapsed / 60.0 )); //assign simple
      _vI107044_seconds = _vI107042_elapsed - (_vI107043_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108624 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI107043_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI107044_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Static Run   : ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108624)));
      }
      fflush(stdout);
    _end_99934_L107049:;
      return _vI106374_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2850,3,2850,4); // HACK! 
}

//------------------------------

//PROCEDURE <106611:> flx_processing::run_felix_compiler_if_required::_lam_64528: Call method
::flx::rtl::con_t * _pI106611__lam_64528::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI106612_i = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <106611:> flx_processing::run_felix_compiler_if_required::_lam_64528: Resume method
::flx::rtl::con_t *_pI106611__lam_64528::resume(){
      {
      _a13708t_107090 _tmp108625 = ::std::string("#include ") + _vI106612_i ;
      ::flx::rtl::ioutil::writeln((ptr_fI106185_run_felix_compiler_if_required->_vI106610_f),((_tmp108625)));
      }
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <106161>: flx_processing::cal_time_from_flxdepfile::maxf: Apply method
_ft107543* _fI106161_maxf::apply(double const &_arg ){
  _vI106167_x = _arg;
      return (FLX_NEWP(_fI106162_maxf__apos_2)(FLX_FPAR_PASS this, ptr_fI106160_cal_time_from_flxdepfile, ptrflx_processing));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2122,5,2122,6); // HACK! 
}

//------------------------------
//FUNCTION <91119>: process_config_text_uncurry::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI91119__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <106671>: flx_processing::cxx_compile_dynamic::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI106671__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <105703>: flx_processing::cxx_compile_static1_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI105703__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------

//PROCEDURE <68386:> _init_: Call method
void _init_::stack_call(){
  ::flx::rtl::con_t *cc = call(0);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * _init_::call(::flx::rtl::con_t *_ptr_caller){
  _caller = _ptr_caller;
  INIT_PC
  return this;
}

//PROCEDURE <68386:> _init_: Resume method
::flx::rtl::con_t *_init_::resume(){
      PTF upper = ::std::string("ABCDEFGHIJKLMNOPQRSTUVWXYZ"); //assign simple
      PTF lower = ::std::string("abcdefghijklmnopqrstuvwxyz"); //assign simple
      PTF letters = PTF upper + PTF lower ; //assign simple
      {
      _a13708t_107090 _tmp108626 = ::std::string("BOOTFLX") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108626)));
      }
      fflush(stdout);
      _vI90390_r = aux_uncurry(FLX_FPAR_PASS this)
      .apply(_tt107100(range(FLX_FPAR_PASS 0, PTF argc, 1), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108627 = (void**)&_vI90390_r;
      _rev(((_tmp108627)),(_a13708t_107090*)0);
      }
      _genout_urv107088  = runflx(FLX_FPAR_PASS_ONLY)
      .apply(_vI90390_r) /* apply_stack */; //init
  pexit(_genout_urv107088);
    FLX_RETURN
}
//------------------------------
//FUNCTION <104497>: gramtime_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI104497__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <97531>: map_package_requirements_uncurry::aux_uncurry: Apply method
_a13708t_107090 _fI97531_aux_uncurry::apply(_tt107116 const &_arg ){
  _vI97532_init_uncurry = _arg.mem_0;
  _vI97533_x = _arg.mem_1;
    start_95154_L97540:;
      _vI97536_aux__apos_2_mv_1297  = _vI97533_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97536_aux__apos_2_mv_1297)==0) ) goto _ml1299_L97535;
      return _vI97532_init_uncurry;
    _ml1299_L97535:;
/*match case 2:|Snoc (t_param_std_1199, h_param_std_1200)*/
      if(!andthen(FLX_VNI(_vI97536_aux__apos_2_mv_1297)==1, (FLX_NEWP(_fI97539__lam_1301)(FLX_FPAR_PASS this, ptrmap_package_requirements_uncurry))) ) goto _ml1300_L97534;
      _vI97537_h_param_std_1200 = (*((_tt107095*)FLX_VNP(_vI97536_aux__apos_2_mv_1297))).mem_1; //assign simple
      _vI97538_t_param_std_1199 = (*((_tt107095*)FLX_VNP(_vI97536_aux__apos_2_mv_1297))).mem_0; //assign simple
/*parallel assignment*/
      _vI97533_x  = _vI97538_t_param_std_1199; //init
      _vI97532_init_uncurry  = ((FLX_NEWP(join)(FLX_FPAR_PASS_ONLY))
      ->apply(_vI97532_init_uncurry))->clone()
      ->apply(_vI97537_h_param_std_1200) /* general apply */; //init
      goto start_95154_L97540;
    _ml1300_L97534:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,9,234,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",236,7,236,8); // HACK! 
}

//------------------------------
//C FUNC <14862>: Match
void* Match(FLX_APAR_DECL  _a14735t_107189 _vI14870_re, _a13708t_107090 _vI14871_s){
   ::flx::rtl::cl_t Match_mv_2348;
   ::flx::rtl::cl_t _genout_urv91232;
   ::flx::rtl::cl_t _vI14867_Match__hyphen_result;
  _poly_82862t_107478 _vI14866_v;
  int _vI14865_n;
  _a13708t_107090 emptystring;
      emptystring = ::std::string(""); //assign simple
      _vI14865_n = _vI14870_re->NumberOfCapturingGroups(); //assign simple
      _vI14866_v = _ctor_varray(FLX_FPAR_PASS (static_cast<_a5038t_107106>(_vI14865_n)/*int.flx: ctor size from _a5038t_107106*/) + 1 , ::re2::StringPiece(emptystring)); //assign simple
      _genout_urv91232  = _vI14870_re->Match((::re2::StringPiece(_vI14871_s)), 0, (::re2::StringPiece(_vI14871_s)).length(),(::re2::RE2::ANCHOR_BOTH), (_vI14866_v ), (_vI14865_n + 1 )); //init
      _vI14867_Match__hyphen_result = _genout_urv91232; //assign simple
      Match_mv_2348  = _vI14867_Match__hyphen_result; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(Match_mv_2348%2==1) ) goto _ml2350_L91234;
      return FLX_VNR(1, new(*PTF gcp, _poly_79881t_107147_ptr_map, true) _poly_79881t_107147 (map_uncurry(FLX_FPAR_PASS (FLX_NEWP(_a90236__ctor_string)(FLX_FPAR_PASS_ONLY)), _vI14866_v)));
    _ml2350_L91234:;
/*match case 2:any*/
      return (void* /*VR_nullptr*/ )0;
}
//------------------------------
//FUNCTION <105143>: flx_processing::system: Apply method
int system::apply(_a13708t_107090 const &_arg ){
  _vI105147_cmd = _arg;
      {
      __timeb64* _tmp108629 = (__timeb64*)&_vI105495_tv;
      _ftime64_s(((_tmp108629)));
      }
      _genout_urv95584  = (static_cast<double>((_vI105495_tv.time))) + ((static_cast<double>((_vI105495_tv.millitm))) / 1.0e3 ) ; //init
      _vI105144_now = _genout_urv95584; //assign simple
      if(!((ptrflx_processing->_vI105441_control.ECHO == 1)) ) goto _ifdoelse_bootflx_65263_L105149;
      {
      _a13708t_107090 _tmp108630 = _vI105147_cmd + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108630)));
      }
    _ifdoelse_bootflx_65263_L105149:;
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_444_L105497;
      {
      _a13708t_107090 _tmp108631 = (::std::string("[system] ") + _vI105147_cmd ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108631)));
      }
      fflush(stderr);
    _ifdoelse_std_444_L105497:;
      _genout_urv95601  = ::std::system(((::std::string("\"") + _vI105147_cmd ) + ::std::string("\"") ).c_str()); //init
      _vI105501__genout_urv93142  = _genout_urv95601; //init
      _vI105500__genout_urv93134  = _vI105501__genout_urv93142; //init
      _vI105499__genout_urv93129  = _vI105500__genout_urv93134; //init
      _genout_urv95592  = _vI105499__genout_urv93129; //init
      _vI105145_result = _genout_urv95592; //assign simple
      {
      __timeb64* _tmp108632 = (__timeb64*)&_vI105504_tv;
      _ftime64_s(((_tmp108632)));
      }
      _genout_urv95602  = (static_cast<double>((_vI105504_tv.time))) + ((static_cast<double>((_vI105504_tv.millitm))) / 1.0e3 ) ; //init
      _vI105146_elapsed = _genout_urv95602 - _vI105144_now ; //assign simple
      if(!((ptrflx_processing->_vI105441_control.ECHO == 1)) ) goto _ifdoelse_bootflx_65265_L105151;
      {
      _a13708t_107090 _tmp108633 = (((::std::string("System:Elapsed: ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI105146_elapsed, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(8, 3))))) /* apply_stack */ ) + ::std::string(", Result code ") ) + ::flx::rtl::strutil::str<int>(_vI105145_result) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108633)));
      }
    _ifdoelse_bootflx_65265_L105151:;
      return _vI105145_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2035,3,2035,4); // HACK! 
}

//------------------------------
//FUNCTION <66122>: toolchain_clang_linux::dynamic_object_extension: Apply method
_a13708t_107090 _fI66122_dynamic_object_extension::apply(){
      return ::std::string("_dynamic.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1222,3,1222,57); // HACK! 
}

//------------------------------
//FUNCTION <92174>: toolchain_msvc_win32::checkwarn::aux_uncurry: Apply method
void* _fI92174_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92175_x_uncurry = _arg.data[0];
  _vI92176_y = _arg.data[1];
    start_91065_L92183:;
      _vI92179_aux__apos_2_mv_1328  = _vI92175_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92179_aux__apos_2_mv_1328)==0) ) goto _ml1330_L92178;
      return _vI92176_y;
    _ml1330_L92178:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI92179_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI92182__lam_1332)(FLX_FPAR_PASS this, ptrcheckwarn, ptrtoolchain_msvc_win32))) ) goto _ml1331_L92177;
      _vI92180_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI92179_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI92181_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI92179_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI92176_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92176_y, _vI92180_h_param_std_1210))); //init
      _vI92175_x_uncurry  = _vI92181_t_param_std_1209; //init
      goto start_91065_L92183;
    _ml1331_L92177:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <90480>: cat_uncurry::iterator'2: Apply method
void* _fI90480_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L90481:;
      _vI90485_iterator__apos_2_mv_1504  = ptrcat_uncurry->_vI90479_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI90485_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_lam_1507)(FLX_FPAR_PASS this, ptrcat_uncurry))) ) goto _ml1506_L90484;
      h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI90485_iterator__apos_2_mv_1504))).mem_1; //assign simple
      t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI90485_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrcat_uncurry->_vI90479_xs = t_param_std_1259; //assign simple
      FLX_SET_PC(108635)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (h_param_std_1260));//yield
    FLX_CASE_LABEL(108635)
      goto continue__ll_lists_5177_L90481;
    _ml1506_L90484:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI90485_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L90483;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L90483:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L90481;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <88920>: generic_cxx_gen_deps_uncurry: Apply method
_tt107175 generic_cxx_gen_deps_uncurry::apply(_tt107220 const &_arg ){
  _vI89341_spec_uncurry = _arg.mem_0;
  _vI89338_src = _arg.mem_1;
      _vI92813_r = _fI92814_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89341_spec_uncurry.INCLUDE_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108637 = (void**)&_vI92813_r;
      _rev(((_tmp108637)),(_a13708t_107090*)0);
      }
      _vI92851_r = _fI92852_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89341_spec_uncurry.MACROS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108638 = (void**)&_vI92851_r;
      _rev(((_tmp108638)),(_a13708t_107090*)0);
      }
      _vI89333_cmd = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI89341_spec_uncurry.CCFLAGS, _vI92813_r)) /* apply_stack */, _vI92851_r)) /* apply_stack */, _vI89338_src)) /* apply_stack */, _vI89341_spec_uncurry.CCDEP))); //assign simple
      _vI92874_r = _fI92875_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89333_cmd, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108639 = (void**)&_vI92874_r;
      _rev(((_tmp108639)),(_a13708t_107090*)0);
      }
      _vI89334_CMD = cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI92874_r)) /* apply_stack */; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI89341_spec_uncurry.debugln)->clone()
      ->call(0, ::std::string("C++ generate dependencies : ") + _vI89334_CMD );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_448_L92890;
      {
      _a13708t_107090 _tmp108640 = (::std::string("[get_stdout] ") + _vI89334_CMD ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108640)));
      }
      fflush(stderr);
    _ifdoelse_std_448_L92890:;
      _genout_urv92888  = basic_get_stdout(_vI89334_CMD); //init
      _ds2_64824 = _genout_urv92888; //assign simple
      _vI89336_result = _ds2_64824.mem_0; //assign simple
      _vI89337_data = _ds2_64824.mem_1; //assign simple
      if(!(!((_vI89336_result == 0)) ) ) goto _ifdoelse_bootflx_64810_L89340;
      {
      _a13708t_107090 _tmp108641 = ((::std::string("C++ command=") + _vI89334_CMD ) + ::std::string(" FAILED") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108641)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_64810_L89340:;
      return _tt107175(_vI89336_result, _vI89337_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",140,3,140,4); // HACK! 
}

//------------------------------
//FUNCTION <66134>: toolchain_clang_linux::get_base_cxx_compile_flags: Apply method
void* _fI66134_get_base_cxx_compile_flags::apply(){
      return ptrtoolchain_clang_linux->_vI66106_base_cxx_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1228,3,1228,69); // HACK! 
}

//------------------------------
//FUNCTION <104411>: gramtime_uncurry::_lam_64494::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI104411__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <104476>: gramtime_uncurry::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI104476__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <106777>: flx_processing::ocaml_compile::dxqt'2::_lam_65434: Apply method
 ::flx::rtl::cl_t _fI106777__lam_65434::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1949,9,1949,14); // HACK! 
}

//------------------------------
//FUNCTION <65940>: toolchain_gcc_linux::dynamic_object_extension: Apply method
_a13708t_107090 _fI65940_dynamic_object_extension::apply(){
      return ::std::string("_dynamic.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",739,3,739,57); // HACK! 
}

//------------------------------
//C FUNC <16485>: filesin
void* filesin(FLX_APAR_DECL _a13708t_107090 dname){
  _a13708t_107090 _vI16491_f;
  int stat;
  void* _vI16489_files;
  _a16457t_107558 fileinfo;
  _a16456t_107560 _vI16487_d;
      _vI16489_files = (void* /*VR_nullptr*/ )0; //assign simple
      {
      _a13708t_107090 _tmp108642 = dname + ::std::string("\\*") ;
      _a16457t_107558* _tmp108643 = (_a16457t_107558*)&fileinfo;
      _a16456t_107560* _tmp108644 = (_a16456t_107560*)&_vI16487_d;
      *((_tmp108644))=_findfirst(((_tmp108642)).c_str(), ((_tmp108643)));
      }
      if(!(int(_vI16487_d) == -1) ) goto harvestnext_L16496;
      if(!((errno == (ENOENT)) || (errno == (EINVAL)) ) ) goto _ifdoend_std_2798_L16493;
      return (void* /*VR_nullptr*/ )0;
    _ifdoend_std_2798_L16493:;
      {
      _a13708t_107090 _tmp108645 = ::std::string("findfirst() failed unexpectedly") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108645)));
      }
      fflush(stderr);
      {if(FLX_UNLIKELY(!(0)))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",1147,9,1147,22);}
    harvestnext_L16496:;
      _vI16491_f = std::string(fileinfo.name); //assign simple
      if(!(!((_vI16491_f == ::std::string("..")))  && !((_vI16491_f == ::std::string(".")))  ) ) goto _ifdoelse_std_2801_L16498;
      *((void**)&_vI16489_files)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&_vI16489_files) , std::string(fileinfo.name))) /* apply_stack */; //assign simple
    _ifdoelse_std_2801_L16498:;
      {
      _a16457t_107558* _tmp108646 = (_a16457t_107558*)&fileinfo;
      int* _tmp108647 = (int*)&stat;
      *((_tmp108647))=_findnext(_vI16487_d, ((_tmp108646)));
      }
      if((stat == 0)) goto harvestnext_L16496;
      if(!((stat == -1)) ) goto _ifdoend_std_2802_L16499;
      if((errno == (ENOENT))) goto harvestexit_L16501;
      {if(FLX_UNLIKELY(!(0)))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/filesystem.fdoc",1165,9,1165,22);}
      goto harvestexit_L16501;
    _ifdoend_std_2802_L16499:;
      {
      _a13708t_107090 _tmp108648 = ::std::string("Error reading dir") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108648)));
      }
      fflush(stdout);
      fflush(stdout);
      _findclose(_vI16487_d);
      return (void* /*VR_nullptr*/ )0;
    harvestexit_L16501:;
      _findclose(_vI16487_d);
      return FLX_VNR(1, new(*PTF gcp, ::flx::rtl::_address_ptr_map, true) void* (_vI16489_files));
}
//------------------------------
//FUNCTION <97307>: flx_pkgconfig::aux_uncurry: Apply method
void* _fI97307_aux_uncurry::apply(_at107115 const &_arg ){
  _vI97308_x_uncurry = _arg.data[0];
  _vI97309_y = _arg.data[1];
    start_91065_L97316:;
      _vI97312_aux__apos_2_mv_1328  = _vI97308_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97312_aux__apos_2_mv_1328)==0) ) goto _ml1330_L97311;
      return _vI97309_y;
    _ml1330_L97311:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI97312_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI97315__lam_1332)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml1331_L97310;
      _vI97313_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI97312_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI97314_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI97312_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI97309_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97309_y, _vI97313_h_param_std_1210))); //init
      _vI97308_x_uncurry  = _vI97314_t_param_std_1209; //init
      goto start_91065_L97316;
    _ml1331_L97310:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <88927>: cat_uncurry: Apply method
_a13708t_107090 cat_uncurry::apply(_tt107116 const &_arg ){
  sep_uncurry = _arg.mem_0;
  _vI89451_x = _arg.mem_1;
      _vI89440_n = 0; //assign simple
      _vI90479_xs  = _vI89451_x; //init
      _genout_urv90478  = (FLX_NEWP(_fI90480_iterator__apos_2)(FLX_FPAR_PASS this)); //init
      _generator_lists_5045 = _genout_urv90478; //assign simple
    continue__ll_lists_5041_L89452:;
      _vI89431_cat__apos_2_mv_1372  = (_generator_lists_5045)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some s_param_std_1226*/
      if(!andthen(FLX_VNI(_vI89431_cat__apos_2_mv_1372)==1, (FLX_NEWP(_lam_1375)(FLX_FPAR_PASS this))) ) goto _ml1374_L89453;
      s_param_std_1226 = *((_a13708t_107090*)FLX_VNP(_vI89431_cat__apos_2_mv_1372)); //assign simple
      {
      _a5038t_107106* _tmp108650 = (_a5038t_107106*)&_vI89440_n;
      _a5038t_107106 _tmp108651 = s_param_std_1226.size() + 1 ;
      *((_tmp108650))+=((_tmp108651));
      }
      goto continue__ll_lists_5041_L89452;
    _ml1374_L89453:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI89431_cat__apos_2_mv_1372)==0) ) goto _ml1376_L89454;
      goto _em1372_L89455;
    _ml1376_L89454:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",464,5,464,38);
;
    _em1372_L89455:;
      _vI89444_r = ::std::string(""); //assign simple
      {
      _a13708t_107090* _tmp108653 = (_a13708t_107090*)&_vI89444_r;
      ((_tmp108653))->reserve(_vI89440_n);
      }
      _vI89434_cat__apos_2_mv_1377  = _vI89451_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI89434_cat__apos_2_mv_1377)==0) ) goto _ml1379_L89456;
      return _vI89444_r;
    _ml1379_L89456:;
/*match case 2:|Snoc (tail_param_std_1228, head_param_std_1229)*/
      if(!andthen(FLX_VNI(_vI89434_cat__apos_2_mv_1377)==1, (FLX_NEWP(_lam_1386)(FLX_FPAR_PASS this))) ) goto _ml1380_L89461;
      head_param_std_1229 = (*((_tt107095*)FLX_VNP(_vI89434_cat__apos_2_mv_1377))).mem_1; //assign simple
      tail_param_std_1228 = (*((_tt107095*)FLX_VNP(_vI89434_cat__apos_2_mv_1377))).mem_0; //assign simple
      _vI89444_r = head_param_std_1229; //assign simple
    next_L89457:;
      _vI89437_cat__apos_2_mv_1381  = tail_param_std_1228; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI89437_cat__apos_2_mv_1381)==0) ) goto _ml1383_L89458;
      return _vI89444_r;
    _ml1383_L89458:;
/*match case 2:|Snoc (t_param_std_1231_param_std_1234, h_param_std_1232_param_std_1235)*/
      if(!andthen(FLX_VNI(_vI89437_cat__apos_2_mv_1381)==1, (FLX_NEWP(_lam_1385)(FLX_FPAR_PASS this))) ) goto _ml1384_L89459;
      h_param_std_1232_param_std_1235 = (*((_tt107095*)FLX_VNP(_vI89437_cat__apos_2_mv_1381))).mem_1; //assign simple
      t_param_std_1231_param_std_1234 = (*((_tt107095*)FLX_VNP(_vI89437_cat__apos_2_mv_1381))).mem_0; //assign simple
      {
      _a13708t_107090* _tmp108654 = (_a13708t_107090*)&_vI89444_r;
      _a13708t_107090 _tmp108655 = sep_uncurry + h_param_std_1232_param_std_1235 ;
      ((_tmp108654))->append((_tmp108655));
      }
      tail_param_std_1228 = t_param_std_1231_param_std_1234; //assign simple
      goto next_L89457;
      FLX_HALT("C:/projects/felix/src/packages/lists.fdoc",469,7,469,23,"HALT: Jump to end of function");
    _ml1384_L89459:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",478,7,478,16);
;
      FLX_HALT("C:/projects/felix/src/packages/lists.fdoc",469,7,469,23,"HALT: Jump to end of function");
    _ml1380_L89461:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",479,5,479,14);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",481,3,481,4); // HACK! 
}

//------------------------------
//FUNCTION <97200>: flx_pkgconfig::parse_args::aux::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI97200__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <104812>: FlxPkgConfigQuery::getpkgfield::getpkgfield'2::_lam_64765: Apply method
 ::flx::rtl::cl_t _lam_64765::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",495,9,495,13); // HACK! 
}

//------------------------------
//FUNCTION <95915>: flx_pkgconfig::tail_val::aux::aux_uncurry: Apply method
void* _fI95915_aux_uncurry::apply(_at107115 const &_arg ){
  _vI95916_x_uncurry = _arg.data[0];
  _vI95917_y = _arg.data[1];
    start_91065_L95924:;
      _vI95920_aux__apos_2_mv_1328  = _vI95916_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI95920_aux__apos_2_mv_1328)==0) ) goto _ml1330_L95919;
      return _vI95917_y;
    _ml1330_L95919:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI95920_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI95923__lam_1332)(FLX_FPAR_PASS this, ptr_fI95907_aux, ptrtail_val, ptrflx_pkgconfig))) ) goto _ml1331_L95918;
      _vI95921_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI95920_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI95922_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI95920_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI95917_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI95917_y, _vI95921_h_param_std_1210))); //init
      _vI95916_x_uncurry  = _vI95922_t_param_std_1209; //init
      goto start_91065_L95924;
    _ml1331_L95918:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <66035>: toolchain_gcc_osx::dynamic_library_extension: Apply method
_a13708t_107090 _fI66035_dynamic_library_extension::apply(){
      return ::std::string(".dylib");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",976,3,976,54); // HACK! 
}

//------------------------------
//FUNCTION <107001>: flx_processing::run_program_dynamic::aux_uncurry: Apply method
void* _fI107001_aux_uncurry::apply(_at107115 const &_arg ){
  _vI107002_inp_uncurry = _arg.data[0];
  _vI107003_out = _arg.data[1];
    start_90421_L107010:;
      _vI107006_aux__apos_2_mv_1322  = _vI107002_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI107006_aux__apos_2_mv_1322)==0) ) goto _ml1324_L107005;
      return _vI107003_out;
    _ml1324_L107005:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI107006_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI107009__lam_1326)(FLX_FPAR_PASS this, ptr_fI106361_run_program_dynamic, ptrflx_processing))) ) goto _ml1325_L107004;
      _vI107007_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI107006_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI107008_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI107006_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI107003_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI107003_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI107007_h_param_std_1208) /* apply_stack */))); //init
      _vI107002_inp_uncurry  = _vI107008_t_param_std_1207; //init
      goto start_90421_L107010;
    _ml1325_L107004:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <66335>: toolchain_clang_osx::static_library_extension: Apply method
_a13708t_107090 _fI66335_static_library_extension::apply(){
      return ::std::string(".a");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1464,3,1464,49); // HACK! 
}

//------------------------------
//FUNCTION <65928>: toolchain_gcc_linux::host_os: Apply method
_a13708t_107090 _fI65928_host_os::apply(){
      return ::std::string("LINUX");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",732,3,732,35); // HACK! 
}

//------------------------------

//PROCEDURE <65773:> toolchain_msvc_win32::checkwarn: Call method
void checkwarn::stack_call(_tt107175 const &_arg){
  ::flx::rtl::con_t *cc = call(0,_arg);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * checkwarn::call(::flx::rtl::con_t *_ptr_caller, _tt107175 const &_arg){
  _caller = _ptr_caller;
  _vI65779_result = _arg.mem_0;
  text = _arg.mem_1;
  INIT_PC
  return this;
}

//PROCEDURE <65773:> toolchain_msvc_win32::checkwarn: Resume method
::flx::rtl::con_t *checkwarn::resume(){
      if(!(!((_vI65779_result == 0)) ) ) goto _ifdoend_bootflx_65616_L65781;
      ::flx::rtl::ioutil::write(stdout,text);
      FLX_RETURN // procedure return
    _ifdoend_bootflx_65616_L65781:;
      xs  = _fI92174_aux_uncurry(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)
      .apply(_at107115(_fI92161_aux(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)
      .apply(_tt107116(text, (void* /*VR_nullptr*/ )0)) /* apply_stack */, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
      _genout_urv92187  = (FLX_NEWP(_fI92189_iterator__apos_2)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)); //init
      _generator_toolchain_4028 = _genout_urv92187; //assign simple
    continue__ll_toolchain_4009_L65782:;
      checkwarn_mv_65662  = (_generator_toolchain_4028)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some line_param_bootflx_65619*/
      if(!andthen(FLX_VNI(checkwarn_mv_65662)==1, (FLX_NEWP(_lam_65665)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32))) ) goto _ml65664_L65785;
      line_param_bootflx_65619 = *((_a13708t_107090*)FLX_VNP(checkwarn_mv_65662)); //assign simple
      if(!(!((line_param_bootflx_65619.find((::std::string("warning"))) == ::std::string::npos))  || !((line_param_bootflx_65619.find((::std::string("note:"))) == ::std::string::npos))  ) ) goto continue__ll_toolchain_4009_L65782;
      {
      _a13708t_107090 _tmp108660 = line_param_bootflx_65619 + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108660)));
      }
      fflush(stderr);
      goto continue__ll_toolchain_4009_L65782;
      goto continue__ll_toolchain_4009_L65782;
    _ml65664_L65785:;
/*match case 2:|None*/
      if(!(FLX_VNI(checkwarn_mv_65662)==0) ) goto _ml65666_L65786;
      FLX_RETURN // procedure return
    _ml65666_L65786:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1795,7,1795,11);
;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//C FUNC <16982>: dflt_profile
_art107126 dflt_profile(){
   ::flx::rtl::cl_t _vI90718_getenv_mv_553;
  _a13708t_107090 _vI90716_result_param_std_546;
  _a13708t_107090 _vI90715_getenv_mv_549;
  _a13708t_107090 _urv90712;
   ::flx::rtl::cl_t _vI90702_getenv_mv_553;
  _a13708t_107090 _vI90700_result_param_std_546;
  _a13708t_107090 _vI90699_getenv_mv_549;
  _a13708t_107090 _urv90696;
   ::flx::rtl::cl_t _vI90686_getenv_mv_553;
  _a13708t_107090 _vI90684_result_param_std_546;
  _a13708t_107090 _vI90683_getenv_mv_549;
  _a13708t_107090 _urv90680;
   ::flx::rtl::cl_t _vI90670_getenv_mv_553;
  _a13708t_107090 _vI90668_result_param_std_546;
  _a13708t_107090 _vI90667_getenv_mv_549;
  _a13708t_107090 _urv90664;
   ::flx::rtl::cl_t _vI90654_getenv_mv_553;
  _a13708t_107090 _vI90652_result_param_std_546;
  _a13708t_107090 _vI90651_getenv_mv_549;
  _a13708t_107090 _urv90648;
   ::flx::rtl::cl_t dflt_profile_mv_2950;
  _a13708t_107090 h_param_std_2942;
  _a13708t_107090 dflt_profile_mv_2946;
  _a13708t_107090 _urv90607;
  _a13708t_107090 FLX_OUTPUT_DIR;
  _a13708t_107090 FLX_CACHE_DIR;
  _a13708t_107090 FLX_PROFILE_DIR;
  _a13708t_107090 FLX_CACHE_TOP;
  _a13708t_107090 FLX_HOME_DIR;
  _a13708t_107090 HOME;
      dflt_profile_mv_2946  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("HOME")).c_str())); //init
/*begin match*/
/*match case 1:h_param_std_2942*/
      h_param_std_2942 = dflt_profile_mv_2946; //assign simple
      dflt_profile_mv_2950  = !((h_param_std_2942 == ::std::string(""))) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(dflt_profile_mv_2950%2==1) ) goto _ml2952_L90611;
      _urv90607  = h_param_std_2942; //init
      goto _end_hash_571593315;
    _ml2952_L90611:;
/*match case 2:any*/
      _urv90607  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("USERPROFILE")).c_str())); //init
    _end_hash_571593315:;
      HOME = _urv90607; //assign simple
      if(!((HOME == ::std::string(""))) ) goto _ifdoelse_std_2944_L16999;
      {
      _a13708t_107090 _tmp108662 = ::std::string("HOME (or USERPROFILE on WIN32) environment variable is not set.  Please set HOME before building.") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108662)));
      }
      fflush(stderr);
      ::std::exit(1);
    _ifdoelse_std_2944_L16999:;
      _vI90651_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_HOME_DIR")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI90652_result_param_std_546 = _vI90651_getenv_mv_549; //assign simple
      _vI90654_getenv_mv_553  = !((_vI90652_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI90654_getenv_mv_553%2==1) ) goto _ml555_L90653;
      _urv90648  = _vI90652_result_param_std_546; //init
      goto _end_inline_getenv_90657_L90657;
    _ml555_L90653:;
/*match case 2:any*/
      _urv90648  = _fI82124_join(HOME, ::std::string(".felix")); //init
    _end_inline_getenv_90657_L90657:;
      FLX_HOME_DIR = _urv90648; //assign simple
      _vI90667_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_CACHE_TOP")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI90668_result_param_std_546 = _vI90667_getenv_mv_549; //assign simple
      _vI90670_getenv_mv_553  = !((_vI90668_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI90670_getenv_mv_553%2==1) ) goto _ml555_L90669;
      _urv90664  = _vI90668_result_param_std_546; //init
      goto _end_inline_getenv_90673_L90673;
    _ml555_L90669:;
/*match case 2:any*/
      _urv90664  = _fI82124_join(FLX_HOME_DIR, ::std::string("cache")); //init
    _end_inline_getenv_90673_L90673:;
      FLX_CACHE_TOP = _urv90664; //assign simple
      _vI90683_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_PROFILE_DIR")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI90684_result_param_std_546 = _vI90683_getenv_mv_549; //assign simple
      _vI90686_getenv_mv_553  = !((_vI90684_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI90686_getenv_mv_553%2==1) ) goto _ml555_L90685;
      _urv90680  = _vI90684_result_param_std_546; //init
      goto _end_inline_getenv_90689_L90689;
    _ml555_L90685:;
/*match case 2:any*/
      _urv90680  = _fI82124_join(FLX_HOME_DIR, ::std::string("config")); //init
    _end_inline_getenv_90689_L90689:;
      FLX_PROFILE_DIR = _urv90680; //assign simple
      _vI90699_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_CACHE_DIR")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI90700_result_param_std_546 = _vI90699_getenv_mv_549; //assign simple
      _vI90702_getenv_mv_553  = !((_vI90700_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI90702_getenv_mv_553%2==1) ) goto _ml555_L90701;
      _urv90696  = _vI90700_result_param_std_546; //init
      goto _end_inline_getenv_90705_L90705;
    _ml555_L90701:;
/*match case 2:any*/
      _urv90696  = _fI82124_join(FLX_CACHE_TOP, ::std::string("binary")); //init
    _end_inline_getenv_90705_L90705:;
      FLX_CACHE_DIR = _urv90696; //assign simple
      _vI90715_getenv_mv_549  = ::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_OUTPUT_DIR")).c_str())); //init
/*begin match*/
/*match case 1:result_param_std_546*/
      _vI90716_result_param_std_546 = _vI90715_getenv_mv_549; //assign simple
      _vI90718_getenv_mv_553  = !((_vI90716_result_param_std_546.size() == 0)) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI90718_getenv_mv_553%2==1) ) goto _ml555_L90717;
      _urv90712  = _vI90716_result_param_std_546; //init
      goto _end_inline_getenv_90721_L90721;
    _ml555_L90717:;
/*match case 2:any*/
      _urv90712  = _fI82124_join(FLX_CACHE_TOP, ::std::string("text")); //init
    _end_inline_getenv_90721_L90721:;
      FLX_OUTPUT_DIR = _urv90712; //assign simple
      return _art107126(FLX_CACHE_DIR, FLX_HOME_DIR, FLX_OUTPUT_DIR, FLX_PROFILE_DIR);
}
//------------------------------
//FUNCTION <97294>: flx_pkgconfig::aux: Apply method
void* _fI97294_aux::apply(_tt107116 const &_arg ){
  _vI97295_x = _arg.mem_0;
  _vI97296_y = _arg.mem_1;
    start_91026_L97306:;
      _vI97301_find_mv_2046  = _vI97295_x.find((::flx::rtl::strutil::subscript(::std::string(":"),0))); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((_vI97301_find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L97303;
      _vI97297_aux_mv_2226  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_90996_L97304;
    _ml2048_L97303:;
/*match case 2:i_param_std_1834*/
      _vI97302_i_param_std_1834 = _vI97301_find_mv_2046; //assign simple
      _vI97297_aux_mv_2226  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (_vI97302_i_param_std_1834)); //init
    _end_inline_find_90996_L97304:;
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(_vI97297_aux_mv_2226)==0) ) goto _ml2228_L97299;
      return FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97296_y, _vI97295_x)));
    _ml2228_L97299:;
/*match case 2:|Some n_param_std_1909*/
      if(!andthen(FLX_VNI(_vI97297_aux_mv_2226)==1, (FLX_NEWP(_fI97305__lam_2230)(FLX_FPAR_PASS this, ptrflx_pkgconfig))) ) goto _ml2229_L97300;
      _vI97298_n_param_std_1909 = *((_a5038t_107106*)FLX_VNP(_vI97297_aux_mv_2226)); //assign simple
/*parallel assignment*/
      _vI97296_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97296_y, ::flx::rtl::strutil::substr(_vI97295_x,0,_vI97298_n_param_std_1909)))); //init
      _vI97295_x  = ::flx::rtl::strutil::substr(_vI97295_x,_vI97298_n_param_std_1909 + 1 ,_vI97295_x.size()); //init
      goto start_91026_L97306;
    _ml2229_L97300:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,7,478,61);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",480,5,480,6); // HACK! 
}

//------------------------------
//C FUNC <68267>: validate_cache
_tt107153 validate_cache(FLX_APAR_DECL _art107154 _vI68281_spec){
  _a7857t_107093 _genout_urv104585;
  _a7857t_107093 _vI104582__genout_urv98289;
  _a7857t_107093 _genout_urv104578;
  double x_param_bootflx_64467;
  double validate_cache_mv_64496;
  double _urv104368;
  _a7857t_107093 _vI68280_f;
  double automaton_time;
  _a13708t_107090 automaton_name;
  double grammar_time;
  double flxg_stamp_time;
  _a13708t_107090 flxg_stamp_data;
  double cache_time;
  _a13708t_107090 flxg_stamp;
  double flxg_time;
  mkdirs(FLX_FPAR_PASS _vI68281_spec.CACHE_DIR);
      flxg_time = dfiletime(_vI68281_spec.FLXG, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/))); //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI68281_spec.debugln)->clone()
      ->call(0, ::std::string("Flxg=") + _vI68281_spec.FLXG );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      {
        ::flx::rtl::con_t *_p = (_vI68281_spec.debugln)->clone()
      ->call(0, ::std::string("Flxg_time=") + strfiletime(FLX_FPAR_PASS flxg_time) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      flxg_stamp = _fI82124_join(_vI68281_spec.CACHE_DIR, ::std::string("flxg_time.stamp")); //assign simple
      cache_time = dfiletime(flxg_stamp, static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/))); //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI68281_spec.debugln)->clone()
      ->call(0, ::std::string("cache_time=") + strfiletime(FLX_FPAR_PASS cache_time) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_573_L104365;
      {
      _a13708t_107090 _tmp108664 = (::std::string("[load] ") + flxg_stamp ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108664)));
      }
      fflush(stderr);
    _ifdoelse_std_573_L104365:;
      flxg_stamp_data = ::flx::rtl::ioutil::load_file(flxg_stamp); //assign simple
      validate_cache_mv_64496  = ::std::atof(flxg_stamp_data.c_str()); //init
/*begin match*/
/*match case 1:literal[double]("0.0")*/
      if(!((0.0 == validate_cache_mv_64496)) ) goto _ml64498_L104371;
      _urv104368  = - 1.0 ; //init
      goto _end_hash_819421599;
    _ml64498_L104371:;
/*match case 2:x_param_bootflx_64467*/
      x_param_bootflx_64467 = validate_cache_mv_64496; //assign simple
      _urv104368  = x_param_bootflx_64467; //init
    _end_hash_819421599:;
      flxg_stamp_time = _urv104368; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI68281_spec.debugln)->clone()
      ->call(0, ::std::string("Flxg_stamp_data : ") + strfiletime(FLX_FPAR_PASS flxg_stamp_time) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      grammar_time = gramtime_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107307(_vI68281_spec.debugln, _vI68281_spec.GRAMMAR_DIR, ::std::string("@") + _vI68281_spec.STDGRAMMAR )) /* apply_stack */; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI68281_spec.debugln)->clone()
      ->call(0, ::std::string("Grammar text time=") + strfiletime(FLX_FPAR_PASS grammar_time) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      automaton_name = _vI68281_spec.AUTOMATON; //assign simple
      automaton_time = dfiletime(automaton_name, - 1.0 ); //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI68281_spec.debugln)->clone()
      ->call(0, ((::std::string("Automaton ") + automaton_name ) + ::std::string(" time=") ) + strfiletime(FLX_FPAR_PASS automaton_time) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((cache_time == (static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)))))  && !((flxg_stamp_time == flxg_time))  ) ) goto _ifdoend_bootflx_64468_L68284;
      {
      _a13708t_107090 _tmp108665 = ::std::string("Cache may be out of date due to compiler change!") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108665)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108666 = (::std::string("Flxg compiler time stamp=") + strfiletime(FLX_FPAR_PASS flxg_time) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108666)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108667 = (::std::string("Cache time stamp        =") + strfiletime(FLX_FPAR_PASS cache_time) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108667)));
      }
      fflush(stdout);
      if((((_vI68281_spec.OUTPUT_DIR == ::std::string("/")) || (_vI68281_spec.OUTPUT_DIR == ::std::string("")) ) || (_vI68281_spec.OUTPUT_DIR == ::std::string(".")) ) || (((_vI68281_spec.CACHE_DIR == ::std::string("/")) || (_vI68281_spec.CACHE_DIR == ::std::string("")) ) || (_vI68281_spec.CACHE_DIR == ::std::string(".")) ) ) goto _ifdoelse_bootflx_64469_L68287;
      _vI68281_spec.CLEAR_CACHE = 1; //assign simple
      goto _ifdoelse_bootflx_64469_L68287;
      goto _ifdoelse_bootflx_64469_L68287;
    _ifdoend_bootflx_64468_L68284:;
      if(!((automaton_time < grammar_time)) ) goto _ifdoelse_bootflx_64469_L68287;
      {
      _a13708t_107090 _tmp108668 = ::std::string("Cache may be out of date due to grammar upgrade!") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108668)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108669 = (::std::string("Grammar time stamp          =") + strfiletime(FLX_FPAR_PASS grammar_time) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108669)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108670 = (::std::string("Automaton.syntax time stamp =") + strfiletime(FLX_FPAR_PASS automaton_time) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108670)));
      }
      fflush(stdout);
      _vI68281_spec.CLEAR_CACHE = 1; //assign simple
    _ifdoelse_bootflx_64469_L68287:;
      if(!(!((_vI68281_spec.CLEAR_CACHE == 0)) ) ) goto _ifdoelse_bootflx_64475_L68291;
      if(!((((_vI68281_spec.OUTPUT_DIR == ::std::string("/")) || (_vI68281_spec.OUTPUT_DIR == ::std::string("")) ) || (_vI68281_spec.OUTPUT_DIR == ::std::string(".")) ) || (((_vI68281_spec.CACHE_DIR == ::std::string("/")) || (_vI68281_spec.CACHE_DIR == ::std::string("")) ) || (_vI68281_spec.CACHE_DIR == ::std::string(".")) ) ) ) goto _ifdoelse_bootflx_64477_L68289;
      {
      _a13708t_107090 _tmp108671 = ::std::string("WILL NOT DELETE CACHES") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108671)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108672 = (::std::string("output cache ") + _vI68281_spec.OUTPUT_DIR ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108672)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108673 = (::std::string("binary cache ") + _vI68281_spec.CACHE_DIR ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108673)));
      }
      fflush(stdout);
      ::std::exit(1);
    _ifdoelse_bootflx_64477_L68289:;
      {
      _a13708t_107090 _tmp108674 = (::std::string("Delete cache ") + _vI68281_spec.OUTPUT_DIR ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108674)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108675 = ((::std::string("mkdir ") + (_vI68281_spec.quote)->clone()
      ->apply(_vI68281_spec.OUTPUT_DIR + ::std::string("\\rubbish") ) /* general apply */ ) + ::std::string("& rmdir /Q /S ") ) + (_vI68281_spec.quote)->clone()
      ->apply(_vI68281_spec.OUTPUT_DIR) /* general apply */ ;
      _a13708t_107090 _tmp108676 = (_vI68281_spec.xqt)->clone()
      ->apply((_tmp108675)) /* general apply */;
      (void)(_tmp108676);
      }
      {
      _a13708t_107090 _tmp108677 = (::std::string("Delete cache ") + _vI68281_spec.CACHE_DIR ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108677)));
      }
      fflush(stdout);
      {
      _a13708t_107090 _tmp108678 = ((::std::string("mkdir ") + (_vI68281_spec.quote)->clone()
      ->apply(_vI68281_spec.CACHE_DIR + ::std::string("\\rubbish") ) /* general apply */ ) + ::std::string("& rd /Q /S ") ) + (_vI68281_spec.quote)->clone()
      ->apply(_vI68281_spec.CACHE_DIR) /* general apply */ ;
      _a13708t_107090 _tmp108679 = (_vI68281_spec.xqt)->clone()
      ->apply((_tmp108678)) /* general apply */;
      (void)(_tmp108679);
      }
  mkdirs(FLX_FPAR_PASS _vI68281_spec.CACHE_DIR);
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_565_L104580;
      {
      _a13708t_107090 _tmp108680 = (::std::string("[Open_output] ") + flxg_stamp ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108680)));
      }
      fflush(stderr);
    _ifdoelse_std_565_L104580:;
      _genout_urv104585  = fopen(flxg_stamp.c_str(),"wb"); //init
      _vI104582__genout_urv98289  = _genout_urv104585; //init
      _genout_urv104578  = _vI104582__genout_urv98289; //init
      _vI68280_f = _genout_urv104578; //assign simple
      {
      _a13708t_107090 _tmp108681 = fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(flxg_time, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(0, 3))))) /* apply_stack */;
      ::flx::rtl::ioutil::write(_vI68280_f,((_tmp108681)));
      }
      (void)fclose(_vI68280_f);
    _ifdoelse_bootflx_64475_L68291:;
      return _tt107153(_vI68281_spec.CLEAR_CACHE, cache_time);
}
//------------------------------
//FUNCTION <102582>: exts::aux_uncurry: Apply method
void* _fI102582_aux_uncurry::apply(_tt107283 const &_arg ){
  _vI102583_inp_uncurry = _arg.mem_0;
  _vI102584_out = _arg.mem_1;
    start_102429_L102591:;
      _vI102587_aux__apos_2_mv_1322  = _vI102583_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102587_aux__apos_2_mv_1322)==0) ) goto _ml1324_L102586;
      return _vI102584_out;
    _ml1324_L102586:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI102587_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI102590__lam_1326)(FLX_FPAR_PASS this, ptrexts))) ) goto _ml1325_L102585;
      _vI102588_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI102587_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI102589_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI102587_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI102584_out  = FLX_VNR(1, new(*PTF gcp, _tt107274_ptr_map, true) _tt107274 (_tt107274(_vI102584_out, _lam_65073(ptrexts)
      .apply(_vI102588_h_param_std_1208) /* apply_stack */))); //init
      _vI102583_inp_uncurry  = _vI102589_t_param_std_1207; //init
      goto start_102429_L102591;
    _ml1325_L102585:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------

//PROCEDURE <84881:> cal_depvars::debugln: Call method
::flx::rtl::con_t * debugln::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI84992_x = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <84881:> cal_depvars::debugln: Resume method
::flx::rtl::con_t *debugln::resume(){
      if(!(*ptrcal_depvars->control).DEBUG_FLX ) goto _ifdoelse_bootflx_65122_L85009;
      {
      _a13708t_107090 _tmp108683 = (::std::string("[flx] ") + _vI84992_x ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108683)));
      }
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_65122_L85009:;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <66031>: toolchain_gcc_osx::dynamic_object_extension: Apply method
_a13708t_107090 _fI66031_dynamic_object_extension::apply(){
      return ::std::string("_dynamic.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",974,3,974,57); // HACK! 
}

//------------------------------

//PROCEDURE <105442:> flx_processing::debugln: Call method
::flx::rtl::con_t * _pI105442_debugln::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI105447_x = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <105442:> flx_processing::debugln: Resume method
::flx::rtl::con_t *_pI105442_debugln::resume(){
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65257_L105448;
      {
      _a13708t_107090 _tmp108684 = (::std::string("[flx] ") + _vI105447_x ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108684)));
      }
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_65257_L105448:;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <91094>: process_config_text_uncurry::aux::_lam_2230: Apply method
 ::flx::rtl::cl_t _lam_2230::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,9,478,14); // HACK! 
}

//------------------------------
//FUNCTION <106922>: flx_processing::check_binary_uptodate::aux_uncurry::_lam_1301: Apply method
 ::flx::rtl::cl_t _fI106922__lam_1301::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",234,11,234,19); // HACK! 
}

//------------------------------
//FUNCTION <106053>: flx_processing::run_program_static::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI106053__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <89224>: toolchain_clang_apple_iOS_maker_uncurry::get_base_c_compile_flags: Apply method
void* _fI89224_get_base_c_compile_flags::apply(){
      return ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89210_base_c_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2000,3,2000,65); // HACK! 
}

//------------------------------
//FUNCTION <66142>: toolchain_clang_linux::cxx_dependency_generator: Apply method
_tt107175 _fI66142_cxx_dependency_generator::apply(_art107174 const &_arg ){
  _vI66147_spec = _arg;
      _ds2_65607 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_clang_linux->_vI66103_cxx_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_linux->_vI66187_config.ccflags, ::std::string("-std=c++11")))), ::std::string("-MM")))), ptrtoolchain_clang_linux->_vI66187_config.header_search_dirs, ptrtoolchain_clang_linux->_vI66187_config.macros, ptrtoolchain_clang_linux->_vI66187_config.debugln), _vI66147_spec.src)) /* apply_stack */; //assign simple
      _vI66145_result = _ds2_65607.mem_0; //assign simple
      _vI66146_data = _ds2_65607.mem_1; //assign simple
      return _tt107175(_vI66145_result, _vI66146_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1262,3,1262,4); // HACK! 
}

//------------------------------
//FUNCTION <67805>: FlxPkgConfigQuery::getpkgfieldopt: Apply method
_ft107167* getpkgfieldopt::apply(_pt107161* const &_arg ){
  _vI67819_ehandler = _arg;
      return (FLX_NEWP(_fI67807_getpkgfieldopt__apos_2)(FLX_FPAR_PASS this, ptrFlxPkgConfigQuery));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",536,5,536,6); // HACK! 
}

//------------------------------
//FUNCTION <89408>: gramtime_uncurry::maxtime::maxtime'2: Apply method
double _fI89408_maxtime__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI89409_s = _arg;
      _vI104392_max_mv_106  = (ptrmaxtime->_vI89410_x < gramtime_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107307(ptrgramtime_uncurry->_vI89428_debugln_uncurry, ptrgramtime_uncurry->_vI89421_path, _vI89409_s)) /* apply_stack */); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI104392_max_mv_106%2==1) ) goto _ml108_L104391;
      return gramtime_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107307(ptrgramtime_uncurry->_vI89428_debugln_uncurry, ptrgramtime_uncurry->_vI89421_path, _vI89409_s)) /* apply_stack */;
    _ml108_L104391:;
/*match case 2:any*/
      return ptrmaxtime->_vI89410_x;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",84,5,84,77); // HACK! 
}

//------------------------------
//FUNCTION <66422>: cxx_depcheck::maxf: Apply method
_ft107543* maxf::apply(double const &_arg ){
  _vI66427_t = _arg;
      return (FLX_NEWP(_fI66424_maxf__apos_2)(FLX_FPAR_PASS this, ptrcxx_depcheck));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",401,5,401,95); // HACK! 
}

//------------------------------
//FUNCTION <97176>: flx_pkgconfig::parse_args::aux::_lam_1443: Apply method
 ::flx::rtl::cl_t _fI97176__lam_1443::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",579,9,579,17); // HACK! 
}

//------------------------------
//FUNCTION <89726>: map_package_requirements_uncurry::pkgconfl: Apply method
void* pkgconfl::apply(void* const &_arg ){
  _vI89731_args = _arg;
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrmap_package_requirements_uncurry->_vI89750_spec.EXTRA_PACKAGES, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_64501_L89733;
      {
      _a13708t_107090 _tmp108685 = (::std::string("calpackages, EXTRA_PACKAGES = ") + str(FLX_FPAR_PASS_ONLY)
      .apply(ptrmap_package_requirements_uncurry->_vI89750_spec.EXTRA_PACKAGES) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108685)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_64501_L89733:;
      allargs = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrmap_package_requirements_uncurry->PKGCONFIG_PATH, _vI89731_args)) /* apply_stack */, ptrmap_package_requirements_uncurry->_vI89750_spec.EXTRA_PACKAGES)) /* apply_stack */, ptrmap_package_requirements_uncurry->RESH)) /* apply_stack */; //assign simple
      _genout_urv97339  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(allargs) /* apply_stack */; //init
      _ds2_64521 = _genout_urv97339; //assign simple
      ret = _ds2_64521.mem_0; //assign simple
      _vI89730_s = _ds2_64521.mem_1; //assign simple
      if(!(!((ret == 0)) ) ) goto _ifdoelse_bootflx_64503_L89735;
      {
      _a13708t_107090 _tmp108686 = (((::std::string("[FlxPkg:map_package_requirements] Error ") + ::flx::rtl::strutil::str<int>(ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108686)));
      }
      fflush(stderr);
      {
      _a6203t_107291 _tmp108687 = (_a6203t_107291)(ptrmap_package_requirements_uncurry->_vI89761_ehandler_uncurry);
      throw ((_tmp108687));
      }
    _ifdoelse_bootflx_64503_L89735:;
      return _vI89730_s;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",731,5,731,6); // HACK! 
}

//------------------------------
//C FUNC <67592>: mkinc
_a13708t_107090 mkinc(_a13708t_107090 _vI67594_s){
      return ::std::string("-I") + _vI67594_s ;
}
//------------------------------
//FUNCTION <96611>: flx_pkgconfig::handle_pkg::aux_uncurry: Apply method
void* _fI96611_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96612_x_uncurry = _arg.data[0];
  _vI96613_y = _arg.data[1];
    start_91065_L96620:;
      _vI96616_aux__apos_2_mv_1328  = _vI96612_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96616_aux__apos_2_mv_1328)==0) ) goto _ml1330_L96615;
      return _vI96613_y;
    _ml1330_L96615:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI96616_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI96619__lam_1332)(FLX_FPAR_PASS this, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L96614;
      _vI96617_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI96616_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI96618_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI96616_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI96613_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96613_y, _vI96617_h_param_std_1210))); //init
      _vI96612_x_uncurry  = _vI96618_t_param_std_1209; //init
      goto start_91065_L96620;
    _ml1331_L96614:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <91521>: respectful_parse_uncurry_uncurry::iterator'2: Apply method
void* _fI91521_iterator__apos_2::apply(){
  FLX_START_SWITCH
      _vI91522_i = 0; //assign simple
    redo__ll_strings_6968_L91523:;
      if(FLX_UNLIKELY(!(!(((static_cast<int>((ptrrespectful_parse_uncurry_uncurry->_vI91525_x.size()))/*int.flx: ctor*/) - 1  < _vI91522_i)) ) )) goto break__ll_strings_6968_L91524;
      FLX_SET_PC(108689)
      return FLX_VNR(1, new(*PTF gcp, char_ptr_map, true) char (::flx::rtl::strutil::subscript(ptrrespectful_parse_uncurry_uncurry->_vI91525_x,_vI91522_i)));//yield
    FLX_CASE_LABEL(108689)
      {
      int* _tmp108690 = (int*)&_vI91522_i;
      ++*((_tmp108690));
      }
      goto redo__ll_strings_6968_L91523;
    break__ll_strings_6968_L91524:;
      return (void* /*VR_nullptr*/ )0;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",365,5,365,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <88946>: generic_link_exe_dynamic_uncurry: Apply method
int generic_link_exe_dynamic_uncurry::apply(_tt107229 const &_arg ){
  _vI89569_spec_uncurry = _arg.mem_0;
  _vI89565_cppos = _arg.mem_1;
  _vI89566_LINKER_OUTPUT_FILENAME = _arg.mem_2;
      _vI93434_r = _fI93435_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89569_spec_uncurry.CCFLAGS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108691 = (void**)&_vI93434_r;
      _rev(((_tmp108691)),(_a13708t_107090*)0);
      }
      _vI93456_r = _fI93457_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89565_cppos, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108692 = (void**)&_vI93456_r;
      _rev(((_tmp108692)),(_a13708t_107090*)0);
      }
      _vI93474_r = _fI93475_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89569_spec_uncurry.LINK_STRINGS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108693 = (void**)&_vI93474_r;
      _rev(((_tmp108693)),(_a13708t_107090*)0);
      }
      _vI89563_CMD = (((((((((::std::string("\"") + _vI89569_spec_uncurry.CCLINK_STATIC ) + ::std::string("\"") ) + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93434_r)) /* apply_stack */ ) + ::std::string(" ") ) + (_vI89569_spec_uncurry.SPEC_EXE_FILENAME + ((::std::string("\"") + _vI89566_LINKER_OUTPUT_FILENAME ) + ::std::string("\"") ) ) ) + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93456_r)) /* apply_stack */ ) + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93474_r)) /* apply_stack */ ; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI89569_spec_uncurry.debugln)->clone()
      ->call(0, ::std::string("Link command=") + _vI89563_CMD );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_444_L93490;
      {
      _a13708t_107090 _tmp108694 = (::std::string("[system] ") + _vI89563_CMD ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108694)));
      }
      fflush(stderr);
    _ifdoelse_std_444_L93490:;
      _genout_urv93497  = ::std::system(((::std::string("\"") + _vI89563_CMD ) + ::std::string("\"") ).c_str()); //init
      _vI93494__genout_urv93142  = _genout_urv93497; //init
      _vI93493__genout_urv93134  = _vI93494__genout_urv93142; //init
      _vI93492__genout_urv93129  = _vI93493__genout_urv93134; //init
      _genout_urv93488  = _vI93492__genout_urv93129; //init
      _vI89564_result = _genout_urv93488; //assign simple
      if(!(!((_vI89564_result == 0)) ) ) goto _ifdoelse_bootflx_64819_L89568;
      {
      _a13708t_107090 _tmp108695 = ((::std::string("Link command=") + _vI89563_CMD ) + ::std::string(" FAILED") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108695)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_64819_L89568:;
      return _vI89564_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",304,3,304,4); // HACK! 
}

//------------------------------
//FUNCTION <65757>: toolchain_msvc_win32::xpopen: Apply method
_tt107175 xpopen::apply(void* const &_arg ){
  cmd = _arg;
      _vI92055_r = _fI92056_aux_uncurry(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)
      .apply(_at107115(cmd, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108696 = (void**)&_vI92055_r;
      _rev(((_tmp108696)),(_a13708t_107090*)0);
      }
      CMD = cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI92055_r)) /* apply_stack */; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_448_L92119;
      {
      _a13708t_107090 _tmp108697 = (::std::string("[get_stdout] ") + CMD ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108697)));
      }
      fflush(stderr);
    _ifdoelse_std_448_L92119:;
      _genout_urv92117  = basic_get_stdout(CMD); //init
      _ds2_65661 = _genout_urv92117; //assign simple
      result = _ds2_65661.mem_0; //assign simple
      data = _ds2_65661.mem_1; //assign simple
      if(!(!((result == 0)) ) ) goto _ifdoelse_bootflx_65613_L65765;
      {
      _a13708t_107090 _tmp108698 = ((::std::string("Shell command=") + CMD ) + ::std::string(" FAILED") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108698)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65613_L65765:;
      return _tt107175(result, data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1772,3,1772,4); // HACK! 
}

//------------------------------
//FUNCTION <66037>: toolchain_gcc_osx::pathname_separator: Apply method
_a13708t_107090 _fI66037_pathname_separator::apply(){
      return ::std::string("/");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",977,3,977,42); // HACK! 
}

//------------------------------
//FUNCTION <92772>: toolchain_msvc_win32::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI92772__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <65838>: toolchain_msvc_win32::cxx_static_object_compiler: Apply method
int cxx_static_object_compiler::apply(_art107177 const &_arg ){
  _vI65843_spec = _arg;
      _genout_urv92425  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_msvc_win32->macros, ::std::string("/EHs")))), ::std::string("/c")))), ::std::string("/Zi")))), ::std::string("/MDd")))), ::std::string("/DFLX_STATIC_LINK")))), ::std::string("/wd4190")))), ::std::string("/nologo")))), ::std::string("cl.exe")))), ptrtoolchain_msvc_win32->include_switches)) /* apply_stack */, _vI65843_spec.src)) /* apply_stack */, ::std::string("/Fo") + _vI65843_spec.dst )) /* apply_stack */) /* apply_stack */; //init
      _ds2_65676 = _genout_urv92425; //assign simple
      _vI65841_result = _ds2_65676.mem_0; //assign simple
      _vI65842_text = _ds2_65676.mem_1; //assign simple
      {
      checkwarn(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .stack_call(_tt107175(_vI65841_result, _vI65842_text));
      }
      return _vI65841_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1858,3,1858,4); // HACK! 
}

//------------------------------
//FUNCTION <98210>: run_felix_compiler::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI98210__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <106162>: flx_processing::cal_time_from_flxdepfile::maxf::maxf'2: Apply method
double _fI106162_maxf__apos_2::apply(_a13708t_107090 const &_arg ){
  _vI106165_f = _arg;
      if(!((_vI106165_f == ::std::string(""))) ) goto _ifdoend_bootflx_65278_L106166;
      return ptr_fI106161_maxf->_vI106167_x;
    _ifdoend_bootflx_65278_L106166:;
      _vI106163_ext = (split_extension(_vI106165_f).data)[1]; //assign simple
      _vI106524_maxf__apos_2_mv_65448  = !((_vI106163_ext == ::std::string(""))) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106524_maxf__apos_2_mv_65448%2==1) ) goto _ml65450_L106525;
      _vI106523__urv97847  = dfiletime(_vI106165_f, - 1.0 ); //init
      goto _end_hash_33308573;
    _ml65450_L106525:;
/*match case 2:any*/
      _vI106527_max_mv_106  = (dfiletime(_vI106165_f + ::std::string(".fdoc") , - 1.0 ) < dfiletime(_vI106165_f + ::std::string(".flx") , - 1.0 )); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106527_max_mv_106%2==1) ) goto _ml108_L106526;
      _vI106523__urv97847  = dfiletime(_vI106165_f + ::std::string(".flx") , - 1.0 ); //init
      goto _end_hash_33308573;
    _ml108_L106526:;
/*match case 2:any*/
      _vI106523__urv97847  = dfiletime(_vI106165_f + ::std::string(".fdoc") , - 1.0 ); //init
    _end_hash_33308573:;
      _vI106164_ft = _vI106523__urv97847; //assign simple
      {
        ::flx::rtl::con_t *_p = (ptr_fI106160_cal_time_from_flxdepfile->_vI106171_debugln)->clone()
      ->call(0, ((::std::string("Time ") + _vI106165_f ) + ::std::string(" = ") ) + strfiletime(FLX_FPAR_PASS _vI106164_ft) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      _vI106530_maxf__apos_2_mv_65453  = (_vI106164_ft == - 1.0 ); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106530_maxf__apos_2_mv_65453%2==1) ) goto _ml65455_L106531;
      _vI106529__urv97892  = static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)); //init
      goto _end_hash_905790155;
    _ml65455_L106531:;
/*match case 2:any*/
      _vI106529__urv97892  = _vI106164_ft; //init
    _end_hash_905790155:;
      _vI106164_ft = _vI106529__urv97892; //assign simple
      _vI106534_max_mv_106  = (ptr_fI106161_maxf->_vI106167_x < _vI106164_ft); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106534_max_mv_106%2==1) ) goto _ml108_L106533;
      return _vI106164_ft;
    _ml108_L106533:;
/*match case 2:any*/
      return ptr_fI106161_maxf->_vI106167_x;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2122,5,2122,6); // HACK! 
}

//------------------------------
//FUNCTION <65942>: toolchain_gcc_linux::static_library_extension: Apply method
_a13708t_107090 _fI65942_static_library_extension::apply(){
      return ::std::string(".a");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",740,3,740,49); // HACK! 
}

//------------------------------
//C FUNC <82124>: _fI82124_join
_a13708t_107090 _fI82124_join( _a13708t_107090 _vI82125_p, _a13708t_107090 _vI82126_b){
   ::flx::rtl::cl_t join_mv_662;
   ::flx::rtl::cl_t join_mv_657;
   ::flx::rtl::cl_t join_mv_652;
      join_mv_652  = (_vI82125_p == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(join_mv_652%2==1) ) goto _ml654_L90598;
      return _vI82126_b;
    _ml654_L90598:;
/*match case 2:any*/
      join_mv_657  = (_vI82125_p == ::std::string("\\")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(join_mv_657%2==1) ) goto _ml659_L90600;
      return _vI82125_p + _vI82126_b ;
    _ml659_L90600:;
/*match case 2:any*/
      join_mv_662  = (::flx::rtl::strutil::subscript(_vI82125_p,-1) == ::flx::rtl::strutil::subscript(::std::string("\\"),0)); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(join_mv_662%2==1) ) goto _ml664_L90602;
      return _vI82125_p + _vI82126_b ;
    _ml664_L90602:;
/*match case 2:any*/
      return (_vI82125_p + ::std::string("\\") ) + _vI82126_b ;
}
//------------------------------
//FUNCTION <66017>: toolchain_gcc_osx::whatami: Apply method
_a13708t_107090 _fI66017_whatami::apply(){
      return ::std::string("toolchain_gcc_osx (version 2)");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",966,3,966,59); // HACK! 
}

//------------------------------
//FUNCTION <96396>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::search_and_replace'2::iterator'2::_lam_1507: Apply method
 ::flx::rtl::cl_t _fI96396__lam_1507::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",678,11,678,19); // HACK! 
}

//------------------------------
//FUNCTION <104966>: FlxPkgConfigQuery::getclosure::getclosure'2::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI104966__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <92399>: toolchain_msvc_win32::dependency_parser::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI92399__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <92764>: toolchain_msvc_win32::aux_uncurry: Apply method
void* _fI92764_aux_uncurry::apply(_at107115 const &_arg ){
  _vI92765_inp_uncurry = _arg.data[0];
  _vI92766_out = _arg.data[1];
    start_90421_L92773:;
      _vI92769_aux__apos_2_mv_1322  = _vI92765_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI92769_aux__apos_2_mv_1322)==0) ) goto _ml1324_L92768;
      return _vI92766_out;
    _ml1324_L92768:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI92769_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI92772__lam_1326)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32))) ) goto _ml1325_L92767;
      _vI92770_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI92769_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI92771_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI92769_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI92766_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI92766_out, _fI92759_fixup(ptrtoolchain_msvc_win32)
      .apply(_vI92770_h_param_std_1208) /* apply_stack */))); //init
      _vI92765_inp_uncurry  = _vI92771_t_param_std_1207; //init
      goto start_90421_L92773;
    _ml1325_L92767:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <66345>: toolchain_clang_osx::get_base_cxx_compile_flags: Apply method
void* _fI66345_get_base_cxx_compile_flags::apply(){
      return ptrtoolchain_clang_osx->_vI66318_base_cxx_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1469,3,1469,69); // HACK! 
}

//------------------------------
//FUNCTION <94342>: get_dflt_uncurry::_lam_1769: Apply method
 ::flx::rtl::cl_t _lam_1769::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/trees.fdoc",1274,7,1274,12); // HACK! 
}

//------------------------------
//FUNCTION <65908>: toolchain_msvc_win32::dynamic_library_linker: Apply method
int dynamic_library_linker::apply(_art107181 const &_arg ){
  _vI65913_spec = _arg;
      _genout_urv92618  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI65913_spec.srcs, ::std::string("/Fe") + _vI65913_spec.dst )) /* apply_stack */, ::std::string("/link"))) /* apply_stack */, ::std::string("/DLL"))) /* apply_stack */, ptrtoolchain_msvc_win32->dynamic_link_strings)) /* apply_stack */, ::std::string("/MDd")))), ::std::string("/nologo")))), ::std::string("cl.exe"))))) /* apply_stack */; //init
      _ds2_65692 = _genout_urv92618; //assign simple
      _vI65911_result = _ds2_65692.mem_0; //assign simple
      _vI65912_text = _ds2_65692.mem_1; //assign simple
      {
      checkwarn(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .stack_call(_tt107175(_vI65911_result, _vI65912_text));
      }
      return _vI65911_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1926,3,1926,4); // HACK! 
}

//------------------------------
//C FUNC <7368>: init_lib
_a7338t_107409 init_lib(FLX_APAR_DECL _a13708t_107090 _vI7372_modulename){
  _a7338t_107409 _genout_urv94347;
  _a6203t_107291 init;
  _a7338t_107409 _vI7370_linstance;
      _genout_urv94347  = prepare_lib(FLX_FPAR_PASS _vI7372_modulename); //init
      _vI7370_linstance = _genout_urv94347; //assign simple
      init = _vI7370_linstance->start_proc; //assign simple
      ::flx::rtl::executil::run(init);
      return _vI7370_linstance;
}
//------------------------------
//FUNCTION <91240>: process_config_text_uncurry::_lam_2914: Apply method
 ::flx::rtl::cl_t _lam_2914::apply(){
      return ((static_cast<int>((PTF gcp->collector->get_used((*((_poly_79881t_107147*)FLX_VNP(ptrprocess_config_text_uncurry->_vI89130_process_config_text__apos_2_mv_2896))))))/*int.flx: ctor*/) == 3);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",537,9,537,34); // HACK! 
}

//------------------------------
//FUNCTION <95253>: cal_depvars::_lam_65216: Apply method
 ::flx::rtl::cl_t _lam_65216::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1740,7,1740,14); // HACK! 
}

//------------------------------
//FUNCTION <105115>: flx_processing::aux_uncurry: Apply method
_a5038t_107106 _fI105115_aux_uncurry::apply(_tt107146 const &_arg ){
  _vI105116_acc_uncurry = _arg.mem_0;
  _vI105117_x = _arg.mem_1;
    start_94672_L105123:;
      _vI105120_aux__apos_2_mv_1276  = _vI105117_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105120_aux__apos_2_mv_1276)==0) ) goto _ml1278_L105119;
      return _vI105116_acc_uncurry;
    _ml1278_L105119:;
/*match case 2:|Snoc (t_param_std_1193, any)*/
      if(!andthen(FLX_VNI(_vI105120_aux__apos_2_mv_1276)==1, (FLX_NEWP(_fI105122__lam_1280)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml1279_L105118;
      _vI105121_t_param_std_1193 = (*((_tt107095*)FLX_VNP(_vI105120_aux__apos_2_mv_1276))).mem_0; //assign simple
/*parallel assignment*/
      _vI105117_x  = _vI105121_t_param_std_1193; //init
      _vI105116_acc_uncurry  = _vI105116_acc_uncurry + 1 ; //init
      goto start_94672_L105123;
    _ml1279_L105118:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",202,9,202,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",204,7,204,8); // HACK! 
}

//------------------------------
//FUNCTION <98240>: run_felix_compiler::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI98240__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <66088>: toolchain_gcc_osx::dynamic_executable_linker: Apply method
int _fI66088_dynamic_executable_linker::apply(_art107181 const &_arg ){
  _vI66091_spec = _arg;
      _vI66090_result = generic_link_exe_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107229(_art107228((void* /*VR_nullptr*/ )0, ptrtoolchain_gcc_osx->_vI66013_linker, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_gcc_osx->_vI66096_config.library_search_dirs, ptrtoolchain_gcc_osx->_vI66096_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66091_spec.srcs, _vI66091_spec.dst)) /* apply_stack */; //assign simple
      return _vI66090_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1152,3,1152,4); // HACK! 
}

//------------------------------
//FUNCTION <92558>: toolchain_msvc_win32::dynamic_executable_linker::_lam_65689: Apply method
 ::flx::rtl::cl_t _lam_65689::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1915,5,1915,9); // HACK! 
}

//------------------------------
//FUNCTION <96317>: flx_pkgconfig::lexstr::aux_uncurry: Apply method
void* _fI96317_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96318_x_uncurry = _arg.data[0];
  _vI96319_y = _arg.data[1];
    start_91065_L96326:;
      _vI96322_aux__apos_2_mv_1328  = _vI96318_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96322_aux__apos_2_mv_1328)==0) ) goto _ml1330_L96321;
      return _vI96319_y;
    _ml1330_L96321:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI96322_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI96325__lam_1332)(FLX_FPAR_PASS this, ptrlexstr, ptrflx_pkgconfig))) ) goto _ml1331_L96320;
      _vI96323_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI96322_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI96324_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI96322_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI96319_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96319_y, _vI96323_h_param_std_1210))); //init
      _vI96318_x_uncurry  = _vI96324_t_param_std_1209; //init
      goto start_91065_L96326;
    _ml1331_L96320:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <105201>: flx_processing::check_cxx_uptodate: Apply method
 ::flx::rtl::cl_t check_cxx_uptodate::apply(){
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_98027_L105586;
      {
      _a13708t_107090 _tmp108704 = (::std::string("[flx] ") + ::std::string("Check Felix->C++ uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108704)));
      }
    _end_98027_L105586:;
      if(!((ptrflx_processing->_vI105441_control.RECOMPILE == 1)) ) goto _ifdoend_bootflx_65283_L105202;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_98031_L105589;
      {
      _a13708t_107090 _tmp108705 = (::std::string("[flx] ") + ::std::string("Felix->C++ dependency checking skipped due to switch RECOMPILE=1: forced not uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108705)));
      }
    _end_98031_L105589:;
      return 0;
    _ifdoend_bootflx_65283_L105202:;
      if(!((ptrflx_processing->_vI105441_control.CHECK_DEPENDENCIES == 1)) ) goto _ifdoend_bootflx_65285_L105203;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_98035_L105592;
      {
      _a13708t_107090 _tmp108706 = (::std::string("[flx] ") + ::std::string("Checking Felix->C++ dependencies since CHECK_DEPENDENCIES=1 to see if the cxx is uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108706)));
      }
    _end_98035_L105592:;
      return cal_cxx_uptodate(FLX_FPAR_PASS ptrflx_processing)
      .apply(_tt107307((FLX_NEWP(_pI105442_debugln)(FLX_FPAR_PASS ptrflx_processing)), (*ptrflx_processing->_vI68366_config ).FLX_OUTPUT_DIR, ptrflx_processing->_vI105038_dvars.filebase)) /* apply_stack */;
    _ifdoend_bootflx_65285_L105203:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_98039_L105595;
      {
      _a13708t_107090 _tmp108707 = (::std::string("[flx] ") + ::std::string("Felix->C++ dependency checking skipped due to switch CHECK_DEPENDENCIES=0: forced uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108707)));
      }
    _end_98039_L105595:;
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2168,3,2168,4); // HACK! 
}

//------------------------------
//FUNCTION <65966>: toolchain_gcc_linux::dependency_parser: Apply method
void* _fI65966_dependency_parser::apply(_a13708t_107090 const &_arg ){
  _vI65968_data = _arg;
      return generic_dependency_parser(FLX_FPAR_PASS_ONLY)
      .apply(_vI65968_data) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",783,3,783,4); // HACK! 
}

//------------------------------
//FUNCTION <89231>: toolchain_clang_apple_iOS_maker_uncurry::cxx_dependency_generator: Apply method
_tt107175 _fI89231_cxx_dependency_generator::apply(_art107174 const &_arg ){
  _vI89235_spec = _arg;
      _ds2_65605 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89202_cxx_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.ccflags, ::std::string("-MM")))), ptrtoolchain_clang_apple_iOS_maker_uncurry->sdk))), ::std::string("-isysroot")))), ::std::string("-std=c++11")))), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.header_search_dirs, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.macros, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89235_spec.src)) /* apply_stack */; //assign simple
      _vI89233_result = _ds2_65605.mem_0; //assign simple
      _vI89234_data = _ds2_65605.mem_1; //assign simple
      return _tt107175(_vI89233_result, _vI89234_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2035,3,2035,4); // HACK! 
}

//------------------------------
//FUNCTION <65791>: toolchain_msvc_win32::c_dependency_generator: Apply method
_tt107175 c_dependency_generator::apply(_art107174 const &_arg ){
  spec = _arg;
      _vI65793_cmd = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_msvc_win32->macros, ::std::string("/Tc") + spec.src ))), ::std::string("/c")))), ::std::string("/showIncludes")))), ::std::string("/Zs")))), ::std::string("/MDd")))), ::std::string("/nologo")))), ::std::string("cl.exe")))), ptrtoolchain_msvc_win32->include_switches)) /* apply_stack */; //assign simple
      _genout_urv92228  = xpopen(FLX_FPAR_PASS ptrtoolchain_msvc_win32)
      .apply(_vI65793_cmd) /* apply_stack */; //init
      _ds2_65667 = _genout_urv92228; //assign simple
      _vI65795_result = _ds2_65667.mem_0; //assign simple
      _vI65796_text = _ds2_65667.mem_1; //assign simple
      return _tt107175(_vI65795_result, _vI65796_text);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1807,3,1807,4); // HACK! 
}

//------------------------------
//FUNCTION <105380>: flx_processing::run_program_dynamic: Apply method
int run_program_dynamic::apply(_pt107161* const &_arg ){
  _vI105385_ehandler = _arg;
      _vI105381_result = 0; //assign simple
      if(!((ptrflx_processing->_vI105441_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65387_L105390;
      xargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrflx_processing->_vI105038_dvars.DEBUGSWITCH, ptrflx_processing->_vI105441_control.DRIVER_EXE))), ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME)) /* apply_stack */, ptrflx_processing->_vI105038_dvars.args)) /* apply_stack */; //assign simple
      _vI106008_r = _fI106009_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115(ptrflx_processing->_vI105441_control.FLXRUN, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108708 = (void**)&_vI106008_r;
      _rev(((_tmp108708)),(_a13708t_107090*)0);
      }
      _vI106019_r = _fI106020_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115(xargs, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108709 = (void**)&_vI106019_r;
      _rev(((_tmp108709)),(_a13708t_107090*)0);
      }
      _vI105383_CMD = (cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI106008_r)) /* apply_stack */ + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI106019_r)) /* apply_stack */ ; //assign simple
      if(!(!((ptrflx_processing->_vI105441_control.STDOUT == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65390_L105387;
      _vI105383_CMD = (_vI105383_CMD + ::std::string(" > ") ) + ((::std::string("\"") + ptrflx_processing->_vI105441_control.STDOUT ) + ::std::string("\"") ) ; //assign simple
    _ifdoelse_bootflx_65390_L105387:;
      if(!(!((ptrflx_processing->_vI105441_control.STDIN == ::std::string(""))) ) ) goto _ifdoelse_bootflx_65392_L105389;
      _vI105383_CMD = (_vI105383_CMD + ::std::string(" < ") ) + ((::std::string("\"") + ptrflx_processing->_vI105441_control.STDIN ) + ::std::string("\"") ) ; //assign simple
    _ifdoelse_bootflx_65392_L105389:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99852_L106032;
      {
      _a13708t_107090 _tmp108710 = (::std::string("[flx] ") + (::std::string("Run command=") + _vI105383_CMD ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108710)));
      }
    _end_99852_L106032:;
      {
      __timeb64* _tmp108711 = (__timeb64*)&_vI106034_tv;
      _ftime64_s(((_tmp108711)));
      }
      _genout_urv99853  = (static_cast<double>((_vI106034_tv.time))) + ((static_cast<double>((_vI106034_tv.millitm))) / 1.0e3 ) ; //init
      _vI105384_t0 = _genout_urv99853; //assign simple
      _genout_urv99857  = system(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105383_CMD) /* apply_stack */; //init
      _vI105381_result = _genout_urv99857; //assign simple
      if(!((ptrflx_processing->_vI105441_control.TIME == 1)) ) goto _ifdoelse_bootflx_65388_L105391;
      {
      __timeb64* _tmp108712 = (__timeb64*)&_vI106042_tv;
      _ftime64_s(((_tmp108712)));
      }
      _vI106041__genout_urv95543  = (static_cast<double>((_vI106042_tv.time))) + ((static_cast<double>((_vI106042_tv.millitm))) / 1.0e3 ) ; //init
      _vI106036_elapsed = _vI106041__genout_urv95543 - _vI105384_t0 ; //assign simple
      _vI106037_minutes = ::std::floor((_vI106036_elapsed / 60.0 )); //assign simple
      _vI106038_seconds = _vI106036_elapsed - (_vI106037_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108713 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106037_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106038_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Dynamic Run : ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108713)));
      }
      fflush(stdout);
      goto _ifdoelse_bootflx_65388_L105391;
      goto _ifdoelse_bootflx_65388_L105391;
    _ifdoend_bootflx_65387_L105390:;
      {
      _a13708t_107090 _tmp108714 = (::std::string("Cannot run C++ dynamic library ") + ptrflx_processing->_vI105441_control.LINKER_OUTPUT_FILENAME ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108714)));
      }
      fflush(stdout);
    _ifdoelse_bootflx_65388_L105391:;
      return _vI105381_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2834,3,2834,4); // HACK! 
}

//------------------------------
//FUNCTION <102543>: join_uncurry::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI102543__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <92883>: generic_cxx_gen_deps_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI92883__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <97192>: flx_pkgconfig::parse_args::aux::aux_uncurry: Apply method
void* _fI97192_aux_uncurry::apply(_at107115 const &_arg ){
  _vI97193_x_uncurry = _arg.data[0];
  _vI97194_y = _arg.data[1];
    start_91065_L97201:;
      _vI97197_aux__apos_2_mv_1328  = _vI97193_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI97197_aux__apos_2_mv_1328)==0) ) goto _ml1330_L97196;
      return _vI97194_y;
    _ml1330_L97196:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI97197_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI97200__lam_1332)(FLX_FPAR_PASS this, ptr_fI97184_aux, ptrparse_args, ptrflx_pkgconfig))) ) goto _ml1331_L97195;
      _vI97198_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI97197_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI97199_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI97197_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI97194_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI97194_y, _vI97198_h_param_std_1210))); //init
      _vI97193_x_uncurry  = _vI97199_t_param_std_1209; //init
      goto start_91065_L97201;
    _ml1331_L97195:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------

//PROCEDURE <67411:> handle_filename: Call method
void handle_filename::stack_call(_tt107269 const &_arg){
  ::flx::rtl::con_t *cc = call(0,_arg);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * handle_filename::call(::flx::rtl::con_t *_ptr_caller, _tt107269 const &_arg){
  _caller = _ptr_caller;
  ploopctl = _arg.mem_0;
  _vI67425_config = _arg.mem_1;
  _vI67426_control = _arg.mem_2;
  _vI67427_arg = _arg.mem_3;
  INIT_PC
  return this;
}

//PROCEDURE <67411:> handle_filename: Resume method
::flx::rtl::con_t *handle_filename::resume(){
      *(&ploopctl->progname)  = _vI67427_arg; //assign simple
      _ds1_65059 = split_extension(_vI67427_arg); //assign simple
      (*ploopctl).path = (_ds1_65059.data)[0]; //assign simple
      (*ploopctl).ext = (_ds1_65059.data)[1]; //assign simple
      _ds1_65060 = split1(FLX_FPAR_PASS_ONLY)
      .apply((*ploopctl).path) /* apply_stack */; //assign simple
      (*ploopctl).dir = (_ds1_65060.data)[0]; //assign simple
      (*ploopctl).base = (_ds1_65060.data)[1]; //assign simple
      check_ext_mv_65075  = find_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107276((FLX_NEWP(_lam_1537)(FLX_FPAR_PASS this)), exts(FLX_FPAR_PASS_ONLY)
      .apply() /* apply_stack */)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|Some tag_param_bootflx_64990*/
      if(!andthen(FLX_VNI(check_ext_mv_65075)==1, (FLX_NEWP(_lam_65078)(FLX_FPAR_PASS this))) ) goto _ml65077_L102696;
      tag_param_bootflx_64990 = *((_a13708t_107090*)FLX_VNP(check_ext_mv_65075)); //assign simple
      handle_filename_mv_65061  = tag_param_bootflx_64990; //init
      goto _end_inline_check_ext_102702_L102702;
    _ml65077_L102696:;
/*match case 2:|None*/
      if(!(FLX_VNI(check_ext_mv_65075)==0) ) goto _ml65079_L102697;
      handle_filename_mv_65061  = ::std::string("unknown"); //init
      goto _end_inline_check_ext_102702_L102702;
    _ml65079_L102697:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1389,37,1389,23);
;
    _end_inline_check_ext_102702_L102702:;
/*begin match*/
/*match case 1:"compile"*/
      if(!((::std::string("compile") == handle_filename_mv_65061)) ) goto _ml65063_L67428;
      *(&_vI67426_control->cpps)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67426_control).cpps, _vI67427_arg)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ml65063_L67428:;
/*match case 2:"link"*/
      if(!((::std::string("link") == handle_filename_mv_65061)) ) goto _ml65064_L67429;
      *(&_vI67426_control->cppos)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67426_control).cppos, _vI67427_arg)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ml65064_L67429:;
/*match case 3:"felix"*/
      if(!((::std::string("felix") == handle_filename_mv_65061)) ) goto _ml65065_L67430;
      *(&ploopctl->grab)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ml65065_L67430:;
/*match case 4:"none"*/
      if(!((::std::string("none") == handle_filename_mv_65061)) ) goto _ml65066_L67431;
      *(&ploopctl->grab)  = 0; //assign simple
      FLX_RETURN // procedure return
    _ml65066_L67431:;
/*match case 5:"unknown"*/
      if(!((::std::string("unknown") == handle_filename_mv_65061)) ) goto _ml65067_L67432;
      {
      _a13708t_107090 _tmp108717 = (::std::string("Unknown file extension in ") + _vI67427_arg ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108717)));
      }
      fflush(stderr);
      ::std::exit(1);
      FLX_RETURN // procedure return
    _ml65067_L67432:;
/*match case 6:"ocaml"*/
      if(!((::std::string("ocaml") == handle_filename_mv_65061)) ) goto _ml65068_L67433;
      *(&_vI67426_control->ocamls)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095((*_vI67426_control).ocamls, _vI67427_arg)) /* apply_stack */; //assign simple
      FLX_RETURN // procedure return
    _ml65068_L67433:;
/*match case 7:any*/
      {if(FLX_UNLIKELY(!(0)))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1361,10,1361,22);}
      FLX_RETURN // procedure return
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------

//PROCEDURE <67464:> xparse_cmd_line: Call method
::flx::rtl::con_t * xparse_cmd_line::call(::flx::rtl::con_t *_ptr_caller, _tt107150 const &_arg){
  _caller = _ptr_caller;
  _vI67479_config = _arg.mem_0;
  _vI67480_control = _arg.mem_1;
  _vI67481_ploopctl = _arg.mem_2;
  vargs = _arg.mem_3;
  INIT_PC
  return this;
}

//PROCEDURE <67464:> xparse_cmd_line: Resume method
::flx::rtl::con_t *xparse_cmd_line::resume(){
  FLX_START_SWITCH
      SET_LINKER_OUTPUT = 0; //assign simple
      SET_LINKER_OUTPUT_WITHOUT_EXTENSION = 0; //assign simple
      SET_LINKER_OUTPUT_DIRECTORY = 0; //assign simple
    continue_grabbing_args_L67483:;
      if(FLX_UNLIKELY(!(((*_vI67481_ploopctl).grab == 1) && ((*_vI67481_ploopctl).argno < (static_cast<int>((PTF gcp->collector->get_used(vargs)))/*int.flx: ctor*/)) ) )) goto break_grabbing_args_L67500;
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(((*_vI67481_ploopctl).argno))/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < (PTF gcp->collector->get_used(vargs))))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      _vI67478_arg = vargs[(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(((*_vI67481_ploopctl).argno))/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)]; //assign simple
      if(!(*_vI67480_control).DEBUG_FLX ) goto _end_102255_L102255;
      {
      _a13708t_107090 _tmp108718 = (::std::string("[flx] ") + ((((::std::string("ARGNO=") + ::flx::rtl::strutil::str<int>((*_vI67481_ploopctl).argno) ) + ::std::string(", arg='") ) + _vI67478_arg ) + ::std::string("'") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108718)));
      }
    _end_102255_L102255:;
      if(!SET_LINKER_OUTPUT ) goto _ifdoend_bootflx_64993_L67484;
      *(&_vI67480_control->LINKER_OUTPUT_FILENAME)  = _vI67478_arg; //assign simple
      if(!(*_vI67480_control).DEBUG_FLX ) goto _end_102259_L102259;
      {
      _a13708t_107090 _tmp108719 = (::std::string("[flx] ") + (::std::string("Set linker output file=") + (*_vI67480_control).LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108719)));
      }
    _end_102259_L102259:;
      SET_LINKER_OUTPUT = 0; //assign simple
      *(&_vI67480_control->OUTPUT_FILENAME_SPECIFIED)  = 1; //assign simple
      goto _ifdoelse_bootflx_64994_L67499;
    _ifdoend_bootflx_64993_L67484:;
      if(!SET_LINKER_OUTPUT_WITHOUT_EXTENSION ) goto _ifdoend_bootflx_64995_L67485;
      *(&_vI67480_control->LINKER_OUTPUT_FILENAME)  = _vI67478_arg; //assign simple
      if(!(*_vI67480_control).DEBUG_FLX ) goto _end_102263_L102263;
      {
      _a13708t_107090 _tmp108720 = (::std::string("[flx] ") + (::std::string("Set linker output file=") + (*_vI67480_control).LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108720)));
      }
    _end_102263_L102263:;
      SET_LINKER_OUTPUT_WITHOUT_EXTENSION = 0; //assign simple
      *(&_vI67480_control->OUTP_hash_48688961)  = 1; //assign simple
      goto _ifdoelse_bootflx_64994_L67499;
    _ifdoend_bootflx_64995_L67485:;
      if(!SET_LINKER_OUTPUT_DIRECTORY ) goto _ifdoend_bootflx_64997_L67486;
      *(&_vI67480_control->LINKER_OUTPUT_FILENAME)  = _vI67478_arg; //assign simple
      if(!(*_vI67480_control).DEBUG_FLX ) goto _end_102267_L102267;
      {
      _a13708t_107090 _tmp108721 = (::std::string("[flx] ") + (::std::string("Set linker output directory =") + (*_vI67480_control).LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108721)));
      }
    _end_102267_L102267:;
      SET_LINKER_OUTPUT_DIRECTORY = 0; //assign simple
      *(&_vI67480_control->OUTPUT_DIRECTORY_SPECIFIED)  = 1; //assign simple
      goto _ifdoelse_bootflx_64994_L67499;
    _ifdoend_bootflx_64997_L67486:;
      if(!((_vI67478_arg == ::std::string("-o"))) ) goto _ifdoend_bootflx_64999_L67487;
      if(!(*_vI67480_control).DEBUG_FLX ) goto _end_102271_L102271;
      {
      _a13708t_107090 _tmp108722 = (::std::string("[flx] ") + ::std::string("Set linker output name (next arg)") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108722)));
      }
    _end_102271_L102271:;
      SET_LINKER_OUTPUT = 1; //assign simple
      goto _ifdoelse_bootflx_64994_L67499;
    _ifdoend_bootflx_64999_L67487:;
      if(!((_vI67478_arg == ::std::string("-ox"))) ) goto _ifdoend_bootflx_65001_L67488;
      if(!(*_vI67480_control).DEBUG_FLX ) goto _end_102275_L102275;
      {
      _a13708t_107090 _tmp108723 = (::std::string("[flx] ") + ::std::string("Set linker output name (without extension) (next arg) ") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108723)));
      }
    _end_102275_L102275:;
      SET_LINKER_OUTPUT_WITHOUT_EXTENSION = 1; //assign simple
      goto _ifdoelse_bootflx_64994_L67499;
    _ifdoend_bootflx_65001_L67488:;
      if(!((_vI67478_arg == ::std::string("-od"))) ) goto _ifdoend_bootflx_65003_L67489;
      if(!(*_vI67480_control).DEBUG_FLX ) goto _end_102279_L102279;
      {
      _a13708t_107090 _tmp108724 = (::std::string("[flx] ") + ::std::string("Set linker output directory (next arg) ") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108724)));
      }
    _end_102279_L102279:;
      SET_LINKER_OUTPUT_DIRECTORY = 1; //assign simple
      goto _ifdoelse_bootflx_64994_L67499;
    _ifdoend_bootflx_65003_L67489:;
      if(!((_vI67478_arg == ::std::string("--"))) ) goto _ifdoend_bootflx_65005_L67490;
      *(&_vI67481_ploopctl->grab)  = 0; //assign simple
      goto _ifdoelse_bootflx_64994_L67499;
    _ifdoend_bootflx_65005_L67490:;
      if((::flx::rtl::strutil::substr(_vI67478_arg,0,::std::string("-").size()) == ::std::string("-"))) goto _ifdoend_bootflx_65007_L67491;
      {
      handle_filename(FLX_FPAR_PASS_ONLY)
      .stack_call(_tt107269(_vI67481_ploopctl, _vI67479_config, _vI67480_control, _vI67478_arg));
      }
      goto _ifdoelse_bootflx_64994_L67499;
    _ifdoend_bootflx_65007_L67491:;
      FLX_SET_PC(108726)
      return (FLX_NEWP(handle_switch)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt107270(_vI67479_config, _vI67480_control, _vI67478_arg));
    FLX_CASE_LABEL(108726)
    _ifdoelse_bootflx_64994_L67499:;
      *(&_vI67481_ploopctl->argno)  = (*_vI67481_ploopctl).argno + 1 ; //assign simple
      goto continue_grabbing_args_L67483;
    break_grabbing_args_L67500:;
      if(!((*_vI67480_control).CMDLINE_INPUT || (*_vI67480_control).REPL_MODE ) ) goto _ifdoelse_bootflx_65010_L67502;
      {
      handle_filename(FLX_FPAR_PASS_ONLY)
      .stack_call(_tt107269(_vI67481_ploopctl, _vI67479_config, _vI67480_control, ::std::string("cmd.flx")));
      }
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_65010_L67502:;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------
//FUNCTION <105401>: flx_processing::run_program_if_required: Apply method
int run_program_if_required::apply(_pt107161* const &_arg ){
  _vI105403_ehandler = _arg;
      _vI105402_result = 0; //assign simple
      if(!((ptrflx_processing->_vI105441_control.STATIC == 0)) ) goto _ifdoend_bootflx_65397_L105404;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99941_L106071;
      {
      _a13708t_107090 _tmp108728 = (::std::string("[flx] ") + ::std::string("Running dynamic program") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108728)));
      }
    _end_99941_L106071:;
      {
      calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI105403_ehandler);
      }
      _genout_urv99942  = run_program_dynamic(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105403_ehandler) /* apply_stack */; //init
      _vI105402_result = _genout_urv99942; //assign simple
      goto _ifdoelse_bootflx_65398_L105405;
    _ifdoend_bootflx_65397_L105404:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99949_L106075;
      {
      _a13708t_107090 _tmp108730 = (::std::string("[flx] ") + ::std::string("Running static program") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108730)));
      }
    _end_99949_L106075:;
      _genout_urv99950  = run_program_static(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105403_ehandler) /* apply_stack */; //init
      _vI105402_result = _genout_urv99950; //assign simple
    _ifdoelse_bootflx_65398_L105405:;
      return _vI105402_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2872,3,2872,4); // HACK! 
}

//------------------------------
//FUNCTION <95178>: str::_lam_1519: Apply method
_ft107152* _lam_1519::apply(_a13708t_107090 const &_arg ){
  _vI95179_a = _arg;
      return (FLX_NEWP(_fI95180__lam_1519__apos_2)(FLX_FPAR_PASS this, ptrstr));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",706,13,706,62); // HACK! 
}

//------------------------------
//FUNCTION <93076>: generic_cxx_compile_for_static_uncurry::aux_uncurry: Apply method
void* _fI93076_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93077_inp_uncurry = _arg.data[0];
  _vI93078_out = _arg.data[1];
    start_90421_L93085:;
      _vI93081_aux__apos_2_mv_1322  = _vI93077_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93081_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93080;
      return _vI93078_out;
    _ml1324_L93080:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93081_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93084__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_cxx_compile_for_static_uncurry))) ) goto _ml1325_L93079;
      _vI93082_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93081_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93083_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93081_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93078_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93078_out, mkmac(_vI93082_h_param_std_1208)))); //init
      _vI93077_inp_uncurry  = _vI93083_t_param_std_1207; //init
      goto start_90421_L93085;
    _ml1325_L93079:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <92741>: toolchain_msvc_win32::fixup: Apply method
_a13708t_107090 fixup::apply(_a13708t_107090 const &_arg ){
  _vI92742_s = _arg;
      fixup_mv_65651  = (::flx::rtl::strutil::substr(_vI92742_s,0,::std::string("-L").size()) == ::std::string("-L")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(fixup_mv_65651%2==1) ) goto _ml65653_L92744;
      return ::std::string("/LIBPATH:") + ::flx::rtl::strutil::substr(_vI92742_s,2,_vI92742_s.size()) ;
    _ml65653_L92744:;
/*match case 2:any*/
      return _vI92742_s;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1756,5,1756,69); // HACK! 
}

//------------------------------
//FUNCTION <106998>: flx_processing::run_program_dynamic::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI106998__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//C FUNC <81486>: repr
_a13708t_107090 repr(char _vI81487_c){
  _a13708t_107090 repr_mv_202;
  _a13708t_107090 _vI81504_s;
      _vI81504_s = ::flx::rtl::strutil::str<char>(_vI81487_c); //assign simple
      repr_mv_202  = _vI81504_s; //init
/*begin match*/
/*match case 1:"'"*/
      if(!((::std::string("'") == repr_mv_202)) ) goto _ml204_L95102;
      return ::std::string("\\'");
    _ml204_L95102:;
/*match case 2:"	"*/
      if(!((::std::string("\x09") == repr_mv_202)) ) goto _ml205_L95101;
      return ::std::string("\\t");
    _ml205_L95101:;
/*match case 3:"
"*/
      if(!((::std::string("\n") == repr_mv_202)) ) goto _ml206_L95100;
      return ::std::string("\\n");
    _ml206_L95100:;
/*match case 4:""*/
      if(!((::std::string("\x0D") == repr_mv_202)) ) goto _ml207_L95099;
      return ::std::string("\\r");
    _ml207_L95099:;
/*match case 5:""*/
      if(!((::std::string("\x0C") == repr_mv_202)) ) goto _ml208_L95098;
      return ::std::string("\\f");
    _ml208_L95098:;
/*match case 6:""*/
      if(!((::std::string("\x0B") == repr_mv_202)) ) goto _ml209_L95097;
      return ::std::string("\\v");
    _ml209_L95097:;
/*match case 7:any*/
      return _vI81504_s;
}
//------------------------------
//FUNCTION <89419>: gramtime_uncurry::_lam_64494: Apply method
_a13708t_107090 _lam_64494::apply(_a13708t_107090 const &_arg ){
  _vI89420_s = _arg;
      return _fI104403_aux_uncurry(FLX_FPAR_PASS this, ptrgramtime_uncurry)
      .apply(_tt107116(::std::string(""), split(FLX_FPAR_PASS_ONLY)
      .apply(_at107092(_vI89420_s, ::std::string("/"))) /* apply_stack */)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",102,20,102,66); // HACK! 
}

//------------------------------
//FUNCTION <65934>: toolchain_gcc_linux::dependency_extension: Apply method
_a13708t_107090 _fI65934_dependency_extension::apply(){
      return ::std::string(".d");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",736,3,736,45); // HACK! 
}

//------------------------------
//FUNCTION <5658>: isidstart: Apply method
 ::flx::rtl::cl_t isidstart::apply(char const &_arg ){
  x = _arg;
      find_mv_2046  = (PTF letters).find(x); //init
/*begin match*/
/*match case 1:(i_param_std_1833 when (== (i_param_std_1833, stl_npos)))*/
      if(!((find_mv_2046 == ::std::string::npos)) ) goto _ml2048_L95996;
      isidstart_mv_165  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_find_95982_L95997;
    _ml2048_L95996:;
/*match case 2:i_param_std_1834*/
      i_param_std_1834 = find_mv_2046; //assign simple
      isidstart_mv_165  = FLX_VNR(1, new(*PTF gcp, _a5038t_107106_ptr_map, true) _a5038t_107106 (i_param_std_1834)); //init
    _end_inline_find_95982_L95997:;
/*begin match*/
/*match case 1:|Some any*/
      if(!andthen(FLX_VNI(isidstart_mv_165)==1, (FLX_NEWP(_lam_168)(FLX_FPAR_PASS this))) ) goto _ml167_L95992;
      return 1;
    _ml167_L95992:;
/*match case 2:|None*/
      if(!(FLX_VNI(isidstart_mv_165)==0) ) goto _ml169_L95993;
      return 0;
    _ml169_L95993:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/char.fdoc",66,28,66,87);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/char.fdoc",66,3,66,97); // HACK! 
}

//------------------------------
//FUNCTION <65722>: toolchain_msvc_win32::pathname_separator: Apply method
_a13708t_107090 pathname_separator::apply(){
      return ::std::string("\\");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1741,3,1741,43); // HACK! 
}

//------------------------------
//FUNCTION <105159>: flx_processing::find_cxx_pkgs: Apply method
void* find_cxx_pkgs::apply(_a13708t_107090 const &_arg ){
  _vI105167_src = _arg;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_97684_L105514;
      {
      _a13708t_107090 _tmp108733 = (::std::string("[flx] ") + ((::std::string("[flx:find_cxx_pkgs] Scanning ") + _vI105167_src ) + ::std::string(" for package requirements") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108733)));
      }
    _end_97684_L105514:;
      _vI105160_out = (void* /*VR_nullptr*/ )0; //assign simple
      _genout_urv97685  = ::std::shared_ptr< ::re2::RE2>(new RE2((::std::string(".*@requires package ([A-Za-z][A-Za-z0-9_-]*).*")))); //init
      pat = _genout_urv97685; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_560_L105517;
      {
      _a13708t_107090 _tmp108734 = (::std::string("[Open_input_text] ") + _vI105167_src ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108734)));
      }
      fflush(stderr);
    _ifdoelse_std_560_L105517:;
      _genout_urv97703  = fopen(_vI105167_src.c_str(),"r"); //init
      _genout_urv97694  = _genout_urv97703; //init
      _genout_urv97696  = _genout_urv97694; //init
      _vI105162_f = _genout_urv97696; //assign simple
      _genout_urv97704  = _vI105162_f!=(FILE*)0; //init
      if(!_genout_urv97704 ) goto _ifdoend_bootflx_65268_L105175;
      _genout_urv97727  = (FLX_NEWP(_fI105523_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _generator_flx_2240 = _genout_urv97727; //assign simple
    continue__ll_flx_2228_L105168:;
      find_cxx_pkgs_mv_65437  = (_generator_flx_2240)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some line_param_bootflx_65271*/
      if(!andthen(FLX_VNI(find_cxx_pkgs_mv_65437)==1, (FLX_NEWP(_lam_65445)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65439_L105172;
      line_param_bootflx_65271 = *((_a13708t_107090*)FLX_VNP(find_cxx_pkgs_mv_65437)); //assign simple
      _genout_urv97741  = Match(FLX_FPAR_PASS pat, line_param_bootflx_65271); //init
      _vI105165_result = _genout_urv97741; //assign simple
      find_cxx_pkgs_mv_65440  = _vI105165_result; //init
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(find_cxx_pkgs_mv_65440)==0) ) goto _ml65442_L105169;
      goto continue__ll_flx_2228_L105168;
    _ml65442_L105169:;
/*match case 2:|Some v_param_bootflx_65273_param_bootflx_65275*/
      if(!andthen(FLX_VNI(find_cxx_pkgs_mv_65440)==1, (FLX_NEWP(_lam_65444)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65443_L105170;
      _vI105166_v_pa_hash_741625322 = *((_poly_79881t_107147*)FLX_VNP(find_cxx_pkgs_mv_65440)); //assign simple
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(1)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < (PTF gcp->collector->get_used(_vI105166_v_pa_hash_741625322))))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      _vI105160_out = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI105160_out, _vI105166_v_pa_hash_741625322[(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(1)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)]))); //assign simple
      goto continue__ll_flx_2228_L105168;
    _ml65443_L105170:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2092,9,2092,13);
;
      goto continue__ll_flx_2228_L105168;
    _ml65439_L105172:;
/*match case 2:|None*/
      if(!(FLX_VNI(find_cxx_pkgs_mv_65437)==0) ) goto _ml65446_L105173;
      goto _em65437_L105174;
    _ml65446_L105173:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2093,7,2093,11);
;
    _em65437_L105174:;
      (void)fclose(_vI105162_f);
      goto _ifdoelse_bootflx_65269_L105176;
    _ifdoend_bootflx_65268_L105175:;
      {
      _a13708t_107090 _tmp108737 = (::std::string("Can't find C++ source file ") + _vI105167_src ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108737)));
      }
      fflush(stderr);
      ::std::exit(1);
    _ifdoelse_bootflx_65269_L105176:;
      _vI105160_out = _fI105532_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115(_vI105160_out, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI105160_out, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65277_L105178;
      {
      _a13708t_107090 _tmp108738 = (((::std::string("[flx] C++ file ") + _vI105167_src ) + ::std::string(" requires packages ") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI105160_out) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108738)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65277_L105178:;
      return _vI105160_out;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2103,3,2103,4); // HACK! 
}

//------------------------------
//FUNCTION <90543>: runflx::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI90543__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------

//PROCEDURE <88872:> regopen_uncurry: Call method
void regopen_uncurry::stack_call(_tt107417 const &_arg){
  ::flx::rtl::con_t *cc = call(0,_arg);
  while(cc) cc = cc->resume();

}
::flx::rtl::con_t * regopen_uncurry::call(::flx::rtl::con_t *_ptr_caller, _tt107417 const &_arg){
  _caller = _ptr_caller;
  registry_uncurry = _arg.mem_0;
  _vI89287_lib = _arg.mem_1;
  modulename = _arg.mem_2;
  INIT_PC
  return this;
}

//PROCEDURE <88872:> regopen_uncurry: Resume method
::flx::rtl::con_t *regopen_uncurry::resume(){
      _vI94284_key  = modulename; //init
      {
      char* _tmp108739 = ((char*)((_a13708t_107090*)&_vI94284_key)->c_str());
      JError_t* _tmp108740 = (JError_t*)&_vI94285_err;
      _a13298t_107433** _tmp108741 = (_a13298t_107433**)((_a13367t_107412***)&_vI94286_slot);
      *((_tmp108741))=(Word_t*)JudySLGet(*registry_uncurry,(unsigned char*)((_tmp108739)),((_tmp108740)));
      }
      _vI94288_get__apos_2_mv_1761  = (0==_vI94286_slot); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI94288_get__apos_2_mv_1761%2==1) ) goto _ml1763_L94287;
      _urv94282  = (void* /*VR_nullptr*/ )0; //init
      goto _end_inline_get_uncurry_94291_L94291;
    _ml1763_L94287:;
/*match case 2:any*/
      _urv94282  = FLX_VNR(1, new(*PTF gcp, _a13367t_107412_ptr_map, true) _a13367t_107412 (*(*_vI94286_slot ) )); //init
    _end_inline_get_uncurry_94291_L94291:;
      mod = _urv94282; //assign simple
      _vI89279_regopen__apos_2_mv_493  = mod; //init
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(_vI89279_regopen__apos_2_mv_493)==0) ) goto _ml495_L89289;
      {
      _a13708t_107090 _tmp108742 = modulename + ::std::string(".dll") ;
      _vI89287_lib->dynamic_link_with_modulename(((_tmp108742)), modulename);
      }
      FLX_RETURN // procedure return
    _ml495_L89289:;
/*match case 2:|Some dict_param_std_464*/
      if(!andthen(FLX_VNI(_vI89279_regopen__apos_2_mv_493)==1, (FLX_NEWP(_lam_497)(FLX_FPAR_PASS this))) ) goto _ml496_L89294;
      dict_param_std_464 = *((_a13367t_107412*)FLX_VNP(_vI89279_regopen__apos_2_mv_493)); //assign simple
      tfc = get_dflt_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107472(dict_param_std_464, modulename + ::std::string("_create_thread_frame") , NULL)) /* apply_stack */; //assign simple
      if(!((tfc == NULL)) ) goto _ifdoelse_std_466_L89291;
      {
      _a7258t_107430 _tmp108743 = ::flx::rtl::flx_link_failure_t(modulename,(::std::string("regopen")),(((::std::string("Cannot find symbol ") + modulename ) + ::std::string("_create_thread_frame in module registry for ") ) + modulename ));
      (throw ((_tmp108743)));
      }
    _ifdoelse_std_466_L89291:;
      start_sym = get_dflt_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107472(dict_param_std_464, modulename + ::std::string("_flx_start") , NULL)) /* apply_stack */; //assign simple
      if(!((start_sym == NULL)) ) goto _ifdoelse_std_468_L89293;
      {
      _a7258t_107430 _tmp108744 = ::flx::rtl::flx_link_failure_t(modulename,(::std::string("regopen")),(((::std::string("Cannot find symbol ") + modulename ) + ::std::string("_flx_start in module registry for ") ) + modulename ));
      (throw ((_tmp108744)));
      }
    _ifdoelse_std_468_L89293:;
      _vI89287_lib->static_link(modulename,(::flx::dynlink::thread_frame_creator_t)tfc, (::flx::dynlink::start_t)start_sym, NULL);
      FLX_RETURN // procedure return
    _ml496_L89294:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",798,6,798,15);
;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------

//PROCEDURE <88913:> iter_uncurry: Call method
::flx::rtl::con_t * iter_uncurry::call(::flx::rtl::con_t *_ptr_caller, _tt107149 const &_arg){
  _caller = _ptr_caller;
  _f_uncurry = _arg.mem_0;
  _vI89515_x = _arg.mem_1;
  INIT_PC
  return this;
}

//PROCEDURE <88913:> iter_uncurry: Resume method
::flx::rtl::con_t *iter_uncurry::resume(){
  FLX_START_SWITCH
      _vI95839_iter__apos_2_mv_1289  = _vI89515_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI95839_iter__apos_2_mv_1289)==0) ) goto _ml1291_L95838;
      FLX_RETURN // procedure return
    _ml1291_L95838:;
/*match case 2:|Snoc (t_param_std_1197, h_param_std_1198)*/
      if(!andthen(FLX_VNI(_vI95839_iter__apos_2_mv_1289)==1, (FLX_NEWP(_lam_1295)(FLX_FPAR_PASS this))) ) goto _ml1293_L95837;
      h_param_std_1198 = (*((_tt107095*)FLX_VNP(_vI95839_iter__apos_2_mv_1289))).mem_1; //assign simple
      t_param_std_1197 = (*((_tt107095*)FLX_VNP(_vI95839_iter__apos_2_mv_1289))).mem_0; //assign simple
      FLX_SET_PC(108746)
      return (_f_uncurry)->clone()
      ->call(this, h_param_std_1198);
    FLX_CASE_LABEL(108746)
      {
      ::flx::rtl::con_t *tmp = _caller;
      _caller = 0;
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(tmp, _tt107149(_f_uncurry, t_param_std_1197));
      }
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ml1293_L95837:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",221,7,221,42);
;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------
//FUNCTION <105811>: flx_processing::cxx_link_shared_library::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI105811__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <105682>: flx_processing::cxx_compile_dynamic::iterator'2: Apply method
void* _fI105682_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L105683:;
      _vI105687_iterator__apos_2_mv_1504  = ptrcxx_compile_dynamic->_vI105681_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI105687_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI105690__lam_1507)(FLX_FPAR_PASS this, ptrcxx_compile_dynamic, ptrflx_processing))) ) goto _ml1506_L105686;
      _vI105688_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI105687_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI105689_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI105687_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrcxx_compile_dynamic->_vI105681_xs = _vI105689_t_param_std_1259; //assign simple
      FLX_SET_PC(108749)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI105688_h_param_std_1260));//yield
    FLX_CASE_LABEL(108749)
      goto continue__ll_lists_5177_L105683;
    _ml1506_L105686:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI105687_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L105685;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L105685:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L105683;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <89212>: toolchain_clang_apple_iOS_maker_uncurry::whatami: Apply method
_a13708t_107090 _fI89212_whatami::apply(){
      return ((::std::string("toolchain_clang_apple_iOS sdk=") + ptrtoolchain_clang_apple_iOS_maker_uncurry->sdk_tag_uncurry ) + ::std::string(", archs=") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(","), ptrtoolchain_clang_apple_iOS_maker_uncurry->archs_uncurry)) /* apply_stack */ ;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1987,3,1987,93); // HACK! 
}

//------------------------------
//FUNCTION <66045>: toolchain_gcc_osx::c_dependency_generator: Apply method
_tt107175 _fI66045_c_dependency_generator::apply(_art107174 const &_arg ){
  _vI66050_spec = _arg;
      _ds2_65608 = generic_cxx_gen_deps_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107220(_art107219(ptrtoolchain_gcc_osx->_vI66011_c_compiler, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_gcc_osx->_vI66096_config.ccflags, ::std::string("-MM")))), ptrtoolchain_gcc_osx->_vI66096_config.header_search_dirs, ptrtoolchain_gcc_osx->_vI66096_config.macros, ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66050_spec.src)) /* apply_stack */; //assign simple
      _vI66048_result = _ds2_65608.mem_0; //assign simple
      _vI66049_data = _ds2_65608.mem_1; //assign simple
      return _tt107175(_vI66048_result, _vI66049_data);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",998,3,998,4); // HACK! 
}

//------------------------------
//FUNCTION <106734>: flx_processing::ocaml_compile::iterator'2: Apply method
void* _fI106734_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L106735:;
      _vI106739_iterator__apos_2_mv_1504  = ptr_fI106237_ocaml_compile->_vI106733_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI106739_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI106742__lam_1507)(FLX_FPAR_PASS this, ptr_fI106237_ocaml_compile, ptrflx_processing))) ) goto _ml1506_L106738;
      _vI106740_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI106739_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI106741_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI106739_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptr_fI106237_ocaml_compile->_vI106733_xs = _vI106741_t_param_std_1259; //assign simple
      FLX_SET_PC(108751)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI106740_h_param_std_1260));//yield
    FLX_CASE_LABEL(108751)
      goto continue__ll_lists_5177_L106735;
    _ml1506_L106738:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI106739_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L106737;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L106737:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L106735;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <89204>: toolchain_clang_apple_iOS_maker_uncurry::_lam_65603: Apply method
_ft107162* _lam_65603::apply(void* const &_arg ){
  _vI89207_acc = _arg;
      return (FLX_NEWP(_fI89205__lam_65603__apos_2)(FLX_FPAR_PASS this, ptrtoolchain_clang_apple_iOS_maker_uncurry));
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1973,34,1973,93); // HACK! 
}

//------------------------------

//PROCEDURE <90047:> respectful_parse_uncurry_uncurry::handlecopying: Call method
void handlecopying::stack_call(char const &_arg){
  ch = _arg;
      if(!((ch == ::flx::rtl::strutil::subscript(::std::string("'"),0))) ) goto _ifdoend_std_1915_L90053;
      handlecopying_mv_2248  = ptrrespectful_parse_uncurry_uncurry->action_uncurry_uncurry.quote; //init
/*begin match*/
/*match case 1:|ignore-quote*/
      if(!(handlecopying_mv_2248%3==0) ) goto _ml2250_L90049;
      {
      _a13708t_107090* _tmp108753 = (_a13708t_107090*)&ptrrespectful_parse_uncurry_uncurry->_vI90045_current;
      *((_tmp108753)) += ch;
      }
      return; // proc return from stackable 
    _ml2250_L90049:;
/*match case 2:|keep-quote*/
      if(!(handlecopying_mv_2248%3==1) ) goto _ml2251_L90050;
      {
      _a13708t_107090* _tmp108754 = (_a13708t_107090*)&ptrrespectful_parse_uncurry_uncurry->_vI90045_current;
      *((_tmp108754)) += ch;
      }
      ptrrespectful_parse_uncurry_uncurry->_vI90044_mode = /*VR_int*/2; //assign simple
      return; // proc return from stackable 
    _ml2251_L90050:;
/*match case 3:|drop-quote*/
      if(!(handlecopying_mv_2248%3==2) ) goto _ml2252_L90051;
      ptrrespectful_parse_uncurry_uncurry->_vI90044_mode = /*VR_int*/2; //assign simple
      return; // proc return from stackable 
    _ml2252_L90051:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",557,11,557,20);
;
      return; // proc return from stackable 
    _ifdoend_std_1915_L90053:;
      if(!((ch == ::flx::rtl::strutil::subscript(::std::string("\""),0))) ) goto _ifdoend_std_1918_L90058;
      handlecopying_mv_2253  = ptrrespectful_parse_uncurry_uncurry->action_uncurry_uncurry.dquote; //init
/*begin match*/
/*match case 1:|ignore-dquote*/
      if(!(handlecopying_mv_2253%3==0) ) goto _ml2255_L90054;
      {
      _a13708t_107090* _tmp108756 = (_a13708t_107090*)&ptrrespectful_parse_uncurry_uncurry->_vI90045_current;
      *((_tmp108756)) += ch;
      }
      return; // proc return from stackable 
    _ml2255_L90054:;
/*match case 2:|keep-dquote*/
      if(!(handlecopying_mv_2253%3==1) ) goto _ml2256_L90055;
      {
      _a13708t_107090* _tmp108757 = (_a13708t_107090*)&ptrrespectful_parse_uncurry_uncurry->_vI90045_current;
      *((_tmp108757)) += ch;
      }
      ptrrespectful_parse_uncurry_uncurry->_vI90044_mode = /*VR_int*/3; //assign simple
      return; // proc return from stackable 
    _ml2256_L90055:;
/*match case 3:|drop-dquote*/
      if(!(handlecopying_mv_2253%3==2) ) goto _ml2257_L90056;
      ptrrespectful_parse_uncurry_uncurry->_vI90044_mode = /*VR_int*/3; //assign simple
      return; // proc return from stackable 
    _ml2257_L90056:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",567,11,567,20);
;
      return; // proc return from stackable 
    _ifdoend_std_1918_L90058:;
      if(!((ch == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoend_std_1921_L90063;
      handlecopying_mv_2258  = ptrrespectful_parse_uncurry_uncurry->action_uncurry_uncurry.escape; //init
/*begin match*/
/*match case 1:|ignore-escape*/
      if(!(handlecopying_mv_2258%3==0) ) goto _ml2260_L90059;
      {
      _a13708t_107090* _tmp108759 = (_a13708t_107090*)&ptrrespectful_parse_uncurry_uncurry->_vI90045_current;
      *((_tmp108759)) += ch;
      }
      return; // proc return from stackable 
    _ml2260_L90059:;
/*match case 2:|keep-escape*/
      if(!(handlecopying_mv_2258%3==1) ) goto _ml2261_L90060;
      {
      _a13708t_107090* _tmp108760 = (_a13708t_107090*)&ptrrespectful_parse_uncurry_uncurry->_vI90045_current;
      *((_tmp108760)) += ch;
      }
      ptrrespectful_parse_uncurry_uncurry->_vI90044_mode = /*VR_int*/4; //assign simple
      return; // proc return from stackable 
    _ml2261_L90060:;
/*match case 3:|drop-escape*/
      if(!(handlecopying_mv_2258%3==2) ) goto _ml2262_L90061;
      ptrrespectful_parse_uncurry_uncurry->_vI90044_mode = /*VR_int*/4; //assign simple
      return; // proc return from stackable 
    _ml2262_L90061:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/strings.fdoc",577,11,577,20);
;
      return; // proc return from stackable 
    _ifdoend_std_1921_L90063:;
      if(!(!((((int)(::flx::rtl::strutil::subscript(::std::string(" "),0)) ) < ((int)ch ))) ) ) goto _ifdoend_std_1924_L90064;
      *((void**)&ptrrespectful_parse_uncurry_uncurry->_vI90046_result)  = _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(*((void**)&ptrrespectful_parse_uncurry_uncurry->_vI90046_result) , ptrrespectful_parse_uncurry_uncurry->_vI90045_current)) /* apply_stack */; //assign simple
      ptrrespectful_parse_uncurry_uncurry->_vI90045_current = ::std::string(""); //assign simple
      ptrrespectful_parse_uncurry_uncurry->_vI90044_mode = /*VR_int*/1; //assign simple
      return; // proc return from stackable 
    _ifdoend_std_1924_L90064:;
      {
      _a13708t_107090* _tmp108762 = (_a13708t_107090*)&ptrrespectful_parse_uncurry_uncurry->_vI90045_current;
      *((_tmp108762)) += ch;
      }
      ptrrespectful_parse_uncurry_uncurry->_vI90044_mode = /*VR_int*/0; //assign simple
      return; // proc return from stackable 

}
//------------------------------
//FUNCTION <92064>: toolchain_msvc_win32::xpopen::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI92064__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <89219>: toolchain_clang_apple_iOS_maker_uncurry::dynamic_object_extension: Apply method
_a13708t_107090 _fI89219_dynamic_object_extension::apply(){
      return ::std::string("_dynamic.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1995,3,1995,57); // HACK! 
}

//------------------------------
//FUNCTION <102091>: flx_processing::aux_uncurry::_lam_1280: Apply method
 ::flx::rtl::cl_t _lam_1280::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",202,11,202,19); // HACK! 
}

//------------------------------
//FUNCTION <102559>: exts::aux_uncurry: Apply method
void* _fI102559_aux_uncurry::apply(_tt107283 const &_arg ){
  _vI102560_inp_uncurry = _arg.mem_0;
  _vI102561_out = _arg.mem_1;
    start_102429_L102568:;
      _vI102564_aux__apos_2_mv_1322  = _vI102560_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102564_aux__apos_2_mv_1322)==0) ) goto _ml1324_L102563;
      return _vI102561_out;
    _ml1324_L102563:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI102564_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI102567__lam_1326)(FLX_FPAR_PASS this, ptrexts))) ) goto _ml1325_L102562;
      _vI102565_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI102564_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI102566_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI102564_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI102561_out  = FLX_VNR(1, new(*PTF gcp, _tt107274_ptr_map, true) _tt107274 (_tt107274(_vI102561_out, _lam_65072(ptrexts)
      .apply(_vI102565_h_param_std_1208) /* apply_stack */))); //init
      _vI102560_inp_uncurry  = _vI102566_t_param_std_1207; //init
      goto start_102429_L102568;
    _ml1325_L102562:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <65805>: toolchain_msvc_win32::dependency_parser: Apply method
void* dependency_parser::apply(_a13708t_107090 const &_arg ){
  _vI65814_data = _arg;
      lines = split(FLX_FPAR_PASS_ONLY)
      .apply(_at107092(_vI65814_data, ::std::string("\n"))) /* apply_stack */; //assign simple
      files = (void* /*VR_nullptr*/ )0; //assign simple
      _vI92302_xs  = lines; //init
      _genout_urv92301  = (FLX_NEWP(_fI92303_iterator__apos_2)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)); //init
      _generator_toolchain_4081 = _genout_urv92301; //assign simple
    continue__ll_toolchain_4050_L65815:;
      dependency_parser_mv_65669  = (_generator_toolchain_4081)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some line_param_bootflx_65623*/
      if(!andthen(FLX_VNI(dependency_parser_mv_65669)==1, (FLX_NEWP(_lam_65672)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32))) ) goto _ml65671_L65822;
      line_param_bootflx_65623 = *((_a13708t_107090*)FLX_VNP(dependency_parser_mv_65669)); //assign simple
      if(!((::flx::rtl::strutil::substr(line_param_bootflx_65623,0,::std::string("Note: including file: ").size()) == ::std::string("Note: including file: "))) ) goto continue__ll_toolchain_4050_L65815;
      name = lstrip(rstrip(::flx::rtl::strutil::substr(line_param_bootflx_65623,22,line_param_bootflx_65623.size()), ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B")); //assign simple
      if(!(!((::flx::rtl::strutil::substr(name,0,::std::string("C:\\Program Files").size()) == ::std::string("C:\\Program Files")))  && !((::flx::rtl::strutil::substr(name,0,::std::string("c:\\program files").size()) == ::std::string("c:\\program files")))  ) ) goto continue__ll_toolchain_4050_L65815;
      if(mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107208((FLX_NEWP(_lam_1398)(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)), files)) /* apply_stack */) goto continue__ll_toolchain_4050_L65815;
      files = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(files, name))); //assign simple
      goto continue__ll_toolchain_4050_L65815;
      goto continue__ll_toolchain_4050_L65815;
      goto continue__ll_toolchain_4050_L65815;
      goto continue__ll_toolchain_4050_L65815;
    _ml65671_L65822:;
/*match case 2:|None*/
      if(!(FLX_VNI(dependency_parser_mv_65669)==0) ) goto _ml65673_L65823;
      goto _em65669_L65824;
    _ml65673_L65823:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1831,4,1831,8);
;
    _em65669_L65824:;
      return _fI92391_aux_uncurry(FLX_FPAR_PASS this, ptrtoolchain_msvc_win32)
      .apply(_at107115(files, (void* /*VR_nullptr*/ )0)) /* apply_stack */;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1833,3,1833,4); // HACK! 
}

//------------------------------
//C FUNC <85196>: filetype
int filetype(_a13708t_107090 _vI85197_f){
   ::flx::rtl::cl_t filetype_mv_704;
   ::flx::rtl::cl_t filetype_mv_699;
   ::flx::rtl::cl_t filetype_mv_694;
  int _vI85199_err;
  _a16417t_107248 _vI85198_b;
      {
      _a16417t_107248* _tmp108765 = (_a16417t_107248*)&_vI85198_b;
      int* _tmp108766 = (int*)&_vI85199_err;
      *((_tmp108766))=_stat64(_vI85197_f.c_str(),((_tmp108765)));
      }
      filetype_mv_694  = (_vI85199_err == 0); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(filetype_mv_694%2==1) ) goto _ml696_L94555;
      return file_type((_a16417t_107248*)&_vI85198_b);
    _ml696_L94555:;
/*match case 2:any*/
      filetype_mv_699  = (errno == (EACCES)); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(filetype_mv_699%2==1) ) goto _ml701_L94557;
      return /*VR_int*/9;
    _ml701_L94557:;
/*match case 2:any*/
      filetype_mv_704  = (errno == (ENOENT)); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(filetype_mv_704%2==1) ) goto _ml706_L94559;
      return /*VR_int*/8;
    _ml706_L94559:;
/*match case 2:any*/
      return /*VR_int*/7;
}
//------------------------------
//FUNCTION <93465>: generic_link_exe_dynamic_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93465__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <93536>: generic_link_lib_dynamic_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93536__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <88896>: generic_static_library_uncurry: Apply method
int generic_static_library_uncurry::apply(_tt107227 const &_arg ){
  _vI89643_spec_uncurry = _arg.mem_0;
  cppos = _arg.mem_1;
  LINKER_OUTPUT_FILENAME = _arg.mem_2;
      _vI93276_r = _fI93277_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89643_spec_uncurry.CCFLAGS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108767 = (void**)&_vI93276_r;
      _rev(((_tmp108767)),(_a13708t_107090*)0);
      }
      _vI93298_r = _fI93299_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(cppos, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108768 = (void**)&_vI93298_r;
      _rev(((_tmp108768)),(_a13708t_107090*)0);
      }
      _vI89637_CMD = (((((((::std::string("\"") + _vI89643_spec_uncurry.CCLINK_STATIC_LIB ) + ::std::string("\"") ) + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93276_r)) /* apply_stack */ ) + ::std::string(" ") ) + (_vI89643_spec_uncurry.SPEC_LIB_FILENAME + ((::std::string("\"") + LINKER_OUTPUT_FILENAME ) + ::std::string("\"") ) ) ) + ::std::string(" ") ) + cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93298_r)) /* apply_stack */ ; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI89643_spec_uncurry.debugln)->clone()
      ->call(0, ::std::string("Library archive command=") + _vI89637_CMD );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_444_L93314;
      {
      _a13708t_107090 _tmp108769 = (::std::string("[system] ") + _vI89637_CMD ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108769)));
      }
      fflush(stderr);
    _ifdoelse_std_444_L93314:;
      _genout_urv93321  = ::std::system(((::std::string("\"") + _vI89637_CMD ) + ::std::string("\"") ).c_str()); //init
      _vI93318__genout_urv93142  = _genout_urv93321; //init
      _vI93317__genout_urv93134  = _vI93318__genout_urv93142; //init
      _vI93316__genout_urv93129  = _vI93317__genout_urv93134; //init
      _genout_urv93312  = _vI93316__genout_urv93129; //init
      _vI89638_result = _genout_urv93312; //assign simple
      if(!(!((_vI89638_result == 0)) ) ) goto _ifdoelse_bootflx_64823_L89642;
      {
      _a13708t_107090 _tmp108770 = ((::std::string("Library archive command=") + _vI89637_CMD ) + ::std::string(" FAILED") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108770)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_64823_L89642:;
      return _vI89638_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",367,3,367,4); // HACK! 
}

//------------------------------
//FUNCTION <102624>: +::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI102624__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <90399>: _init_::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <67807>: FlxPkgConfigQuery::getpkgfieldopt::getpkgfieldopt'2: Apply method
void* _fI67807_getpkgfieldopt__apos_2::apply(_at107092 const &_arg ){
  _vI67813_pkg = _arg.data[0];
  _vI67814_field = _arg.data[1];
      _vI67809_values = getpkgfield_uncurry(FLX_FPAR_PASS ptrFlxPkgConfigQuery)
      .apply(_tt107292(ptrgetpkgfieldopt->_vI67819_ehandler, _vI67813_pkg, _vI67814_field)) /* apply_stack */; //assign simple
      _vI64773_getpkgfieldopt__apos_2_mv_64773  = _vI67809_values; //init
/*begin match*/
/*match case 1:|Cons (h_param_bootflx_64740, |Empty)*/
      if(!andthen(!!_vI64773_getpkgfieldopt__apos_2_mv_64773 , (FLX_NEWP(_lam_64776)(FLX_FPAR_PASS this, ptrgetpkgfieldopt, ptrFlxPkgConfigQuery))) ) goto _ml64775_L67815;
      h_param_bootflx_64740 = (reinterpret<_tt107116>(flx::list::snoc2cons<_a13708t_107090>(_vI64773_getpkgfieldopt__apos_2_mv_64773))).mem_0; //assign simple
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (h_param_bootflx_64740));
    _ml64775_L67815:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI64773_getpkgfieldopt__apos_2_mv_64773)==0) ) goto _ml64777_L67816;
      return (void* /*VR_nullptr*/ )0;
    _ml64777_L67816:;
/*match case 3:any*/
      {
      _a13708t_107090 _tmp108771 = (((((::std::string("Multiple values for field ") + _vI67814_field ) + ::std::string(" in ") ) + _vI67813_pkg ) + ::std::string(" not allowed, got") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67809_values) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108771)));
      }
      fflush(stdout);
      {
      _a6203t_107291 _tmp108772 = (_a6203t_107291)(ptrgetpkgfieldopt->_vI67819_ehandler);
      throw ((_tmp108772));
      }
      FLX_HALT("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",530,9,530,9,"HALT: Jump to end of function");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",536,5,536,6); // HACK! 
}

//------------------------------
//FUNCTION <67043>: cal_depvars: Apply method
_art107193 cal_depvars::apply(_tt107194 const &_arg ){
  toolchain = _arg.mem_0;
  _vI67118_config = _arg.mem_1;
  control = _arg.mem_2;
  loopctl = _arg.mem_3;
      dflt_clang_config = _art107173((void* /*VR_nullptr*/ )0, (FLX_NEWP(debugln)(FLX_FPAR_PASS this)), (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0, (void* /*VR_nullptr*/ )0); //assign simple
      _vI67059_tc = (toolchain)->clone()
      ->apply(dflt_clang_config) /* general apply */; //assign simple
      EXT_LIB = (_vI67059_tc.static_library_extension)->clone()
      ->apply() /* general apply */; //assign simple
      EXT_SHLIB = (_vI67059_tc.dynamic_library_extension)->clone()
      ->apply() /* general apply */; //assign simple
      EXT_EXE = (_vI67059_tc.executable_extension)->clone()
      ->apply() /* general apply */; //assign simple
      EXT_STATIC_OBJ = (_vI67059_tc.static_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      EXT_SHARED_OBJ = (_vI67059_tc.dynamic_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      DEBUG_FLAGS = (_vI67059_tc.debug_flags)->clone()
      ->apply() /* general apply */; //assign simple
      if(!(*control).DEBUG_FLX ) goto _end_95211_L95211;
      {
      _a13708t_107090 _tmp108773 = (::std::string("[flx] ") + (::std::string("Felix package manager config directories are ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67118_config.FLX_CONFIG_DIRS) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108773)));
      }
    _end_95211_L95211:;
      if(!(*control).DEBUG_FLX ) goto _end_95215_L95215;
      {
      _a13708t_107090 _tmp108774 = (::std::string("[flx] ") + (::std::string("FileDir= ") + loopctl.dir ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108774)));
      }
    _end_95215_L95215:;
      cal_depvars_mv_65192  = (loopctl.dir == ::std::string(".")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(cal_depvars_mv_65192%2==1) ) goto _ml65194_L95218;
      _urv95216  = loopctl.base; //init
      goto _end_hash_1032150453;
    _ml65194_L95218:;
/*match case 2:any*/
      _urv95216  = _fI82124_join(loopctl.dir, loopctl.base); //init
    _end_hash_1032150453:;
      rel_filebase = _urv95216; //assign simple
      if(!(*control).DEBUG_FLX ) goto _end_95224_L95224;
      {
      _a13708t_107090 _tmp108775 = (::std::string("[flx] ") + (::std::string("Rel_filebase= ") + rel_filebase ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108775)));
      }
    _end_95224_L95224:;
      if(!(*control).DEBUG_FLX ) goto _end_95228_L95228;
      {
      _a13708t_107090 _tmp108776 = (::std::string("[flx] ") + (::std::string("Given Extension=") + loopctl.ext ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108776)));
      }
    _end_95228_L95228:;
      cal_depvars_mv_65197  = !((loopctl.ext == ::std::string(""))) ; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(cal_depvars_mv_65197%2==1) ) goto _ml65199_L95231;
      _urv95229  = loopctl.ext; //init
      goto _end_hash_358076721;
    _ml65199_L95231:;
/*match case 2:any*/
      flxt = dfiletime(rel_filebase + ::std::string(".flx") , - 1.0 ); //assign simple
      fdoct = dfiletime(rel_filebase + ::std::string(".fdoc") , - 1.0 ); //assign simple
      _lam_65201_mv_65203  = (fdoct < flxt); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_lam_65201_mv_65203%2==1) ) goto _ml65205_L95235;
      _urv95229  = ::std::string(".flx"); //init
      goto _end_hash_358076721;
    _ml65205_L95235:;
/*match case 2:any*/
      _lam_65201_mv_65208  = (flxt < fdoct); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_lam_65201_mv_65208%2==1) ) goto _ml65210_L95237;
      _urv95229  = ::std::string(".fdoc"); //init
      goto _end_hash_358076721;
    _ml65210_L95237:;
/*match case 2:any*/
      _urv95229  = ::std::string(""); //init
    _end_hash_358076721:;
      use_ext = _urv95229; //assign simple
      if(!(*control).DEBUG_FLX ) goto _end_95243_L95243;
      {
      _a13708t_107090 _tmp108777 = (::std::string("[flx] ") + (::std::string("Computed Extension=") + use_ext ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108777)));
      }
    _end_95243_L95243:;
      filebase = mk_absolute_filename(rel_filebase); //assign simple
      if(!(*control).DEBUG_FLX ) goto _end_95247_L95247;
      {
      _a13708t_107090 _tmp108778 = (::std::string("[flx] ") + (::std::string("User program base is ") + filebase ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108778)));
      }
    _end_95247_L95247:;
      cal_depvars_mv_65213  = (*control).BUNDLE_DIR; //init
/*begin match*/
/*match case 1:|Some dir_param_bootflx_65123*/
      if(!andthen(FLX_VNI(cal_depvars_mv_65213)==1, (FLX_NEWP(_lam_65216)(FLX_FPAR_PASS this))) ) goto _ml65215_L95251;
      dir_param_bootflx_65123 = *((_a13708t_107090*)FLX_VNP(cal_depvars_mv_65213)); //assign simple
      _vI95254_basename_mv_667  = split1(FLX_FPAR_PASS_ONLY)
      .apply(filebase) /* apply_stack */; //init
/*begin match*/
/*match case 1:(any, b_param_std_616)*/
      _vI95255_b_param_std_616 = (_vI95254_basename_mv_667.data)[1]; //assign simple
      _urv95248  = _fI82124_join(dir_param_bootflx_65123, _vI95255_b_param_std_616); //init
      goto _end_hash_1013590864;
    _ml65215_L95251:;
/*match case 2:|None*/
      if(!(FLX_VNI(cal_depvars_mv_65213)==0) ) goto _ml65217_L95252;
      cal_depvars_mv_65219  = (_vI67118_config.FLX_OUTPUT_DIR == ::std::string("")); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(cal_depvars_mv_65219%2==1) ) goto _ml65221_L95257;
      _urv95248  = filebase; //init
      goto _end_hash_1013590864;
    _ml65221_L95257:;
/*match case 2:any*/
      _vI95259_f  = filebase; //init
      if(!((::flx::rtl::strutil::substr(_vI95259_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L95260;
      _vI95259_f = ::flx::rtl::strutil::substr(_vI95259_f,0,1) + ::flx::rtl::strutil::substr(_vI95259_f,2,_vI95259_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L95263;
    _ifdoend_bootflx_64478_L95260:;
      if(!((::flx::rtl::strutil::subscript(_vI95259_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L95263;
      _vI95259_f = (::flx::rtl::strutil::substr(_vI95259_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI95259_f,2,_vI95259_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L95263:;
      if(!((::flx::rtl::strutil::subscript(_vI95259_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L95265;
      _vI95259_f = ::flx::rtl::strutil::substr(_vI95259_f,1,_vI95259_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L95265:;
      _vI95258_k = _fI82124_join(_vI67118_config.FLX_OUTPUT_DIR, _vI95259_f); //assign simple
      _urv95248  = _vI95258_k; //init
      goto _end_hash_1013590864;
    _ml65217_L95252:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1743,5,1743,19);
;
    _end_hash_1013590864:;
      cpp_filebase = _urv95248; //assign simple
      if(!(*control).DEBUG_FLX ) goto _end_95271_L95271;
      {
      _a13708t_107090 _tmp108780 = (::std::string("[flx] ") + (::std::string("C++ file base is ") + cpp_filebase ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108780)));
      }
    _end_95271_L95271:;
      if(!(!(((*control).CHECK_EXPECT == 0))  && ((*control).STDOUT == ::std::string("")) ) ) goto _ifdoelse_bootflx_65125_L67122;
      _vI95281_f  = filebase + ::std::string(".stdout") ; //init
      if(!((::flx::rtl::strutil::substr(_vI95281_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L95282;
      _vI95281_f = ::flx::rtl::strutil::substr(_vI95281_f,0,1) + ::flx::rtl::strutil::substr(_vI95281_f,2,_vI95281_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L95285;
    _ifdoend_bootflx_64478_L95282:;
      if(!((::flx::rtl::strutil::subscript(_vI95281_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L95285;
      _vI95281_f = (::flx::rtl::strutil::substr(_vI95281_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI95281_f,2,_vI95281_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L95285:;
      if(!((::flx::rtl::strutil::subscript(_vI95281_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L95287;
      _vI95281_f = ::flx::rtl::strutil::substr(_vI95281_f,1,_vI95281_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L95287:;
      _vI95279_k = _fI82124_join(_vI67118_config.FLX_OUTPUT_DIR, _vI95281_f); //assign simple
      *(&control->STDOUT)  = _vI95279_k; //assign simple
      if(!(*control).DEBUG_FLX ) goto _ifdoelse_bootflx_65125_L67122;
      {
      _a13708t_107090 _tmp108781 = (::std::string("[flx] ") + (::std::string("Set stdout to ") + (*control).STDOUT ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108781)));
      }
      goto _ifdoelse_bootflx_65125_L67122;
    _ifdoelse_bootflx_65125_L67122:;
      if(!(!(((*control).SET_STDIN == 0))  && ((*control).STDIN == ::std::string("")) ) ) goto _ifdoelse_bootflx_65127_L67128;
      stdin_name = filebase + ::std::string(".input") ; //assign simple
      {
      _a16417t_107248* _tmp108782 = (_a16417t_107248*)&_vI95318_b;
      int* _tmp108783 = (int*)&_vI95319_err;
      *((_tmp108783))=_stat64(stdin_name.c_str(),((_tmp108782)));
      }
      _vI95321_filetime_mv_689  = (_vI95319_err == 0); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI95321_filetime_mv_689%2==1) ) goto _ml691_L95320;
      _vI95317__urv95301  = (double)(((_a16417t_107248*)&_vI95318_b)->st_mtime); //init
      goto _end_inline_filetime_95308_L95322;
    _ml691_L95320:;
/*match case 2:any*/
      _vI95317__urv95301  = 0.0; //init
    _end_inline_filetime_95308_L95322:;
      if(!(!((_vI95317__urv95301 == 0.0)) ) ) goto _ifdoend_bootflx_65128_L67123;
      *(&control->STDIN)  = stdin_name; //assign simple
      goto _ifdoelse_bootflx_65129_L67126;
    _ifdoend_bootflx_65128_L67123:;
      if(!(((*control).INREGEX == ::std::string(""))) ) goto _ifdoelse_bootflx_65129_L67126;
      {
      _a13708t_107090 _tmp108784 = ((::std::string("WARNING: computed input file ") + stdin_name ) + ::std::string(" doesn't exist!") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108784)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65129_L67126:;
      if(!(*control).DEBUG_FLX ) goto _ifdoelse_bootflx_65127_L67128;
      {
      _a13708t_107090 _tmp108785 = (::std::string("[flx] ") + (::std::string("Set stdin to ") + (*control).STDIN ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108785)));
      }
      goto _ifdoelse_bootflx_65127_L67128;
    _ifdoelse_bootflx_65127_L67128:;
      if(!(!(((*control).CHECK_EXPECT == 0))  && ((*control).EXPECT == ::std::string("")) ) ) goto _ifdoelse_bootflx_65133_L67134;
      expect_name = filebase + ::std::string(".expect") ; //assign simple
      {
      _a16417t_107248* _tmp108786 = (_a16417t_107248*)&_vI95340_b;
      int* _tmp108787 = (int*)&_vI95341_err;
      *((_tmp108787))=_stat64(expect_name.c_str(),((_tmp108786)));
      }
      filetime_mv_689  = (_vI95341_err == 0); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(filetime_mv_689%2==1) ) goto _ml691_L95342;
      _urv95301  = (double)(((_a16417t_107248*)&_vI95340_b)->st_mtime); //init
      goto _end_inline_filetime_95308_L95344;
    _ml691_L95342:;
/*match case 2:any*/
      _urv95301  = 0.0; //init
    _end_inline_filetime_95308_L95344:;
      if(!(!((_urv95301 == 0.0)) ) ) goto _ifdoend_bootflx_65134_L67129;
      *(&control->EXPECT)  = expect_name; //assign simple
      goto _ifdoelse_bootflx_65135_L67132;
    _ifdoend_bootflx_65134_L67129:;
      if(!(((*control).INREGEX == ::std::string(""))) ) goto _ifdoelse_bootflx_65135_L67132;
      {
      _a13708t_107090 _tmp108788 = ((::std::string("WARNING: computed expect file ") + expect_name ) + ::std::string(" doesn't exist!") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108788)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65135_L67132:;
      if(!(*control).DEBUG_FLX ) goto _ifdoelse_bootflx_65133_L67134;
      {
      _a13708t_107090 _tmp108789 = (::std::string("[flx] ") + (::std::string("Set expect to ") + (*control).EXPECT ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108789)));
      }
      goto _ifdoelse_bootflx_65133_L67134;
    _ifdoelse_bootflx_65133_L67134:;
      if(!((loopctl.path == ::std::string(""))) ) goto _ifdoelse_bootflx_65139_L67136;
      {
      _a13708t_107090 _tmp108790 = (::std::string("No such felix program: ") + loopctl.path ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108790)));
      }
      ::std::exit(1);
    _ifdoelse_bootflx_65139_L67136:;
      cal_depvars_mv_65224  = (*control).BUNDLE_DIR; //init
/*begin match*/
/*match case 1:|Some dir_param_bootflx_65140*/
      if(!andthen(FLX_VNI(cal_depvars_mv_65224)==1, (FLX_NEWP(_lam_65227)(FLX_FPAR_PASS this))) ) goto _ml65226_L95360;
      dir_param_bootflx_65140 = *((_a13708t_107090*)FLX_VNP(cal_depvars_mv_65224)); //assign simple
      _vI95363_basename_mv_667  = split1(FLX_FPAR_PASS_ONLY)
      .apply(filebase) /* apply_stack */; //init
/*begin match*/
/*match case 1:(any, b_param_std_616)*/
      _vI95364_b_param_std_616 = (_vI95363_basename_mv_667.data)[1]; //assign simple
      _urv95357  = _fI82124_join(dir_param_bootflx_65140, _vI95364_b_param_std_616 + ::std::string("_interface.flx") ); //init
      goto _end_hash_414723262;
    _ml65226_L95360:;
/*match case 2:|None*/
      if(!(FLX_VNI(cal_depvars_mv_65224)==0) ) goto _ml65228_L95361;
      _vI95366_f  = filebase + ::std::string("_interface.flx") ; //init
      if(!((::flx::rtl::strutil::substr(_vI95366_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L95367;
      _vI95366_f = ::flx::rtl::strutil::substr(_vI95366_f,0,1) + ::flx::rtl::strutil::substr(_vI95366_f,2,_vI95366_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L95370;
    _ifdoend_bootflx_64478_L95367:;
      if(!((::flx::rtl::strutil::subscript(_vI95366_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L95370;
      _vI95366_f = (::flx::rtl::strutil::substr(_vI95366_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI95366_f,2,_vI95366_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L95370:;
      if(!((::flx::rtl::strutil::subscript(_vI95366_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L95372;
      _vI95366_f = ::flx::rtl::strutil::substr(_vI95366_f,1,_vI95366_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L95372:;
      _vI95365_k = _fI82124_join(_vI67118_config.FLX_OUTPUT_DIR, _vI95366_f); //assign simple
      _urv95357  = _vI95365_k; //init
      goto _end_hash_414723262;
    _ml65228_L95361:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1790,5,1790,76);
;
    _end_hash_414723262:;
      (*control).FLX_INTERFACE_FILENAME = _urv95357; //assign simple
      if(!(*control).DEBUG_FLX ) goto _end_95378_L95378;
      {
      _a13708t_107090 _tmp108792 = (::std::string("[flx] ") + (::std::string("Flx interface filename is ") + (*control).FLX_INTERFACE_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108792)));
      }
    _end_95378_L95378:;
      cal_depvars_mv_65230  = (*control).BUNDLE_DIR; //init
/*begin match*/
/*match case 1:|Some dir_param_bootflx_65141*/
      if(!andthen(FLX_VNI(cal_depvars_mv_65230)==1, (FLX_NEWP(_lam_65233)(FLX_FPAR_PASS this))) ) goto _ml65232_L95382;
      dir_param_bootflx_65141 = *((_a13708t_107090*)FLX_VNP(cal_depvars_mv_65230)); //assign simple
      _vI95385_basename_mv_667  = split1(FLX_FPAR_PASS_ONLY)
      .apply(filebase) /* apply_stack */; //init
/*begin match*/
/*match case 1:(any, b_param_std_616)*/
      _vI95386_b_param_std_616 = (_vI95385_basename_mv_667.data)[1]; //assign simple
      _urv95379  = _fI82124_join(dir_param_bootflx_65141, _vI95386_b_param_std_616 + ::std::string(".hpp") ); //init
      goto _end_hash_433387107;
    _ml65232_L95382:;
/*match case 2:|None*/
      if(!(FLX_VNI(cal_depvars_mv_65230)==0) ) goto _ml65234_L95383;
      _vI95388_f  = filebase + ::std::string(".hpp") ; //init
      if(!((::flx::rtl::strutil::substr(_vI95388_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L95389;
      _vI95388_f = ::flx::rtl::strutil::substr(_vI95388_f,0,1) + ::flx::rtl::strutil::substr(_vI95388_f,2,_vI95388_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L95392;
    _ifdoend_bootflx_64478_L95389:;
      if(!((::flx::rtl::strutil::subscript(_vI95388_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L95392;
      _vI95388_f = (::flx::rtl::strutil::substr(_vI95388_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI95388_f,2,_vI95388_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L95392:;
      if(!((::flx::rtl::strutil::subscript(_vI95388_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L95394;
      _vI95388_f = ::flx::rtl::strutil::substr(_vI95388_f,1,_vI95388_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L95394:;
      _vI95387_k = _fI82124_join(_vI67118_config.FLX_OUTPUT_DIR, _vI95388_f); //assign simple
      _urv95379  = _vI95387_k; //init
      goto _end_hash_433387107;
    _ml65234_L95383:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1797,5,1797,66);
;
    _end_hash_433387107:;
      (*control).CXX_INTERFACE_FILENAME = _urv95379; //assign simple
      if(!(*control).DEBUG_FLX ) goto _end_95400_L95400;
      {
      _a13708t_107090 _tmp108794 = (::std::string("[flx] ") + (::std::string("C++ interface filename is ") + (*control).FLX_INTERFACE_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108794)));
      }
    _end_95400_L95400:;
      if(!(((*control).LINKER_OUTPUT_FILENAME == ::std::string(""))) ) goto _ifdoend_bootflx_65142_L67147;
      if(!(((*control).LINKIT == 1) || ((*control).RUNONLY == 1) ) ) goto _ifdoend_bootflx_65144_L67143;
      if(!(((*control).STATICLIB == 1)) ) goto _ifdoend_bootflx_65146_L67137;
      _vI67101_f = filebase + EXT_LIB ; //assign simple
      goto _ifdoelse_bootflx_65145_L67146;
    _ifdoend_bootflx_65146_L67137:;
      if(!(((*control).STATIC == 0)) ) goto _ifdoend_bootflx_65148_L67140;
      if(!(((*control).LINKEXE == 1)) ) goto _ifdoend_bootflx_65150_L67138;
      _vI67101_f = filebase + EXT_LIB ; //assign simple
      goto _ifdoelse_bootflx_65145_L67146;
    _ifdoend_bootflx_65150_L67138:;
      _vI67101_f = filebase + EXT_SHLIB ; //assign simple
      goto _ifdoelse_bootflx_65145_L67146;
    _ifdoend_bootflx_65148_L67140:;
      _vI67101_f = filebase + EXT_EXE ; //assign simple
      goto _ifdoelse_bootflx_65145_L67146;
    _ifdoend_bootflx_65144_L67143:;
      if(!(((*control).STATIC == 1)) ) goto _ifdoend_bootflx_65152_L67144;
      _vI67101_f = filebase + EXT_STATIC_OBJ ; //assign simple
      goto _ifdoelse_bootflx_65145_L67146;
    _ifdoend_bootflx_65152_L67144:;
      _vI67101_f = filebase + EXT_SHARED_OBJ ; //assign simple
    _ifdoelse_bootflx_65145_L67146:;
      _vI95404_f  = _vI67101_f; //init
      if(!((::flx::rtl::strutil::substr(_vI95404_f,1,3) == ::std::string(":\\"))) ) goto _ifdoend_bootflx_64478_L95405;
      _vI95404_f = ::flx::rtl::strutil::substr(_vI95404_f,0,1) + ::flx::rtl::strutil::substr(_vI95404_f,2,_vI95404_f.size()) ; //assign simple
      goto _ifdoelse_bootflx_64479_L95408;
    _ifdoend_bootflx_64478_L95405:;
      if(!((::flx::rtl::strutil::subscript(_vI95404_f,1) == ::flx::rtl::strutil::subscript(::std::string(":"),0))) ) goto _ifdoelse_bootflx_64479_L95408;
      _vI95404_f = (::flx::rtl::strutil::substr(_vI95404_f,0,1) + ::std::string("\\") ) + ::flx::rtl::strutil::substr(_vI95404_f,2,_vI95404_f.size()) ; //assign simple
    _ifdoelse_bootflx_64479_L95408:;
      if(!((::flx::rtl::strutil::subscript(_vI95404_f,0) == ::flx::rtl::strutil::subscript(::std::string("\\"),0))) ) goto _ifdoelse_bootflx_64483_L95410;
      _vI95404_f = ::flx::rtl::strutil::substr(_vI95404_f,1,_vI95404_f.size()); //assign simple
    _ifdoelse_bootflx_64483_L95410:;
      k = _fI82124_join(_vI67118_config.FLX_CACHE_DIR, _vI95404_f); //assign simple
      (*control).LINKER_OUTPUT_FILENAME = k; //assign simple
      if(!(*control).DEBUG_FLX ) goto _ifdoelse_bootflx_65143_L67172;
      {
      _a13708t_107090 _tmp108795 = (::std::string("[flx] ") + (::std::string("Felx writing output binary to ") + (*control).LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108795)));
      }
      goto _ifdoelse_bootflx_65143_L67172;
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65142_L67147:;
      if(!(((*control).OUTP_hash_48688961 == 1)) ) goto _ifdoend_bootflx_65154_L67158;
      if(!(((*control).LINKIT == 1) || ((*control).RUNONLY == 1) ) ) goto _ifdoend_bootflx_65156_L67154;
      if(!(((*control).STATICLIB == 1)) ) goto _ifdoend_bootflx_65158_L67148;
      {
      _a13708t_107090* _tmp108796 = &(*(&control->LINKER_OUTPUT_FILENAME) );
      ((_tmp108796))->append(EXT_LIB);
      }
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65158_L67148:;
      if(!(((*control).STATIC == 0)) ) goto _ifdoend_bootflx_65160_L67151;
      if(!(((*control).LINKEXE == 1)) ) goto _ifdoend_bootflx_65162_L67149;
      {
      _a13708t_107090* _tmp108797 = &(*(&control->LINKER_OUTPUT_FILENAME) );
      ((_tmp108797))->append(EXT_EXE);
      }
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65162_L67149:;
      {
      _a13708t_107090* _tmp108798 = &(*(&control->LINKER_OUTPUT_FILENAME) );
      ((_tmp108798))->append(EXT_SHLIB);
      }
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65160_L67151:;
      {
      _a13708t_107090* _tmp108799 = &(*(&control->LINKER_OUTPUT_FILENAME) );
      ((_tmp108799))->append(EXT_EXE);
      }
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65156_L67154:;
      if(!(((*control).STATIC == 1)) ) goto _ifdoend_bootflx_65164_L67155;
      {
      _a13708t_107090* _tmp108800 = &(*(&control->LINKER_OUTPUT_FILENAME) );
      ((_tmp108800))->append(EXT_STATIC_OBJ);
      }
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65164_L67155:;
      {
      _a13708t_107090* _tmp108801 = &(*(&control->LINKER_OUTPUT_FILENAME) );
      ((_tmp108801))->append(EXT_SHARED_OBJ);
      }
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65154_L67158:;
      if(!(((*control).OUTPUT_DIRECTORY_SPECIFIED == 1)) ) goto _ifdoelse_bootflx_65143_L67172;
      _vI95425_basename_mv_667  = split1(FLX_FPAR_PASS_ONLY)
      .apply((split_extension(filebase).data)[0]) /* apply_stack */; //init
/*begin match*/
/*match case 1:(any, b_param_std_616)*/
      _vI95426_b_param_std_616 = (_vI95425_basename_mv_667.data)[1]; //assign simple
      basename = _vI95426_b_param_std_616; //assign simple
      if(!(((*control).LINKIT == 1) || ((*control).RUNONLY == 1) ) ) goto _ifdoend_bootflx_65168_L67165;
      if(!(((*control).STATICLIB == 1)) ) goto _ifdoend_bootflx_65170_L67159;
      *(&control->LINKER_OUTPUT_FILENAME)  = _fI82124_join((*control).LINKER_OUTPUT_FILENAME, basename) + EXT_LIB ; //assign simple
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65170_L67159:;
      if(!(((*control).STATIC == 0)) ) goto _ifdoend_bootflx_65172_L67162;
      if(!(((*control).LINKEXE == 1)) ) goto _ifdoend_bootflx_65174_L67160;
      *(&control->LINKER_OUTPUT_FILENAME)  = _fI82124_join((*control).LINKER_OUTPUT_FILENAME, basename) + EXT_EXE ; //assign simple
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65174_L67160:;
      *(&control->LINKER_OUTPUT_FILENAME)  = _fI82124_join((*control).LINKER_OUTPUT_FILENAME, basename) + EXT_SHLIB ; //assign simple
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65172_L67162:;
      *(&control->LINKER_OUTPUT_FILENAME)  = _fI82124_join((*control).LINKER_OUTPUT_FILENAME, basename) + EXT_EXE ; //assign simple
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65168_L67165:;
      if(!(((*control).STATIC == 1)) ) goto _ifdoend_bootflx_65176_L67166;
      *(&control->LINKER_OUTPUT_FILENAME)  = _fI82124_join((*control).LINKER_OUTPUT_FILENAME, basename) + EXT_STATIC_OBJ ; //assign simple
      goto _ifdoelse_bootflx_65143_L67172;
    _ifdoend_bootflx_65176_L67166:;
      *(&control->LINKER_OUTPUT_FILENAME)  = _fI82124_join((*control).LINKER_OUTPUT_FILENAME, basename) + EXT_SHARED_OBJ ; //assign simple
    _ifdoelse_bootflx_65143_L67172:;
      *(&control->LINKER_OUTPUT_FILENAME)  = mk_absolute_filename((*control).LINKER_OUTPUT_FILENAME); //assign simple
      cal_depvars_mv_65236  = (*control).BUNDLE_DIR; //init
/*begin match*/
/*match case 1:|Some dir_param_bootflx_65178*/
      if(!andthen(FLX_VNI(cal_depvars_mv_65236)==1, (FLX_NEWP(_lam_65239)(FLX_FPAR_PASS this))) ) goto _ml65238_L95468;
      dir_param_bootflx_65178 = *((_a13708t_107090*)FLX_VNP(cal_depvars_mv_65236)); //assign simple
      basename_mv_667  = split1(FLX_FPAR_PASS_ONLY)
      .apply((*control).LINKER_OUTPUT_FILENAME) /* apply_stack */; //init
/*begin match*/
/*match case 1:(any, b_param_std_616)*/
      b_param_std_616 = (basename_mv_667.data)[1]; //assign simple
      _urv95465  = _fI82124_join(dir_param_bootflx_65178, b_param_std_616); //init
      goto _end_hash_803858998;
    _ml65238_L95468:;
/*match case 2:|None*/
      if(!(FLX_VNI(cal_depvars_mv_65236)==0) ) goto _ml65240_L95469;
      _urv95465  = (*control).LINKER_OUTPUT_FILENAME; //init
      goto _end_hash_803858998;
    _ml65240_L95469:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1869,4,1869,47);
;
    _end_hash_803858998:;
      *(&control->LINKER_OUTPUT_FILENAME)  = _urv95465; //assign simple
      if(!(*control).DEBUG_FLX ) goto _end_95478_L95478;
      {
      _a13708t_107090 _tmp108803 = (::std::string("[flx] ") + (::std::string("Linker output filename ") + (*control).LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108803)));
      }
    _end_95478_L95478:;
      _vI67108_args = (*control).USER_ARGS; //assign simple
      if(!(*control).DEBUG_FLX ) goto _end_95482_L95482;
      {
      _a13708t_107090 _tmp108804 = (::std::string("[flx] ") + (::std::string("Target program args = ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI67108_args) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108804)));
      }
    _end_95482_L95482:;
      if(!(((*control).NOSTDLIB == 1)) ) goto _ifdoend_bootflx_65179_L67173;
      FLX_STD_LIBS = (void* /*VR_nullptr*/ )0; //assign simple
      goto _ifdoelse_bootflx_65180_L67177;
    _ifdoend_bootflx_65179_L67173:;
      cal_depvars_mv_65241  = (*control).FLX_STD_LIBS; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(cal_depvars_mv_65241)==0) ) goto _ml65243_L67174;
      FLX_STD_LIBS = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("std")))); //assign simple
      goto _ifdoelse_bootflx_65180_L67177;
    _ml65243_L67174:;
/*match case 2:x_param_bootflx_65182*/
      x_param_bootflx_65182 = cal_depvars_mv_65241; //assign simple
      FLX_STD_LIBS = x_param_bootflx_65182; //assign simple
    _ifdoelse_bootflx_65180_L67177:;
      if(!(*control).DEBUG_FLX ) goto _end_95493_L95493;
      {
      _a13708t_107090 _tmp108805 = (::std::string("[flx] ") + (::std::string("Felix standard (cached) libraries: ") + str(FLX_FPAR_PASS_ONLY)
      .apply(FLX_STD_LIBS) /* apply_stack */ ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108805)));
      }
    _end_95493_L95493:;
      STDGRAMMAR = mk_absolute_filename((*control).STDGRAMMAR); //assign simple
      GRAMMAR_DIR = mk_absolute_filename((*control).GRAMMAR_DIR); //assign simple
      AUTOMATON = mk_absolute_filename((*control).AUTOMATON); //assign simple
      DEBUGSWITCH = (void* /*VR_nullptr*/ )0; //assign simple
      if(!(((*control).DEBUG_COMPILER == 1)) ) goto _ifdoelse_bootflx_65184_L67179;
      DEBUGSWITCH = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("--debug")))); //assign simple
    _ifdoelse_bootflx_65184_L67179:;
      STATIC_ENV = (void* /*VR_nullptr*/ )0; //assign simple
      if(!(((*control).DEBUG_COMPILER == 1)) ) goto _ifdoelse_bootflx_65186_L67181;
      _vI95504_o = (void* /*VR_nullptr*/ )0; //assign simple
      if(!((0 < 2)) ) goto _ifdoelse_std_1191_L95500;
      _vI95505_i = (static_cast<int>(2)/*int.flx: ctor*/) - 1 ; //assign simple
      {
      int* _tmp108806 = (int*)&_vI95505_i;
      ++*((_tmp108806));
      }
    redo__ll_lists_4854_L95503:;
      if(FLX_UNLIKELY(!((0 < _vI95505_i)) )) goto _ifdoelse_std_1191_L95500;
      {
      int* _tmp108807 = (int*)&_vI95505_i;
      --*((_tmp108807));
      }
      _vI95504_o = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI95504_o, (_at107092(::std::string("env"), ::std::string("FLX_DEBUG=1")).data)[reinterpret< ::flx::rtl::cl_t>(_vI95505_i)]))); //assign simple
      goto redo__ll_lists_4854_L95503;
    _ifdoelse_std_1191_L95500:;
      STATIC_ENV = _vI95504_o; //assign simple
    _ifdoelse_bootflx_65186_L67181:;
      if(!(*control).DEBUG_FLX ) goto _end_95511_L95511;
      {
      _a13708t_107090 _tmp108808 = (::std::string("[flx] ") + (::std::string("RECOMPILE=") + ::flx::rtl::strutil::str<int>((*control).RECOMPILE) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108808)));
      }
    _end_95511_L95511:;
      if(!(*control).DEBUG_FLX ) goto _end_95515_L95515;
      {
      _a13708t_107090 _tmp108809 = (::std::string("[flx] ") + (::std::string("RUNIT=") + ::flx::rtl::strutil::str<int>((*control).RUNIT) ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108809)));
      }
    _end_95515_L95515:;
      VERBOSE = (void* /*VR_nullptr*/ )0; //assign simple
      if(!(((*control).DEBUG_COMPILER == 1)) ) goto _ifdoend_bootflx_65187_L67182;
      VERBOSE = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-v")))); //assign simple
      if(!(*control).DEBUG_FLX ) goto _ifdoelse_bootflx_65188_L67183;
      {
      _a13708t_107090 _tmp108810 = (::std::string("[flx] ") + ::std::string("Compiler debugging on") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108810)));
      }
      goto _ifdoelse_bootflx_65188_L67183;
      goto _ifdoelse_bootflx_65188_L67183;
    _ifdoend_bootflx_65187_L67182:;
      VERBOSE = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-q")))); //assign simple
      if(!(*control).DEBUG_FLX ) goto _ifdoelse_bootflx_65188_L67183;
      {
      _a13708t_107090 _tmp108811 = (::std::string("[flx] ") + ::std::string("Compiler debugging off") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108811)));
      }
    _ifdoelse_bootflx_65188_L67183:;
      if(!(((*control).DEBUG == 1)) ) goto _ifdoelse_bootflx_65190_L67185;
      *(&control->CCFLAGS)  = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115((*control).CCFLAGS, DEBUG_FLAGS)) /* apply_stack */; //assign simple
    _ifdoelse_bootflx_65190_L67185:;
      return _art107193(AUTOMATON, DEBUGSWITCH, FLX_STD_LIBS, GRAMMAR_DIR, STATIC_ENV, STDGRAMMAR, VERBOSE, _vI67108_args, cpp_filebase, filebase, use_ext);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",1928,1,1928,2); // HACK! 
}

//------------------------------
//FUNCTION <93107>: generic_cxx_compile_for_static_uncurry::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI93107__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <93457>: generic_link_exe_dynamic_uncurry::aux_uncurry: Apply method
void* _fI93457_aux_uncurry::apply(_at107115 const &_arg ){
  _vI93458_inp_uncurry = _arg.data[0];
  _vI93459_out = _arg.data[1];
    start_90421_L93466:;
      _vI93462_aux__apos_2_mv_1322  = _vI93458_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI93462_aux__apos_2_mv_1322)==0) ) goto _ml1324_L93461;
      return _vI93459_out;
    _ml1324_L93461:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI93462_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI93465__lam_1326)(FLX_FPAR_PASS this, ptrgeneric_link_exe_dynamic_uncurry))) ) goto _ml1325_L93460;
      _vI93463_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI93462_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI93464_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI93462_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI93459_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI93459_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI93463_h_param_std_1208) /* apply_stack */))); //init
      _vI93458_inp_uncurry  = _vI93464_t_param_std_1207; //init
      goto start_90421_L93466;
    _ml1325_L93460:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------

//PROCEDURE <68065:> flx_pkgconfig::handle_pkg: Call method
::flx::rtl::con_t * handle_pkg::call(::flx::rtl::con_t *_ptr_caller, _tt107116 const &_arg){
  _caller = _ptr_caller;
  _vI68127_pkg = _arg.mem_0;
  trace = _arg.mem_1;
  INIT_PC
  return this;
}

//PROCEDURE <68065:> flx_pkgconfig::handle_pkg: Resume method
::flx::rtl::con_t *handle_pkg::resume(){
  FLX_START_SWITCH
      variables = (void* /*VR_nullptr*/ )0; //assign simple
      if(!mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107208((FLX_NEWP(_fI96598__lam_1398)(FLX_FPAR_PASS this, ptrflx_pkgconfig)), trace)) /* apply_stack */ ) goto _ifret_bootflx_64603_L68129;
      FLX_RETURN // procedure return
    _ifret_bootflx_64603_L68129:;
      found = 0; //assign simple
      {
      _pt107148* _tmp108813 = (FLX_NEWP(_lam_64696)(FLX_FPAR_PASS this, ptrflx_pkgconfig));
      FLX_SET_PC(108814)
      return (FLX_NEWP(iter_uncurry)(FLX_FPAR_PASS_ONLY))
      ->call(this, _tt107149((_tmp108813), ptrflx_pkgconfig->dirs));
      }
    FLX_CASE_LABEL(108814)
      if(found) goto _ifdoelse_bootflx_64623_L68135;
      {
      _a13708t_107090 _tmp108815 = (::std::string("package not found: ") + _vI68127_pkg ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108815)));
      }
      fflush(stderr);
      if(!ptrflx_pkgconfig->require_pkg_exists ) goto _ifdoelse_bootflx_64625_L68131;
      ptrflx_pkgconfig->return_code = 1; //assign simple
    _ifdoelse_bootflx_64625_L68131:;
      if(!ptrflx_pkgconfig->missing ) goto _ifdoelse_bootflx_64623_L68135;
      _vI96608_insert_unique__apos_3_mv_1428  = mem_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107208((FLX_NEWP(_fI96609__lam_1398)(FLX_FPAR_PASS this, ptrflx_pkgconfig)), ptrflx_pkgconfig->_vI68017_result)) /* apply_stack */; //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI96608_insert_unique__apos_3_mv_1428%2==1) ) goto _ml1430_L96607;
      _vI96606__urv95792  = ptrflx_pkgconfig->_vI68017_result; //init
      goto _end_hash_396222106;
    _ml1430_L96607:;
/*match case 2:any*/
      _vI96606__urv95792  = _fI96621_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at107115(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI96611_aux_uncurry(FLX_FPAR_PASS this, ptrflx_pkgconfig)
      .apply(_at107115(ptrflx_pkgconfig->_vI68017_result, (void* /*VR_nullptr*/ )0)) /* apply_stack */, _vI68127_pkg))), (void* /*VR_nullptr*/ )0)) /* apply_stack */; //init
    _end_hash_396222106:;
      ptrflx_pkgconfig->_vI68017_result = _vI96606__urv95792; //assign simple
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_64623_L68135:;
      FLX_KILLPC
      FLX_RETURN // procedure return
      FLX_KILLPC
    FLX_RETURN
  FLX_END_SWITCH
}
//------------------------------

//PROCEDURE <104629:> flx_processing::xdebugln'2: Call method
::flx::rtl::con_t * _pI104629_xdebugln__apos_2::call(::flx::rtl::con_t *_ptr_caller, _a13708t_107090 const &_arg){
  _caller = _ptr_caller;
  _vI104630_x = _arg;
  INIT_PC
  return this;
}

//PROCEDURE <104629:> flx_processing::xdebugln'2: Resume method
::flx::rtl::con_t *_pI104629_xdebugln__apos_2::resume(){
      if(!(*ptrflx_processing->_vI68367_control).DEBUG_FLX ) goto _ifdoelse_bootflx_65255_L104631;
      {
      _a13708t_107090 _tmp108816 = (::std::string("[flx] ") + _vI104630_x ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108816)));
      }
      FLX_RETURN // procedure return
    _ifdoelse_bootflx_65255_L104631:;
      FLX_RETURN // procedure return
    FLX_RETURN
}
//------------------------------
//FUNCTION <106160>: flx_processing::cal_time_from_flxdepfile: Apply method
double _fI106160_cal_time_from_flxdepfile::apply(_tt107589 const &_arg ){
  _vI106171_debugln = _arg.mem_0;
  _vI106172_df = _arg.mem_1;
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_575_L106536;
      {
      _a13708t_107090 _tmp108817 = (::std::string("[load_text] ") + _vI106172_df ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108817)));
      }
      fflush(stderr);
    _ifdoelse_std_575_L106536:;
      _vI106168_deptext = ::flx::rtl::ioutil::load_text_file(_vI106172_df); //assign simple
      _vI106169_lines = split(FLX_FPAR_PASS_ONLY)
      .apply(_at107092(_vI106168_deptext, ::std::string("\n"))) /* apply_stack */; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI106171_debugln)->clone()
      ->call(0, ::std::string("Deps=") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106169_lines) /* apply_stack */ );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      _vI106538_cal_time_from_flxdepfile_mv_65458  = _fI106540_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_tt107527(- 1.0 , _vI106169_lines)) /* apply_stack */; //init
/*begin match*/
/*match case 1:ft_param_bootflx_65280*/
      _vI106539_ft_param_bootflx_65280 = _vI106538_cal_time_from_flxdepfile_mv_65458; //assign simple
      _vI106550_cal_time_from_flxdepfile_mv_65462  = (_vI106539_ft_param_bootflx_65280 == - 1.0 ); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106550_cal_time_from_flxdepfile_mv_65462%2==1) ) goto _ml65464_L106551;
      _vI106537__urv97976  = static_cast<double>((static_cast<_a5034t_107305>((-1))/*int.flx: ctor*/)); //init
      goto _end_hash_1065992912;
    _ml65464_L106551:;
/*match case 2:any*/
      _vI106537__urv97976  = _vI106539_ft_param_bootflx_65280; //init
    _end_hash_1065992912:;
      _vI106170_deptime = _vI106537__urv97976; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI106171_debugln)->clone()
      ->call(0, ::std::string("Deptime=") + strfiletime(FLX_FPAR_PASS _vI106170_deptime) );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      return _vI106170_deptime;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2135,3,2135,4); // HACK! 
}

//------------------------------
//FUNCTION <105532>: flx_processing::find_cxx_pkgs::aux_uncurry: Apply method
void* _fI105532_aux_uncurry::apply(_at107115 const &_arg ){
  _vI105533_x_uncurry = _arg.data[0];
  _vI105534_y = _arg.data[1];
    start_91065_L105541:;
      _vI105537_aux__apos_2_mv_1328  = _vI105533_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI105537_aux__apos_2_mv_1328)==0) ) goto _ml1330_L105536;
      return _vI105534_y;
    _ml1330_L105536:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI105537_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI105540__lam_1332)(FLX_FPAR_PASS this, ptrfind_cxx_pkgs, ptrflx_processing))) ) goto _ml1331_L105535;
      _vI105538_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI105537_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI105539_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI105537_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI105534_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI105534_y, _vI105538_h_param_std_1210))); //init
      _vI105533_x_uncurry  = _vI105539_t_param_std_1209; //init
      goto start_91065_L105541;
    _ml1331_L105535:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <106140>: flx_processing::find_cxx_pkgs: Apply method
void* _fI106140_find_cxx_pkgs::apply(_a13708t_107090 const &_arg ){
  _vI106148_src = _arg;
      if(!ptrflx_processing->_vI106422_control.DEBUG_FLX ) goto _end_97684_L106495;
      {
      _a13708t_107090 _tmp108819 = (::std::string("[flx] ") + ((::std::string("[flx:find_cxx_pkgs] Scanning ") + _vI106148_src ) + ::std::string(" for package requirements") ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108819)));
      }
    _end_97684_L106495:;
      _vI106141_out = (void* /*VR_nullptr*/ )0; //assign simple
      _vI106496__genout_urv97685  = ::std::shared_ptr< ::re2::RE2>(new RE2((::std::string(".*@requires package ([A-Za-z][A-Za-z0-9_-]*).*")))); //init
      _vI106142_pat = _vI106496__genout_urv97685; //assign simple
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_FILE_MONITOR")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_560_L106498;
      {
      _a13708t_107090 _tmp108820 = (::std::string("[Open_input_text] ") + _vI106148_src ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108820)));
      }
      fflush(stderr);
    _ifdoelse_std_560_L106498:;
      _vI106501__genout_urv97703  = fopen(_vI106148_src.c_str(),"r"); //init
      _vI106500__genout_urv97694  = _vI106501__genout_urv97703; //init
      _vI106497__genout_urv97696  = _vI106500__genout_urv97694; //init
      _vI106143_f = _vI106497__genout_urv97696; //assign simple
      _vI106502__genout_urv97704  = _vI106143_f!=(FILE*)0; //init
      if(!_vI106502__genout_urv97704 ) goto _ifdoend_bootflx_65268_L106156;
      _vI106503__genout_urv97727  = (FLX_NEWP(_fI106504_iterator__apos_2)(FLX_FPAR_PASS this, ptrflx_processing)); //init
      _vI106144__generator_flx_2240 = _vI106503__genout_urv97727; //assign simple
    continue__ll_flx_2228_L106149:;
      _vI106118_find_cxx_pkgs_mv_65437  = (_vI106144__generator_flx_2240)->clone()
      ->apply() /* general apply */; //init
/*begin match*/
/*match case 1:|Some line_param_bootflx_65271*/
      if(!andthen(FLX_VNI(_vI106118_find_cxx_pkgs_mv_65437)==1, (FLX_NEWP(_fI106510__lam_65445)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65439_L106153;
      _vI106145_line_param_bootflx_65271 = *((_a13708t_107090*)FLX_VNP(_vI106118_find_cxx_pkgs_mv_65437)); //assign simple
      _vI106511__genout_urv97741  = Match(FLX_FPAR_PASS _vI106142_pat, _vI106145_line_param_bootflx_65271); //init
      _vI106146_result = _vI106511__genout_urv97741; //assign simple
      _vI106119_find_cxx_pkgs_mv_65440  = _vI106146_result; //init
/*begin match*/
/*match case 1:|None*/
      if(!(FLX_VNI(_vI106119_find_cxx_pkgs_mv_65440)==0) ) goto _ml65442_L106150;
      goto continue__ll_flx_2228_L106149;
    _ml65442_L106150:;
/*match case 2:|Some v_param_bootflx_65273_param_bootflx_65275*/
      if(!andthen(FLX_VNI(_vI106119_find_cxx_pkgs_mv_65440)==1, (FLX_NEWP(_fI106512__lam_65444)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml65443_L106151;
      _vI106147_v_pa_hash_741625322 = *((_poly_79881t_107147*)FLX_VNP(_vI106119_find_cxx_pkgs_mv_65440)); //assign simple
      {if(FLX_UNLIKELY(!(((static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(1)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/) < (PTF gcp->collector->get_used(_vI106147_v_pa_hash_741625322))))))
        FLX_ASSERT_FAILURE("C:/projects/felix/src/packages/arrays.fdoc",46,5,46,26);}
      _vI106141_out = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106141_out, _vI106147_v_pa_hash_741625322[(static_cast<_a5038t_107106>((static_cast<_a5038t_107106>(1)/*int.flx: ctor size from _a5038t_107106*/))/*int.flx: ctor size from _a5038t_107106*/)]))); //assign simple
      goto continue__ll_flx_2228_L106149;
    _ml65443_L106151:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2092,9,2092,13);
;
      goto continue__ll_flx_2228_L106149;
    _ml65439_L106153:;
/*match case 2:|None*/
      if(!(FLX_VNI(_vI106118_find_cxx_pkgs_mv_65437)==0) ) goto _ml65446_L106154;
      goto _em65437_L106155;
    _ml65446_L106154:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2093,7,2093,11);
;
    _em65437_L106155:;
      (void)fclose(_vI106143_f);
      goto _ifdoelse_bootflx_65269_L106157;
    _ifdoend_bootflx_65268_L106156:;
      {
      _a13708t_107090 _tmp108823 = (::std::string("Can't find C++ source file ") + _vI106148_src ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108823)));
      }
      fflush(stderr);
      ::std::exit(1);
    _ifdoelse_bootflx_65269_L106157:;
      _vI106141_out = _fI106513_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115(_vI106141_out, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI106141_out, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65277_L106159;
      {
      _a13708t_107090 _tmp108824 = (((::std::string("[flx] C++ file ") + _vI106148_src ) + ::std::string(" requires packages ") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106141_out) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108824)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65277_L106159:;
      return _vI106141_out;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2103,3,2103,4); // HACK! 
}

//------------------------------
//FUNCTION <85494>: func1::_lam_522: Apply method
_art107183 _lam_522::apply(_art107173 const &_arg ){
  a0 = _arg;
      return ptr_fI85487_func1->_vI85492_s(ptr_fI85487_func1->_vI85493_tf, a0);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",1118,12,1118,36); // HACK! 
}

//------------------------------
//FUNCTION <96099>: search_and_replace_uncurry::iterator'2: Apply method
void* _fI96099_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L96100:;
      _vI96104_iterator__apos_2_mv_1504  = ptrsearch_and_replace_uncurry->_vI96098_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI96104_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI96107__lam_1507)(FLX_FPAR_PASS this, ptrsearch_and_replace_uncurry))) ) goto _ml1506_L96103;
      _vI96105_h_param_std_1260 = (*((_tt107274*)FLX_VNP(_vI96104_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI96106_t_param_std_1259 = (*((_tt107274*)FLX_VNP(_vI96104_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptrsearch_and_replace_uncurry->_vI96098_xs = _vI96106_t_param_std_1259; //assign simple
      FLX_SET_PC(108825)
      return FLX_VNR(1, new(*PTF gcp, _at107092_ptr_map, true) _at107092 (_vI96105_h_param_std_1260));//yield
    FLX_CASE_LABEL(108825)
      goto continue__ll_lists_5177_L96100;
    _ml1506_L96103:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI96104_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L96102;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L96102:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L96100;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <106277>: flx_processing::cxx_link_shared_exe: Apply method
int _fI106277_cxx_link_shared_exe::apply(_pt107161* const &_arg ){
  _vI106291_ehandler = _arg;
      {
      __timeb64* _tmp108827 = (__timeb64*)&_vI106812_tv;
      _ftime64_s(((_tmp108827)));
      }
      _vI106811__genout_urv99344  = (static_cast<double>((_vI106812_tv.time))) + ((static_cast<double>((_vI106812_tv.millitm))) / 1.0e3 ) ; //init
      _vI106278_t0 = _vI106811__genout_urv99344; //assign simple
      _vI106279_pkg_dstrings = (void* /*VR_nullptr*/ )0; //assign simple
      _vI106280_pkgs = ptrflx_processing->_vI106422_control.extra_pkgs; //assign simple
      if(!(!list_eq(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI106280_pkgs, (void* /*VR_nullptr*/ )0)) /* apply_stack */ ) ) goto _ifdoelse_bootflx_65354_L106295;
      {
      _a13708t_107090 _tmp108828 = (::std::string("[flx:cxx_link_shared_exe] Adding packages ") + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106280_pkgs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108828)));
      }
      fflush(stderr);
      _vI106813_r = _fI106814_aux_uncurry(FLX_FPAR_PASS this, ptrflx_processing)
      .apply(_at107115((*ptrflx_processing->_vI68366_config ).FLX_CONFIG_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108829 = (void**)&_vI106813_r;
      _rev(((_tmp108829)),(_a13708t_107090*)0);
      }
      _vI106283_PKGCONFIG_PATH = _vI106813_r; //assign simple
      _vI106284_allargs = join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_vI106283_PKGCONFIG_PATH, ::std::string("-r"))) /* apply_stack */, ::std::string("--field=provides_dlib"))) /* apply_stack */, ::std::string("--field=requires_dlibs"))) /* apply_stack */, ::std::string("--keepleftmost"))) /* apply_stack */, _vI106280_pkgs)) /* apply_stack */, ptrflx_processing->_vI106422_control.pkgs)) /* apply_stack */; //assign simple
      _vI106824__genout_urv99385  = flx_pkgconfig(FLX_FPAR_PASS_ONLY)
      .apply(_vI106284_allargs) /* apply_stack */; //init
      _vI106285__ds2_65519 = _vI106824__genout_urv99385; //assign simple
      _vI106286_ret = _vI106285__ds2_65519.mem_0; //assign simple
      _vI106287_mydstrings = _vI106285__ds2_65519.mem_1; //assign simple
      if(!(!((_vI106286_ret == 0)) ) ) goto _ifdoelse_bootflx_65356_L106293;
      {
      _a13708t_107090 _tmp108830 = (((::std::string("[flx:cxx_link_shared_exe] Error ") + ::flx::rtl::strutil::str<int>(_vI106286_ret) ) + ::std::string(" executing flx_pkgconfig, args=") ) + str(FLX_FPAR_PASS_ONLY)
      .apply(_vI106284_allargs) /* apply_stack */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108830)));
      }
      fflush(stderr);
      {
      _a6203t_107291 _tmp108831 = (_a6203t_107291)(_vI106291_ehandler);
      throw ((_tmp108831));
      }
    _ifdoelse_bootflx_65356_L106293:;
      _vI106279_pkg_dstrings = _vI106287_mydstrings; //assign simple
    _ifdoelse_bootflx_65354_L106295:;
      _vI106826_cxx_link_shared_exe_mv_65521  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106826_cxx_link_shared_exe_mv_65521%2==1) ) goto _ml65523_L106827;
      _vI106825__urv99396  = (FLX_NEWP(_pI106424_echoln)(FLX_FPAR_PASS ptrflx_processing)); //init
      goto _end_hash_719317391;
    _ml65523_L106827:;
/*match case 2:any*/
      _vI106825__urv99396  = (FLX_NEWP(_pI106423_debugln)(FLX_FPAR_PASS ptrflx_processing)); //init
    _end_hash_719317391:;
      _vI106830_cxx_link_shared_exe_mv_65521  = (ptrflx_processing->_vI106422_control.ECHO == 1); //init
/*begin match*/
/*match case 1:|case 1*/
      if(!(_vI106830_cxx_link_shared_exe_mv_65521%2==1) ) goto _ml65523_L106831;
      goto _end_hash_593992130;
    _ml65523_L106831:;
/*match case 2:any*/
    _end_hash_593992130:;
      _vI106288_tc = (ptrflx_processing->_vI68330_toolchain)->clone()
      ->apply(_art107173(ptrflx_processing->_vI106123_dflt_clang_config.ccflags, _vI106825__urv99396, join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.LINK_STRINGS, _vI106279_pkg_dstrings)) /* apply_stack */, ptrflx_processing->_vI106123_dflt_clang_config.header_search_dirs, ptrflx_processing->_vI106123_dflt_clang_config.library_search_dirs, ptrflx_processing->_vI106123_dflt_clang_config.macros, ptrflx_processing->_vI106123_dflt_clang_config.static_libraries)) /* general apply */; //assign simple
      {
      _a13708t_107090 _tmp108832 = (::std::string("Toolchain loaded ") + (_vI106288_tc.whatami)->clone()
      ->apply() /* general apply */ ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108832)));
      }
      fflush(stdout);
      _vI106289_EXT_DYNAMIC_OBJ = (_vI106288_tc.dynamic_object_extension)->clone()
      ->apply() /* general apply */; //assign simple
      if(!((ptrflx_processing->_vI106422_control.CXXONLY == 0)) ) goto _ifdoend_bootflx_65357_L106296;
      _vI106290_result = (_vI106288_tc.dynamic_executable_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME, _fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrflx_processing->_vI106422_control.DRIVER_OBJS, ptrflx_processing->_vI106422_control.cppos)) /* apply_stack */, (ptrflx_processing->dvars.cpp_filebase + ::std::string("_static_link_thunk") ) + _vI106289_EXT_DYNAMIC_OBJ )) /* apply_stack */, ptrflx_processing->dvars.cpp_filebase + _vI106289_EXT_DYNAMIC_OBJ )) /* apply_stack */)) /* general apply */; //assign simple
      goto _ifdoelse_bootflx_65358_L106297;
    _ifdoend_bootflx_65357_L106296:;
      _vI106290_result = (_vI106288_tc.dynamic_executable_linker)->clone()
      ->apply(_art107181(ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME, ptrflx_processing->_vI106422_control.cppos)) /* general apply */; //assign simple
    _ifdoelse_bootflx_65358_L106297:;
      if(!((ptrflx_processing->_vI106422_control.TIME == 1)) ) goto _end_99435_L106840;
      {
      __timeb64* _tmp108833 = (__timeb64*)&_vI106839_tv;
      _ftime64_s(((_tmp108833)));
      }
      _vI106838__genout_urv95543  = (static_cast<double>((_vI106839_tv.time))) + ((static_cast<double>((_vI106839_tv.millitm))) / 1.0e3 ) ; //init
      _vI106833_elapsed = _vI106838__genout_urv95543 - _vI106278_t0 ; //assign simple
      _vI106834_minutes = ::std::floor((_vI106833_elapsed / 60.0 )); //assign simple
      _vI106835_seconds = _vI106833_elapsed - (_vI106834_minutes * 60.0 ) ; //assign simple
      {
      _a13708t_107090 _tmp108834 = (((((::std::string("[flx] Time : ") + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106834_minutes, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(2, 0))))) /* apply_stack */ ) + ::std::string("m") ) + fmt(FLX_FPAR_PASS_ONLY)
      .apply(_tt107311(_vI106835_seconds, FLX_VR(1, new(*PTF gcp, _at107104_ptr_map, true) _at107104 (_at107104(4, 1))))) /* apply_stack */ ) + ::std::string("s for ") ) + (::std::string("Dynamic executable link  : ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stdout,((_tmp108834)));
      }
      fflush(stdout);
    _end_99435_L106840:;
      if(!(!((_vI106290_result == 0)) ) ) goto _ifdoelse_bootflx_65360_L106299;
      {
      _a13708t_107090 _tmp108835 = ((::std::string("[flx] C++ dynamic executable link ") + ptrflx_processing->_vI106422_control.LINKER_OUTPUT_FILENAME ) + ::std::string(" failed") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108835)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_65360_L106299:;
      return _vI106290_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2604,3,2604,4); // HACK! 
}

//------------------------------
//FUNCTION <97414>: map_package_requirements_uncurry::_lam_64522::_lam_64522'2::aux::_lam_2230: Apply method
 ::flx::rtl::cl_t _fI97414__lam_2230::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/strings.fdoc",478,9,478,14); // HACK! 
}

//------------------------------
//C FUNC <14370>: strip
_a13708t_107090 strip(_a13708t_107090 _vI14372_x){
      return lstrip(rstrip(_vI14372_x, ::std::string(" \x09\n\x0D\x0C\x0B")), ::std::string(" \x09\n\x0D\x0C\x0B"));
}
//------------------------------
//FUNCTION <65946>: toolchain_gcc_linux::pathname_separator: Apply method
_a13708t_107090 _fI65946_pathname_separator::apply(){
      return ::std::string("/");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",742,3,742,42); // HACK! 
}

//------------------------------
//FUNCTION <89262>: toolchain_clang_apple_iOS_maker_uncurry::dynamic_library_linker: Apply method
int _fI89262_dynamic_library_linker::apply(_art107181 const &_arg ){
  _vI89264_spec = _arg;
      _vI89263_result = generic_link_lib_dynamic_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107231(_art107230(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89209_ccflags_for_dynamic_link, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89203_linker, ::std::string(".dylib"), join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.library_search_dirs, ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.dynamic_libraries)) /* apply_stack */, ::std::string("-o "), ptrtoolchain_clang_apple_iOS_maker_uncurry->_vI89265_config.debugln), _vI89264_spec.srcs, _vI89264_spec.dst)) /* apply_stack */; //assign simple
      return _vI89263_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",2191,3,2191,4); // HACK! 
}

//------------------------------
//FUNCTION <66068>: toolchain_gcc_osx::cxx_static_object_compiler: Apply method
int _fI66068_cxx_static_object_compiler::apply(_art107177 const &_arg ){
  _vI66071_spec = _arg;
      _vI66070_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_gcc_osx->_vI66016_base_cxx_compile_flags, ptrtoolchain_gcc_osx->_vI66012_cxx_compiler, ptrtoolchain_gcc_osx->_vI66096_config.header_search_dirs, ptrtoolchain_gcc_osx->_vI66096_config.macros, ::std::string("-o "), ptrtoolchain_gcc_osx->_vI66096_config.debugln), _vI66071_spec.src, _vI66071_spec.dst)) /* apply_stack */; //assign simple
      return _vI66070_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1070,3,1070,4); // HACK! 
}

//------------------------------
//FUNCTION <65706>: toolchain_msvc_win32::target_os: Apply method
_a13708t_107090 target_os::apply(){
      return ::std::string("Win32");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1732,3,1732,37); // HACK! 
}

//------------------------------
//FUNCTION <96188>: flx_pkgconfig::handle_pkg::_lam_64696::_lam_64707::_lam_1398: Apply method
 ::flx::rtl::cl_t _fI96188__lam_1398::apply(_a13708t_107090 const &_arg ){
  _vI96189_x = _arg;
      return eq(_vI96189_x, ptr_lam_64707->_vI68084_key);
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",513,10,513,30); // HACK! 
}

//------------------------------
//FUNCTION <65989>: toolchain_gcc_linux::static_library_linker: Apply method
int _fI65989_static_library_linker::apply(_art107181 const &_arg ){
  _vI65992_spec = _arg;
      _vI65991_result = generic_static_library_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107227(_art107226(FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095((void* /*VR_nullptr*/ )0, ::std::string("-rcs")))), ::std::string("ar"), ::std::string(""), ptrtoolchain_gcc_linux->_vI66005_config.debugln), _vI65992_spec.srcs, _vI65992_spec.dst)) /* apply_stack */; //assign simple
      return _vI65991_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",886,3,886,4); // HACK! 
}

//------------------------------
//FUNCTION <95808>: flx_pkgconfig::add_val::aux_uncurry::_lam_1332: Apply method
 ::flx::rtl::cl_t _fI95808__lam_1332::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,11,321,19); // HACK! 
}

//------------------------------
//FUNCTION <89218>: toolchain_clang_apple_iOS_maker_uncurry::static_object_extension: Apply method
_a13708t_107090 _fI89218_static_object_extension::apply(){
      return ::std::string("_static.o");
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1994,3,1994,55); // HACK! 
}

//------------------------------
//FUNCTION <102603>: +::aux_uncurry: Apply method
void* _fI102603_aux_uncurry::apply(_at107285 const &_arg ){
  _vI102604_x_uncurry = _arg.data[0];
  _vI102605_y = _arg.data[1];
    start_102515_L102612:;
      _vI102608_aux__apos_2_mv_1328  = _vI102604_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102608_aux__apos_2_mv_1328)==0) ) goto _ml1330_L102607;
      return _vI102605_y;
    _ml1330_L102607:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI102608_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI102611__lam_1332)(FLX_FPAR_PASS this, ptr_fI88545___plus_))) ) goto _ml1331_L102606;
      _vI102609_h_param_std_1210 = (*((_tt107274*)FLX_VNP(_vI102608_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI102610_t_param_std_1209 = (*((_tt107274*)FLX_VNP(_vI102608_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI102605_y  = FLX_VNR(1, new(*PTF gcp, _tt107274_ptr_map, true) _tt107274 (_tt107274(_vI102605_y, _vI102609_h_param_std_1210))); //init
      _vI102604_x_uncurry  = _vI102610_t_param_std_1209; //init
      goto start_102515_L102612;
    _ml1331_L102606:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//C FUNC <82863>: _ctor_varray
_poly_82862t_107478 _ctor_varray(FLX_APAR_DECL  _a5038t_107106 bound, _a14737t_107477 _vI83024__default){
  _a5038t_107106 _vI83129_i;
  _poly_82862t_107478 _vI83127_o;
      _vI83127_o = (_a14737t_107477*)(PTF gcp->collector->create_empty_array(&_a14737t_107477_ptr_map,bound)); //assign simple
      if(!(!(((PTF gcp->collector->get_count(_vI83127_o)) == bound)) ) ) goto _ifdoelse_std_1628_L83124;
      {
      _a13708t_107090 _tmp108837 = ::std::string("Constructor failed, wrong bound") + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108837)));
      }
      fflush(stderr);
      {
      _a13708t_107090 _tmp108838 = (((::std::string("input Bound = ") + ::flx::rtl::strutil::str<_a5038t_107106>(bound) ) + ::std::string(", actual maxlen = ") ) + ::flx::rtl::strutil::str<_a5038t_107106>((PTF gcp->collector->get_count(_vI83127_o))) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108838)));
      }
      fflush(stderr);
    _ifdoelse_std_1628_L83124:;
      if(!((0 < bound)) ) goto _ifdoelse_std_1630_L83117;
      _vI83129_i = 0; //assign simple
    redo__ll_arrays_5796_L83120:;
      if(FLX_UNLIKELY(!(!((bound - 1  < _vI83129_i)) ) )) goto _ifdoelse_std_1630_L83117;
      if(!(!(((PTF gcp->collector->get_used(_vI83127_o)) < (PTF gcp->collector->get_count(_vI83127_o)))) ) ) goto _ifdoelse_std_1632_L83122;
      {
      _a13708t_107090 _tmp108839 = (::std::string("ctor1: attempt to push_back on full varray size ") + ::flx::rtl::strutil::str<_a5038t_107106>((PTF gcp->collector->get_count(_vI83127_o))) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108839)));
      }
      fflush(stderr);
      {
      _a13708t_107090 _tmp108840 = (::std::string("bound = ") + ::flx::rtl::strutil::str<_a5038t_107106>(bound) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108840)));
      }
      fflush(stderr);
      {
      _a13708t_107090 _tmp108841 = (::std::string("index = ") + ::flx::rtl::strutil::str<_a5038t_107106>(_vI83129_i) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108841)));
      }
      fflush(stderr);
    _ifdoelse_std_1632_L83122:;
      if(!(!(((PTF gcp->collector->get_used(_vI83127_o)) < (PTF gcp->collector->get_count(_vI83127_o)))) ) ) goto _ifdoelse_std_1642_L91227;
      {
      _a13708t_107090 _tmp108842 = (::std::string("attempt to push_back on full varray size ") + ::flx::rtl::strutil::str<_a5038t_107106>((PTF gcp->collector->get_count(_vI83127_o))) ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108842)));
      }
      fflush(stderr);
    _ifdoelse_std_1642_L91227:;
      
    {
      //_a14737t_107477 * _p = *_vI83127_o;
      size_t n = PTF gcp->collector->get_used(_vI83127_o);
      PTF gcp->collector->incr_used(_vI83127_o,1L);
      new(_vI83127_o+n) _a14737t_107477(_vI83024__default);
    }
  
      {
      _a5038t_107106* _tmp108843 = (_a5038t_107106*)&_vI83129_i;
      ++*((_tmp108843));
      }
      goto redo__ll_arrays_5796_L83120;
    _ifdoelse_std_1630_L83117:;
      return _vI83127_o;
}
//------------------------------
//FUNCTION <92735>: toolchain_msvc_win32::aux_uncurry::_lam_1326: Apply method
 ::flx::rtl::cl_t _fI92735__lam_1326::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,9,292,17); // HACK! 
}

//------------------------------
//FUNCTION <102084>: flx_processing::aux_uncurry: Apply method
_a5038t_107106 _fI102084_aux_uncurry::apply(_tt107146 const &_arg ){
  acc_uncurry = _arg.mem_0;
  _vI102086_x = _arg.mem_1;
    start_94672_L102092:;
      _vI102089_aux__apos_2_mv_1276  = _vI102086_x; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI102089_aux__apos_2_mv_1276)==0) ) goto _ml1278_L102088;
      return acc_uncurry;
    _ml1278_L102088:;
/*match case 2:|Snoc (t_param_std_1193, any)*/
      if(!andthen(FLX_VNI(_vI102089_aux__apos_2_mv_1276)==1, (FLX_NEWP(_lam_1280)(FLX_FPAR_PASS this, ptrflx_processing))) ) goto _ml1279_L102087;
      t_param_std_1193 = (*((_tt107095*)FLX_VNP(_vI102089_aux__apos_2_mv_1276))).mem_0; //assign simple
/*parallel assignment*/
      _vI102086_x  = t_param_std_1193; //init
      acc_uncurry  = acc_uncurry + 1 ; //init
      goto start_94672_L102092;
    _ml1279_L102087:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",202,9,202,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",204,7,204,8); // HACK! 
}

//------------------------------
//FUNCTION <105366>: flx_processing::run_linker_if_required: Apply method
int run_linker_if_required::apply(_pt107161* const &_arg ){
  _vI105369_ehandler = _arg;
      _vI105367_result = 0; //assign simple
      if(!((ptrflx_processing->_vI105441_control.CCOMPILEIT == 0)) ) goto _ifdoend_bootflx_65377_L105370;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65378_L105379;
      {
      _a13708t_107090 _tmp108845 = (::std::string("[flx] ") + ::std::string("C++ compilation (and linking and running) skipped by switch") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108845)));
      }
      goto _ifdoelse_bootflx_65378_L105379;
      goto _ifdoelse_bootflx_65378_L105379;
    _ifdoend_bootflx_65377_L105370:;
      _genout_urv99755  = check_binary_uptodate(FLX_FPAR_PASS ptrflx_processing)
      .apply() /* apply_stack */; //init
      _vI105368_uptodate = _genout_urv99755; //assign simple
      if(!_vI105368_uptodate ) goto _ifdoend_bootflx_65379_L105371;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _ifdoelse_bootflx_65378_L105379;
      {
      _a13708t_107090 _tmp108846 = (::std::string("[flx] ") + ::std::string("Linking skipped because binary is uptodate") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108846)));
      }
      goto _ifdoelse_bootflx_65378_L105379;
      goto _ifdoelse_bootflx_65378_L105379;
    _ifdoend_bootflx_65379_L105371:;
      if(!((ptrflx_processing->_vI105441_control.STATIC == 0)) ) goto _ifdoend_bootflx_65381_L105374;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99763_L106000;
      {
      _a13708t_107090 _tmp108847 = (::std::string("[flx] ") + ::std::string("Dynamic linkage") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108847)));
      }
    _end_99763_L106000:;
      if(!((ptrflx_processing->_vI105441_control.LINKEXE == 1)) ) goto _ifdoend_bootflx_65383_L105372;
      {
      calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI105369_ehandler);
      }
      _genout_urv99764  = cxx_link_shared_exe(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105369_ehandler) /* apply_stack */; //init
      _vI105367_result = _genout_urv99764; //assign simple
      goto _ifdoelse_bootflx_65378_L105379;
    _ifdoend_bootflx_65383_L105372:;
      {
      calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI105369_ehandler);
      }
      _genout_urv99768  = cxx_link_shared_library(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105369_ehandler) /* apply_stack */; //init
      _vI105367_result = _genout_urv99768; //assign simple
      goto _ifdoelse_bootflx_65378_L105379;
    _ifdoend_bootflx_65381_L105374:;
      if(!ptrflx_processing->_vI105441_control.DEBUG_FLX ) goto _end_99775_L106005;
      {
      _a13708t_107090 _tmp108850 = (::std::string("[flx] ") + ::std::string("Static linkage") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108850)));
      }
    _end_99775_L106005:;
      if(!((ptrflx_processing->_vI105441_control.STATICLIB == 1)) ) goto _ifdoend_bootflx_65385_L105375;
      _genout_urv99776  = cxx_static_library(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105369_ehandler) /* apply_stack */; //init
      _vI105367_result = _genout_urv99776; //assign simple
      goto _ifdoelse_bootflx_65378_L105379;
    _ifdoend_bootflx_65385_L105375:;
      {
      calpackages(FLX_FPAR_PASS ptrflx_processing)
      .stack_call(_vI105369_ehandler);
      }
      _genout_urv99777  = cxx_link_static_exe(FLX_FPAR_PASS ptrflx_processing)
      .apply(_vI105369_ehandler) /* apply_stack */; //init
      _vI105367_result = _genout_urv99777; //assign simple
    _ifdoelse_bootflx_65378_L105379:;
      return _vI105367_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx.fdoc",2792,3,2792,4); // HACK! 
}

//------------------------------
//FUNCTION <66374>: toolchain_clang_osx::cxx_static_library_object_compiler: Apply method
int _fI66374_cxx_static_library_object_compiler::apply(_art107177 const &_arg ){
  _vI66377_spec = _arg;
      _vI66376_result = generic_cxx_compile_for_static_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107223(_art107222(ptrtoolchain_clang_osx->_vI66318_base_cxx_compile_flags, ptrtoolchain_clang_osx->_vI66314_cxx_compiler, ptrtoolchain_clang_osx->_vI66398_config.header_search_dirs, FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(ptrtoolchain_clang_osx->_vI66398_config.macros, ::std::string("FLX_STATIC_LINK")))), ::std::string("-o "), ptrtoolchain_clang_osx->_vI66398_config.debugln), _vI66377_spec.src, _vI66377_spec.dst)) /* apply_stack */; //assign simple
      return _vI66376_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1576,3,1576,4); // HACK! 
}

//------------------------------
//FUNCTION <96181>: flx_pkgconfig::get_field::_lam_64676: Apply method
 ::flx::rtl::cl_t _lam_64676::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/flx_pkgconfig.fdoc",255,11,255,16); // HACK! 
}

//------------------------------
//FUNCTION <88947>: generic_cxx_compile_for_dynamic_uncurry: Apply method
int generic_cxx_compile_for_dynamic_uncurry::apply(_tt107225 const &_arg ){
  _vI89651_spec_uncurry = _arg.mem_0;
  _vI89647_src = _arg.mem_1;
  _vI89648_dst = _arg.mem_2;
      _vI93166_r = _fI93167_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89651_spec_uncurry.INCLUDE_DIRS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108852 = (void**)&_vI93166_r;
      _rev(((_tmp108852)),(_a13708t_107090*)0);
      }
      _vI93187_r = _fI93188_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89651_spec_uncurry.MACROS, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108853 = (void**)&_vI93187_r;
      _rev(((_tmp108853)),(_a13708t_107090*)0);
      }
      _vI89644_cmd = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_fI80206___plus_(FLX_FPAR_PASS_ONLY)
      .apply(_tt107095(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(join_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_at107115(_vI89651_spec_uncurry.CCFLAGS, _vI93166_r)) /* apply_stack */, _vI93187_r)) /* apply_stack */, _vI89647_src)) /* apply_stack */, _vI89651_spec_uncurry.CCOBJ_DLLIB))); //assign simple
      _vI93210_r = _fI93211_aux_uncurry(FLX_FPAR_PASS this)
      .apply(_at107115(_vI89644_cmd, (void* /*VR_nullptr*/ )0)) /* apply_stack */; //assign simple
      {
      void** _tmp108854 = (void**)&_vI93210_r;
      _rev(((_tmp108854)),(_a13708t_107090*)0);
      }
      _vI89645_CMD = (cat_uncurry(FLX_FPAR_PASS_ONLY)
      .apply(_tt107116(::std::string(" "), _vI93210_r)) /* apply_stack */ + ::std::string(" ") ) + (_vI89651_spec_uncurry.SPEC_OBJ_FILENAME + ((::std::string("\"") + _vI89648_dst ) + ::std::string("\"") ) ) ; //assign simple
      {
        ::flx::rtl::con_t *_p = (_vI89651_spec_uncurry.debugln)->clone()
      ->call(0, ::std::string("C++ compile: ") + _vI89645_CMD );
        while(_p) {
          if(_p->p_svc) {
            int svc = _p->p_svc->variant;
            fprintf(stderr,"Function calls procedure which does service call %d: %s\n",
                svc,::flx::rtl::describe_service_call(svc));
            abort();
          }
          _p=_p->resume();
        }
      }
      if(!(!((::flx::rtl::strutil::atostr(std::getenv((::std::string("FLX_SHELL_ECHO")).c_str())) == ::std::string(""))) ) ) goto _ifdoelse_std_444_L93230;
      {
      _a13708t_107090 _tmp108855 = (::std::string("[system] ") + _vI89645_CMD ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108855)));
      }
      fflush(stderr);
    _ifdoelse_std_444_L93230:;
      _genout_urv93237  = ::std::system(((::std::string("\"") + _vI89645_CMD ) + ::std::string("\"") ).c_str()); //init
      _vI93234__genout_urv93142  = _genout_urv93237; //init
      _vI93233__genout_urv93134  = _vI93234__genout_urv93142; //init
      _vI93232__genout_urv93129  = _vI93233__genout_urv93134; //init
      _genout_urv93228  = _vI93232__genout_urv93129; //init
      _vI89646_result = _genout_urv93228; //assign simple
      if(!(!((_vI89646_result == 0)) ) ) goto _ifdoelse_bootflx_64813_L89650;
      {
      _a13708t_107090 _tmp108856 = ((::std::string("C++ command=") + _vI89645_CMD ) + ::std::string(" FAILED") ) + ::std::string("\n") ;
      ::flx::rtl::ioutil::write(stderr,((_tmp108856)));
      }
      fflush(stderr);
    _ifdoelse_bootflx_64813_L89650:;
      return _vI89646_result;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",186,3,186,4); // HACK! 
}

//------------------------------
//FUNCTION <106020>: flx_processing::run_program_dynamic::aux_uncurry: Apply method
void* _fI106020_aux_uncurry::apply(_at107115 const &_arg ){
  _vI106021_inp_uncurry = _arg.data[0];
  _vI106022_out = _arg.data[1];
    start_90421_L106029:;
      _vI106025_aux__apos_2_mv_1322  = _vI106021_inp_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI106025_aux__apos_2_mv_1322)==0) ) goto _ml1324_L106024;
      return _vI106022_out;
    _ml1324_L106024:;
/*match case 2:|Snoc (t_param_std_1207, h_param_std_1208)*/
      if(!andthen(FLX_VNI(_vI106025_aux__apos_2_mv_1322)==1, (FLX_NEWP(_fI106028__lam_1326)(FLX_FPAR_PASS this, ptrrun_program_dynamic, ptrflx_processing))) ) goto _ml1325_L106023;
      _vI106026_h_param_std_1208 = (*((_tt107095*)FLX_VNP(_vI106025_aux__apos_2_mv_1322))).mem_1; //assign simple
      _vI106027_t_param_std_1207 = (*((_tt107095*)FLX_VNP(_vI106025_aux__apos_2_mv_1322))).mem_0; //assign simple
/*parallel assignment*/
      _vI106022_out  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI106022_out, quote_arg(FLX_FPAR_PASS_ONLY)
      .apply(_vI106026_h_param_std_1208) /* apply_stack */))); //init
      _vI106021_inp_uncurry  = _vI106027_t_param_std_1207; //init
      goto start_90421_L106029;
    _ml1325_L106023:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",292,7,292,45);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",294,5,294,6); // HACK! 
}

//------------------------------
//FUNCTION <103094>: setup-from-file_uncurry::iterator'2: Apply method
void* _fI103094_iterator__apos_2::apply(){
  FLX_START_SWITCH
    continue__ll_lists_5177_L103095:;
      _vI103099_iterator__apos_2_mv_1504  = ptr_pI88880_setup__hyphen_from__hyphen_file_uncurry->_vI103093_xs; //init
/*begin match*/
/*match case 1:|Snoc (t_param_std_1259, h_param_std_1260)*/
      if(!andthen(FLX_VNI(_vI103099_iterator__apos_2_mv_1504)==1, (FLX_NEWP(_fI103102__lam_1507)(FLX_FPAR_PASS this, ptr_pI88880_setup__hyphen_from__hyphen_file_uncurry))) ) goto _ml1506_L103098;
      _vI103100_h_param_std_1260 = (*((_tt107095*)FLX_VNP(_vI103099_iterator__apos_2_mv_1504))).mem_1; //assign simple
      _vI103101_t_param_std_1259 = (*((_tt107095*)FLX_VNP(_vI103099_iterator__apos_2_mv_1504))).mem_0; //assign simple
      ptr_pI88880_setup__hyphen_from__hyphen_file_uncurry->_vI103093_xs = _vI103101_t_param_std_1259; //assign simple
      FLX_SET_PC(108858)
      return FLX_VNR(1, new(*PTF gcp, _a13708t_107090_ptr_map, true) _a13708t_107090 (_vI103100_h_param_std_1260));//yield
    FLX_CASE_LABEL(108858)
      goto continue__ll_lists_5177_L103095;
    _ml1506_L103098:;
/*match case 2:|Empty*/
      if(!(FLX_VNI(_vI103099_iterator__apos_2_mv_1504)==0) ) goto _ml1508_L103097;
      return (void* /*VR_nullptr*/ )0;
    _ml1508_L103097:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",680,9,680,18);
;
      goto continue__ll_lists_5177_L103095;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",682,5,682,6); // HACK! 
  FLX_END_SWITCH
}

//------------------------------
//FUNCTION <65726>: toolchain_msvc_win32::get_base_c_compile_flags: Apply method
void* get_base_c_compile_flags::apply(){
      return ptrtoolchain_msvc_win32->base_c_compile_flags;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/toolchain.fdoc",1743,3,1743,65); // HACK! 
}

//------------------------------
//FUNCTION <96501>: flx_pkgconfig::handle_pkg::_lam_64696::aux_uncurry: Apply method
void* _fI96501_aux_uncurry::apply(_at107115 const &_arg ){
  _vI96502_x_uncurry = _arg.data[0];
  _vI96503_y = _arg.data[1];
    start_91065_L96510:;
      _vI96506_aux__apos_2_mv_1328  = _vI96502_x_uncurry; //init
/*begin match*/
/*match case 1:|Empty*/
      if(!(FLX_VNI(_vI96506_aux__apos_2_mv_1328)==0) ) goto _ml1330_L96505;
      return _vI96503_y;
    _ml1330_L96505:;
/*match case 2:|Snoc (t_param_std_1209, h_param_std_1210)*/
      if(!andthen(FLX_VNI(_vI96506_aux__apos_2_mv_1328)==1, (FLX_NEWP(_fI96509__lam_1332)(FLX_FPAR_PASS this, ptr_lam_64696, ptrhandle_pkg, ptrflx_pkgconfig))) ) goto _ml1331_L96504;
      _vI96507_h_param_std_1210 = (*((_tt107095*)FLX_VNP(_vI96506_aux__apos_2_mv_1328))).mem_1; //assign simple
      _vI96508_t_param_std_1209 = (*((_tt107095*)FLX_VNP(_vI96506_aux__apos_2_mv_1328))).mem_0; //assign simple
/*parallel assignment*/
      _vI96503_y  = FLX_VNR(1, new(*PTF gcp, _tt107095_ptr_map, true) _tt107095 (_tt107095(_vI96503_y, _vI96507_h_param_std_1210))); //init
      _vI96502_x_uncurry  = _vI96508_t_param_std_1209; //init
      goto start_91065_L96510;
    _ml1331_L96504:;
/*match failure*/
            FLX_MATCH_FAILURE("C:/projects/felix/src/packages/lists.fdoc",321,9,321,41);
;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/lists.fdoc",324,5,324,6); // HACK! 
}

//------------------------------
//FUNCTION <94300>: regopen_uncurry::_lam_497: Apply method
 ::flx::rtl::cl_t _lam_497::apply(){
      return 1;
    FLX_DROPTHRU_FAILURE("C:/projects/felix/src/packages/dynlink.fdoc",785,8,785,16); // HACK! 
}


//-----------------------------------------
}} // namespace flxusr::bootflx
//CREATE STANDARD EXTERNAL INTERFACE
FLX_FRAME_WRAPPERS(::flxusr::bootflx,bootflx)
FLX_STACK_START_WRAPPER_PTF(::flxusr::bootflx,bootflx,_init_)

//-----------------------------------------
//body complete
